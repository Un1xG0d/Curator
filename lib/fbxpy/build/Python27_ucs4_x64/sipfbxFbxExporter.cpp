/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.3
 *
 * Copyright (C) 2009 Autodesk, Inc. and/or its licensors.
 * All Rights Reserved.
 * 
 * The coded instructions, statements, computer programs, and/or related material 
 * (collectively the "Data") in these files contain unpublished information 
 * proprietary to Autodesk, Inc. and/or its licensors, which is protected by 
 * Canada and United States of America federal copyright law and by international 
 * treaties. 
 * 
 * The Data may not be disclosed or distributed to third parties, in whole or in
 * part, without the prior written consent of Autodesk, Inc. ("Autodesk").
 * 
 * THE DATA IS PROVIDED "AS IS" AND WITHOUT WARRANTY.
 * ALL WARRANTIES ARE EXPRESSLY EXCLUDED AND DISCLAIMED. AUTODESK MAKES NO
 * WARRANTY OF ANY KIND WITH RESPECT TO THE DATA, EXPRESS, IMPLIED OR ARISING
 * BY CUSTOM OR TRADE USAGE, AND DISCLAIMS ANY IMPLIED WARRANTIES OF TITLE, 
 * NON-INFRINGEMENT, MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE OR USE. 
 * WITHOUT LIMITING THE FOREGOING, AUTODESK DOES NOT WARRANT THAT THE OPERATION
 * OF THE DATA WILL BE UNINTERRUPTED OR ERROR FREE. 
 * 
 * IN NO EVENT SHALL AUTODESK, ITS AFFILIATES, PARENT COMPANIES, LICENSORS
 * OR SUPPLIERS ("AUTODESK GROUP") BE LIABLE FOR ANY LOSSES, DAMAGES OR EXPENSES
 * OF ANY KIND (INCLUDING WITHOUT LIMITATION PUNITIVE OR MULTIPLE DAMAGES OR OTHER
 * SPECIAL, DIRECT, INDIRECT, EXEMPLARY, INCIDENTAL, LOSS OF PROFITS, REVENUE
 * OR DATA, COST OF COVER OR CONSEQUENTIAL LOSSES OR DAMAGES OF ANY KIND),
 * HOWEVER CAUSED, AND REGARDLESS OF THE THEORY OF LIABILITY, WHETHER DERIVED
 * FROM CONTRACT, TORT (INCLUDING, BUT NOT LIMITED TO, NEGLIGENCE), OR OTHERWISE,
 * ARISING OUT OF OR RELATING TO THE DATA OR ITS USE OR ANY OTHER PERFORMANCE,
 * WHETHER OR NOT AUTODESK HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH LOSS
 * OR DAMAGE. 
 */

#include "sipAPIfbx.h"


#line 4 "/var/www/html/lib/fbxpy/sip/fbxstatus.sip"
#include <fbxsdk.h>
#line 44 "/var/www/html/lib/fbxpy/build/Python27_ucs4_x64/sipfbxFbxExporter.cpp"


PyDoc_STRVAR(doc_FbxExporter_Create, "Create(FbxManager, str) -> FbxExporter\n"
    "Create(FbxObject, str) -> FbxExporter");

extern "C" {static PyObject *meth_FbxExporter_Create(PyObject *, PyObject *);}
static PyObject *meth_FbxExporter_Create(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxManager* a0;
        const char* a1;
        PyObject *a1Keep;

        if (sipParseArgs(&sipParseErr, sipArgs, "J8A8", sipType_FbxManager, &a0, &a1Keep, &a1))
        {
             ::FbxExporter*sipRes;

            sipRes =  ::FbxExporter::Create(a0,a1);
            Py_DECREF(a1Keep);

            return sipConvertFromType(sipRes,sipType_FbxExporter,NULL);
        }
    }

    {
         ::FbxObject* a0;
        const char* a1;
        PyObject *a1Keep;

        if (sipParseArgs(&sipParseErr, sipArgs, "J8A8", sipType_FbxObject, &a0, &a1Keep, &a1))
        {
             ::FbxExporter*sipRes;

            sipRes =  ::FbxExporter::Create(a0,a1);
            Py_DECREF(a1Keep);

            return sipConvertFromType(sipRes,sipType_FbxExporter,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxExporter, sipName_Create, doc_FbxExporter_Create);

    return NULL;
}


PyDoc_STRVAR(doc_FbxExporter_GetClassId, "GetClassId(self) -> FbxClassId");

extern "C" {static PyObject *meth_FbxExporter_GetClassId(PyObject *, PyObject *);}
static PyObject *meth_FbxExporter_GetClassId(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::FbxExporter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxExporter, &sipCpp))
        {
             ::FbxClassId*sipRes;

            sipRes = new  ::FbxClassId((sipSelfWasArg ? sipCpp-> ::FbxExporter::GetClassId() : sipCpp->GetClassId()));

            return sipConvertFromNewType(sipRes,sipType_FbxClassId,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxExporter, sipName_GetClassId, doc_FbxExporter_GetClassId);

    return NULL;
}


PyDoc_STRVAR(doc_FbxExporter_Initialize, "Initialize(self, str, int = -1, FbxIOSettings = None) -> bool");

extern "C" {static PyObject *meth_FbxExporter_Initialize(PyObject *, PyObject *);}
static PyObject *meth_FbxExporter_Initialize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const char* a0;
        PyObject *a0Keep;
        int a1 = -1;
         ::FbxIOSettings* a2 = 0;
         ::FbxExporter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BA8|iJ8", &sipSelf, sipType_FbxExporter, &sipCpp, &a0Keep, &a0, &a1, sipType_FbxIOSettings, &a2))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::FbxExporter::Initialize(a0,a1,a2) : sipCpp->Initialize(a0,a1,a2));
            Py_DECREF(a0Keep);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxExporter, sipName_Initialize, doc_FbxExporter_Initialize);

    return NULL;
}


PyDoc_STRVAR(doc_FbxExporter_GetExportOptions, "GetExportOptions(self) -> bool");

extern "C" {static PyObject *meth_FbxExporter_GetExportOptions(PyObject *, PyObject *);}
static PyObject *meth_FbxExporter_GetExportOptions(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxExporter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxExporter, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->GetExportOptions();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxExporter, sipName_GetExportOptions, doc_FbxExporter_GetExportOptions);

    return NULL;
}


PyDoc_STRVAR(doc_FbxExporter_GetIOSettings, "GetIOSettings(self) -> FbxIOSettings");

extern "C" {static PyObject *meth_FbxExporter_GetIOSettings(PyObject *, PyObject *);}
static PyObject *meth_FbxExporter_GetIOSettings(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxExporter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxExporter, &sipCpp))
        {
             ::FbxIOSettings*sipRes;

            sipRes = sipCpp->GetIOSettings();

            return sipConvertFromType(sipRes,sipType_FbxIOSettings,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxExporter, sipName_GetIOSettings, doc_FbxExporter_GetIOSettings);

    return NULL;
}


PyDoc_STRVAR(doc_FbxExporter_SetIOSettings, "SetIOSettings(self, FbxIOSettings)");

extern "C" {static PyObject *meth_FbxExporter_SetIOSettings(PyObject *, PyObject *);}
static PyObject *meth_FbxExporter_SetIOSettings(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxIOSettings* a0;
         ::FbxExporter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_FbxExporter, &sipCpp, sipType_FbxIOSettings, &a0))
        {
            sipCpp->SetIOSettings(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxExporter, sipName_SetIOSettings, doc_FbxExporter_SetIOSettings);

    return NULL;
}


PyDoc_STRVAR(doc_FbxExporter_Export, "Export(self, FbxDocument, bool = False) -> bool");

extern "C" {static PyObject *meth_FbxExporter_Export(PyObject *, PyObject *);}
static PyObject *meth_FbxExporter_Export(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxDocument* a0;
        bool a1 = 0;
         ::FbxExporter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8|b", &sipSelf, sipType_FbxExporter, &sipCpp, sipType_FbxDocument, &a0, &a1))
        {
            bool sipRes;

            sipRes = sipCpp->Export(a0,a1);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxExporter, sipName_Export, doc_FbxExporter_Export);

    return NULL;
}


PyDoc_STRVAR(doc_FbxExporter_IsExporting, "IsExporting(self) -> Tuple[bool, bool]");

extern "C" {static PyObject *meth_FbxExporter_IsExporting(PyObject *, PyObject *);}
static PyObject *meth_FbxExporter_IsExporting(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
         ::FbxExporter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxExporter, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->IsExporting(a0);

            return sipBuildResult(0,"(bb)",sipRes,a0);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxExporter, sipName_IsExporting, doc_FbxExporter_IsExporting);

    return NULL;
}


PyDoc_STRVAR(doc_FbxExporter_GetProgress, "GetProgress(self, FbxString = None) -> float");

extern "C" {static PyObject *meth_FbxExporter_GetProgress(PyObject *, PyObject *);}
static PyObject *meth_FbxExporter_GetProgress(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxString* a0 = 0;
        int a0State = 0;
         ::FbxExporter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B|J0", &sipSelf, sipType_FbxExporter, &sipCpp, sipType_FbxString, &a0, &a0State))
        {
            float sipRes;

            sipRes = sipCpp->GetProgress(a0);
            sipReleaseType(a0,sipType_FbxString,a0State);

            return PyFloat_FromDouble((double)sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxExporter, sipName_GetProgress, doc_FbxExporter_GetProgress);

    return NULL;
}


PyDoc_STRVAR(doc_FbxExporter_GetFileFormat, "GetFileFormat(self) -> int");

extern "C" {static PyObject *meth_FbxExporter_GetFileFormat(PyObject *, PyObject *);}
static PyObject *meth_FbxExporter_GetFileFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxExporter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxExporter, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->GetFileFormat();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxExporter, sipName_GetFileFormat, doc_FbxExporter_GetFileFormat);

    return NULL;
}


PyDoc_STRVAR(doc_FbxExporter_IsFBX, "IsFBX(self) -> bool");

extern "C" {static PyObject *meth_FbxExporter_IsFBX(PyObject *, PyObject *);}
static PyObject *meth_FbxExporter_IsFBX(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxExporter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxExporter, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->IsFBX();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxExporter, sipName_IsFBX, doc_FbxExporter_IsFBX);

    return NULL;
}


PyDoc_STRVAR(doc_FbxExporter_SetFileExportVersion, "SetFileExportVersion(self, FbxString, FbxSceneRenamer.ERenamingMode) -> bool");

extern "C" {static PyObject *meth_FbxExporter_SetFileExportVersion(PyObject *, PyObject *);}
static PyObject *meth_FbxExporter_SetFileExportVersion(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxString* a0;
        int a0State = 0;
         ::FbxSceneRenamer::ERenamingMode a1;
         ::FbxExporter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1E", &sipSelf, sipType_FbxExporter, &sipCpp, sipType_FbxString, &a0, &a0State, sipType_FbxSceneRenamer_ERenamingMode, &a1))
        {
            bool sipRes;

            sipRes = sipCpp->SetFileExportVersion(*a0,a1);
            sipReleaseType(a0,sipType_FbxString,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxExporter, sipName_SetFileExportVersion, doc_FbxExporter_SetFileExportVersion);

    return NULL;
}


PyDoc_STRVAR(doc_FbxExporter_SetResamplingRate, "SetResamplingRate(self, float)");

extern "C" {static PyObject *meth_FbxExporter_SetResamplingRate(PyObject *, PyObject *);}
static PyObject *meth_FbxExporter_SetResamplingRate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        double a0;
         ::FbxExporter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_FbxExporter, &sipCpp, &a0))
        {
            sipCpp->SetResamplingRate(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxExporter, sipName_SetResamplingRate, doc_FbxExporter_SetResamplingRate);

    return NULL;
}


PyDoc_STRVAR(doc_FbxExporter_SetDefaultRenderResolution, "SetDefaultRenderResolution(self, FbxString, FbxString, float, float)");

extern "C" {static PyObject *meth_FbxExporter_SetDefaultRenderResolution(PyObject *, PyObject *);}
static PyObject *meth_FbxExporter_SetDefaultRenderResolution(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxString* a0;
        int a0State = 0;
         ::FbxString* a1;
        int a1State = 0;
        double a2;
        double a3;
         ::FbxExporter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J1dd", &sipSelf, sipType_FbxExporter, &sipCpp, sipType_FbxString, &a0, &a0State, sipType_FbxString, &a1, &a1State, &a2, &a3))
        {
            sipCpp->SetDefaultRenderResolution(*a0,*a1,a2,a3);
            sipReleaseType(a0,sipType_FbxString,a0State);
            sipReleaseType(a1,sipType_FbxString,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxExporter, sipName_SetDefaultRenderResolution, doc_FbxExporter_SetDefaultRenderResolution);

    return NULL;
}


PyDoc_STRVAR(doc_FbxExporter_GetFileHeaderInfo, "GetFileHeaderInfo(self) -> FbxIOFileHeaderInfo");

extern "C" {static PyObject *meth_FbxExporter_GetFileHeaderInfo(PyObject *, PyObject *);}
static PyObject *meth_FbxExporter_GetFileHeaderInfo(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxExporter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxExporter, &sipCpp))
        {
             ::FbxIOFileHeaderInfo*sipRes;

            sipRes = sipCpp->GetFileHeaderInfo();

            return sipConvertFromType(sipRes,sipType_FbxIOFileHeaderInfo,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxExporter, sipName_GetFileHeaderInfo, doc_FbxExporter_GetFileHeaderInfo);

    return NULL;
}


PyDoc_STRVAR(doc_FbxExporter_TCSetDefinition, "TCSetDefinition(self, int)");

extern "C" {static PyObject *meth_FbxExporter_TCSetDefinition(PyObject *, PyObject *);}
static PyObject *meth_FbxExporter_TCSetDefinition(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
         ::FbxExporter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_FbxExporter, &sipCpp, &a0))
        {
            sipCpp->TCSetDefinition(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxExporter, sipName_TCSetDefinition, doc_FbxExporter_TCSetDefinition);

    return NULL;
}


extern "C" {static PyObject *slot_FbxExporter___ne__(PyObject *,PyObject *);}
static PyObject *slot_FbxExporter___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::FbxExporter *sipCpp = reinterpret_cast< ::FbxExporter *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_FbxExporter));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const  ::FbxExporter* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_FbxExporter, &a0))
        {
            bool sipRes;

            sipRes = !sipCpp-> ::FbxExporter::operator==(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_fbx, ne_slot, sipType_FbxExporter, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_FbxExporter___eq__(PyObject *,PyObject *);}
static PyObject *slot_FbxExporter___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::FbxExporter *sipCpp = reinterpret_cast< ::FbxExporter *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_FbxExporter));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const  ::FbxExporter* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_FbxExporter, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::FbxExporter::operator==(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_fbx, eq_slot, sipType_FbxExporter, sipSelf, sipArg);
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_FbxExporter(void *, const sipTypeDef *);}
static void *cast_FbxExporter(void *sipCppV, const sipTypeDef *targetType)
{
     ::FbxExporter *sipCpp = reinterpret_cast< ::FbxExporter *>(sipCppV);

    if (targetType == sipType_FbxIOBase)
        return static_cast< ::FbxIOBase *>(sipCpp);

    if (targetType == sipType_FbxObject)
        return static_cast< ::FbxObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_FbxExporter(void *, int);}
static void release_FbxExporter(void *, int)
{
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_FbxExporter[] = {{160, 255, 1}};


/* Define this type's Python slots. */
static sipPySlotDef slots_FbxExporter[] = {
    {(void *)slot_FbxExporter___ne__, ne_slot},
    {(void *)slot_FbxExporter___eq__, eq_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_FbxExporter[] = {
    {SIP_MLNAME_CAST(sipName_Create), meth_FbxExporter_Create, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxExporter_Create)},
    {SIP_MLNAME_CAST(sipName_Export), meth_FbxExporter_Export, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxExporter_Export)},
    {SIP_MLNAME_CAST(sipName_GetClassId), meth_FbxExporter_GetClassId, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxExporter_GetClassId)},
    {SIP_MLNAME_CAST(sipName_GetExportOptions), meth_FbxExporter_GetExportOptions, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxExporter_GetExportOptions)},
    {SIP_MLNAME_CAST(sipName_GetFileFormat), meth_FbxExporter_GetFileFormat, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxExporter_GetFileFormat)},
    {SIP_MLNAME_CAST(sipName_GetFileHeaderInfo), meth_FbxExporter_GetFileHeaderInfo, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxExporter_GetFileHeaderInfo)},
    {SIP_MLNAME_CAST(sipName_GetIOSettings), meth_FbxExporter_GetIOSettings, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxExporter_GetIOSettings)},
    {SIP_MLNAME_CAST(sipName_GetProgress), meth_FbxExporter_GetProgress, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxExporter_GetProgress)},
    {SIP_MLNAME_CAST(sipName_Initialize), meth_FbxExporter_Initialize, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxExporter_Initialize)},
    {SIP_MLNAME_CAST(sipName_IsExporting), meth_FbxExporter_IsExporting, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxExporter_IsExporting)},
    {SIP_MLNAME_CAST(sipName_IsFBX), meth_FbxExporter_IsFBX, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxExporter_IsFBX)},
    {SIP_MLNAME_CAST(sipName_SetDefaultRenderResolution), meth_FbxExporter_SetDefaultRenderResolution, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxExporter_SetDefaultRenderResolution)},
    {SIP_MLNAME_CAST(sipName_SetFileExportVersion), meth_FbxExporter_SetFileExportVersion, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxExporter_SetFileExportVersion)},
    {SIP_MLNAME_CAST(sipName_SetIOSettings), meth_FbxExporter_SetIOSettings, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxExporter_SetIOSettings)},
    {SIP_MLNAME_CAST(sipName_SetResamplingRate), meth_FbxExporter_SetResamplingRate, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxExporter_SetResamplingRate)},
    {SIP_MLNAME_CAST(sipName_TCSetDefinition), meth_FbxExporter_TCSetDefinition, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxExporter_TCSetDefinition)}
};


extern "C" {static PyObject *varget_FbxExporter_ClassId(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxExporter_ClassId(void *, PyObject *, PyObject *)
{
     ::FbxClassId*sipVal;

    sipVal = & ::FbxExporter::ClassId;

    return sipConvertFromType(sipVal, sipType_FbxClassId, NULL);
}


extern "C" {static int varset_FbxExporter_ClassId(void *, PyObject *, PyObject *);}
static int varset_FbxExporter_ClassId(void *, PyObject *sipPy, PyObject *)
{
     ::FbxClassId*sipVal;
    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxClassId *>(sipForceConvertToType(sipPy,sipType_FbxClassId,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

     ::FbxExporter::ClassId = *sipVal;

    return 0;
}

sipVariableDef variables_FbxExporter[] = {
    {ClassVariable, sipName_ClassId, (PyMethodDef *)varget_FbxExporter_ClassId, (PyMethodDef *)varset_FbxExporter_ClassId, NULL, NULL},
};


sipClassTypeDef sipTypeDef_fbx_FbxExporter = {
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_FbxExporter,
        {0},
        0
    },
    {
        sipNameNr_FbxExporter,
        {0, 0, 1},
        16, methods_FbxExporter,
        0, 0,
        1, variables_FbxExporter,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    0,
    -1,
    -1,
    supers_FbxExporter,
    slots_FbxExporter,
    0,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    0,
    0,
    0,
    0,
    release_FbxExporter,
    cast_FbxExporter,
    0,
    0,
    0,
    0,
    0,
    0
};
