/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.3
 *
 * Copyright (C) 2009 Autodesk, Inc. and/or its licensors.
 * All Rights Reserved.
 * 
 * The coded instructions, statements, computer programs, and/or related material 
 * (collectively the "Data") in these files contain unpublished information 
 * proprietary to Autodesk, Inc. and/or its licensors, which is protected by 
 * Canada and United States of America federal copyright law and by international 
 * treaties. 
 * 
 * The Data may not be disclosed or distributed to third parties, in whole or in
 * part, without the prior written consent of Autodesk, Inc. ("Autodesk").
 * 
 * THE DATA IS PROVIDED "AS IS" AND WITHOUT WARRANTY.
 * ALL WARRANTIES ARE EXPRESSLY EXCLUDED AND DISCLAIMED. AUTODESK MAKES NO
 * WARRANTY OF ANY KIND WITH RESPECT TO THE DATA, EXPRESS, IMPLIED OR ARISING
 * BY CUSTOM OR TRADE USAGE, AND DISCLAIMS ANY IMPLIED WARRANTIES OF TITLE, 
 * NON-INFRINGEMENT, MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE OR USE. 
 * WITHOUT LIMITING THE FOREGOING, AUTODESK DOES NOT WARRANT THAT THE OPERATION
 * OF THE DATA WILL BE UNINTERRUPTED OR ERROR FREE. 
 * 
 * IN NO EVENT SHALL AUTODESK, ITS AFFILIATES, PARENT COMPANIES, LICENSORS
 * OR SUPPLIERS ("AUTODESK GROUP") BE LIABLE FOR ANY LOSSES, DAMAGES OR EXPENSES
 * OF ANY KIND (INCLUDING WITHOUT LIMITATION PUNITIVE OR MULTIPLE DAMAGES OR OTHER
 * SPECIAL, DIRECT, INDIRECT, EXEMPLARY, INCIDENTAL, LOSS OF PROFITS, REVENUE
 * OR DATA, COST OF COVER OR CONSEQUENTIAL LOSSES OR DAMAGES OF ANY KIND),
 * HOWEVER CAUSED, AND REGARDLESS OF THE THEORY OF LIABILITY, WHETHER DERIVED
 * FROM CONTRACT, TORT (INCLUDING, BUT NOT LIMITED TO, NEGLIGENCE), OR OTHERWISE,
 * ARISING OUT OF OR RELATING TO THE DATA OR ITS USE OR ANY OTHER PERFORMANCE,
 * WHETHER OR NOT AUTODESK HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH LOSS
 * OR DAMAGE. 
 */

#include "sipAPIfbx.h"




PyDoc_STRVAR(doc_FbxGeometryWeightedMap_Create, "Create(FbxManager, str) -> FbxGeometryWeightedMap\n"
    "Create(FbxObject, str) -> FbxGeometryWeightedMap");

extern "C" {static PyObject *meth_FbxGeometryWeightedMap_Create(PyObject *, PyObject *);}
static PyObject *meth_FbxGeometryWeightedMap_Create(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxManager* a0;
        const char* a1;
        PyObject *a1Keep;

        if (sipParseArgs(&sipParseErr, sipArgs, "J8A8", sipType_FbxManager, &a0, &a1Keep, &a1))
        {
             ::FbxGeometryWeightedMap*sipRes;

            sipRes =  ::FbxGeometryWeightedMap::Create(a0,a1);
            Py_DECREF(a1Keep);

            return sipConvertFromType(sipRes,sipType_FbxGeometryWeightedMap,NULL);
        }
    }

    {
         ::FbxObject* a0;
        const char* a1;
        PyObject *a1Keep;

        if (sipParseArgs(&sipParseErr, sipArgs, "J8A8", sipType_FbxObject, &a0, &a1Keep, &a1))
        {
             ::FbxGeometryWeightedMap*sipRes;

            sipRes =  ::FbxGeometryWeightedMap::Create(a0,a1);
            Py_DECREF(a1Keep);

            return sipConvertFromType(sipRes,sipType_FbxGeometryWeightedMap,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxGeometryWeightedMap, sipName_Create, doc_FbxGeometryWeightedMap_Create);

    return NULL;
}


PyDoc_STRVAR(doc_FbxGeometryWeightedMap_GetClassId, "GetClassId(self) -> FbxClassId");

extern "C" {static PyObject *meth_FbxGeometryWeightedMap_GetClassId(PyObject *, PyObject *);}
static PyObject *meth_FbxGeometryWeightedMap_GetClassId(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::FbxGeometryWeightedMap *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxGeometryWeightedMap, &sipCpp))
        {
             ::FbxClassId*sipRes;

            sipRes = new  ::FbxClassId((sipSelfWasArg ? sipCpp-> ::FbxGeometryWeightedMap::GetClassId() : sipCpp->GetClassId()));

            return sipConvertFromNewType(sipRes,sipType_FbxClassId,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxGeometryWeightedMap, sipName_GetClassId, doc_FbxGeometryWeightedMap_GetClassId);

    return NULL;
}


PyDoc_STRVAR(doc_FbxGeometryWeightedMap_SetValues, "SetValues(self, FbxWeightedMapping)");

extern "C" {static PyObject *meth_FbxGeometryWeightedMap_SetValues(PyObject *, PyObject *);}
static PyObject *meth_FbxGeometryWeightedMap_SetValues(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::FbxWeightedMapping* a0;
         ::FbxGeometryWeightedMap *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_FbxGeometryWeightedMap, &sipCpp, sipType_FbxWeightedMapping, &a0))
        {
            sipCpp->SetValues(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxGeometryWeightedMap, sipName_SetValues, doc_FbxGeometryWeightedMap_SetValues);

    return NULL;
}


PyDoc_STRVAR(doc_FbxGeometryWeightedMap_GetValues, "GetValues(self) -> FbxWeightedMapping");

extern "C" {static PyObject *meth_FbxGeometryWeightedMap_GetValues(PyObject *, PyObject *);}
static PyObject *meth_FbxGeometryWeightedMap_GetValues(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::FbxGeometryWeightedMap *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxGeometryWeightedMap, &sipCpp))
        {
             ::FbxWeightedMapping*sipRes;

            sipRes = sipCpp->GetValues();

            return sipConvertFromType(sipRes,sipType_FbxWeightedMapping,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxGeometryWeightedMap, sipName_GetValues, doc_FbxGeometryWeightedMap_GetValues);

    return NULL;
}


PyDoc_STRVAR(doc_FbxGeometryWeightedMap_GetSourceGeometry, "GetSourceGeometry(self) -> FbxGeometry");

extern "C" {static PyObject *meth_FbxGeometryWeightedMap_GetSourceGeometry(PyObject *, PyObject *);}
static PyObject *meth_FbxGeometryWeightedMap_GetSourceGeometry(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxGeometryWeightedMap *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxGeometryWeightedMap, &sipCpp))
        {
             ::FbxGeometry*sipRes;

            sipRes = sipCpp->GetSourceGeometry();

            return sipConvertFromType(sipRes,sipType_FbxGeometry,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxGeometryWeightedMap, sipName_GetSourceGeometry, doc_FbxGeometryWeightedMap_GetSourceGeometry);

    return NULL;
}


PyDoc_STRVAR(doc_FbxGeometryWeightedMap_GetDestinationGeometry, "GetDestinationGeometry(self) -> FbxGeometry");

extern "C" {static PyObject *meth_FbxGeometryWeightedMap_GetDestinationGeometry(PyObject *, PyObject *);}
static PyObject *meth_FbxGeometryWeightedMap_GetDestinationGeometry(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxGeometryWeightedMap *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxGeometryWeightedMap, &sipCpp))
        {
             ::FbxGeometry*sipRes;

            sipRes = sipCpp->GetDestinationGeometry();

            return sipConvertFromType(sipRes,sipType_FbxGeometry,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxGeometryWeightedMap, sipName_GetDestinationGeometry, doc_FbxGeometryWeightedMap_GetDestinationGeometry);

    return NULL;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_FbxGeometryWeightedMap(void *, const sipTypeDef *);}
static void *cast_FbxGeometryWeightedMap(void *sipCppV, const sipTypeDef *targetType)
{
     ::FbxGeometryWeightedMap *sipCpp = reinterpret_cast< ::FbxGeometryWeightedMap *>(sipCppV);

    if (targetType == sipType_FbxObject)
        return static_cast< ::FbxObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_FbxGeometryWeightedMap(void *, int);}
static void release_FbxGeometryWeightedMap(void *, int)
{
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_FbxGeometryWeightedMap[] = {{244, 255, 1}};


static PyMethodDef methods_FbxGeometryWeightedMap[] = {
    {SIP_MLNAME_CAST(sipName_Create), meth_FbxGeometryWeightedMap_Create, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxGeometryWeightedMap_Create)},
    {SIP_MLNAME_CAST(sipName_GetClassId), meth_FbxGeometryWeightedMap_GetClassId, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxGeometryWeightedMap_GetClassId)},
    {SIP_MLNAME_CAST(sipName_GetDestinationGeometry), meth_FbxGeometryWeightedMap_GetDestinationGeometry, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxGeometryWeightedMap_GetDestinationGeometry)},
    {SIP_MLNAME_CAST(sipName_GetSourceGeometry), meth_FbxGeometryWeightedMap_GetSourceGeometry, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxGeometryWeightedMap_GetSourceGeometry)},
    {SIP_MLNAME_CAST(sipName_GetValues), meth_FbxGeometryWeightedMap_GetValues, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxGeometryWeightedMap_GetValues)},
    {SIP_MLNAME_CAST(sipName_SetValues), meth_FbxGeometryWeightedMap_SetValues, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxGeometryWeightedMap_SetValues)}
};


extern "C" {static PyObject *varget_FbxGeometryWeightedMap_ClassId(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxGeometryWeightedMap_ClassId(void *, PyObject *, PyObject *)
{
     ::FbxClassId*sipVal;

    sipVal = & ::FbxGeometryWeightedMap::ClassId;

    return sipConvertFromType(sipVal, sipType_FbxClassId, NULL);
}


extern "C" {static int varset_FbxGeometryWeightedMap_ClassId(void *, PyObject *, PyObject *);}
static int varset_FbxGeometryWeightedMap_ClassId(void *, PyObject *sipPy, PyObject *)
{
     ::FbxClassId*sipVal;
    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxClassId *>(sipForceConvertToType(sipPy,sipType_FbxClassId,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

     ::FbxGeometryWeightedMap::ClassId = *sipVal;

    return 0;
}

sipVariableDef variables_FbxGeometryWeightedMap[] = {
    {ClassVariable, sipName_ClassId, (PyMethodDef *)varget_FbxGeometryWeightedMap_ClassId, (PyMethodDef *)varset_FbxGeometryWeightedMap_ClassId, NULL, NULL},
};


sipClassTypeDef sipTypeDef_fbx_FbxGeometryWeightedMap = {
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_FbxGeometryWeightedMap,
        {0},
        0
    },
    {
        sipNameNr_FbxGeometryWeightedMap,
        {0, 0, 1},
        6, methods_FbxGeometryWeightedMap,
        0, 0,
        1, variables_FbxGeometryWeightedMap,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    0,
    -1,
    -1,
    supers_FbxGeometryWeightedMap,
    0,
    0,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    0,
    0,
    0,
    0,
    release_FbxGeometryWeightedMap,
    cast_FbxGeometryWeightedMap,
    0,
    0,
    0,
    0,
    0,
    0
};
