/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.3
 *
 * Copyright (C) 2009 Autodesk, Inc. and/or its licensors.
 * All Rights Reserved.
 * 
 * The coded instructions, statements, computer programs, and/or related material 
 * (collectively the "Data") in these files contain unpublished information 
 * proprietary to Autodesk, Inc. and/or its licensors, which is protected by 
 * Canada and United States of America federal copyright law and by international 
 * treaties. 
 * 
 * The Data may not be disclosed or distributed to third parties, in whole or in
 * part, without the prior written consent of Autodesk, Inc. ("Autodesk").
 * 
 * THE DATA IS PROVIDED "AS IS" AND WITHOUT WARRANTY.
 * ALL WARRANTIES ARE EXPRESSLY EXCLUDED AND DISCLAIMED. AUTODESK MAKES NO
 * WARRANTY OF ANY KIND WITH RESPECT TO THE DATA, EXPRESS, IMPLIED OR ARISING
 * BY CUSTOM OR TRADE USAGE, AND DISCLAIMS ANY IMPLIED WARRANTIES OF TITLE, 
 * NON-INFRINGEMENT, MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE OR USE. 
 * WITHOUT LIMITING THE FOREGOING, AUTODESK DOES NOT WARRANT THAT THE OPERATION
 * OF THE DATA WILL BE UNINTERRUPTED OR ERROR FREE. 
 * 
 * IN NO EVENT SHALL AUTODESK, ITS AFFILIATES, PARENT COMPANIES, LICENSORS
 * OR SUPPLIERS ("AUTODESK GROUP") BE LIABLE FOR ANY LOSSES, DAMAGES OR EXPENSES
 * OF ANY KIND (INCLUDING WITHOUT LIMITATION PUNITIVE OR MULTIPLE DAMAGES OR OTHER
 * SPECIAL, DIRECT, INDIRECT, EXEMPLARY, INCIDENTAL, LOSS OF PROFITS, REVENUE
 * OR DATA, COST OF COVER OR CONSEQUENTIAL LOSSES OR DAMAGES OF ANY KIND),
 * HOWEVER CAUSED, AND REGARDLESS OF THE THEORY OF LIABILITY, WHETHER DERIVED
 * FROM CONTRACT, TORT (INCLUDING, BUT NOT LIMITED TO, NEGLIGENCE), OR OTHERWISE,
 * ARISING OUT OF OR RELATING TO THE DATA OR ITS USE OR ANY OTHER PERFORMANCE,
 * WHETHER OR NOT AUTODESK HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH LOSS
 * OR DAMAGE. 
 */

#include "sipAPIfbx.h"




PyDoc_STRVAR(doc_FbxCamera_Create, "Create(FbxManager, str) -> FbxCamera\n"
    "Create(FbxObject, str) -> FbxCamera");

extern "C" {static PyObject *meth_FbxCamera_Create(PyObject *, PyObject *);}
static PyObject *meth_FbxCamera_Create(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxManager* a0;
        const char* a1;
        PyObject *a1Keep;

        if (sipParseArgs(&sipParseErr, sipArgs, "J8A8", sipType_FbxManager, &a0, &a1Keep, &a1))
        {
             ::FbxCamera*sipRes;

            sipRes =  ::FbxCamera::Create(a0,a1);
            Py_DECREF(a1Keep);

            return sipConvertFromType(sipRes,sipType_FbxCamera,NULL);
        }
    }

    {
         ::FbxObject* a0;
        const char* a1;
        PyObject *a1Keep;

        if (sipParseArgs(&sipParseErr, sipArgs, "J8A8", sipType_FbxObject, &a0, &a1Keep, &a1))
        {
             ::FbxCamera*sipRes;

            sipRes =  ::FbxCamera::Create(a0,a1);
            Py_DECREF(a1Keep);

            return sipConvertFromType(sipRes,sipType_FbxCamera,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxCamera, sipName_Create, doc_FbxCamera_Create);

    return NULL;
}


PyDoc_STRVAR(doc_FbxCamera_GetClassId, "GetClassId(self) -> FbxClassId");

extern "C" {static PyObject *meth_FbxCamera_GetClassId(PyObject *, PyObject *);}
static PyObject *meth_FbxCamera_GetClassId(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::FbxCamera *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxCamera, &sipCpp))
        {
             ::FbxClassId*sipRes;

            sipRes = new  ::FbxClassId((sipSelfWasArg ? sipCpp-> ::FbxCamera::GetClassId() : sipCpp->GetClassId()));

            return sipConvertFromNewType(sipRes,sipType_FbxClassId,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxCamera, sipName_GetClassId, doc_FbxCamera_GetClassId);

    return NULL;
}


PyDoc_STRVAR(doc_FbxCamera_GetAttributeType, "GetAttributeType(self) -> FbxNodeAttribute.EType");

extern "C" {static PyObject *meth_FbxCamera_GetAttributeType(PyObject *, PyObject *);}
static PyObject *meth_FbxCamera_GetAttributeType(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::FbxCamera *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxCamera, &sipCpp))
        {
             ::FbxNodeAttribute::EType sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::FbxCamera::GetAttributeType() : sipCpp->GetAttributeType());

            return sipConvertFromEnum(sipRes,sipType_FbxNodeAttribute_EType);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxCamera, sipName_GetAttributeType, doc_FbxCamera_GetAttributeType);

    return NULL;
}


PyDoc_STRVAR(doc_FbxCamera_Reset, "Reset(self)");

extern "C" {static PyObject *meth_FbxCamera_Reset(PyObject *, PyObject *);}
static PyObject *meth_FbxCamera_Reset(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxCamera *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxCamera, &sipCpp))
        {
            sipCpp->Reset();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxCamera, sipName_Reset, doc_FbxCamera_Reset);

    return NULL;
}


PyDoc_STRVAR(doc_FbxCamera_SetFormat, "SetFormat(self, FbxCamera.EFormat)");

extern "C" {static PyObject *meth_FbxCamera_SetFormat(PyObject *, PyObject *);}
static PyObject *meth_FbxCamera_SetFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxCamera::EFormat a0;
         ::FbxCamera *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_FbxCamera, &sipCpp, sipType_FbxCamera_EFormat, &a0))
        {
            sipCpp->SetFormat(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxCamera, sipName_SetFormat, doc_FbxCamera_SetFormat);

    return NULL;
}


PyDoc_STRVAR(doc_FbxCamera_GetFormat, "GetFormat(self) -> FbxCamera.EFormat");

extern "C" {static PyObject *meth_FbxCamera_GetFormat(PyObject *, PyObject *);}
static PyObject *meth_FbxCamera_GetFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::FbxCamera *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxCamera, &sipCpp))
        {
             ::FbxCamera::EFormat sipRes;

            sipRes = sipCpp->GetFormat();

            return sipConvertFromEnum(sipRes,sipType_FbxCamera_EFormat);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxCamera, sipName_GetFormat, doc_FbxCamera_GetFormat);

    return NULL;
}


PyDoc_STRVAR(doc_FbxCamera_SetAspect, "SetAspect(self, FbxCamera.EAspectRatioMode, float, float)");

extern "C" {static PyObject *meth_FbxCamera_SetAspect(PyObject *, PyObject *);}
static PyObject *meth_FbxCamera_SetAspect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxCamera::EAspectRatioMode a0;
        double a1;
        double a2;
         ::FbxCamera *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BEdd", &sipSelf, sipType_FbxCamera, &sipCpp, sipType_FbxCamera_EAspectRatioMode, &a0, &a1, &a2))
        {
            sipCpp->SetAspect(a0,a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxCamera, sipName_SetAspect, doc_FbxCamera_SetAspect);

    return NULL;
}


PyDoc_STRVAR(doc_FbxCamera_GetAspectRatioMode, "GetAspectRatioMode(self) -> FbxCamera.EAspectRatioMode");

extern "C" {static PyObject *meth_FbxCamera_GetAspectRatioMode(PyObject *, PyObject *);}
static PyObject *meth_FbxCamera_GetAspectRatioMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::FbxCamera *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxCamera, &sipCpp))
        {
             ::FbxCamera::EAspectRatioMode sipRes;

            sipRes = sipCpp->GetAspectRatioMode();

            return sipConvertFromEnum(sipRes,sipType_FbxCamera_EAspectRatioMode);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxCamera, sipName_GetAspectRatioMode, doc_FbxCamera_GetAspectRatioMode);

    return NULL;
}


PyDoc_STRVAR(doc_FbxCamera_SetPixelRatio, "SetPixelRatio(self, float)");

extern "C" {static PyObject *meth_FbxCamera_SetPixelRatio(PyObject *, PyObject *);}
static PyObject *meth_FbxCamera_SetPixelRatio(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        double a0;
         ::FbxCamera *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_FbxCamera, &sipCpp, &a0))
        {
            sipCpp->SetPixelRatio(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxCamera, sipName_SetPixelRatio, doc_FbxCamera_SetPixelRatio);

    return NULL;
}


PyDoc_STRVAR(doc_FbxCamera_GetPixelRatio, "GetPixelRatio(self) -> float");

extern "C" {static PyObject *meth_FbxCamera_GetPixelRatio(PyObject *, PyObject *);}
static PyObject *meth_FbxCamera_GetPixelRatio(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::FbxCamera *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxCamera, &sipCpp))
        {
            double sipRes;

            sipRes = sipCpp->GetPixelRatio();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxCamera, sipName_GetPixelRatio, doc_FbxCamera_GetPixelRatio);

    return NULL;
}


PyDoc_STRVAR(doc_FbxCamera_SetNearPlane, "SetNearPlane(self, float)");

extern "C" {static PyObject *meth_FbxCamera_SetNearPlane(PyObject *, PyObject *);}
static PyObject *meth_FbxCamera_SetNearPlane(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        double a0;
         ::FbxCamera *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_FbxCamera, &sipCpp, &a0))
        {
            sipCpp->SetNearPlane(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxCamera, sipName_SetNearPlane, doc_FbxCamera_SetNearPlane);

    return NULL;
}


PyDoc_STRVAR(doc_FbxCamera_GetNearPlane, "GetNearPlane(self) -> float");

extern "C" {static PyObject *meth_FbxCamera_GetNearPlane(PyObject *, PyObject *);}
static PyObject *meth_FbxCamera_GetNearPlane(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::FbxCamera *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxCamera, &sipCpp))
        {
            double sipRes;

            sipRes = sipCpp->GetNearPlane();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxCamera, sipName_GetNearPlane, doc_FbxCamera_GetNearPlane);

    return NULL;
}


PyDoc_STRVAR(doc_FbxCamera_SetFarPlane, "SetFarPlane(self, float)");

extern "C" {static PyObject *meth_FbxCamera_SetFarPlane(PyObject *, PyObject *);}
static PyObject *meth_FbxCamera_SetFarPlane(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        double a0;
         ::FbxCamera *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_FbxCamera, &sipCpp, &a0))
        {
            sipCpp->SetFarPlane(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxCamera, sipName_SetFarPlane, doc_FbxCamera_SetFarPlane);

    return NULL;
}


PyDoc_STRVAR(doc_FbxCamera_GetFarPlane, "GetFarPlane(self) -> float");

extern "C" {static PyObject *meth_FbxCamera_GetFarPlane(PyObject *, PyObject *);}
static PyObject *meth_FbxCamera_GetFarPlane(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::FbxCamera *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxCamera, &sipCpp))
        {
            double sipRes;

            sipRes = sipCpp->GetFarPlane();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxCamera, sipName_GetFarPlane, doc_FbxCamera_GetFarPlane);

    return NULL;
}


PyDoc_STRVAR(doc_FbxCamera_SetApertureFormat, "SetApertureFormat(self, FbxCamera.EApertureFormat)");

extern "C" {static PyObject *meth_FbxCamera_SetApertureFormat(PyObject *, PyObject *);}
static PyObject *meth_FbxCamera_SetApertureFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxCamera::EApertureFormat a0;
         ::FbxCamera *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_FbxCamera, &sipCpp, sipType_FbxCamera_EApertureFormat, &a0))
        {
            sipCpp->SetApertureFormat(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxCamera, sipName_SetApertureFormat, doc_FbxCamera_SetApertureFormat);

    return NULL;
}


PyDoc_STRVAR(doc_FbxCamera_GetApertureFormat, "GetApertureFormat(self) -> FbxCamera.EApertureFormat");

extern "C" {static PyObject *meth_FbxCamera_GetApertureFormat(PyObject *, PyObject *);}
static PyObject *meth_FbxCamera_GetApertureFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::FbxCamera *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxCamera, &sipCpp))
        {
             ::FbxCamera::EApertureFormat sipRes;

            sipRes = sipCpp->GetApertureFormat();

            return sipConvertFromEnum(sipRes,sipType_FbxCamera_EApertureFormat);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxCamera, sipName_GetApertureFormat, doc_FbxCamera_GetApertureFormat);

    return NULL;
}


PyDoc_STRVAR(doc_FbxCamera_SetApertureMode, "SetApertureMode(self, FbxCamera.EApertureMode)");

extern "C" {static PyObject *meth_FbxCamera_SetApertureMode(PyObject *, PyObject *);}
static PyObject *meth_FbxCamera_SetApertureMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxCamera::EApertureMode a0;
         ::FbxCamera *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_FbxCamera, &sipCpp, sipType_FbxCamera_EApertureMode, &a0))
        {
            sipCpp->SetApertureMode(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxCamera, sipName_SetApertureMode, doc_FbxCamera_SetApertureMode);

    return NULL;
}


PyDoc_STRVAR(doc_FbxCamera_GetApertureMode, "GetApertureMode(self) -> FbxCamera.EApertureMode");

extern "C" {static PyObject *meth_FbxCamera_GetApertureMode(PyObject *, PyObject *);}
static PyObject *meth_FbxCamera_GetApertureMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::FbxCamera *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxCamera, &sipCpp))
        {
             ::FbxCamera::EApertureMode sipRes;

            sipRes = sipCpp->GetApertureMode();

            return sipConvertFromEnum(sipRes,sipType_FbxCamera_EApertureMode);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxCamera, sipName_GetApertureMode, doc_FbxCamera_GetApertureMode);

    return NULL;
}


PyDoc_STRVAR(doc_FbxCamera_SetApertureWidth, "SetApertureWidth(self, float)");

extern "C" {static PyObject *meth_FbxCamera_SetApertureWidth(PyObject *, PyObject *);}
static PyObject *meth_FbxCamera_SetApertureWidth(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        double a0;
         ::FbxCamera *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_FbxCamera, &sipCpp, &a0))
        {
            sipCpp->SetApertureWidth(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxCamera, sipName_SetApertureWidth, doc_FbxCamera_SetApertureWidth);

    return NULL;
}


PyDoc_STRVAR(doc_FbxCamera_GetApertureWidth, "GetApertureWidth(self) -> float");

extern "C" {static PyObject *meth_FbxCamera_GetApertureWidth(PyObject *, PyObject *);}
static PyObject *meth_FbxCamera_GetApertureWidth(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::FbxCamera *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxCamera, &sipCpp))
        {
            double sipRes;

            sipRes = sipCpp->GetApertureWidth();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxCamera, sipName_GetApertureWidth, doc_FbxCamera_GetApertureWidth);

    return NULL;
}


PyDoc_STRVAR(doc_FbxCamera_SetApertureHeight, "SetApertureHeight(self, float)");

extern "C" {static PyObject *meth_FbxCamera_SetApertureHeight(PyObject *, PyObject *);}
static PyObject *meth_FbxCamera_SetApertureHeight(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        double a0;
         ::FbxCamera *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_FbxCamera, &sipCpp, &a0))
        {
            sipCpp->SetApertureHeight(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxCamera, sipName_SetApertureHeight, doc_FbxCamera_SetApertureHeight);

    return NULL;
}


PyDoc_STRVAR(doc_FbxCamera_GetApertureHeight, "GetApertureHeight(self) -> float");

extern "C" {static PyObject *meth_FbxCamera_GetApertureHeight(PyObject *, PyObject *);}
static PyObject *meth_FbxCamera_GetApertureHeight(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::FbxCamera *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxCamera, &sipCpp))
        {
            double sipRes;

            sipRes = sipCpp->GetApertureHeight();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxCamera, sipName_GetApertureHeight, doc_FbxCamera_GetApertureHeight);

    return NULL;
}


PyDoc_STRVAR(doc_FbxCamera_SetSqueezeRatio, "SetSqueezeRatio(self, float)");

extern "C" {static PyObject *meth_FbxCamera_SetSqueezeRatio(PyObject *, PyObject *);}
static PyObject *meth_FbxCamera_SetSqueezeRatio(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        double a0;
         ::FbxCamera *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_FbxCamera, &sipCpp, &a0))
        {
            sipCpp->SetSqueezeRatio(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxCamera, sipName_SetSqueezeRatio, doc_FbxCamera_SetSqueezeRatio);

    return NULL;
}


PyDoc_STRVAR(doc_FbxCamera_GetSqueezeRatio, "GetSqueezeRatio(self) -> float");

extern "C" {static PyObject *meth_FbxCamera_GetSqueezeRatio(PyObject *, PyObject *);}
static PyObject *meth_FbxCamera_GetSqueezeRatio(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::FbxCamera *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxCamera, &sipCpp))
        {
            double sipRes;

            sipRes = sipCpp->GetSqueezeRatio();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxCamera, sipName_GetSqueezeRatio, doc_FbxCamera_GetSqueezeRatio);

    return NULL;
}


PyDoc_STRVAR(doc_FbxCamera_ComputeFieldOfView, "ComputeFieldOfView(self, float) -> float");

extern "C" {static PyObject *meth_FbxCamera_ComputeFieldOfView(PyObject *, PyObject *);}
static PyObject *meth_FbxCamera_ComputeFieldOfView(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        double a0;
        const  ::FbxCamera *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_FbxCamera, &sipCpp, &a0))
        {
            double sipRes;

            sipRes = sipCpp->ComputeFieldOfView(a0);

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxCamera, sipName_ComputeFieldOfView, doc_FbxCamera_ComputeFieldOfView);

    return NULL;
}


PyDoc_STRVAR(doc_FbxCamera_ComputeFocalLength, "ComputeFocalLength(self, float) -> float");

extern "C" {static PyObject *meth_FbxCamera_ComputeFocalLength(PyObject *, PyObject *);}
static PyObject *meth_FbxCamera_ComputeFocalLength(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        double a0;
        const  ::FbxCamera *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_FbxCamera, &sipCpp, &a0))
        {
            double sipRes;

            sipRes = sipCpp->ComputeFocalLength(a0);

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxCamera, sipName_ComputeFocalLength, doc_FbxCamera_ComputeFocalLength);

    return NULL;
}


PyDoc_STRVAR(doc_FbxCamera_SetBackgroundFileName, "SetBackgroundFileName(self, str)");

extern "C" {static PyObject *meth_FbxCamera_SetBackgroundFileName(PyObject *, PyObject *);}
static PyObject *meth_FbxCamera_SetBackgroundFileName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const char* a0;
        PyObject *a0Keep;
         ::FbxCamera *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BA8", &sipSelf, sipType_FbxCamera, &sipCpp, &a0Keep, &a0))
        {
            sipCpp->SetBackgroundFileName(a0);
            Py_DECREF(a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxCamera, sipName_SetBackgroundFileName, doc_FbxCamera_SetBackgroundFileName);

    return NULL;
}


PyDoc_STRVAR(doc_FbxCamera_GetBackgroundFileName, "GetBackgroundFileName(self) -> str");

extern "C" {static PyObject *meth_FbxCamera_GetBackgroundFileName(PyObject *, PyObject *);}
static PyObject *meth_FbxCamera_GetBackgroundFileName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::FbxCamera *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxCamera, &sipCpp))
        {
            const char*sipRes;

            sipRes = sipCpp->GetBackgroundFileName();

            if (sipRes == NULL)
            {
                Py_INCREF(Py_None);
                return Py_None;
            }

#if PY_MAJOR_VERSION >= 3
            return PyUnicode_FromString(sipRes);
#else
            return PyUnicode_DecodeUTF8(sipRes, strlen(sipRes), NULL);
#endif
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxCamera, sipName_GetBackgroundFileName, doc_FbxCamera_GetBackgroundFileName);

    return NULL;
}


PyDoc_STRVAR(doc_FbxCamera_SetBackgroundMediaName, "SetBackgroundMediaName(self, str)");

extern "C" {static PyObject *meth_FbxCamera_SetBackgroundMediaName(PyObject *, PyObject *);}
static PyObject *meth_FbxCamera_SetBackgroundMediaName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const char* a0;
        PyObject *a0Keep;
         ::FbxCamera *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BA8", &sipSelf, sipType_FbxCamera, &sipCpp, &a0Keep, &a0))
        {
            sipCpp->SetBackgroundMediaName(a0);
            Py_DECREF(a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxCamera, sipName_SetBackgroundMediaName, doc_FbxCamera_SetBackgroundMediaName);

    return NULL;
}


PyDoc_STRVAR(doc_FbxCamera_GetBackgroundMediaName, "GetBackgroundMediaName(self) -> str");

extern "C" {static PyObject *meth_FbxCamera_GetBackgroundMediaName(PyObject *, PyObject *);}
static PyObject *meth_FbxCamera_GetBackgroundMediaName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::FbxCamera *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxCamera, &sipCpp))
        {
            const char*sipRes;

            sipRes = sipCpp->GetBackgroundMediaName();

            if (sipRes == NULL)
            {
                Py_INCREF(Py_None);
                return Py_None;
            }

#if PY_MAJOR_VERSION >= 3
            return PyUnicode_FromString(sipRes);
#else
            return PyUnicode_DecodeUTF8(sipRes, strlen(sipRes), NULL);
#endif
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxCamera, sipName_GetBackgroundMediaName, doc_FbxCamera_GetBackgroundMediaName);

    return NULL;
}


PyDoc_STRVAR(doc_FbxCamera_SetBackgroundAlphaTreshold, "SetBackgroundAlphaTreshold(self, float)");

extern "C" {static PyObject *meth_FbxCamera_SetBackgroundAlphaTreshold(PyObject *, PyObject *);}
static PyObject *meth_FbxCamera_SetBackgroundAlphaTreshold(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        double a0;
         ::FbxCamera *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_FbxCamera, &sipCpp, &a0))
        {
            sipCpp->SetBackgroundAlphaTreshold(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxCamera, sipName_SetBackgroundAlphaTreshold, doc_FbxCamera_SetBackgroundAlphaTreshold);

    return NULL;
}


PyDoc_STRVAR(doc_FbxCamera_GetBackgroundAlphaTreshold, "GetBackgroundAlphaTreshold(self) -> float");

extern "C" {static PyObject *meth_FbxCamera_GetBackgroundAlphaTreshold(PyObject *, PyObject *);}
static PyObject *meth_FbxCamera_GetBackgroundAlphaTreshold(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::FbxCamera *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxCamera, &sipCpp))
        {
            double sipRes;

            sipRes = sipCpp->GetBackgroundAlphaTreshold();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxCamera, sipName_GetBackgroundAlphaTreshold, doc_FbxCamera_GetBackgroundAlphaTreshold);

    return NULL;
}


PyDoc_STRVAR(doc_FbxCamera_SetBackPlateFitImage, "SetBackPlateFitImage(self, bool)");

extern "C" {static PyObject *meth_FbxCamera_SetBackPlateFitImage(PyObject *, PyObject *);}
static PyObject *meth_FbxCamera_SetBackPlateFitImage(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
         ::FbxCamera *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_FbxCamera, &sipCpp, &a0))
        {
            sipCpp->SetBackPlateFitImage(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxCamera, sipName_SetBackPlateFitImage, doc_FbxCamera_SetBackPlateFitImage);

    return NULL;
}


PyDoc_STRVAR(doc_FbxCamera_GetBackPlateFitImage, "GetBackPlateFitImage(self) -> bool");

extern "C" {static PyObject *meth_FbxCamera_GetBackPlateFitImage(PyObject *, PyObject *);}
static PyObject *meth_FbxCamera_GetBackPlateFitImage(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::FbxCamera *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxCamera, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->GetBackPlateFitImage();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxCamera, sipName_GetBackPlateFitImage, doc_FbxCamera_GetBackPlateFitImage);

    return NULL;
}


PyDoc_STRVAR(doc_FbxCamera_SetBackPlateCrop, "SetBackPlateCrop(self, bool)");

extern "C" {static PyObject *meth_FbxCamera_SetBackPlateCrop(PyObject *, PyObject *);}
static PyObject *meth_FbxCamera_SetBackPlateCrop(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
         ::FbxCamera *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_FbxCamera, &sipCpp, &a0))
        {
            sipCpp->SetBackPlateCrop(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxCamera, sipName_SetBackPlateCrop, doc_FbxCamera_SetBackPlateCrop);

    return NULL;
}


PyDoc_STRVAR(doc_FbxCamera_GetBackPlateCrop, "GetBackPlateCrop(self) -> bool");

extern "C" {static PyObject *meth_FbxCamera_GetBackPlateCrop(PyObject *, PyObject *);}
static PyObject *meth_FbxCamera_GetBackPlateCrop(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::FbxCamera *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxCamera, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->GetBackPlateCrop();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxCamera, sipName_GetBackPlateCrop, doc_FbxCamera_GetBackPlateCrop);

    return NULL;
}


PyDoc_STRVAR(doc_FbxCamera_SetBackPlateCenter, "SetBackPlateCenter(self, bool)");

extern "C" {static PyObject *meth_FbxCamera_SetBackPlateCenter(PyObject *, PyObject *);}
static PyObject *meth_FbxCamera_SetBackPlateCenter(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
         ::FbxCamera *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_FbxCamera, &sipCpp, &a0))
        {
            sipCpp->SetBackPlateCenter(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxCamera, sipName_SetBackPlateCenter, doc_FbxCamera_SetBackPlateCenter);

    return NULL;
}


PyDoc_STRVAR(doc_FbxCamera_GetBackPlateCenter, "GetBackPlateCenter(self) -> bool");

extern "C" {static PyObject *meth_FbxCamera_GetBackPlateCenter(PyObject *, PyObject *);}
static PyObject *meth_FbxCamera_GetBackPlateCenter(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::FbxCamera *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxCamera, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->GetBackPlateCenter();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxCamera, sipName_GetBackPlateCenter, doc_FbxCamera_GetBackPlateCenter);

    return NULL;
}


PyDoc_STRVAR(doc_FbxCamera_SetBackPlateKeepRatio, "SetBackPlateKeepRatio(self, bool)");

extern "C" {static PyObject *meth_FbxCamera_SetBackPlateKeepRatio(PyObject *, PyObject *);}
static PyObject *meth_FbxCamera_SetBackPlateKeepRatio(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
         ::FbxCamera *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_FbxCamera, &sipCpp, &a0))
        {
            sipCpp->SetBackPlateKeepRatio(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxCamera, sipName_SetBackPlateKeepRatio, doc_FbxCamera_SetBackPlateKeepRatio);

    return NULL;
}


PyDoc_STRVAR(doc_FbxCamera_GetBackPlateKeepRatio, "GetBackPlateKeepRatio(self) -> bool");

extern "C" {static PyObject *meth_FbxCamera_GetBackPlateKeepRatio(PyObject *, PyObject *);}
static PyObject *meth_FbxCamera_GetBackPlateKeepRatio(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::FbxCamera *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxCamera, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->GetBackPlateKeepRatio();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxCamera, sipName_GetBackPlateKeepRatio, doc_FbxCamera_GetBackPlateKeepRatio);

    return NULL;
}


PyDoc_STRVAR(doc_FbxCamera_SetShowFrontPlate, "SetShowFrontPlate(self, bool)");

extern "C" {static PyObject *meth_FbxCamera_SetShowFrontPlate(PyObject *, PyObject *);}
static PyObject *meth_FbxCamera_SetShowFrontPlate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
         ::FbxCamera *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_FbxCamera, &sipCpp, &a0))
        {
            sipCpp->SetShowFrontPlate(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxCamera, sipName_SetShowFrontPlate, doc_FbxCamera_SetShowFrontPlate);

    return NULL;
}


PyDoc_STRVAR(doc_FbxCamera_GetShowFrontPlate, "GetShowFrontPlate(self) -> bool");

extern "C" {static PyObject *meth_FbxCamera_GetShowFrontPlate(PyObject *, PyObject *);}
static PyObject *meth_FbxCamera_GetShowFrontPlate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::FbxCamera *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxCamera, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->GetShowFrontPlate();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxCamera, sipName_GetShowFrontPlate, doc_FbxCamera_GetShowFrontPlate);

    return NULL;
}


PyDoc_STRVAR(doc_FbxCamera_SetFrontPlateFitImage, "SetFrontPlateFitImage(self, bool)");

extern "C" {static PyObject *meth_FbxCamera_SetFrontPlateFitImage(PyObject *, PyObject *);}
static PyObject *meth_FbxCamera_SetFrontPlateFitImage(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
         ::FbxCamera *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_FbxCamera, &sipCpp, &a0))
        {
            sipCpp->SetFrontPlateFitImage(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxCamera, sipName_SetFrontPlateFitImage, doc_FbxCamera_SetFrontPlateFitImage);

    return NULL;
}


PyDoc_STRVAR(doc_FbxCamera_GetFrontPlateFitImage, "GetFrontPlateFitImage(self) -> bool");

extern "C" {static PyObject *meth_FbxCamera_GetFrontPlateFitImage(PyObject *, PyObject *);}
static PyObject *meth_FbxCamera_GetFrontPlateFitImage(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::FbxCamera *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxCamera, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->GetFrontPlateFitImage();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxCamera, sipName_GetFrontPlateFitImage, doc_FbxCamera_GetFrontPlateFitImage);

    return NULL;
}


PyDoc_STRVAR(doc_FbxCamera_SetFrontPlateCrop, "SetFrontPlateCrop(self, bool)");

extern "C" {static PyObject *meth_FbxCamera_SetFrontPlateCrop(PyObject *, PyObject *);}
static PyObject *meth_FbxCamera_SetFrontPlateCrop(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
         ::FbxCamera *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_FbxCamera, &sipCpp, &a0))
        {
            sipCpp->SetFrontPlateCrop(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxCamera, sipName_SetFrontPlateCrop, doc_FbxCamera_SetFrontPlateCrop);

    return NULL;
}


PyDoc_STRVAR(doc_FbxCamera_GetFrontPlateCrop, "GetFrontPlateCrop(self) -> bool");

extern "C" {static PyObject *meth_FbxCamera_GetFrontPlateCrop(PyObject *, PyObject *);}
static PyObject *meth_FbxCamera_GetFrontPlateCrop(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::FbxCamera *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxCamera, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->GetFrontPlateCrop();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxCamera, sipName_GetFrontPlateCrop, doc_FbxCamera_GetFrontPlateCrop);

    return NULL;
}


PyDoc_STRVAR(doc_FbxCamera_SetFrontPlateCenter, "SetFrontPlateCenter(self, bool)");

extern "C" {static PyObject *meth_FbxCamera_SetFrontPlateCenter(PyObject *, PyObject *);}
static PyObject *meth_FbxCamera_SetFrontPlateCenter(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
         ::FbxCamera *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_FbxCamera, &sipCpp, &a0))
        {
            sipCpp->SetFrontPlateCenter(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxCamera, sipName_SetFrontPlateCenter, doc_FbxCamera_SetFrontPlateCenter);

    return NULL;
}


PyDoc_STRVAR(doc_FbxCamera_GetFrontPlateCenter, "GetFrontPlateCenter(self) -> bool");

extern "C" {static PyObject *meth_FbxCamera_GetFrontPlateCenter(PyObject *, PyObject *);}
static PyObject *meth_FbxCamera_GetFrontPlateCenter(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::FbxCamera *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxCamera, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->GetFrontPlateCenter();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxCamera, sipName_GetFrontPlateCenter, doc_FbxCamera_GetFrontPlateCenter);

    return NULL;
}


PyDoc_STRVAR(doc_FbxCamera_SetFrontPlateKeepRatio, "SetFrontPlateKeepRatio(self, bool)");

extern "C" {static PyObject *meth_FbxCamera_SetFrontPlateKeepRatio(PyObject *, PyObject *);}
static PyObject *meth_FbxCamera_SetFrontPlateKeepRatio(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
         ::FbxCamera *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_FbxCamera, &sipCpp, &a0))
        {
            sipCpp->SetFrontPlateKeepRatio(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxCamera, sipName_SetFrontPlateKeepRatio, doc_FbxCamera_SetFrontPlateKeepRatio);

    return NULL;
}


PyDoc_STRVAR(doc_FbxCamera_GetFrontPlateKeepRatio, "GetFrontPlateKeepRatio(self) -> bool");

extern "C" {static PyObject *meth_FbxCamera_GetFrontPlateKeepRatio(PyObject *, PyObject *);}
static PyObject *meth_FbxCamera_GetFrontPlateKeepRatio(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::FbxCamera *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxCamera, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->GetFrontPlateKeepRatio();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxCamera, sipName_GetFrontPlateKeepRatio, doc_FbxCamera_GetFrontPlateKeepRatio);

    return NULL;
}


PyDoc_STRVAR(doc_FbxCamera_SetForegroundOpacity, "SetForegroundOpacity(self, float)");

extern "C" {static PyObject *meth_FbxCamera_SetForegroundOpacity(PyObject *, PyObject *);}
static PyObject *meth_FbxCamera_SetForegroundOpacity(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        double a0;
         ::FbxCamera *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_FbxCamera, &sipCpp, &a0))
        {
            sipCpp->SetForegroundOpacity(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxCamera, sipName_SetForegroundOpacity, doc_FbxCamera_SetForegroundOpacity);

    return NULL;
}


PyDoc_STRVAR(doc_FbxCamera_GetForegroundOpacity, "GetForegroundOpacity(self) -> float");

extern "C" {static PyObject *meth_FbxCamera_GetForegroundOpacity(PyObject *, PyObject *);}
static PyObject *meth_FbxCamera_GetForegroundOpacity(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::FbxCamera *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxCamera, &sipCpp))
        {
            double sipRes;

            sipRes = sipCpp->GetForegroundOpacity();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxCamera, sipName_GetForegroundOpacity, doc_FbxCamera_GetForegroundOpacity);

    return NULL;
}


PyDoc_STRVAR(doc_FbxCamera_SetForegroundTexture, "SetForegroundTexture(self, FbxTexture)");

extern "C" {static PyObject *meth_FbxCamera_SetForegroundTexture(PyObject *, PyObject *);}
static PyObject *meth_FbxCamera_SetForegroundTexture(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxTexture* a0;
         ::FbxCamera *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_FbxCamera, &sipCpp, sipType_FbxTexture, &a0))
        {
            sipCpp->SetForegroundTexture(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxCamera, sipName_SetForegroundTexture, doc_FbxCamera_SetForegroundTexture);

    return NULL;
}


PyDoc_STRVAR(doc_FbxCamera_GetForegroundTexture, "GetForegroundTexture(self) -> FbxTexture");

extern "C" {static PyObject *meth_FbxCamera_GetForegroundTexture(PyObject *, PyObject *);}
static PyObject *meth_FbxCamera_GetForegroundTexture(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::FbxCamera *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxCamera, &sipCpp))
        {
             ::FbxTexture*sipRes;

            sipRes = sipCpp->GetForegroundTexture();

            return sipConvertFromType(sipRes,sipType_FbxTexture,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxCamera, sipName_GetForegroundTexture, doc_FbxCamera_GetForegroundTexture);

    return NULL;
}


PyDoc_STRVAR(doc_FbxCamera_SetBackPlaneDistanceMode, "SetBackPlaneDistanceMode(self, FbxCamera.EFrontBackPlaneDistanceMode)");

extern "C" {static PyObject *meth_FbxCamera_SetBackPlaneDistanceMode(PyObject *, PyObject *);}
static PyObject *meth_FbxCamera_SetBackPlaneDistanceMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxCamera::EFrontBackPlaneDistanceMode a0;
         ::FbxCamera *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_FbxCamera, &sipCpp, sipType_FbxCamera_EFrontBackPlaneDistanceMode, &a0))
        {
            sipCpp->SetBackPlaneDistanceMode(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxCamera, sipName_SetBackPlaneDistanceMode, doc_FbxCamera_SetBackPlaneDistanceMode);

    return NULL;
}


PyDoc_STRVAR(doc_FbxCamera_GetBackPlaneDistanceMode, "GetBackPlaneDistanceMode(self) -> FbxCamera.EFrontBackPlaneDistanceMode");

extern "C" {static PyObject *meth_FbxCamera_GetBackPlaneDistanceMode(PyObject *, PyObject *);}
static PyObject *meth_FbxCamera_GetBackPlaneDistanceMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::FbxCamera *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxCamera, &sipCpp))
        {
             ::FbxCamera::EFrontBackPlaneDistanceMode sipRes;

            sipRes = sipCpp->GetBackPlaneDistanceMode();

            return sipConvertFromEnum(sipRes,sipType_FbxCamera_EFrontBackPlaneDistanceMode);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxCamera, sipName_GetBackPlaneDistanceMode, doc_FbxCamera_GetBackPlaneDistanceMode);

    return NULL;
}


PyDoc_STRVAR(doc_FbxCamera_SetFrontPlaneDistance, "SetFrontPlaneDistance(self, float)");

extern "C" {static PyObject *meth_FbxCamera_SetFrontPlaneDistance(PyObject *, PyObject *);}
static PyObject *meth_FbxCamera_SetFrontPlaneDistance(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        double a0;
         ::FbxCamera *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_FbxCamera, &sipCpp, &a0))
        {
            sipCpp->SetFrontPlaneDistance(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxCamera, sipName_SetFrontPlaneDistance, doc_FbxCamera_SetFrontPlaneDistance);

    return NULL;
}


PyDoc_STRVAR(doc_FbxCamera_GetFrontPlaneDistance, "GetFrontPlaneDistance(self) -> float");

extern "C" {static PyObject *meth_FbxCamera_GetFrontPlaneDistance(PyObject *, PyObject *);}
static PyObject *meth_FbxCamera_GetFrontPlaneDistance(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::FbxCamera *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxCamera, &sipCpp))
        {
            double sipRes;

            sipRes = sipCpp->GetFrontPlaneDistance();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxCamera, sipName_GetFrontPlaneDistance, doc_FbxCamera_GetFrontPlaneDistance);

    return NULL;
}


PyDoc_STRVAR(doc_FbxCamera_SetFrontPlaneDistanceMode, "SetFrontPlaneDistanceMode(self, FbxCamera.EFrontBackPlaneDistanceMode)");

extern "C" {static PyObject *meth_FbxCamera_SetFrontPlaneDistanceMode(PyObject *, PyObject *);}
static PyObject *meth_FbxCamera_SetFrontPlaneDistanceMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxCamera::EFrontBackPlaneDistanceMode a0;
         ::FbxCamera *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_FbxCamera, &sipCpp, sipType_FbxCamera_EFrontBackPlaneDistanceMode, &a0))
        {
            sipCpp->SetFrontPlaneDistanceMode(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxCamera, sipName_SetFrontPlaneDistanceMode, doc_FbxCamera_SetFrontPlaneDistanceMode);

    return NULL;
}


PyDoc_STRVAR(doc_FbxCamera_GetFrontPlaneDistanceMode, "GetFrontPlaneDistanceMode(self) -> FbxCamera.EFrontBackPlaneDistanceMode");

extern "C" {static PyObject *meth_FbxCamera_GetFrontPlaneDistanceMode(PyObject *, PyObject *);}
static PyObject *meth_FbxCamera_GetFrontPlaneDistanceMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::FbxCamera *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxCamera, &sipCpp))
        {
             ::FbxCamera::EFrontBackPlaneDistanceMode sipRes;

            sipRes = sipCpp->GetFrontPlaneDistanceMode();

            return sipConvertFromEnum(sipRes,sipType_FbxCamera_EFrontBackPlaneDistanceMode);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxCamera, sipName_GetFrontPlaneDistanceMode, doc_FbxCamera_GetFrontPlaneDistanceMode);

    return NULL;
}


PyDoc_STRVAR(doc_FbxCamera_SetViewFrustumFrontPlaneMode, "SetViewFrustumFrontPlaneMode(self, FbxCamera.EFrontBackPlaneDisplayMode)");

extern "C" {static PyObject *meth_FbxCamera_SetViewFrustumFrontPlaneMode(PyObject *, PyObject *);}
static PyObject *meth_FbxCamera_SetViewFrustumFrontPlaneMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxCamera::EFrontBackPlaneDisplayMode a0;
         ::FbxCamera *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_FbxCamera, &sipCpp, sipType_FbxCamera_EFrontBackPlaneDisplayMode, &a0))
        {
            sipCpp->SetViewFrustumFrontPlaneMode(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxCamera, sipName_SetViewFrustumFrontPlaneMode, doc_FbxCamera_SetViewFrustumFrontPlaneMode);

    return NULL;
}


PyDoc_STRVAR(doc_FbxCamera_GetViewFrustumFrontPlaneMode, "GetViewFrustumFrontPlaneMode(self) -> FbxCamera.EFrontBackPlaneDisplayMode");

extern "C" {static PyObject *meth_FbxCamera_GetViewFrustumFrontPlaneMode(PyObject *, PyObject *);}
static PyObject *meth_FbxCamera_GetViewFrustumFrontPlaneMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::FbxCamera *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxCamera, &sipCpp))
        {
             ::FbxCamera::EFrontBackPlaneDisplayMode sipRes;

            sipRes = sipCpp->GetViewFrustumFrontPlaneMode();

            return sipConvertFromEnum(sipRes,sipType_FbxCamera_EFrontBackPlaneDisplayMode);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxCamera, sipName_GetViewFrustumFrontPlaneMode, doc_FbxCamera_GetViewFrustumFrontPlaneMode);

    return NULL;
}


PyDoc_STRVAR(doc_FbxCamera_SetViewFrustumBackPlaneMode, "SetViewFrustumBackPlaneMode(self, FbxCamera.EFrontBackPlaneDisplayMode)");

extern "C" {static PyObject *meth_FbxCamera_SetViewFrustumBackPlaneMode(PyObject *, PyObject *);}
static PyObject *meth_FbxCamera_SetViewFrustumBackPlaneMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxCamera::EFrontBackPlaneDisplayMode a0;
         ::FbxCamera *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_FbxCamera, &sipCpp, sipType_FbxCamera_EFrontBackPlaneDisplayMode, &a0))
        {
            sipCpp->SetViewFrustumBackPlaneMode(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxCamera, sipName_SetViewFrustumBackPlaneMode, doc_FbxCamera_SetViewFrustumBackPlaneMode);

    return NULL;
}


PyDoc_STRVAR(doc_FbxCamera_GetViewFrustumBackPlaneMode, "GetViewFrustumBackPlaneMode(self) -> FbxCamera.EFrontBackPlaneDisplayMode");

extern "C" {static PyObject *meth_FbxCamera_GetViewFrustumBackPlaneMode(PyObject *, PyObject *);}
static PyObject *meth_FbxCamera_GetViewFrustumBackPlaneMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::FbxCamera *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxCamera, &sipCpp))
        {
             ::FbxCamera::EFrontBackPlaneDisplayMode sipRes;

            sipRes = sipCpp->GetViewFrustumBackPlaneMode();

            return sipConvertFromEnum(sipRes,sipType_FbxCamera_EFrontBackPlaneDisplayMode);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxCamera, sipName_GetViewFrustumBackPlaneMode, doc_FbxCamera_GetViewFrustumBackPlaneMode);

    return NULL;
}


PyDoc_STRVAR(doc_FbxCamera_SetViewCameraInterest, "SetViewCameraInterest(self, bool)");

extern "C" {static PyObject *meth_FbxCamera_SetViewCameraInterest(PyObject *, PyObject *);}
static PyObject *meth_FbxCamera_SetViewCameraInterest(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
         ::FbxCamera *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_FbxCamera, &sipCpp, &a0))
        {
            sipCpp->SetViewCameraInterest(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxCamera, sipName_SetViewCameraInterest, doc_FbxCamera_SetViewCameraInterest);

    return NULL;
}


PyDoc_STRVAR(doc_FbxCamera_GetViewCameraInterest, "GetViewCameraInterest(self) -> bool");

extern "C" {static PyObject *meth_FbxCamera_GetViewCameraInterest(PyObject *, PyObject *);}
static PyObject *meth_FbxCamera_GetViewCameraInterest(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::FbxCamera *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxCamera, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->GetViewCameraInterest();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxCamera, sipName_GetViewCameraInterest, doc_FbxCamera_GetViewCameraInterest);

    return NULL;
}


PyDoc_STRVAR(doc_FbxCamera_SetViewNearFarPlanes, "SetViewNearFarPlanes(self, bool)");

extern "C" {static PyObject *meth_FbxCamera_SetViewNearFarPlanes(PyObject *, PyObject *);}
static PyObject *meth_FbxCamera_SetViewNearFarPlanes(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
         ::FbxCamera *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_FbxCamera, &sipCpp, &a0))
        {
            sipCpp->SetViewNearFarPlanes(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxCamera, sipName_SetViewNearFarPlanes, doc_FbxCamera_SetViewNearFarPlanes);

    return NULL;
}


PyDoc_STRVAR(doc_FbxCamera_GetViewNearFarPlanes, "GetViewNearFarPlanes(self) -> bool");

extern "C" {static PyObject *meth_FbxCamera_GetViewNearFarPlanes(PyObject *, PyObject *);}
static PyObject *meth_FbxCamera_GetViewNearFarPlanes(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::FbxCamera *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxCamera, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->GetViewNearFarPlanes();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxCamera, sipName_GetViewNearFarPlanes, doc_FbxCamera_GetViewNearFarPlanes);

    return NULL;
}


PyDoc_STRVAR(doc_FbxCamera_IsBoundingBoxInView, "IsBoundingBoxInView(self, FbxMatrix, FbxMatrix, FbxVector4) -> bool");

extern "C" {static PyObject *meth_FbxCamera_IsBoundingBoxInView(PyObject *, PyObject *);}
static PyObject *meth_FbxCamera_IsBoundingBoxInView(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::FbxMatrix* a0;
        const  ::FbxMatrix* a1;
        const  ::FbxVector4* a2;
        const  ::FbxCamera *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9J9J8", &sipSelf, sipType_FbxCamera, &sipCpp, sipType_FbxMatrix, &a0, sipType_FbxMatrix, &a1, sipType_FbxVector4, &a2))
        {
            bool sipRes;

            sipRes = sipCpp->IsBoundingBoxInView(*a0,*a1,a2);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxCamera, sipName_IsBoundingBoxInView, doc_FbxCamera_IsBoundingBoxInView);

    return NULL;
}


PyDoc_STRVAR(doc_FbxCamera_IsPointInView, "IsPointInView(self, FbxMatrix, FbxMatrix, FbxVector4) -> bool");

extern "C" {static PyObject *meth_FbxCamera_IsPointInView(PyObject *, PyObject *);}
static PyObject *meth_FbxCamera_IsPointInView(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::FbxMatrix* a0;
        const  ::FbxMatrix* a1;
        const  ::FbxVector4* a2;
        const  ::FbxCamera *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9J9J9", &sipSelf, sipType_FbxCamera, &sipCpp, sipType_FbxMatrix, &a0, sipType_FbxMatrix, &a1, sipType_FbxVector4, &a2))
        {
            bool sipRes;

            sipRes = sipCpp->IsPointInView(*a0,*a1,*a2);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxCamera, sipName_IsPointInView, doc_FbxCamera_IsPointInView);

    return NULL;
}


PyDoc_STRVAR(doc_FbxCamera_ComputeWorldToScreen, "ComputeWorldToScreen(self, int, int, FbxAMatrix) -> FbxMatrix");

extern "C" {static PyObject *meth_FbxCamera_ComputeWorldToScreen(PyObject *, PyObject *);}
static PyObject *meth_FbxCamera_ComputeWorldToScreen(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        int a1;
        const  ::FbxAMatrix* a2;
        const  ::FbxCamera *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiiJ9", &sipSelf, sipType_FbxCamera, &sipCpp, &a0, &a1, sipType_FbxAMatrix, &a2))
        {
             ::FbxMatrix*sipRes;

            sipRes = new  ::FbxMatrix(sipCpp->ComputeWorldToScreen(a0,a1,*a2));

            return sipConvertFromNewType(sipRes,sipType_FbxMatrix,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxCamera, sipName_ComputeWorldToScreen, doc_FbxCamera_ComputeWorldToScreen);

    return NULL;
}


extern "C" {static PyObject *slot_FbxCamera___ne__(PyObject *,PyObject *);}
static PyObject *slot_FbxCamera___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::FbxCamera *sipCpp = reinterpret_cast< ::FbxCamera *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_FbxCamera));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const  ::FbxCamera* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_FbxCamera, &a0))
        {
            bool sipRes;

            sipRes = !sipCpp-> ::FbxCamera::operator==(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_fbx, ne_slot, sipType_FbxCamera, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_FbxCamera___eq__(PyObject *,PyObject *);}
static PyObject *slot_FbxCamera___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::FbxCamera *sipCpp = reinterpret_cast< ::FbxCamera *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_FbxCamera));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const  ::FbxCamera* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_FbxCamera, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::FbxCamera::operator==(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_fbx, eq_slot, sipType_FbxCamera, sipSelf, sipArg);
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_FbxCamera(void *, const sipTypeDef *);}
static void *cast_FbxCamera(void *sipCppV, const sipTypeDef *targetType)
{
     ::FbxCamera *sipCpp = reinterpret_cast< ::FbxCamera *>(sipCppV);

    if (targetType == sipType_FbxNodeAttribute)
        return static_cast< ::FbxNodeAttribute *>(sipCpp);

    if (targetType == sipType_FbxObject)
        return static_cast< ::FbxObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_FbxCamera(void *, int);}
static void release_FbxCamera(void *, int)
{
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_FbxCamera[] = {{233, 255, 1}};


/* Define this type's Python slots. */
static sipPySlotDef slots_FbxCamera[] = {
    {(void *)slot_FbxCamera___ne__, ne_slot},
    {(void *)slot_FbxCamera___eq__, eq_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_FbxCamera[] = {
    {SIP_MLNAME_CAST(sipName_ComputeFieldOfView), meth_FbxCamera_ComputeFieldOfView, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxCamera_ComputeFieldOfView)},
    {SIP_MLNAME_CAST(sipName_ComputeFocalLength), meth_FbxCamera_ComputeFocalLength, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxCamera_ComputeFocalLength)},
    {SIP_MLNAME_CAST(sipName_ComputeWorldToScreen), meth_FbxCamera_ComputeWorldToScreen, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxCamera_ComputeWorldToScreen)},
    {SIP_MLNAME_CAST(sipName_Create), meth_FbxCamera_Create, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxCamera_Create)},
    {SIP_MLNAME_CAST(sipName_GetApertureFormat), meth_FbxCamera_GetApertureFormat, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxCamera_GetApertureFormat)},
    {SIP_MLNAME_CAST(sipName_GetApertureHeight), meth_FbxCamera_GetApertureHeight, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxCamera_GetApertureHeight)},
    {SIP_MLNAME_CAST(sipName_GetApertureMode), meth_FbxCamera_GetApertureMode, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxCamera_GetApertureMode)},
    {SIP_MLNAME_CAST(sipName_GetApertureWidth), meth_FbxCamera_GetApertureWidth, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxCamera_GetApertureWidth)},
    {SIP_MLNAME_CAST(sipName_GetAspectRatioMode), meth_FbxCamera_GetAspectRatioMode, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxCamera_GetAspectRatioMode)},
    {SIP_MLNAME_CAST(sipName_GetAttributeType), meth_FbxCamera_GetAttributeType, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxCamera_GetAttributeType)},
    {SIP_MLNAME_CAST(sipName_GetBackPlaneDistanceMode), meth_FbxCamera_GetBackPlaneDistanceMode, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxCamera_GetBackPlaneDistanceMode)},
    {SIP_MLNAME_CAST(sipName_GetBackPlateCenter), meth_FbxCamera_GetBackPlateCenter, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxCamera_GetBackPlateCenter)},
    {SIP_MLNAME_CAST(sipName_GetBackPlateCrop), meth_FbxCamera_GetBackPlateCrop, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxCamera_GetBackPlateCrop)},
    {SIP_MLNAME_CAST(sipName_GetBackPlateFitImage), meth_FbxCamera_GetBackPlateFitImage, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxCamera_GetBackPlateFitImage)},
    {SIP_MLNAME_CAST(sipName_GetBackPlateKeepRatio), meth_FbxCamera_GetBackPlateKeepRatio, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxCamera_GetBackPlateKeepRatio)},
    {SIP_MLNAME_CAST(sipName_GetBackgroundAlphaTreshold), meth_FbxCamera_GetBackgroundAlphaTreshold, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxCamera_GetBackgroundAlphaTreshold)},
    {SIP_MLNAME_CAST(sipName_GetBackgroundFileName), meth_FbxCamera_GetBackgroundFileName, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxCamera_GetBackgroundFileName)},
    {SIP_MLNAME_CAST(sipName_GetBackgroundMediaName), meth_FbxCamera_GetBackgroundMediaName, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxCamera_GetBackgroundMediaName)},
    {SIP_MLNAME_CAST(sipName_GetClassId), meth_FbxCamera_GetClassId, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxCamera_GetClassId)},
    {SIP_MLNAME_CAST(sipName_GetFarPlane), meth_FbxCamera_GetFarPlane, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxCamera_GetFarPlane)},
    {SIP_MLNAME_CAST(sipName_GetForegroundOpacity), meth_FbxCamera_GetForegroundOpacity, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxCamera_GetForegroundOpacity)},
    {SIP_MLNAME_CAST(sipName_GetForegroundTexture), meth_FbxCamera_GetForegroundTexture, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxCamera_GetForegroundTexture)},
    {SIP_MLNAME_CAST(sipName_GetFormat), meth_FbxCamera_GetFormat, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxCamera_GetFormat)},
    {SIP_MLNAME_CAST(sipName_GetFrontPlaneDistance), meth_FbxCamera_GetFrontPlaneDistance, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxCamera_GetFrontPlaneDistance)},
    {SIP_MLNAME_CAST(sipName_GetFrontPlaneDistanceMode), meth_FbxCamera_GetFrontPlaneDistanceMode, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxCamera_GetFrontPlaneDistanceMode)},
    {SIP_MLNAME_CAST(sipName_GetFrontPlateCenter), meth_FbxCamera_GetFrontPlateCenter, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxCamera_GetFrontPlateCenter)},
    {SIP_MLNAME_CAST(sipName_GetFrontPlateCrop), meth_FbxCamera_GetFrontPlateCrop, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxCamera_GetFrontPlateCrop)},
    {SIP_MLNAME_CAST(sipName_GetFrontPlateFitImage), meth_FbxCamera_GetFrontPlateFitImage, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxCamera_GetFrontPlateFitImage)},
    {SIP_MLNAME_CAST(sipName_GetFrontPlateKeepRatio), meth_FbxCamera_GetFrontPlateKeepRatio, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxCamera_GetFrontPlateKeepRatio)},
    {SIP_MLNAME_CAST(sipName_GetNearPlane), meth_FbxCamera_GetNearPlane, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxCamera_GetNearPlane)},
    {SIP_MLNAME_CAST(sipName_GetPixelRatio), meth_FbxCamera_GetPixelRatio, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxCamera_GetPixelRatio)},
    {SIP_MLNAME_CAST(sipName_GetShowFrontPlate), meth_FbxCamera_GetShowFrontPlate, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxCamera_GetShowFrontPlate)},
    {SIP_MLNAME_CAST(sipName_GetSqueezeRatio), meth_FbxCamera_GetSqueezeRatio, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxCamera_GetSqueezeRatio)},
    {SIP_MLNAME_CAST(sipName_GetViewCameraInterest), meth_FbxCamera_GetViewCameraInterest, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxCamera_GetViewCameraInterest)},
    {SIP_MLNAME_CAST(sipName_GetViewFrustumBackPlaneMode), meth_FbxCamera_GetViewFrustumBackPlaneMode, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxCamera_GetViewFrustumBackPlaneMode)},
    {SIP_MLNAME_CAST(sipName_GetViewFrustumFrontPlaneMode), meth_FbxCamera_GetViewFrustumFrontPlaneMode, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxCamera_GetViewFrustumFrontPlaneMode)},
    {SIP_MLNAME_CAST(sipName_GetViewNearFarPlanes), meth_FbxCamera_GetViewNearFarPlanes, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxCamera_GetViewNearFarPlanes)},
    {SIP_MLNAME_CAST(sipName_IsBoundingBoxInView), meth_FbxCamera_IsBoundingBoxInView, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxCamera_IsBoundingBoxInView)},
    {SIP_MLNAME_CAST(sipName_IsPointInView), meth_FbxCamera_IsPointInView, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxCamera_IsPointInView)},
    {SIP_MLNAME_CAST(sipName_Reset), meth_FbxCamera_Reset, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxCamera_Reset)},
    {SIP_MLNAME_CAST(sipName_SetApertureFormat), meth_FbxCamera_SetApertureFormat, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxCamera_SetApertureFormat)},
    {SIP_MLNAME_CAST(sipName_SetApertureHeight), meth_FbxCamera_SetApertureHeight, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxCamera_SetApertureHeight)},
    {SIP_MLNAME_CAST(sipName_SetApertureMode), meth_FbxCamera_SetApertureMode, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxCamera_SetApertureMode)},
    {SIP_MLNAME_CAST(sipName_SetApertureWidth), meth_FbxCamera_SetApertureWidth, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxCamera_SetApertureWidth)},
    {SIP_MLNAME_CAST(sipName_SetAspect), meth_FbxCamera_SetAspect, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxCamera_SetAspect)},
    {SIP_MLNAME_CAST(sipName_SetBackPlaneDistanceMode), meth_FbxCamera_SetBackPlaneDistanceMode, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxCamera_SetBackPlaneDistanceMode)},
    {SIP_MLNAME_CAST(sipName_SetBackPlateCenter), meth_FbxCamera_SetBackPlateCenter, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxCamera_SetBackPlateCenter)},
    {SIP_MLNAME_CAST(sipName_SetBackPlateCrop), meth_FbxCamera_SetBackPlateCrop, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxCamera_SetBackPlateCrop)},
    {SIP_MLNAME_CAST(sipName_SetBackPlateFitImage), meth_FbxCamera_SetBackPlateFitImage, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxCamera_SetBackPlateFitImage)},
    {SIP_MLNAME_CAST(sipName_SetBackPlateKeepRatio), meth_FbxCamera_SetBackPlateKeepRatio, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxCamera_SetBackPlateKeepRatio)},
    {SIP_MLNAME_CAST(sipName_SetBackgroundAlphaTreshold), meth_FbxCamera_SetBackgroundAlphaTreshold, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxCamera_SetBackgroundAlphaTreshold)},
    {SIP_MLNAME_CAST(sipName_SetBackgroundFileName), meth_FbxCamera_SetBackgroundFileName, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxCamera_SetBackgroundFileName)},
    {SIP_MLNAME_CAST(sipName_SetBackgroundMediaName), meth_FbxCamera_SetBackgroundMediaName, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxCamera_SetBackgroundMediaName)},
    {SIP_MLNAME_CAST(sipName_SetFarPlane), meth_FbxCamera_SetFarPlane, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxCamera_SetFarPlane)},
    {SIP_MLNAME_CAST(sipName_SetForegroundOpacity), meth_FbxCamera_SetForegroundOpacity, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxCamera_SetForegroundOpacity)},
    {SIP_MLNAME_CAST(sipName_SetForegroundTexture), meth_FbxCamera_SetForegroundTexture, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxCamera_SetForegroundTexture)},
    {SIP_MLNAME_CAST(sipName_SetFormat), meth_FbxCamera_SetFormat, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxCamera_SetFormat)},
    {SIP_MLNAME_CAST(sipName_SetFrontPlaneDistance), meth_FbxCamera_SetFrontPlaneDistance, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxCamera_SetFrontPlaneDistance)},
    {SIP_MLNAME_CAST(sipName_SetFrontPlaneDistanceMode), meth_FbxCamera_SetFrontPlaneDistanceMode, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxCamera_SetFrontPlaneDistanceMode)},
    {SIP_MLNAME_CAST(sipName_SetFrontPlateCenter), meth_FbxCamera_SetFrontPlateCenter, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxCamera_SetFrontPlateCenter)},
    {SIP_MLNAME_CAST(sipName_SetFrontPlateCrop), meth_FbxCamera_SetFrontPlateCrop, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxCamera_SetFrontPlateCrop)},
    {SIP_MLNAME_CAST(sipName_SetFrontPlateFitImage), meth_FbxCamera_SetFrontPlateFitImage, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxCamera_SetFrontPlateFitImage)},
    {SIP_MLNAME_CAST(sipName_SetFrontPlateKeepRatio), meth_FbxCamera_SetFrontPlateKeepRatio, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxCamera_SetFrontPlateKeepRatio)},
    {SIP_MLNAME_CAST(sipName_SetNearPlane), meth_FbxCamera_SetNearPlane, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxCamera_SetNearPlane)},
    {SIP_MLNAME_CAST(sipName_SetPixelRatio), meth_FbxCamera_SetPixelRatio, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxCamera_SetPixelRatio)},
    {SIP_MLNAME_CAST(sipName_SetShowFrontPlate), meth_FbxCamera_SetShowFrontPlate, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxCamera_SetShowFrontPlate)},
    {SIP_MLNAME_CAST(sipName_SetSqueezeRatio), meth_FbxCamera_SetSqueezeRatio, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxCamera_SetSqueezeRatio)},
    {SIP_MLNAME_CAST(sipName_SetViewCameraInterest), meth_FbxCamera_SetViewCameraInterest, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxCamera_SetViewCameraInterest)},
    {SIP_MLNAME_CAST(sipName_SetViewFrustumBackPlaneMode), meth_FbxCamera_SetViewFrustumBackPlaneMode, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxCamera_SetViewFrustumBackPlaneMode)},
    {SIP_MLNAME_CAST(sipName_SetViewFrustumFrontPlaneMode), meth_FbxCamera_SetViewFrustumFrontPlaneMode, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxCamera_SetViewFrustumFrontPlaneMode)},
    {SIP_MLNAME_CAST(sipName_SetViewNearFarPlanes), meth_FbxCamera_SetViewNearFarPlanes, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxCamera_SetViewNearFarPlanes)}
};

static sipEnumMemberDef enummembers_FbxCamera[] = {
    {sipName_e128x128, static_cast<int>( ::FbxCamera::e128x128), 67},
    {sipName_e16mmTheatrical, static_cast<int>( ::FbxCamera::e16mmTheatrical), 62},
    {sipName_e320x200, static_cast<int>( ::FbxCamera::e320x200), 67},
    {sipName_e320x240, static_cast<int>( ::FbxCamera::e320x240), 67},
    {sipName_e35mm185Projection, static_cast<int>( ::FbxCamera::e35mm185Projection), 62},
    {sipName_e35mmAcademy, static_cast<int>( ::FbxCamera::e35mmAcademy), 62},
    {sipName_e35mmAnamorphic, static_cast<int>( ::FbxCamera::e35mmAnamorphic), 62},
    {sipName_e35mmFullAperture, static_cast<int>( ::FbxCamera::e35mmFullAperture), 62},
    {sipName_e35mmTVProjection, static_cast<int>( ::FbxCamera::e35mmTVProjection), 62},
    {sipName_e640x480, static_cast<int>( ::FbxCamera::e640x480), 67},
    {sipName_e70mmProjection, static_cast<int>( ::FbxCamera::e70mmProjection), 62},
    {sipName_eAAHardware, static_cast<int>( ::FbxCamera::eAAHardware), 61},
    {sipName_eAAOversampling, static_cast<int>( ::FbxCamera::eAAOversampling), 61},
    {sipName_eCustomAperture, static_cast<int>( ::FbxCamera::eCustomAperture), 62},
    {sipName_eCustomFormat, static_cast<int>( ::FbxCamera::eCustomFormat), 67},
    {sipName_eD1NTSC, static_cast<int>( ::FbxCamera::eD1NTSC), 67},
    {sipName_eD1PAL, static_cast<int>( ::FbxCamera::eD1PAL), 67},
    {sipName_eDynaVision, static_cast<int>( ::FbxCamera::eDynaVision), 62},
    {sipName_eFitFill, static_cast<int>( ::FbxCamera::eFitFill), 70},
    {sipName_eFitHorizontal, static_cast<int>( ::FbxCamera::eFitHorizontal), 70},
    {sipName_eFitNone, static_cast<int>( ::FbxCamera::eFitNone), 70},
    {sipName_eFitOverscan, static_cast<int>( ::FbxCamera::eFitOverscan), 70},
    {sipName_eFitStretch, static_cast<int>( ::FbxCamera::eFitStretch), 70},
    {sipName_eFitVertical, static_cast<int>( ::FbxCamera::eFitVertical), 70},
    {sipName_eFixedHeight, static_cast<int>( ::FbxCamera::eFixedHeight), 64},
    {sipName_eFixedRatio, static_cast<int>( ::FbxCamera::eFixedRatio), 64},
    {sipName_eFixedResolution, static_cast<int>( ::FbxCamera::eFixedResolution), 64},
    {sipName_eFixedWidth, static_cast<int>( ::FbxCamera::eFixedWidth), 64},
    {sipName_eFocalLength, static_cast<int>( ::FbxCamera::eFocalLength), 63},
    {sipName_eFocusSpecificDistance, static_cast<int>( ::FbxCamera::eFocusSpecificDistance), 66},
    {sipName_eFocusSrcCameraInterest, static_cast<int>( ::FbxCamera::eFocusSrcCameraInterest), 66},
    {sipName_eFullscreen, static_cast<int>( ::FbxCamera::eFullscreen), 67},
    {sipName_eHD, static_cast<int>( ::FbxCamera::eHD), 67},
    {sipName_eHorizAndVert, static_cast<int>( ::FbxCamera::eHorizAndVert), 63},
    {sipName_eHorizontal, static_cast<int>( ::FbxCamera::eHorizontal), 63},
    {sipName_eIMAX, static_cast<int>( ::FbxCamera::eIMAX), 62},
    {sipName_eInteractive, static_cast<int>( ::FbxCamera::eInteractive), 73},
    {sipName_eNTSC, static_cast<int>( ::FbxCamera::eNTSC), 67},
    {sipName_eOnDemand, static_cast<int>( ::FbxCamera::eOnDemand), 73},
    {sipName_eOrthogonal, static_cast<int>( ::FbxCamera::eOrthogonal), 72},
    {sipName_ePAL, static_cast<int>( ::FbxCamera::ePAL), 67},
    {sipName_ePerspective, static_cast<int>( ::FbxCamera::ePerspective), 72},
    {sipName_ePlanesAlways, static_cast<int>( ::FbxCamera::ePlanesAlways), 68},
    {sipName_ePlanesDisabled, static_cast<int>( ::FbxCamera::ePlanesDisabled), 68},
    {sipName_ePlanesWhenMedia, static_cast<int>( ::FbxCamera::ePlanesWhenMedia), 68},
    {sipName_ePlateBackAndFront, static_cast<int>( ::FbxCamera::ePlateBackAndFront), 71},
    {sipName_ePlateBackground, static_cast<int>( ::FbxCamera::ePlateBackground), 71},
    {sipName_ePlateForeground, static_cast<int>( ::FbxCamera::ePlateForeground), 71},
    {sipName_eRelativeToCamera, static_cast<int>( ::FbxCamera::eRelativeToCamera), 69},
    {sipName_eRelativeToInterest, static_cast<int>( ::FbxCamera::eRelativeToInterest), 69},
    {sipName_eRotateFirst, static_cast<int>( ::FbxCamera::eRotateFirst), 65},
    {sipName_eSafeAreaRound, static_cast<int>( ::FbxCamera::eSafeAreaRound), 74},
    {sipName_eSafeAreaSquare, static_cast<int>( ::FbxCamera::eSafeAreaSquare), 74},
    {sipName_eSamplingStochastic, static_cast<int>( ::FbxCamera::eSamplingStochastic), 75},
    {sipName_eSamplingUniform, static_cast<int>( ::FbxCamera::eSamplingUniform), 75},
    {sipName_eSuper16mm, static_cast<int>( ::FbxCamera::eSuper16mm), 62},
    {sipName_eTranslateFirst, static_cast<int>( ::FbxCamera::eTranslateFirst), 65},
    {sipName_eVertical, static_cast<int>( ::FbxCamera::eVertical), 63},
    {sipName_eVistaVision, static_cast<int>( ::FbxCamera::eVistaVision), 62},
    {sipName_eWindowSize, static_cast<int>( ::FbxCamera::eWindowSize), 64},
};


extern "C" {static PyObject *varget_FbxCamera_AntialiasingIntensity(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxCamera_AntialiasingIntensity(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyDouble1*sipVal;
     ::FbxCamera *sipCpp = reinterpret_cast< ::FbxCamera *>(sipSelf);

    sipVal = &sipCpp->AntialiasingIntensity;

    return sipConvertFromType(sipVal, sipType_FbxPropertyDouble1, NULL);
}


extern "C" {static int varset_FbxCamera_AntialiasingIntensity(void *, PyObject *, PyObject *);}
static int varset_FbxCamera_AntialiasingIntensity(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyDouble1*sipVal;
     ::FbxCamera *sipCpp = reinterpret_cast< ::FbxCamera *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyDouble1 *>(sipForceConvertToType(sipPy,sipType_FbxPropertyDouble1,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->AntialiasingIntensity = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxCamera_AntialiasingMethod(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxCamera_AntialiasingMethod(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyEAntialiasingMethod*sipVal;
     ::FbxCamera *sipCpp = reinterpret_cast< ::FbxCamera *>(sipSelf);

    sipVal = &sipCpp->AntialiasingMethod;

    return sipConvertFromType(sipVal, sipType_FbxPropertyEAntialiasingMethod, NULL);
}


extern "C" {static int varset_FbxCamera_AntialiasingMethod(void *, PyObject *, PyObject *);}
static int varset_FbxCamera_AntialiasingMethod(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyEAntialiasingMethod*sipVal;
     ::FbxCamera *sipCpp = reinterpret_cast< ::FbxCamera *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyEAntialiasingMethod *>(sipForceConvertToType(sipPy,sipType_FbxPropertyEAntialiasingMethod,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->AntialiasingMethod = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxCamera_ApertureMode(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxCamera_ApertureMode(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyEApertureMode*sipVal;
     ::FbxCamera *sipCpp = reinterpret_cast< ::FbxCamera *>(sipSelf);

    sipVal = &sipCpp->ApertureMode;

    return sipConvertFromType(sipVal, sipType_FbxPropertyEApertureMode, NULL);
}


extern "C" {static int varset_FbxCamera_ApertureMode(void *, PyObject *, PyObject *);}
static int varset_FbxCamera_ApertureMode(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyEApertureMode*sipVal;
     ::FbxCamera *sipCpp = reinterpret_cast< ::FbxCamera *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyEApertureMode *>(sipForceConvertToType(sipPy,sipType_FbxPropertyEApertureMode,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->ApertureMode = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxCamera_AspectHeight(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxCamera_AspectHeight(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyDouble1*sipVal;
     ::FbxCamera *sipCpp = reinterpret_cast< ::FbxCamera *>(sipSelf);

    sipVal = &sipCpp->AspectHeight;

    return sipConvertFromType(sipVal, sipType_FbxPropertyDouble1, NULL);
}


extern "C" {static int varset_FbxCamera_AspectHeight(void *, PyObject *, PyObject *);}
static int varset_FbxCamera_AspectHeight(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyDouble1*sipVal;
     ::FbxCamera *sipCpp = reinterpret_cast< ::FbxCamera *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyDouble1 *>(sipForceConvertToType(sipPy,sipType_FbxPropertyDouble1,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->AspectHeight = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxCamera_AspectRatioMode(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxCamera_AspectRatioMode(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyEAspectRatioMode*sipVal;
     ::FbxCamera *sipCpp = reinterpret_cast< ::FbxCamera *>(sipSelf);

    sipVal = &sipCpp->AspectRatioMode;

    return sipConvertFromType(sipVal, sipType_FbxPropertyEAspectRatioMode, NULL);
}


extern "C" {static int varset_FbxCamera_AspectRatioMode(void *, PyObject *, PyObject *);}
static int varset_FbxCamera_AspectRatioMode(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyEAspectRatioMode*sipVal;
     ::FbxCamera *sipCpp = reinterpret_cast< ::FbxCamera *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyEAspectRatioMode *>(sipForceConvertToType(sipPy,sipType_FbxPropertyEAspectRatioMode,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->AspectRatioMode = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxCamera_AspectWidth(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxCamera_AspectWidth(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyDouble1*sipVal;
     ::FbxCamera *sipCpp = reinterpret_cast< ::FbxCamera *>(sipSelf);

    sipVal = &sipCpp->AspectWidth;

    return sipConvertFromType(sipVal, sipType_FbxPropertyDouble1, NULL);
}


extern "C" {static int varset_FbxCamera_AspectWidth(void *, PyObject *, PyObject *);}
static int varset_FbxCamera_AspectWidth(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyDouble1*sipVal;
     ::FbxCamera *sipCpp = reinterpret_cast< ::FbxCamera *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyDouble1 *>(sipForceConvertToType(sipPy,sipType_FbxPropertyDouble1,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->AspectWidth = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxCamera_AudioColor(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxCamera_AudioColor(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyDouble3*sipVal;
     ::FbxCamera *sipCpp = reinterpret_cast< ::FbxCamera *>(sipSelf);

    sipVal = &sipCpp->AudioColor;

    return sipConvertFromType(sipVal, sipType_FbxPropertyDouble3, NULL);
}


extern "C" {static int varset_FbxCamera_AudioColor(void *, PyObject *, PyObject *);}
static int varset_FbxCamera_AudioColor(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyDouble3*sipVal;
     ::FbxCamera *sipCpp = reinterpret_cast< ::FbxCamera *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyDouble3 *>(sipForceConvertToType(sipPy,sipType_FbxPropertyDouble3,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->AudioColor = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxCamera_AutoComputeClipPlanes(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxCamera_AutoComputeClipPlanes(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyBool1*sipVal;
     ::FbxCamera *sipCpp = reinterpret_cast< ::FbxCamera *>(sipSelf);

    sipVal = &sipCpp->AutoComputeClipPlanes;

    return sipConvertFromType(sipVal, sipType_FbxPropertyBool1, NULL);
}


extern "C" {static int varset_FbxCamera_AutoComputeClipPlanes(void *, PyObject *, PyObject *);}
static int varset_FbxCamera_AutoComputeClipPlanes(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyBool1*sipVal;
     ::FbxCamera *sipCpp = reinterpret_cast< ::FbxCamera *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyBool1 *>(sipForceConvertToType(sipPy,sipType_FbxPropertyBool1,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->AutoComputeClipPlanes = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxCamera_BackPlaneDistance(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxCamera_BackPlaneDistance(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyDouble1*sipVal;
     ::FbxCamera *sipCpp = reinterpret_cast< ::FbxCamera *>(sipSelf);

    sipVal = &sipCpp->BackPlaneDistance;

    return sipConvertFromType(sipVal, sipType_FbxPropertyDouble1, NULL);
}


extern "C" {static int varset_FbxCamera_BackPlaneDistance(void *, PyObject *, PyObject *);}
static int varset_FbxCamera_BackPlaneDistance(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyDouble1*sipVal;
     ::FbxCamera *sipCpp = reinterpret_cast< ::FbxCamera *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyDouble1 *>(sipForceConvertToType(sipPy,sipType_FbxPropertyDouble1,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->BackPlaneDistance = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxCamera_BackPlaneDistanceMode(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxCamera_BackPlaneDistanceMode(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyEFrontBackPlaneDistanceMode*sipVal;
     ::FbxCamera *sipCpp = reinterpret_cast< ::FbxCamera *>(sipSelf);

    sipVal = &sipCpp->BackPlaneDistanceMode;

    return sipConvertFromType(sipVal, sipType_FbxPropertyEFrontBackPlaneDistanceMode, NULL);
}


extern "C" {static int varset_FbxCamera_BackPlaneDistanceMode(void *, PyObject *, PyObject *);}
static int varset_FbxCamera_BackPlaneDistanceMode(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyEFrontBackPlaneDistanceMode*sipVal;
     ::FbxCamera *sipCpp = reinterpret_cast< ::FbxCamera *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyEFrontBackPlaneDistanceMode *>(sipForceConvertToType(sipPy,sipType_FbxPropertyEFrontBackPlaneDistanceMode,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->BackPlaneDistanceMode = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxCamera_BackPlaneOffsetX(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxCamera_BackPlaneOffsetX(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyDouble1*sipVal;
     ::FbxCamera *sipCpp = reinterpret_cast< ::FbxCamera *>(sipSelf);

    sipVal = &sipCpp->BackPlaneOffsetX;

    return sipConvertFromType(sipVal, sipType_FbxPropertyDouble1, NULL);
}


extern "C" {static int varset_FbxCamera_BackPlaneOffsetX(void *, PyObject *, PyObject *);}
static int varset_FbxCamera_BackPlaneOffsetX(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyDouble1*sipVal;
     ::FbxCamera *sipCpp = reinterpret_cast< ::FbxCamera *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyDouble1 *>(sipForceConvertToType(sipPy,sipType_FbxPropertyDouble1,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->BackPlaneOffsetX = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxCamera_BackPlaneOffsetY(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxCamera_BackPlaneOffsetY(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyDouble1*sipVal;
     ::FbxCamera *sipCpp = reinterpret_cast< ::FbxCamera *>(sipSelf);

    sipVal = &sipCpp->BackPlaneOffsetY;

    return sipConvertFromType(sipVal, sipType_FbxPropertyDouble1, NULL);
}


extern "C" {static int varset_FbxCamera_BackPlaneOffsetY(void *, PyObject *, PyObject *);}
static int varset_FbxCamera_BackPlaneOffsetY(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyDouble1*sipVal;
     ::FbxCamera *sipCpp = reinterpret_cast< ::FbxCamera *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyDouble1 *>(sipForceConvertToType(sipPy,sipType_FbxPropertyDouble1,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->BackPlaneOffsetY = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxCamera_BackPlaneRotation(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxCamera_BackPlaneRotation(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyDouble1*sipVal;
     ::FbxCamera *sipCpp = reinterpret_cast< ::FbxCamera *>(sipSelf);

    sipVal = &sipCpp->BackPlaneRotation;

    return sipConvertFromType(sipVal, sipType_FbxPropertyDouble1, NULL);
}


extern "C" {static int varset_FbxCamera_BackPlaneRotation(void *, PyObject *, PyObject *);}
static int varset_FbxCamera_BackPlaneRotation(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyDouble1*sipVal;
     ::FbxCamera *sipCpp = reinterpret_cast< ::FbxCamera *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyDouble1 *>(sipForceConvertToType(sipPy,sipType_FbxPropertyDouble1,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->BackPlaneRotation = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxCamera_BackPlaneScaleX(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxCamera_BackPlaneScaleX(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyDouble1*sipVal;
     ::FbxCamera *sipCpp = reinterpret_cast< ::FbxCamera *>(sipSelf);

    sipVal = &sipCpp->BackPlaneScaleX;

    return sipConvertFromType(sipVal, sipType_FbxPropertyDouble1, NULL);
}


extern "C" {static int varset_FbxCamera_BackPlaneScaleX(void *, PyObject *, PyObject *);}
static int varset_FbxCamera_BackPlaneScaleX(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyDouble1*sipVal;
     ::FbxCamera *sipCpp = reinterpret_cast< ::FbxCamera *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyDouble1 *>(sipForceConvertToType(sipPy,sipType_FbxPropertyDouble1,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->BackPlaneScaleX = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxCamera_BackPlaneScaleY(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxCamera_BackPlaneScaleY(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyDouble1*sipVal;
     ::FbxCamera *sipCpp = reinterpret_cast< ::FbxCamera *>(sipSelf);

    sipVal = &sipCpp->BackPlaneScaleY;

    return sipConvertFromType(sipVal, sipType_FbxPropertyDouble1, NULL);
}


extern "C" {static int varset_FbxCamera_BackPlaneScaleY(void *, PyObject *, PyObject *);}
static int varset_FbxCamera_BackPlaneScaleY(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyDouble1*sipVal;
     ::FbxCamera *sipCpp = reinterpret_cast< ::FbxCamera *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyDouble1 *>(sipForceConvertToType(sipPy,sipType_FbxPropertyDouble1,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->BackPlaneScaleY = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxCamera_BackPlateCenter(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxCamera_BackPlateCenter(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyBool1*sipVal;
     ::FbxCamera *sipCpp = reinterpret_cast< ::FbxCamera *>(sipSelf);

    sipVal = &sipCpp->BackPlateCenter;

    return sipConvertFromType(sipVal, sipType_FbxPropertyBool1, NULL);
}


extern "C" {static int varset_FbxCamera_BackPlateCenter(void *, PyObject *, PyObject *);}
static int varset_FbxCamera_BackPlateCenter(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyBool1*sipVal;
     ::FbxCamera *sipCpp = reinterpret_cast< ::FbxCamera *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyBool1 *>(sipForceConvertToType(sipPy,sipType_FbxPropertyBool1,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->BackPlateCenter = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxCamera_BackPlateCrop(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxCamera_BackPlateCrop(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyBool1*sipVal;
     ::FbxCamera *sipCpp = reinterpret_cast< ::FbxCamera *>(sipSelf);

    sipVal = &sipCpp->BackPlateCrop;

    return sipConvertFromType(sipVal, sipType_FbxPropertyBool1, NULL);
}


extern "C" {static int varset_FbxCamera_BackPlateCrop(void *, PyObject *, PyObject *);}
static int varset_FbxCamera_BackPlateCrop(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyBool1*sipVal;
     ::FbxCamera *sipCpp = reinterpret_cast< ::FbxCamera *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyBool1 *>(sipForceConvertToType(sipPy,sipType_FbxPropertyBool1,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->BackPlateCrop = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxCamera_BackPlateFitImage(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxCamera_BackPlateFitImage(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyBool1*sipVal;
     ::FbxCamera *sipCpp = reinterpret_cast< ::FbxCamera *>(sipSelf);

    sipVal = &sipCpp->BackPlateFitImage;

    return sipConvertFromType(sipVal, sipType_FbxPropertyBool1, NULL);
}


extern "C" {static int varset_FbxCamera_BackPlateFitImage(void *, PyObject *, PyObject *);}
static int varset_FbxCamera_BackPlateFitImage(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyBool1*sipVal;
     ::FbxCamera *sipCpp = reinterpret_cast< ::FbxCamera *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyBool1 *>(sipForceConvertToType(sipPy,sipType_FbxPropertyBool1,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->BackPlateFitImage = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxCamera_BackPlateKeepRatio(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxCamera_BackPlateKeepRatio(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyBool1*sipVal;
     ::FbxCamera *sipCpp = reinterpret_cast< ::FbxCamera *>(sipSelf);

    sipVal = &sipCpp->BackPlateKeepRatio;

    return sipConvertFromType(sipVal, sipType_FbxPropertyBool1, NULL);
}


extern "C" {static int varset_FbxCamera_BackPlateKeepRatio(void *, PyObject *, PyObject *);}
static int varset_FbxCamera_BackPlateKeepRatio(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyBool1*sipVal;
     ::FbxCamera *sipCpp = reinterpret_cast< ::FbxCamera *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyBool1 *>(sipForceConvertToType(sipPy,sipType_FbxPropertyBool1,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->BackPlateKeepRatio = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxCamera_BackgroundAlphaTreshold(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxCamera_BackgroundAlphaTreshold(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyDouble1*sipVal;
     ::FbxCamera *sipCpp = reinterpret_cast< ::FbxCamera *>(sipSelf);

    sipVal = &sipCpp->BackgroundAlphaTreshold;

    return sipConvertFromType(sipVal, sipType_FbxPropertyDouble1, NULL);
}


extern "C" {static int varset_FbxCamera_BackgroundAlphaTreshold(void *, PyObject *, PyObject *);}
static int varset_FbxCamera_BackgroundAlphaTreshold(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyDouble1*sipVal;
     ::FbxCamera *sipCpp = reinterpret_cast< ::FbxCamera *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyDouble1 *>(sipForceConvertToType(sipPy,sipType_FbxPropertyDouble1,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->BackgroundAlphaTreshold = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxCamera_BackgroundColor(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxCamera_BackgroundColor(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyDouble3*sipVal;
     ::FbxCamera *sipCpp = reinterpret_cast< ::FbxCamera *>(sipSelf);

    sipVal = &sipCpp->BackgroundColor;

    return sipConvertFromType(sipVal, sipType_FbxPropertyDouble3, NULL);
}


extern "C" {static int varset_FbxCamera_BackgroundColor(void *, PyObject *, PyObject *);}
static int varset_FbxCamera_BackgroundColor(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyDouble3*sipVal;
     ::FbxCamera *sipCpp = reinterpret_cast< ::FbxCamera *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyDouble3 *>(sipForceConvertToType(sipPy,sipType_FbxPropertyDouble3,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->BackgroundColor = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxCamera_BackgroundTexture(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxCamera_BackgroundTexture(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyFbxReference*sipVal;
     ::FbxCamera *sipCpp = reinterpret_cast< ::FbxCamera *>(sipSelf);

    sipVal = &sipCpp->BackgroundTexture;

    return sipConvertFromType(sipVal, sipType_FbxPropertyFbxReference, NULL);
}


extern "C" {static int varset_FbxCamera_BackgroundTexture(void *, PyObject *, PyObject *);}
static int varset_FbxCamera_BackgroundTexture(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyFbxReference*sipVal;
     ::FbxCamera *sipCpp = reinterpret_cast< ::FbxCamera *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyFbxReference *>(sipForceConvertToType(sipPy,sipType_FbxPropertyFbxReference,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->BackgroundTexture = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxCamera_CameraFormat(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxCamera_CameraFormat(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyEFormat*sipVal;
     ::FbxCamera *sipCpp = reinterpret_cast< ::FbxCamera *>(sipSelf);

    sipVal = &sipCpp->CameraFormat;

    return sipConvertFromType(sipVal, sipType_FbxPropertyEFormat, NULL);
}


extern "C" {static int varset_FbxCamera_CameraFormat(void *, PyObject *, PyObject *);}
static int varset_FbxCamera_CameraFormat(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyEFormat*sipVal;
     ::FbxCamera *sipCpp = reinterpret_cast< ::FbxCamera *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyEFormat *>(sipForceConvertToType(sipPy,sipType_FbxPropertyEFormat,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->CameraFormat = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxCamera_ClassId(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxCamera_ClassId(void *, PyObject *, PyObject *)
{
     ::FbxClassId*sipVal;

    sipVal = & ::FbxCamera::ClassId;

    return sipConvertFromType(sipVal, sipType_FbxClassId, NULL);
}


extern "C" {static int varset_FbxCamera_ClassId(void *, PyObject *, PyObject *);}
static int varset_FbxCamera_ClassId(void *, PyObject *sipPy, PyObject *)
{
     ::FbxClassId*sipVal;
    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxClassId *>(sipForceConvertToType(sipPy,sipType_FbxClassId,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

     ::FbxCamera::ClassId = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxCamera_DisplaySafeArea(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxCamera_DisplaySafeArea(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyBool1*sipVal;
     ::FbxCamera *sipCpp = reinterpret_cast< ::FbxCamera *>(sipSelf);

    sipVal = &sipCpp->DisplaySafeArea;

    return sipConvertFromType(sipVal, sipType_FbxPropertyBool1, NULL);
}


extern "C" {static int varset_FbxCamera_DisplaySafeArea(void *, PyObject *, PyObject *);}
static int varset_FbxCamera_DisplaySafeArea(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyBool1*sipVal;
     ::FbxCamera *sipCpp = reinterpret_cast< ::FbxCamera *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyBool1 *>(sipForceConvertToType(sipPy,sipType_FbxPropertyBool1,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->DisplaySafeArea = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxCamera_DisplaySafeAreaOnRender(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxCamera_DisplaySafeAreaOnRender(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyBool1*sipVal;
     ::FbxCamera *sipCpp = reinterpret_cast< ::FbxCamera *>(sipSelf);

    sipVal = &sipCpp->DisplaySafeAreaOnRender;

    return sipConvertFromType(sipVal, sipType_FbxPropertyBool1, NULL);
}


extern "C" {static int varset_FbxCamera_DisplaySafeAreaOnRender(void *, PyObject *, PyObject *);}
static int varset_FbxCamera_DisplaySafeAreaOnRender(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyBool1*sipVal;
     ::FbxCamera *sipCpp = reinterpret_cast< ::FbxCamera *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyBool1 *>(sipForceConvertToType(sipPy,sipType_FbxPropertyBool1,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->DisplaySafeAreaOnRender = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxCamera_DisplayTurnTableIcon(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxCamera_DisplayTurnTableIcon(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyBool1*sipVal;
     ::FbxCamera *sipCpp = reinterpret_cast< ::FbxCamera *>(sipSelf);

    sipVal = &sipCpp->DisplayTurnTableIcon;

    return sipConvertFromType(sipVal, sipType_FbxPropertyBool1, NULL);
}


extern "C" {static int varset_FbxCamera_DisplayTurnTableIcon(void *, PyObject *, PyObject *);}
static int varset_FbxCamera_DisplayTurnTableIcon(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyBool1*sipVal;
     ::FbxCamera *sipCpp = reinterpret_cast< ::FbxCamera *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyBool1 *>(sipForceConvertToType(sipPy,sipType_FbxPropertyBool1,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->DisplayTurnTableIcon = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxCamera_FarPlane(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxCamera_FarPlane(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyDouble1*sipVal;
     ::FbxCamera *sipCpp = reinterpret_cast< ::FbxCamera *>(sipSelf);

    sipVal = &sipCpp->FarPlane;

    return sipConvertFromType(sipVal, sipType_FbxPropertyDouble1, NULL);
}


extern "C" {static int varset_FbxCamera_FarPlane(void *, PyObject *, PyObject *);}
static int varset_FbxCamera_FarPlane(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyDouble1*sipVal;
     ::FbxCamera *sipCpp = reinterpret_cast< ::FbxCamera *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyDouble1 *>(sipForceConvertToType(sipPy,sipType_FbxPropertyDouble1,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->FarPlane = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxCamera_FieldOfView(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxCamera_FieldOfView(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyDouble1*sipVal;
     ::FbxCamera *sipCpp = reinterpret_cast< ::FbxCamera *>(sipSelf);

    sipVal = &sipCpp->FieldOfView;

    return sipConvertFromType(sipVal, sipType_FbxPropertyDouble1, NULL);
}


extern "C" {static int varset_FbxCamera_FieldOfView(void *, PyObject *, PyObject *);}
static int varset_FbxCamera_FieldOfView(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyDouble1*sipVal;
     ::FbxCamera *sipCpp = reinterpret_cast< ::FbxCamera *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyDouble1 *>(sipForceConvertToType(sipPy,sipType_FbxPropertyDouble1,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->FieldOfView = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxCamera_FieldOfViewX(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxCamera_FieldOfViewX(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyDouble1*sipVal;
     ::FbxCamera *sipCpp = reinterpret_cast< ::FbxCamera *>(sipSelf);

    sipVal = &sipCpp->FieldOfViewX;

    return sipConvertFromType(sipVal, sipType_FbxPropertyDouble1, NULL);
}


extern "C" {static int varset_FbxCamera_FieldOfViewX(void *, PyObject *, PyObject *);}
static int varset_FbxCamera_FieldOfViewX(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyDouble1*sipVal;
     ::FbxCamera *sipCpp = reinterpret_cast< ::FbxCamera *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyDouble1 *>(sipForceConvertToType(sipPy,sipType_FbxPropertyDouble1,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->FieldOfViewX = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxCamera_FieldOfViewY(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxCamera_FieldOfViewY(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyDouble1*sipVal;
     ::FbxCamera *sipCpp = reinterpret_cast< ::FbxCamera *>(sipSelf);

    sipVal = &sipCpp->FieldOfViewY;

    return sipConvertFromType(sipVal, sipType_FbxPropertyDouble1, NULL);
}


extern "C" {static int varset_FbxCamera_FieldOfViewY(void *, PyObject *, PyObject *);}
static int varset_FbxCamera_FieldOfViewY(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyDouble1*sipVal;
     ::FbxCamera *sipCpp = reinterpret_cast< ::FbxCamera *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyDouble1 *>(sipForceConvertToType(sipPy,sipType_FbxPropertyDouble1,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->FieldOfViewY = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxCamera_FilmAspectRatio(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxCamera_FilmAspectRatio(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyDouble1*sipVal;
     ::FbxCamera *sipCpp = reinterpret_cast< ::FbxCamera *>(sipSelf);

    sipVal = &sipCpp->FilmAspectRatio;

    return sipConvertFromType(sipVal, sipType_FbxPropertyDouble1, NULL);
}


extern "C" {static int varset_FbxCamera_FilmAspectRatio(void *, PyObject *, PyObject *);}
static int varset_FbxCamera_FilmAspectRatio(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyDouble1*sipVal;
     ::FbxCamera *sipCpp = reinterpret_cast< ::FbxCamera *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyDouble1 *>(sipForceConvertToType(sipPy,sipType_FbxPropertyDouble1,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->FilmAspectRatio = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxCamera_FilmFormat(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxCamera_FilmFormat(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyEApertureFormat*sipVal;
     ::FbxCamera *sipCpp = reinterpret_cast< ::FbxCamera *>(sipSelf);

    sipVal = &sipCpp->FilmFormat;

    return sipConvertFromType(sipVal, sipType_FbxPropertyEApertureFormat, NULL);
}


extern "C" {static int varset_FbxCamera_FilmFormat(void *, PyObject *, PyObject *);}
static int varset_FbxCamera_FilmFormat(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyEApertureFormat*sipVal;
     ::FbxCamera *sipCpp = reinterpret_cast< ::FbxCamera *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyEApertureFormat *>(sipForceConvertToType(sipPy,sipType_FbxPropertyEApertureFormat,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->FilmFormat = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxCamera_FilmHeight(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxCamera_FilmHeight(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyDouble1*sipVal;
     ::FbxCamera *sipCpp = reinterpret_cast< ::FbxCamera *>(sipSelf);

    sipVal = &sipCpp->FilmHeight;

    return sipConvertFromType(sipVal, sipType_FbxPropertyDouble1, NULL);
}


extern "C" {static int varset_FbxCamera_FilmHeight(void *, PyObject *, PyObject *);}
static int varset_FbxCamera_FilmHeight(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyDouble1*sipVal;
     ::FbxCamera *sipCpp = reinterpret_cast< ::FbxCamera *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyDouble1 *>(sipForceConvertToType(sipPy,sipType_FbxPropertyDouble1,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->FilmHeight = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxCamera_FilmOffsetX(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxCamera_FilmOffsetX(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyDouble1*sipVal;
     ::FbxCamera *sipCpp = reinterpret_cast< ::FbxCamera *>(sipSelf);

    sipVal = &sipCpp->FilmOffsetX;

    return sipConvertFromType(sipVal, sipType_FbxPropertyDouble1, NULL);
}


extern "C" {static int varset_FbxCamera_FilmOffsetX(void *, PyObject *, PyObject *);}
static int varset_FbxCamera_FilmOffsetX(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyDouble1*sipVal;
     ::FbxCamera *sipCpp = reinterpret_cast< ::FbxCamera *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyDouble1 *>(sipForceConvertToType(sipPy,sipType_FbxPropertyDouble1,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->FilmOffsetX = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxCamera_FilmOffsetY(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxCamera_FilmOffsetY(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyDouble1*sipVal;
     ::FbxCamera *sipCpp = reinterpret_cast< ::FbxCamera *>(sipSelf);

    sipVal = &sipCpp->FilmOffsetY;

    return sipConvertFromType(sipVal, sipType_FbxPropertyDouble1, NULL);
}


extern "C" {static int varset_FbxCamera_FilmOffsetY(void *, PyObject *, PyObject *);}
static int varset_FbxCamera_FilmOffsetY(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyDouble1*sipVal;
     ::FbxCamera *sipCpp = reinterpret_cast< ::FbxCamera *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyDouble1 *>(sipForceConvertToType(sipPy,sipType_FbxPropertyDouble1,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->FilmOffsetY = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxCamera_FilmRollOrder(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxCamera_FilmRollOrder(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyEFilmRollOrder*sipVal;
     ::FbxCamera *sipCpp = reinterpret_cast< ::FbxCamera *>(sipSelf);

    sipVal = &sipCpp->FilmRollOrder;

    return sipConvertFromType(sipVal, sipType_FbxPropertyEFilmRollOrder, NULL);
}


extern "C" {static int varset_FbxCamera_FilmRollOrder(void *, PyObject *, PyObject *);}
static int varset_FbxCamera_FilmRollOrder(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyEFilmRollOrder*sipVal;
     ::FbxCamera *sipCpp = reinterpret_cast< ::FbxCamera *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyEFilmRollOrder *>(sipForceConvertToType(sipPy,sipType_FbxPropertyEFilmRollOrder,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->FilmRollOrder = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxCamera_FilmRollPivotX(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxCamera_FilmRollPivotX(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyDouble1*sipVal;
     ::FbxCamera *sipCpp = reinterpret_cast< ::FbxCamera *>(sipSelf);

    sipVal = &sipCpp->FilmRollPivotX;

    return sipConvertFromType(sipVal, sipType_FbxPropertyDouble1, NULL);
}


extern "C" {static int varset_FbxCamera_FilmRollPivotX(void *, PyObject *, PyObject *);}
static int varset_FbxCamera_FilmRollPivotX(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyDouble1*sipVal;
     ::FbxCamera *sipCpp = reinterpret_cast< ::FbxCamera *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyDouble1 *>(sipForceConvertToType(sipPy,sipType_FbxPropertyDouble1,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->FilmRollPivotX = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxCamera_FilmRollPivotY(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxCamera_FilmRollPivotY(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyDouble1*sipVal;
     ::FbxCamera *sipCpp = reinterpret_cast< ::FbxCamera *>(sipSelf);

    sipVal = &sipCpp->FilmRollPivotY;

    return sipConvertFromType(sipVal, sipType_FbxPropertyDouble1, NULL);
}


extern "C" {static int varset_FbxCamera_FilmRollPivotY(void *, PyObject *, PyObject *);}
static int varset_FbxCamera_FilmRollPivotY(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyDouble1*sipVal;
     ::FbxCamera *sipCpp = reinterpret_cast< ::FbxCamera *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyDouble1 *>(sipForceConvertToType(sipPy,sipType_FbxPropertyDouble1,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->FilmRollPivotY = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxCamera_FilmRollValue(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxCamera_FilmRollValue(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyDouble1*sipVal;
     ::FbxCamera *sipCpp = reinterpret_cast< ::FbxCamera *>(sipSelf);

    sipVal = &sipCpp->FilmRollValue;

    return sipConvertFromType(sipVal, sipType_FbxPropertyDouble1, NULL);
}


extern "C" {static int varset_FbxCamera_FilmRollValue(void *, PyObject *, PyObject *);}
static int varset_FbxCamera_FilmRollValue(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyDouble1*sipVal;
     ::FbxCamera *sipCpp = reinterpret_cast< ::FbxCamera *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyDouble1 *>(sipForceConvertToType(sipPy,sipType_FbxPropertyDouble1,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->FilmRollValue = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxCamera_FilmSqueezeRatio(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxCamera_FilmSqueezeRatio(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyDouble1*sipVal;
     ::FbxCamera *sipCpp = reinterpret_cast< ::FbxCamera *>(sipSelf);

    sipVal = &sipCpp->FilmSqueezeRatio;

    return sipConvertFromType(sipVal, sipType_FbxPropertyDouble1, NULL);
}


extern "C" {static int varset_FbxCamera_FilmSqueezeRatio(void *, PyObject *, PyObject *);}
static int varset_FbxCamera_FilmSqueezeRatio(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyDouble1*sipVal;
     ::FbxCamera *sipCpp = reinterpret_cast< ::FbxCamera *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyDouble1 *>(sipForceConvertToType(sipPy,sipType_FbxPropertyDouble1,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->FilmSqueezeRatio = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxCamera_FilmTranslateX(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxCamera_FilmTranslateX(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyDouble1*sipVal;
     ::FbxCamera *sipCpp = reinterpret_cast< ::FbxCamera *>(sipSelf);

    sipVal = &sipCpp->FilmTranslateX;

    return sipConvertFromType(sipVal, sipType_FbxPropertyDouble1, NULL);
}


extern "C" {static int varset_FbxCamera_FilmTranslateX(void *, PyObject *, PyObject *);}
static int varset_FbxCamera_FilmTranslateX(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyDouble1*sipVal;
     ::FbxCamera *sipCpp = reinterpret_cast< ::FbxCamera *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyDouble1 *>(sipForceConvertToType(sipPy,sipType_FbxPropertyDouble1,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->FilmTranslateX = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxCamera_FilmTranslateY(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxCamera_FilmTranslateY(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyDouble1*sipVal;
     ::FbxCamera *sipCpp = reinterpret_cast< ::FbxCamera *>(sipSelf);

    sipVal = &sipCpp->FilmTranslateY;

    return sipConvertFromType(sipVal, sipType_FbxPropertyDouble1, NULL);
}


extern "C" {static int varset_FbxCamera_FilmTranslateY(void *, PyObject *, PyObject *);}
static int varset_FbxCamera_FilmTranslateY(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyDouble1*sipVal;
     ::FbxCamera *sipCpp = reinterpret_cast< ::FbxCamera *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyDouble1 *>(sipForceConvertToType(sipPy,sipType_FbxPropertyDouble1,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->FilmTranslateY = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxCamera_FilmWidth(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxCamera_FilmWidth(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyDouble1*sipVal;
     ::FbxCamera *sipCpp = reinterpret_cast< ::FbxCamera *>(sipSelf);

    sipVal = &sipCpp->FilmWidth;

    return sipConvertFromType(sipVal, sipType_FbxPropertyDouble1, NULL);
}


extern "C" {static int varset_FbxCamera_FilmWidth(void *, PyObject *, PyObject *);}
static int varset_FbxCamera_FilmWidth(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyDouble1*sipVal;
     ::FbxCamera *sipCpp = reinterpret_cast< ::FbxCamera *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyDouble1 *>(sipForceConvertToType(sipPy,sipType_FbxPropertyDouble1,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->FilmWidth = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxCamera_FocalLength(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxCamera_FocalLength(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyDouble1*sipVal;
     ::FbxCamera *sipCpp = reinterpret_cast< ::FbxCamera *>(sipSelf);

    sipVal = &sipCpp->FocalLength;

    return sipConvertFromType(sipVal, sipType_FbxPropertyDouble1, NULL);
}


extern "C" {static int varset_FbxCamera_FocalLength(void *, PyObject *, PyObject *);}
static int varset_FbxCamera_FocalLength(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyDouble1*sipVal;
     ::FbxCamera *sipCpp = reinterpret_cast< ::FbxCamera *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyDouble1 *>(sipForceConvertToType(sipPy,sipType_FbxPropertyDouble1,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->FocalLength = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxCamera_FocusAngle(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxCamera_FocusAngle(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyDouble1*sipVal;
     ::FbxCamera *sipCpp = reinterpret_cast< ::FbxCamera *>(sipSelf);

    sipVal = &sipCpp->FocusAngle;

    return sipConvertFromType(sipVal, sipType_FbxPropertyDouble1, NULL);
}


extern "C" {static int varset_FbxCamera_FocusAngle(void *, PyObject *, PyObject *);}
static int varset_FbxCamera_FocusAngle(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyDouble1*sipVal;
     ::FbxCamera *sipCpp = reinterpret_cast< ::FbxCamera *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyDouble1 *>(sipForceConvertToType(sipPy,sipType_FbxPropertyDouble1,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->FocusAngle = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxCamera_FocusDistance(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxCamera_FocusDistance(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyDouble1*sipVal;
     ::FbxCamera *sipCpp = reinterpret_cast< ::FbxCamera *>(sipSelf);

    sipVal = &sipCpp->FocusDistance;

    return sipConvertFromType(sipVal, sipType_FbxPropertyDouble1, NULL);
}


extern "C" {static int varset_FbxCamera_FocusDistance(void *, PyObject *, PyObject *);}
static int varset_FbxCamera_FocusDistance(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyDouble1*sipVal;
     ::FbxCamera *sipCpp = reinterpret_cast< ::FbxCamera *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyDouble1 *>(sipForceConvertToType(sipPy,sipType_FbxPropertyDouble1,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->FocusDistance = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxCamera_FocusSource(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxCamera_FocusSource(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyEFocusDistanceSource*sipVal;
     ::FbxCamera *sipCpp = reinterpret_cast< ::FbxCamera *>(sipSelf);

    sipVal = &sipCpp->FocusSource;

    return sipConvertFromType(sipVal, sipType_FbxPropertyEFocusDistanceSource, NULL);
}


extern "C" {static int varset_FbxCamera_FocusSource(void *, PyObject *, PyObject *);}
static int varset_FbxCamera_FocusSource(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyEFocusDistanceSource*sipVal;
     ::FbxCamera *sipCpp = reinterpret_cast< ::FbxCamera *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyEFocusDistanceSource *>(sipForceConvertToType(sipPy,sipType_FbxPropertyEFocusDistanceSource,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->FocusSource = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxCamera_ForegroundOpacity(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxCamera_ForegroundOpacity(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyDouble1*sipVal;
     ::FbxCamera *sipCpp = reinterpret_cast< ::FbxCamera *>(sipSelf);

    sipVal = &sipCpp->ForegroundOpacity;

    return sipConvertFromType(sipVal, sipType_FbxPropertyDouble1, NULL);
}


extern "C" {static int varset_FbxCamera_ForegroundOpacity(void *, PyObject *, PyObject *);}
static int varset_FbxCamera_ForegroundOpacity(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyDouble1*sipVal;
     ::FbxCamera *sipCpp = reinterpret_cast< ::FbxCamera *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyDouble1 *>(sipForceConvertToType(sipPy,sipType_FbxPropertyDouble1,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->ForegroundOpacity = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxCamera_ForegroundTexture(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxCamera_ForegroundTexture(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyFbxReference*sipVal;
     ::FbxCamera *sipCpp = reinterpret_cast< ::FbxCamera *>(sipSelf);

    sipVal = &sipCpp->ForegroundTexture;

    return sipConvertFromType(sipVal, sipType_FbxPropertyFbxReference, NULL);
}


extern "C" {static int varset_FbxCamera_ForegroundTexture(void *, PyObject *, PyObject *);}
static int varset_FbxCamera_ForegroundTexture(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyFbxReference*sipVal;
     ::FbxCamera *sipCpp = reinterpret_cast< ::FbxCamera *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyFbxReference *>(sipForceConvertToType(sipPy,sipType_FbxPropertyFbxReference,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->ForegroundTexture = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxCamera_FrameColor(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxCamera_FrameColor(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyDouble3*sipVal;
     ::FbxCamera *sipCpp = reinterpret_cast< ::FbxCamera *>(sipSelf);

    sipVal = &sipCpp->FrameColor;

    return sipConvertFromType(sipVal, sipType_FbxPropertyDouble3, NULL);
}


extern "C" {static int varset_FbxCamera_FrameColor(void *, PyObject *, PyObject *);}
static int varset_FbxCamera_FrameColor(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyDouble3*sipVal;
     ::FbxCamera *sipCpp = reinterpret_cast< ::FbxCamera *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyDouble3 *>(sipForceConvertToType(sipPy,sipType_FbxPropertyDouble3,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->FrameColor = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxCamera_FrameSamplingCount(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxCamera_FrameSamplingCount(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyInteger1*sipVal;
     ::FbxCamera *sipCpp = reinterpret_cast< ::FbxCamera *>(sipSelf);

    sipVal = &sipCpp->FrameSamplingCount;

    return sipConvertFromType(sipVal, sipType_FbxPropertyInteger1, NULL);
}


extern "C" {static int varset_FbxCamera_FrameSamplingCount(void *, PyObject *, PyObject *);}
static int varset_FbxCamera_FrameSamplingCount(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyInteger1*sipVal;
     ::FbxCamera *sipCpp = reinterpret_cast< ::FbxCamera *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyInteger1 *>(sipForceConvertToType(sipPy,sipType_FbxPropertyInteger1,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->FrameSamplingCount = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxCamera_FrameSamplingType(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxCamera_FrameSamplingType(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyESamplingType*sipVal;
     ::FbxCamera *sipCpp = reinterpret_cast< ::FbxCamera *>(sipSelf);

    sipVal = &sipCpp->FrameSamplingType;

    return sipConvertFromType(sipVal, sipType_FbxPropertyESamplingType, NULL);
}


extern "C" {static int varset_FbxCamera_FrameSamplingType(void *, PyObject *, PyObject *);}
static int varset_FbxCamera_FrameSamplingType(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyESamplingType*sipVal;
     ::FbxCamera *sipCpp = reinterpret_cast< ::FbxCamera *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyESamplingType *>(sipForceConvertToType(sipPy,sipType_FbxPropertyESamplingType,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->FrameSamplingType = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxCamera_FrontPlaneDistance(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxCamera_FrontPlaneDistance(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyDouble1*sipVal;
     ::FbxCamera *sipCpp = reinterpret_cast< ::FbxCamera *>(sipSelf);

    sipVal = &sipCpp->FrontPlaneDistance;

    return sipConvertFromType(sipVal, sipType_FbxPropertyDouble1, NULL);
}


extern "C" {static int varset_FbxCamera_FrontPlaneDistance(void *, PyObject *, PyObject *);}
static int varset_FbxCamera_FrontPlaneDistance(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyDouble1*sipVal;
     ::FbxCamera *sipCpp = reinterpret_cast< ::FbxCamera *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyDouble1 *>(sipForceConvertToType(sipPy,sipType_FbxPropertyDouble1,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->FrontPlaneDistance = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxCamera_FrontPlaneDistanceMode(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxCamera_FrontPlaneDistanceMode(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyEFrontBackPlaneDistanceMode*sipVal;
     ::FbxCamera *sipCpp = reinterpret_cast< ::FbxCamera *>(sipSelf);

    sipVal = &sipCpp->FrontPlaneDistanceMode;

    return sipConvertFromType(sipVal, sipType_FbxPropertyEFrontBackPlaneDistanceMode, NULL);
}


extern "C" {static int varset_FbxCamera_FrontPlaneDistanceMode(void *, PyObject *, PyObject *);}
static int varset_FbxCamera_FrontPlaneDistanceMode(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyEFrontBackPlaneDistanceMode*sipVal;
     ::FbxCamera *sipCpp = reinterpret_cast< ::FbxCamera *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyEFrontBackPlaneDistanceMode *>(sipForceConvertToType(sipPy,sipType_FbxPropertyEFrontBackPlaneDistanceMode,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->FrontPlaneDistanceMode = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxCamera_FrontPlaneOffsetX(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxCamera_FrontPlaneOffsetX(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyDouble1*sipVal;
     ::FbxCamera *sipCpp = reinterpret_cast< ::FbxCamera *>(sipSelf);

    sipVal = &sipCpp->FrontPlaneOffsetX;

    return sipConvertFromType(sipVal, sipType_FbxPropertyDouble1, NULL);
}


extern "C" {static int varset_FbxCamera_FrontPlaneOffsetX(void *, PyObject *, PyObject *);}
static int varset_FbxCamera_FrontPlaneOffsetX(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyDouble1*sipVal;
     ::FbxCamera *sipCpp = reinterpret_cast< ::FbxCamera *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyDouble1 *>(sipForceConvertToType(sipPy,sipType_FbxPropertyDouble1,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->FrontPlaneOffsetX = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxCamera_FrontPlaneOffsetY(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxCamera_FrontPlaneOffsetY(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyDouble1*sipVal;
     ::FbxCamera *sipCpp = reinterpret_cast< ::FbxCamera *>(sipSelf);

    sipVal = &sipCpp->FrontPlaneOffsetY;

    return sipConvertFromType(sipVal, sipType_FbxPropertyDouble1, NULL);
}


extern "C" {static int varset_FbxCamera_FrontPlaneOffsetY(void *, PyObject *, PyObject *);}
static int varset_FbxCamera_FrontPlaneOffsetY(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyDouble1*sipVal;
     ::FbxCamera *sipCpp = reinterpret_cast< ::FbxCamera *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyDouble1 *>(sipForceConvertToType(sipPy,sipType_FbxPropertyDouble1,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->FrontPlaneOffsetY = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxCamera_FrontPlaneRotation(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxCamera_FrontPlaneRotation(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyDouble1*sipVal;
     ::FbxCamera *sipCpp = reinterpret_cast< ::FbxCamera *>(sipSelf);

    sipVal = &sipCpp->FrontPlaneRotation;

    return sipConvertFromType(sipVal, sipType_FbxPropertyDouble1, NULL);
}


extern "C" {static int varset_FbxCamera_FrontPlaneRotation(void *, PyObject *, PyObject *);}
static int varset_FbxCamera_FrontPlaneRotation(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyDouble1*sipVal;
     ::FbxCamera *sipCpp = reinterpret_cast< ::FbxCamera *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyDouble1 *>(sipForceConvertToType(sipPy,sipType_FbxPropertyDouble1,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->FrontPlaneRotation = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxCamera_FrontPlaneScaleX(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxCamera_FrontPlaneScaleX(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyDouble1*sipVal;
     ::FbxCamera *sipCpp = reinterpret_cast< ::FbxCamera *>(sipSelf);

    sipVal = &sipCpp->FrontPlaneScaleX;

    return sipConvertFromType(sipVal, sipType_FbxPropertyDouble1, NULL);
}


extern "C" {static int varset_FbxCamera_FrontPlaneScaleX(void *, PyObject *, PyObject *);}
static int varset_FbxCamera_FrontPlaneScaleX(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyDouble1*sipVal;
     ::FbxCamera *sipCpp = reinterpret_cast< ::FbxCamera *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyDouble1 *>(sipForceConvertToType(sipPy,sipType_FbxPropertyDouble1,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->FrontPlaneScaleX = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxCamera_FrontPlaneScaleY(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxCamera_FrontPlaneScaleY(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyDouble1*sipVal;
     ::FbxCamera *sipCpp = reinterpret_cast< ::FbxCamera *>(sipSelf);

    sipVal = &sipCpp->FrontPlaneScaleY;

    return sipConvertFromType(sipVal, sipType_FbxPropertyDouble1, NULL);
}


extern "C" {static int varset_FbxCamera_FrontPlaneScaleY(void *, PyObject *, PyObject *);}
static int varset_FbxCamera_FrontPlaneScaleY(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyDouble1*sipVal;
     ::FbxCamera *sipCpp = reinterpret_cast< ::FbxCamera *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyDouble1 *>(sipForceConvertToType(sipPy,sipType_FbxPropertyDouble1,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->FrontPlaneScaleY = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxCamera_FrontPlateCenter(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxCamera_FrontPlateCenter(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyBool1*sipVal;
     ::FbxCamera *sipCpp = reinterpret_cast< ::FbxCamera *>(sipSelf);

    sipVal = &sipCpp->FrontPlateCenter;

    return sipConvertFromType(sipVal, sipType_FbxPropertyBool1, NULL);
}


extern "C" {static int varset_FbxCamera_FrontPlateCenter(void *, PyObject *, PyObject *);}
static int varset_FbxCamera_FrontPlateCenter(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyBool1*sipVal;
     ::FbxCamera *sipCpp = reinterpret_cast< ::FbxCamera *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyBool1 *>(sipForceConvertToType(sipPy,sipType_FbxPropertyBool1,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->FrontPlateCenter = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxCamera_FrontPlateCrop(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxCamera_FrontPlateCrop(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyBool1*sipVal;
     ::FbxCamera *sipCpp = reinterpret_cast< ::FbxCamera *>(sipSelf);

    sipVal = &sipCpp->FrontPlateCrop;

    return sipConvertFromType(sipVal, sipType_FbxPropertyBool1, NULL);
}


extern "C" {static int varset_FbxCamera_FrontPlateCrop(void *, PyObject *, PyObject *);}
static int varset_FbxCamera_FrontPlateCrop(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyBool1*sipVal;
     ::FbxCamera *sipCpp = reinterpret_cast< ::FbxCamera *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyBool1 *>(sipForceConvertToType(sipPy,sipType_FbxPropertyBool1,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->FrontPlateCrop = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxCamera_FrontPlateFitImage(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxCamera_FrontPlateFitImage(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyBool1*sipVal;
     ::FbxCamera *sipCpp = reinterpret_cast< ::FbxCamera *>(sipSelf);

    sipVal = &sipCpp->FrontPlateFitImage;

    return sipConvertFromType(sipVal, sipType_FbxPropertyBool1, NULL);
}


extern "C" {static int varset_FbxCamera_FrontPlateFitImage(void *, PyObject *, PyObject *);}
static int varset_FbxCamera_FrontPlateFitImage(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyBool1*sipVal;
     ::FbxCamera *sipCpp = reinterpret_cast< ::FbxCamera *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyBool1 *>(sipForceConvertToType(sipPy,sipType_FbxPropertyBool1,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->FrontPlateFitImage = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxCamera_FrontPlateKeepRatio(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxCamera_FrontPlateKeepRatio(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyBool1*sipVal;
     ::FbxCamera *sipCpp = reinterpret_cast< ::FbxCamera *>(sipSelf);

    sipVal = &sipCpp->FrontPlateKeepRatio;

    return sipConvertFromType(sipVal, sipType_FbxPropertyBool1, NULL);
}


extern "C" {static int varset_FbxCamera_FrontPlateKeepRatio(void *, PyObject *, PyObject *);}
static int varset_FbxCamera_FrontPlateKeepRatio(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyBool1*sipVal;
     ::FbxCamera *sipCpp = reinterpret_cast< ::FbxCamera *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyBool1 *>(sipForceConvertToType(sipPy,sipType_FbxPropertyBool1,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->FrontPlateKeepRatio = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxCamera_GateFit(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxCamera_GateFit(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyEGateFit*sipVal;
     ::FbxCamera *sipCpp = reinterpret_cast< ::FbxCamera *>(sipSelf);

    sipVal = &sipCpp->GateFit;

    return sipConvertFromType(sipVal, sipType_FbxPropertyEGateFit, NULL);
}


extern "C" {static int varset_FbxCamera_GateFit(void *, PyObject *, PyObject *);}
static int varset_FbxCamera_GateFit(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyEGateFit*sipVal;
     ::FbxCamera *sipCpp = reinterpret_cast< ::FbxCamera *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyEGateFit *>(sipForceConvertToType(sipPy,sipType_FbxPropertyEGateFit,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->GateFit = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxCamera_InterestPosition(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxCamera_InterestPosition(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyDouble3*sipVal;
     ::FbxCamera *sipCpp = reinterpret_cast< ::FbxCamera *>(sipSelf);

    sipVal = &sipCpp->InterestPosition;

    return sipConvertFromType(sipVal, sipType_FbxPropertyDouble3, NULL);
}


extern "C" {static int varset_FbxCamera_InterestPosition(void *, PyObject *, PyObject *);}
static int varset_FbxCamera_InterestPosition(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyDouble3*sipVal;
     ::FbxCamera *sipCpp = reinterpret_cast< ::FbxCamera *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyDouble3 *>(sipForceConvertToType(sipPy,sipType_FbxPropertyDouble3,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->InterestPosition = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxCamera_LockInterestNavigation(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxCamera_LockInterestNavigation(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyBool1*sipVal;
     ::FbxCamera *sipCpp = reinterpret_cast< ::FbxCamera *>(sipSelf);

    sipVal = &sipCpp->LockInterestNavigation;

    return sipConvertFromType(sipVal, sipType_FbxPropertyBool1, NULL);
}


extern "C" {static int varset_FbxCamera_LockInterestNavigation(void *, PyObject *, PyObject *);}
static int varset_FbxCamera_LockInterestNavigation(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyBool1*sipVal;
     ::FbxCamera *sipCpp = reinterpret_cast< ::FbxCamera *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyBool1 *>(sipForceConvertToType(sipPy,sipType_FbxPropertyBool1,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->LockInterestNavigation = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxCamera_LockMode(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxCamera_LockMode(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyBool1*sipVal;
     ::FbxCamera *sipCpp = reinterpret_cast< ::FbxCamera *>(sipSelf);

    sipVal = &sipCpp->LockMode;

    return sipConvertFromType(sipVal, sipType_FbxPropertyBool1, NULL);
}


extern "C" {static int varset_FbxCamera_LockMode(void *, PyObject *, PyObject *);}
static int varset_FbxCamera_LockMode(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyBool1*sipVal;
     ::FbxCamera *sipCpp = reinterpret_cast< ::FbxCamera *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyBool1 *>(sipForceConvertToType(sipPy,sipType_FbxPropertyBool1,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->LockMode = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxCamera_MotionBlurIntensity(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxCamera_MotionBlurIntensity(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyDouble1*sipVal;
     ::FbxCamera *sipCpp = reinterpret_cast< ::FbxCamera *>(sipSelf);

    sipVal = &sipCpp->MotionBlurIntensity;

    return sipConvertFromType(sipVal, sipType_FbxPropertyDouble1, NULL);
}


extern "C" {static int varset_FbxCamera_MotionBlurIntensity(void *, PyObject *, PyObject *);}
static int varset_FbxCamera_MotionBlurIntensity(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyDouble1*sipVal;
     ::FbxCamera *sipCpp = reinterpret_cast< ::FbxCamera *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyDouble1 *>(sipForceConvertToType(sipPy,sipType_FbxPropertyDouble1,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->MotionBlurIntensity = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxCamera_NearPlane(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxCamera_NearPlane(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyDouble1*sipVal;
     ::FbxCamera *sipCpp = reinterpret_cast< ::FbxCamera *>(sipSelf);

    sipVal = &sipCpp->NearPlane;

    return sipConvertFromType(sipVal, sipType_FbxPropertyDouble1, NULL);
}


extern "C" {static int varset_FbxCamera_NearPlane(void *, PyObject *, PyObject *);}
static int varset_FbxCamera_NearPlane(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyDouble1*sipVal;
     ::FbxCamera *sipCpp = reinterpret_cast< ::FbxCamera *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyDouble1 *>(sipForceConvertToType(sipPy,sipType_FbxPropertyDouble1,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->NearPlane = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxCamera_OpticalCenterX(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxCamera_OpticalCenterX(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyDouble1*sipVal;
     ::FbxCamera *sipCpp = reinterpret_cast< ::FbxCamera *>(sipSelf);

    sipVal = &sipCpp->OpticalCenterX;

    return sipConvertFromType(sipVal, sipType_FbxPropertyDouble1, NULL);
}


extern "C" {static int varset_FbxCamera_OpticalCenterX(void *, PyObject *, PyObject *);}
static int varset_FbxCamera_OpticalCenterX(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyDouble1*sipVal;
     ::FbxCamera *sipCpp = reinterpret_cast< ::FbxCamera *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyDouble1 *>(sipForceConvertToType(sipPy,sipType_FbxPropertyDouble1,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->OpticalCenterX = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxCamera_OpticalCenterY(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxCamera_OpticalCenterY(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyDouble1*sipVal;
     ::FbxCamera *sipCpp = reinterpret_cast< ::FbxCamera *>(sipSelf);

    sipVal = &sipCpp->OpticalCenterY;

    return sipConvertFromType(sipVal, sipType_FbxPropertyDouble1, NULL);
}


extern "C" {static int varset_FbxCamera_OpticalCenterY(void *, PyObject *, PyObject *);}
static int varset_FbxCamera_OpticalCenterY(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyDouble1*sipVal;
     ::FbxCamera *sipCpp = reinterpret_cast< ::FbxCamera *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyDouble1 *>(sipForceConvertToType(sipPy,sipType_FbxPropertyDouble1,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->OpticalCenterY = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxCamera_OrthoZoom(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxCamera_OrthoZoom(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyDouble1*sipVal;
     ::FbxCamera *sipCpp = reinterpret_cast< ::FbxCamera *>(sipSelf);

    sipVal = &sipCpp->OrthoZoom;

    return sipConvertFromType(sipVal, sipType_FbxPropertyDouble1, NULL);
}


extern "C" {static int varset_FbxCamera_OrthoZoom(void *, PyObject *, PyObject *);}
static int varset_FbxCamera_OrthoZoom(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyDouble1*sipVal;
     ::FbxCamera *sipCpp = reinterpret_cast< ::FbxCamera *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyDouble1 *>(sipForceConvertToType(sipPy,sipType_FbxPropertyDouble1,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->OrthoZoom = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxCamera_PixelAspectRatio(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxCamera_PixelAspectRatio(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyDouble1*sipVal;
     ::FbxCamera *sipCpp = reinterpret_cast< ::FbxCamera *>(sipSelf);

    sipVal = &sipCpp->PixelAspectRatio;

    return sipConvertFromType(sipVal, sipType_FbxPropertyDouble1, NULL);
}


extern "C" {static int varset_FbxCamera_PixelAspectRatio(void *, PyObject *, PyObject *);}
static int varset_FbxCamera_PixelAspectRatio(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyDouble1*sipVal;
     ::FbxCamera *sipCpp = reinterpret_cast< ::FbxCamera *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyDouble1 *>(sipForceConvertToType(sipPy,sipType_FbxPropertyDouble1,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->PixelAspectRatio = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxCamera_Position(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxCamera_Position(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyDouble3*sipVal;
     ::FbxCamera *sipCpp = reinterpret_cast< ::FbxCamera *>(sipSelf);

    sipVal = &sipCpp->Position;

    return sipConvertFromType(sipVal, sipType_FbxPropertyDouble3, NULL);
}


extern "C" {static int varset_FbxCamera_Position(void *, PyObject *, PyObject *);}
static int varset_FbxCamera_Position(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyDouble3*sipVal;
     ::FbxCamera *sipCpp = reinterpret_cast< ::FbxCamera *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyDouble3 *>(sipForceConvertToType(sipPy,sipType_FbxPropertyDouble3,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->Position = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxCamera_PreScale(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxCamera_PreScale(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyDouble1*sipVal;
     ::FbxCamera *sipCpp = reinterpret_cast< ::FbxCamera *>(sipSelf);

    sipVal = &sipCpp->PreScale;

    return sipConvertFromType(sipVal, sipType_FbxPropertyDouble1, NULL);
}


extern "C" {static int varset_FbxCamera_PreScale(void *, PyObject *, PyObject *);}
static int varset_FbxCamera_PreScale(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyDouble1*sipVal;
     ::FbxCamera *sipCpp = reinterpret_cast< ::FbxCamera *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyDouble1 *>(sipForceConvertToType(sipPy,sipType_FbxPropertyDouble1,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->PreScale = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxCamera_ProjectionType(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxCamera_ProjectionType(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyEProjectionType*sipVal;
     ::FbxCamera *sipCpp = reinterpret_cast< ::FbxCamera *>(sipSelf);

    sipVal = &sipCpp->ProjectionType;

    return sipConvertFromType(sipVal, sipType_FbxPropertyEProjectionType, NULL);
}


extern "C" {static int varset_FbxCamera_ProjectionType(void *, PyObject *, PyObject *);}
static int varset_FbxCamera_ProjectionType(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyEProjectionType*sipVal;
     ::FbxCamera *sipCpp = reinterpret_cast< ::FbxCamera *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyEProjectionType *>(sipForceConvertToType(sipPy,sipType_FbxPropertyEProjectionType,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->ProjectionType = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxCamera_Roll(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxCamera_Roll(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyDouble1*sipVal;
     ::FbxCamera *sipCpp = reinterpret_cast< ::FbxCamera *>(sipSelf);

    sipVal = &sipCpp->Roll;

    return sipConvertFromType(sipVal, sipType_FbxPropertyDouble1, NULL);
}


extern "C" {static int varset_FbxCamera_Roll(void *, PyObject *, PyObject *);}
static int varset_FbxCamera_Roll(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyDouble1*sipVal;
     ::FbxCamera *sipCpp = reinterpret_cast< ::FbxCamera *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyDouble1 *>(sipForceConvertToType(sipPy,sipType_FbxPropertyDouble1,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->Roll = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxCamera_SafeAreaAspectRatio(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxCamera_SafeAreaAspectRatio(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyDouble1*sipVal;
     ::FbxCamera *sipCpp = reinterpret_cast< ::FbxCamera *>(sipSelf);

    sipVal = &sipCpp->SafeAreaAspectRatio;

    return sipConvertFromType(sipVal, sipType_FbxPropertyDouble1, NULL);
}


extern "C" {static int varset_FbxCamera_SafeAreaAspectRatio(void *, PyObject *, PyObject *);}
static int varset_FbxCamera_SafeAreaAspectRatio(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyDouble1*sipVal;
     ::FbxCamera *sipCpp = reinterpret_cast< ::FbxCamera *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyDouble1 *>(sipForceConvertToType(sipPy,sipType_FbxPropertyDouble1,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->SafeAreaAspectRatio = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxCamera_SafeAreaDisplayStyle(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxCamera_SafeAreaDisplayStyle(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyESafeAreaStyle*sipVal;
     ::FbxCamera *sipCpp = reinterpret_cast< ::FbxCamera *>(sipSelf);

    sipVal = &sipCpp->SafeAreaDisplayStyle;

    return sipConvertFromType(sipVal, sipType_FbxPropertyESafeAreaStyle, NULL);
}


extern "C" {static int varset_FbxCamera_SafeAreaDisplayStyle(void *, PyObject *, PyObject *);}
static int varset_FbxCamera_SafeAreaDisplayStyle(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyESafeAreaStyle*sipVal;
     ::FbxCamera *sipCpp = reinterpret_cast< ::FbxCamera *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyESafeAreaStyle *>(sipForceConvertToType(sipPy,sipType_FbxPropertyESafeAreaStyle,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->SafeAreaDisplayStyle = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxCamera_ShowAudio(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxCamera_ShowAudio(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyBool1*sipVal;
     ::FbxCamera *sipCpp = reinterpret_cast< ::FbxCamera *>(sipSelf);

    sipVal = &sipCpp->ShowAudio;

    return sipConvertFromType(sipVal, sipType_FbxPropertyBool1, NULL);
}


extern "C" {static int varset_FbxCamera_ShowAudio(void *, PyObject *, PyObject *);}
static int varset_FbxCamera_ShowAudio(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyBool1*sipVal;
     ::FbxCamera *sipCpp = reinterpret_cast< ::FbxCamera *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyBool1 *>(sipForceConvertToType(sipPy,sipType_FbxPropertyBool1,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->ShowAudio = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxCamera_ShowAzimut(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxCamera_ShowAzimut(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyBool1*sipVal;
     ::FbxCamera *sipCpp = reinterpret_cast< ::FbxCamera *>(sipSelf);

    sipVal = &sipCpp->ShowAzimut;

    return sipConvertFromType(sipVal, sipType_FbxPropertyBool1, NULL);
}


extern "C" {static int varset_FbxCamera_ShowAzimut(void *, PyObject *, PyObject *);}
static int varset_FbxCamera_ShowAzimut(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyBool1*sipVal;
     ::FbxCamera *sipCpp = reinterpret_cast< ::FbxCamera *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyBool1 *>(sipForceConvertToType(sipPy,sipType_FbxPropertyBool1,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->ShowAzimut = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxCamera_ShowBackplate(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxCamera_ShowBackplate(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyBool1*sipVal;
     ::FbxCamera *sipCpp = reinterpret_cast< ::FbxCamera *>(sipSelf);

    sipVal = &sipCpp->ShowBackplate;

    return sipConvertFromType(sipVal, sipType_FbxPropertyBool1, NULL);
}


extern "C" {static int varset_FbxCamera_ShowBackplate(void *, PyObject *, PyObject *);}
static int varset_FbxCamera_ShowBackplate(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyBool1*sipVal;
     ::FbxCamera *sipCpp = reinterpret_cast< ::FbxCamera *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyBool1 *>(sipForceConvertToType(sipPy,sipType_FbxPropertyBool1,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->ShowBackplate = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxCamera_ShowFrontplate(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxCamera_ShowFrontplate(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyBool1*sipVal;
     ::FbxCamera *sipCpp = reinterpret_cast< ::FbxCamera *>(sipSelf);

    sipVal = &sipCpp->ShowFrontplate;

    return sipConvertFromType(sipVal, sipType_FbxPropertyBool1, NULL);
}


extern "C" {static int varset_FbxCamera_ShowFrontplate(void *, PyObject *, PyObject *);}
static int varset_FbxCamera_ShowFrontplate(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyBool1*sipVal;
     ::FbxCamera *sipCpp = reinterpret_cast< ::FbxCamera *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyBool1 *>(sipForceConvertToType(sipPy,sipType_FbxPropertyBool1,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->ShowFrontplate = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxCamera_ShowGrid(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxCamera_ShowGrid(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyBool1*sipVal;
     ::FbxCamera *sipCpp = reinterpret_cast< ::FbxCamera *>(sipSelf);

    sipVal = &sipCpp->ShowGrid;

    return sipConvertFromType(sipVal, sipType_FbxPropertyBool1, NULL);
}


extern "C" {static int varset_FbxCamera_ShowGrid(void *, PyObject *, PyObject *);}
static int varset_FbxCamera_ShowGrid(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyBool1*sipVal;
     ::FbxCamera *sipCpp = reinterpret_cast< ::FbxCamera *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyBool1 *>(sipForceConvertToType(sipPy,sipType_FbxPropertyBool1,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->ShowGrid = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxCamera_ShowInfoOnMoving(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxCamera_ShowInfoOnMoving(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyBool1*sipVal;
     ::FbxCamera *sipCpp = reinterpret_cast< ::FbxCamera *>(sipSelf);

    sipVal = &sipCpp->ShowInfoOnMoving;

    return sipConvertFromType(sipVal, sipType_FbxPropertyBool1, NULL);
}


extern "C" {static int varset_FbxCamera_ShowInfoOnMoving(void *, PyObject *, PyObject *);}
static int varset_FbxCamera_ShowInfoOnMoving(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyBool1*sipVal;
     ::FbxCamera *sipCpp = reinterpret_cast< ::FbxCamera *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyBool1 *>(sipForceConvertToType(sipPy,sipType_FbxPropertyBool1,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->ShowInfoOnMoving = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxCamera_ShowName(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxCamera_ShowName(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyBool1*sipVal;
     ::FbxCamera *sipCpp = reinterpret_cast< ::FbxCamera *>(sipSelf);

    sipVal = &sipCpp->ShowName;

    return sipConvertFromType(sipVal, sipType_FbxPropertyBool1, NULL);
}


extern "C" {static int varset_FbxCamera_ShowName(void *, PyObject *, PyObject *);}
static int varset_FbxCamera_ShowName(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyBool1*sipVal;
     ::FbxCamera *sipCpp = reinterpret_cast< ::FbxCamera *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyBool1 *>(sipForceConvertToType(sipPy,sipType_FbxPropertyBool1,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->ShowName = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxCamera_ShowOpticalCenter(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxCamera_ShowOpticalCenter(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyBool1*sipVal;
     ::FbxCamera *sipCpp = reinterpret_cast< ::FbxCamera *>(sipSelf);

    sipVal = &sipCpp->ShowOpticalCenter;

    return sipConvertFromType(sipVal, sipType_FbxPropertyBool1, NULL);
}


extern "C" {static int varset_FbxCamera_ShowOpticalCenter(void *, PyObject *, PyObject *);}
static int varset_FbxCamera_ShowOpticalCenter(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyBool1*sipVal;
     ::FbxCamera *sipCpp = reinterpret_cast< ::FbxCamera *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyBool1 *>(sipForceConvertToType(sipPy,sipType_FbxPropertyBool1,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->ShowOpticalCenter = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxCamera_ShowTimeCode(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxCamera_ShowTimeCode(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyBool1*sipVal;
     ::FbxCamera *sipCpp = reinterpret_cast< ::FbxCamera *>(sipSelf);

    sipVal = &sipCpp->ShowTimeCode;

    return sipConvertFromType(sipVal, sipType_FbxPropertyBool1, NULL);
}


extern "C" {static int varset_FbxCamera_ShowTimeCode(void *, PyObject *, PyObject *);}
static int varset_FbxCamera_ShowTimeCode(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyBool1*sipVal;
     ::FbxCamera *sipCpp = reinterpret_cast< ::FbxCamera *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyBool1 *>(sipForceConvertToType(sipPy,sipType_FbxPropertyBool1,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->ShowTimeCode = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxCamera_TurnTable(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxCamera_TurnTable(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyDouble1*sipVal;
     ::FbxCamera *sipCpp = reinterpret_cast< ::FbxCamera *>(sipSelf);

    sipVal = &sipCpp->TurnTable;

    return sipConvertFromType(sipVal, sipType_FbxPropertyDouble1, NULL);
}


extern "C" {static int varset_FbxCamera_TurnTable(void *, PyObject *, PyObject *);}
static int varset_FbxCamera_TurnTable(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyDouble1*sipVal;
     ::FbxCamera *sipCpp = reinterpret_cast< ::FbxCamera *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyDouble1 *>(sipForceConvertToType(sipPy,sipType_FbxPropertyDouble1,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->TurnTable = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxCamera_UpVector(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxCamera_UpVector(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyDouble3*sipVal;
     ::FbxCamera *sipCpp = reinterpret_cast< ::FbxCamera *>(sipSelf);

    sipVal = &sipCpp->UpVector;

    return sipConvertFromType(sipVal, sipType_FbxPropertyDouble3, NULL);
}


extern "C" {static int varset_FbxCamera_UpVector(void *, PyObject *, PyObject *);}
static int varset_FbxCamera_UpVector(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyDouble3*sipVal;
     ::FbxCamera *sipCpp = reinterpret_cast< ::FbxCamera *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyDouble3 *>(sipForceConvertToType(sipPy,sipType_FbxPropertyDouble3,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->UpVector = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxCamera_Use2DMagnifierZoom(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxCamera_Use2DMagnifierZoom(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyBool1*sipVal;
     ::FbxCamera *sipCpp = reinterpret_cast< ::FbxCamera *>(sipSelf);

    sipVal = &sipCpp->Use2DMagnifierZoom;

    return sipConvertFromType(sipVal, sipType_FbxPropertyBool1, NULL);
}


extern "C" {static int varset_FbxCamera_Use2DMagnifierZoom(void *, PyObject *, PyObject *);}
static int varset_FbxCamera_Use2DMagnifierZoom(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyBool1*sipVal;
     ::FbxCamera *sipCpp = reinterpret_cast< ::FbxCamera *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyBool1 *>(sipForceConvertToType(sipPy,sipType_FbxPropertyBool1,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->Use2DMagnifierZoom = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxCamera_UseAccumulationBuffer(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxCamera_UseAccumulationBuffer(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyBool1*sipVal;
     ::FbxCamera *sipCpp = reinterpret_cast< ::FbxCamera *>(sipSelf);

    sipVal = &sipCpp->UseAccumulationBuffer;

    return sipConvertFromType(sipVal, sipType_FbxPropertyBool1, NULL);
}


extern "C" {static int varset_FbxCamera_UseAccumulationBuffer(void *, PyObject *, PyObject *);}
static int varset_FbxCamera_UseAccumulationBuffer(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyBool1*sipVal;
     ::FbxCamera *sipCpp = reinterpret_cast< ::FbxCamera *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyBool1 *>(sipForceConvertToType(sipPy,sipType_FbxPropertyBool1,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->UseAccumulationBuffer = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxCamera_UseAntialiasing(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxCamera_UseAntialiasing(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyBool1*sipVal;
     ::FbxCamera *sipCpp = reinterpret_cast< ::FbxCamera *>(sipSelf);

    sipVal = &sipCpp->UseAntialiasing;

    return sipConvertFromType(sipVal, sipType_FbxPropertyBool1, NULL);
}


extern "C" {static int varset_FbxCamera_UseAntialiasing(void *, PyObject *, PyObject *);}
static int varset_FbxCamera_UseAntialiasing(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyBool1*sipVal;
     ::FbxCamera *sipCpp = reinterpret_cast< ::FbxCamera *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyBool1 *>(sipForceConvertToType(sipPy,sipType_FbxPropertyBool1,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->UseAntialiasing = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxCamera_UseDepthOfField(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxCamera_UseDepthOfField(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyBool1*sipVal;
     ::FbxCamera *sipCpp = reinterpret_cast< ::FbxCamera *>(sipSelf);

    sipVal = &sipCpp->UseDepthOfField;

    return sipConvertFromType(sipVal, sipType_FbxPropertyBool1, NULL);
}


extern "C" {static int varset_FbxCamera_UseDepthOfField(void *, PyObject *, PyObject *);}
static int varset_FbxCamera_UseDepthOfField(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyBool1*sipVal;
     ::FbxCamera *sipCpp = reinterpret_cast< ::FbxCamera *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyBool1 *>(sipForceConvertToType(sipPy,sipType_FbxPropertyBool1,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->UseDepthOfField = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxCamera_UseFrameColor(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxCamera_UseFrameColor(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyBool1*sipVal;
     ::FbxCamera *sipCpp = reinterpret_cast< ::FbxCamera *>(sipSelf);

    sipVal = &sipCpp->UseFrameColor;

    return sipConvertFromType(sipVal, sipType_FbxPropertyBool1, NULL);
}


extern "C" {static int varset_FbxCamera_UseFrameColor(void *, PyObject *, PyObject *);}
static int varset_FbxCamera_UseFrameColor(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyBool1*sipVal;
     ::FbxCamera *sipCpp = reinterpret_cast< ::FbxCamera *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyBool1 *>(sipForceConvertToType(sipPy,sipType_FbxPropertyBool1,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->UseFrameColor = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxCamera_UseMotionBlur(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxCamera_UseMotionBlur(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyBool1*sipVal;
     ::FbxCamera *sipCpp = reinterpret_cast< ::FbxCamera *>(sipSelf);

    sipVal = &sipCpp->UseMotionBlur;

    return sipConvertFromType(sipVal, sipType_FbxPropertyBool1, NULL);
}


extern "C" {static int varset_FbxCamera_UseMotionBlur(void *, PyObject *, PyObject *);}
static int varset_FbxCamera_UseMotionBlur(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyBool1*sipVal;
     ::FbxCamera *sipCpp = reinterpret_cast< ::FbxCamera *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyBool1 *>(sipForceConvertToType(sipPy,sipType_FbxPropertyBool1,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->UseMotionBlur = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxCamera_UseRealTimeDOFAndAA(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxCamera_UseRealTimeDOFAndAA(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyBool1*sipVal;
     ::FbxCamera *sipCpp = reinterpret_cast< ::FbxCamera *>(sipSelf);

    sipVal = &sipCpp->UseRealTimeDOFAndAA;

    return sipConvertFromType(sipVal, sipType_FbxPropertyBool1, NULL);
}


extern "C" {static int varset_FbxCamera_UseRealTimeDOFAndAA(void *, PyObject *, PyObject *);}
static int varset_FbxCamera_UseRealTimeDOFAndAA(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyBool1*sipVal;
     ::FbxCamera *sipCpp = reinterpret_cast< ::FbxCamera *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyBool1 *>(sipForceConvertToType(sipPy,sipType_FbxPropertyBool1,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->UseRealTimeDOFAndAA = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxCamera_UseRealTimeMotionBlur(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxCamera_UseRealTimeMotionBlur(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyBool1*sipVal;
     ::FbxCamera *sipCpp = reinterpret_cast< ::FbxCamera *>(sipSelf);

    sipVal = &sipCpp->UseRealTimeMotionBlur;

    return sipConvertFromType(sipVal, sipType_FbxPropertyBool1, NULL);
}


extern "C" {static int varset_FbxCamera_UseRealTimeMotionBlur(void *, PyObject *, PyObject *);}
static int varset_FbxCamera_UseRealTimeMotionBlur(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyBool1*sipVal;
     ::FbxCamera *sipCpp = reinterpret_cast< ::FbxCamera *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyBool1 *>(sipForceConvertToType(sipPy,sipType_FbxPropertyBool1,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->UseRealTimeMotionBlur = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxCamera_ViewCameraToLookAt(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxCamera_ViewCameraToLookAt(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyBool1*sipVal;
     ::FbxCamera *sipCpp = reinterpret_cast< ::FbxCamera *>(sipSelf);

    sipVal = &sipCpp->ViewCameraToLookAt;

    return sipConvertFromType(sipVal, sipType_FbxPropertyBool1, NULL);
}


extern "C" {static int varset_FbxCamera_ViewCameraToLookAt(void *, PyObject *, PyObject *);}
static int varset_FbxCamera_ViewCameraToLookAt(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyBool1*sipVal;
     ::FbxCamera *sipCpp = reinterpret_cast< ::FbxCamera *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyBool1 *>(sipForceConvertToType(sipPy,sipType_FbxPropertyBool1,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->ViewCameraToLookAt = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxCamera_ViewFrustumBackPlaneMode(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxCamera_ViewFrustumBackPlaneMode(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyEFrontBackPlaneDisplayMode*sipVal;
     ::FbxCamera *sipCpp = reinterpret_cast< ::FbxCamera *>(sipSelf);

    sipVal = &sipCpp->ViewFrustumBackPlaneMode;

    return sipConvertFromType(sipVal, sipType_FbxPropertyEFrontBackPlaneDisplayMode, NULL);
}


extern "C" {static int varset_FbxCamera_ViewFrustumBackPlaneMode(void *, PyObject *, PyObject *);}
static int varset_FbxCamera_ViewFrustumBackPlaneMode(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyEFrontBackPlaneDisplayMode*sipVal;
     ::FbxCamera *sipCpp = reinterpret_cast< ::FbxCamera *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyEFrontBackPlaneDisplayMode *>(sipForceConvertToType(sipPy,sipType_FbxPropertyEFrontBackPlaneDisplayMode,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->ViewFrustumBackPlaneMode = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxCamera_ViewFrustumFrontPlaneMode(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxCamera_ViewFrustumFrontPlaneMode(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyEFrontBackPlaneDisplayMode*sipVal;
     ::FbxCamera *sipCpp = reinterpret_cast< ::FbxCamera *>(sipSelf);

    sipVal = &sipCpp->ViewFrustumFrontPlaneMode;

    return sipConvertFromType(sipVal, sipType_FbxPropertyEFrontBackPlaneDisplayMode, NULL);
}


extern "C" {static int varset_FbxCamera_ViewFrustumFrontPlaneMode(void *, PyObject *, PyObject *);}
static int varset_FbxCamera_ViewFrustumFrontPlaneMode(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyEFrontBackPlaneDisplayMode*sipVal;
     ::FbxCamera *sipCpp = reinterpret_cast< ::FbxCamera *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyEFrontBackPlaneDisplayMode *>(sipForceConvertToType(sipPy,sipType_FbxPropertyEFrontBackPlaneDisplayMode,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->ViewFrustumFrontPlaneMode = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxCamera_ViewFrustumNearFarPlane(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxCamera_ViewFrustumNearFarPlane(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyBool1*sipVal;
     ::FbxCamera *sipCpp = reinterpret_cast< ::FbxCamera *>(sipSelf);

    sipVal = &sipCpp->ViewFrustumNearFarPlane;

    return sipConvertFromType(sipVal, sipType_FbxPropertyBool1, NULL);
}


extern "C" {static int varset_FbxCamera_ViewFrustumNearFarPlane(void *, PyObject *, PyObject *);}
static int varset_FbxCamera_ViewFrustumNearFarPlane(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyBool1*sipVal;
     ::FbxCamera *sipCpp = reinterpret_cast< ::FbxCamera *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyBool1 *>(sipForceConvertToType(sipPy,sipType_FbxPropertyBool1,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->ViewFrustumNearFarPlane = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxCamera__2DMagnifierX(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxCamera__2DMagnifierX(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyDouble1*sipVal;
     ::FbxCamera *sipCpp = reinterpret_cast< ::FbxCamera *>(sipSelf);

    sipVal = &sipCpp->_2DMagnifierX;

    return sipConvertFromType(sipVal, sipType_FbxPropertyDouble1, NULL);
}


extern "C" {static int varset_FbxCamera__2DMagnifierX(void *, PyObject *, PyObject *);}
static int varset_FbxCamera__2DMagnifierX(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyDouble1*sipVal;
     ::FbxCamera *sipCpp = reinterpret_cast< ::FbxCamera *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyDouble1 *>(sipForceConvertToType(sipPy,sipType_FbxPropertyDouble1,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->_2DMagnifierX = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxCamera__2DMagnifierY(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxCamera__2DMagnifierY(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyDouble1*sipVal;
     ::FbxCamera *sipCpp = reinterpret_cast< ::FbxCamera *>(sipSelf);

    sipVal = &sipCpp->_2DMagnifierY;

    return sipConvertFromType(sipVal, sipType_FbxPropertyDouble1, NULL);
}


extern "C" {static int varset_FbxCamera__2DMagnifierY(void *, PyObject *, PyObject *);}
static int varset_FbxCamera__2DMagnifierY(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyDouble1*sipVal;
     ::FbxCamera *sipCpp = reinterpret_cast< ::FbxCamera *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyDouble1 *>(sipForceConvertToType(sipPy,sipType_FbxPropertyDouble1,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->_2DMagnifierY = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxCamera__2DMagnifierZoom(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxCamera__2DMagnifierZoom(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyDouble1*sipVal;
     ::FbxCamera *sipCpp = reinterpret_cast< ::FbxCamera *>(sipSelf);

    sipVal = &sipCpp->_2DMagnifierZoom;

    return sipConvertFromType(sipVal, sipType_FbxPropertyDouble1, NULL);
}


extern "C" {static int varset_FbxCamera__2DMagnifierZoom(void *, PyObject *, PyObject *);}
static int varset_FbxCamera__2DMagnifierZoom(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyDouble1*sipVal;
     ::FbxCamera *sipCpp = reinterpret_cast< ::FbxCamera *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyDouble1 *>(sipForceConvertToType(sipPy,sipType_FbxPropertyDouble1,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->_2DMagnifierZoom = *sipVal;

    return 0;
}

sipVariableDef variables_FbxCamera[] = {
    {InstanceVariable, sipName_AntialiasingIntensity, (PyMethodDef *)varget_FbxCamera_AntialiasingIntensity, (PyMethodDef *)varset_FbxCamera_AntialiasingIntensity, NULL, NULL},
    {InstanceVariable, sipName_AntialiasingMethod, (PyMethodDef *)varget_FbxCamera_AntialiasingMethod, (PyMethodDef *)varset_FbxCamera_AntialiasingMethod, NULL, NULL},
    {InstanceVariable, sipName_ApertureMode, (PyMethodDef *)varget_FbxCamera_ApertureMode, (PyMethodDef *)varset_FbxCamera_ApertureMode, NULL, NULL},
    {InstanceVariable, sipName_AspectHeight, (PyMethodDef *)varget_FbxCamera_AspectHeight, (PyMethodDef *)varset_FbxCamera_AspectHeight, NULL, NULL},
    {InstanceVariable, sipName_AspectRatioMode, (PyMethodDef *)varget_FbxCamera_AspectRatioMode, (PyMethodDef *)varset_FbxCamera_AspectRatioMode, NULL, NULL},
    {InstanceVariable, sipName_AspectWidth, (PyMethodDef *)varget_FbxCamera_AspectWidth, (PyMethodDef *)varset_FbxCamera_AspectWidth, NULL, NULL},
    {InstanceVariable, sipName_AudioColor, (PyMethodDef *)varget_FbxCamera_AudioColor, (PyMethodDef *)varset_FbxCamera_AudioColor, NULL, NULL},
    {InstanceVariable, sipName_AutoComputeClipPlanes, (PyMethodDef *)varget_FbxCamera_AutoComputeClipPlanes, (PyMethodDef *)varset_FbxCamera_AutoComputeClipPlanes, NULL, NULL},
    {InstanceVariable, sipName_BackPlaneDistance, (PyMethodDef *)varget_FbxCamera_BackPlaneDistance, (PyMethodDef *)varset_FbxCamera_BackPlaneDistance, NULL, NULL},
    {InstanceVariable, sipName_BackPlaneDistanceMode, (PyMethodDef *)varget_FbxCamera_BackPlaneDistanceMode, (PyMethodDef *)varset_FbxCamera_BackPlaneDistanceMode, NULL, NULL},
    {InstanceVariable, sipName_BackPlaneOffsetX, (PyMethodDef *)varget_FbxCamera_BackPlaneOffsetX, (PyMethodDef *)varset_FbxCamera_BackPlaneOffsetX, NULL, NULL},
    {InstanceVariable, sipName_BackPlaneOffsetY, (PyMethodDef *)varget_FbxCamera_BackPlaneOffsetY, (PyMethodDef *)varset_FbxCamera_BackPlaneOffsetY, NULL, NULL},
    {InstanceVariable, sipName_BackPlaneRotation, (PyMethodDef *)varget_FbxCamera_BackPlaneRotation, (PyMethodDef *)varset_FbxCamera_BackPlaneRotation, NULL, NULL},
    {InstanceVariable, sipName_BackPlaneScaleX, (PyMethodDef *)varget_FbxCamera_BackPlaneScaleX, (PyMethodDef *)varset_FbxCamera_BackPlaneScaleX, NULL, NULL},
    {InstanceVariable, sipName_BackPlaneScaleY, (PyMethodDef *)varget_FbxCamera_BackPlaneScaleY, (PyMethodDef *)varset_FbxCamera_BackPlaneScaleY, NULL, NULL},
    {InstanceVariable, sipName_BackPlateCenter, (PyMethodDef *)varget_FbxCamera_BackPlateCenter, (PyMethodDef *)varset_FbxCamera_BackPlateCenter, NULL, NULL},
    {InstanceVariable, sipName_BackPlateCrop, (PyMethodDef *)varget_FbxCamera_BackPlateCrop, (PyMethodDef *)varset_FbxCamera_BackPlateCrop, NULL, NULL},
    {InstanceVariable, sipName_BackPlateFitImage, (PyMethodDef *)varget_FbxCamera_BackPlateFitImage, (PyMethodDef *)varset_FbxCamera_BackPlateFitImage, NULL, NULL},
    {InstanceVariable, sipName_BackPlateKeepRatio, (PyMethodDef *)varget_FbxCamera_BackPlateKeepRatio, (PyMethodDef *)varset_FbxCamera_BackPlateKeepRatio, NULL, NULL},
    {InstanceVariable, sipName_BackgroundAlphaTreshold, (PyMethodDef *)varget_FbxCamera_BackgroundAlphaTreshold, (PyMethodDef *)varset_FbxCamera_BackgroundAlphaTreshold, NULL, NULL},
    {InstanceVariable, sipName_BackgroundColor, (PyMethodDef *)varget_FbxCamera_BackgroundColor, (PyMethodDef *)varset_FbxCamera_BackgroundColor, NULL, NULL},
    {InstanceVariable, sipName_BackgroundTexture, (PyMethodDef *)varget_FbxCamera_BackgroundTexture, (PyMethodDef *)varset_FbxCamera_BackgroundTexture, NULL, NULL},
    {InstanceVariable, sipName_CameraFormat, (PyMethodDef *)varget_FbxCamera_CameraFormat, (PyMethodDef *)varset_FbxCamera_CameraFormat, NULL, NULL},
    {ClassVariable, sipName_ClassId, (PyMethodDef *)varget_FbxCamera_ClassId, (PyMethodDef *)varset_FbxCamera_ClassId, NULL, NULL},
    {InstanceVariable, sipName_DisplaySafeArea, (PyMethodDef *)varget_FbxCamera_DisplaySafeArea, (PyMethodDef *)varset_FbxCamera_DisplaySafeArea, NULL, NULL},
    {InstanceVariable, sipName_DisplaySafeAreaOnRender, (PyMethodDef *)varget_FbxCamera_DisplaySafeAreaOnRender, (PyMethodDef *)varset_FbxCamera_DisplaySafeAreaOnRender, NULL, NULL},
    {InstanceVariable, sipName_DisplayTurnTableIcon, (PyMethodDef *)varget_FbxCamera_DisplayTurnTableIcon, (PyMethodDef *)varset_FbxCamera_DisplayTurnTableIcon, NULL, NULL},
    {InstanceVariable, sipName_FarPlane, (PyMethodDef *)varget_FbxCamera_FarPlane, (PyMethodDef *)varset_FbxCamera_FarPlane, NULL, NULL},
    {InstanceVariable, sipName_FieldOfView, (PyMethodDef *)varget_FbxCamera_FieldOfView, (PyMethodDef *)varset_FbxCamera_FieldOfView, NULL, NULL},
    {InstanceVariable, sipName_FieldOfViewX, (PyMethodDef *)varget_FbxCamera_FieldOfViewX, (PyMethodDef *)varset_FbxCamera_FieldOfViewX, NULL, NULL},
    {InstanceVariable, sipName_FieldOfViewY, (PyMethodDef *)varget_FbxCamera_FieldOfViewY, (PyMethodDef *)varset_FbxCamera_FieldOfViewY, NULL, NULL},
    {InstanceVariable, sipName_FilmAspectRatio, (PyMethodDef *)varget_FbxCamera_FilmAspectRatio, (PyMethodDef *)varset_FbxCamera_FilmAspectRatio, NULL, NULL},
    {InstanceVariable, sipName_FilmFormat, (PyMethodDef *)varget_FbxCamera_FilmFormat, (PyMethodDef *)varset_FbxCamera_FilmFormat, NULL, NULL},
    {InstanceVariable, sipName_FilmHeight, (PyMethodDef *)varget_FbxCamera_FilmHeight, (PyMethodDef *)varset_FbxCamera_FilmHeight, NULL, NULL},
    {InstanceVariable, sipName_FilmOffsetX, (PyMethodDef *)varget_FbxCamera_FilmOffsetX, (PyMethodDef *)varset_FbxCamera_FilmOffsetX, NULL, NULL},
    {InstanceVariable, sipName_FilmOffsetY, (PyMethodDef *)varget_FbxCamera_FilmOffsetY, (PyMethodDef *)varset_FbxCamera_FilmOffsetY, NULL, NULL},
    {InstanceVariable, sipName_FilmRollOrder, (PyMethodDef *)varget_FbxCamera_FilmRollOrder, (PyMethodDef *)varset_FbxCamera_FilmRollOrder, NULL, NULL},
    {InstanceVariable, sipName_FilmRollPivotX, (PyMethodDef *)varget_FbxCamera_FilmRollPivotX, (PyMethodDef *)varset_FbxCamera_FilmRollPivotX, NULL, NULL},
    {InstanceVariable, sipName_FilmRollPivotY, (PyMethodDef *)varget_FbxCamera_FilmRollPivotY, (PyMethodDef *)varset_FbxCamera_FilmRollPivotY, NULL, NULL},
    {InstanceVariable, sipName_FilmRollValue, (PyMethodDef *)varget_FbxCamera_FilmRollValue, (PyMethodDef *)varset_FbxCamera_FilmRollValue, NULL, NULL},
    {InstanceVariable, sipName_FilmSqueezeRatio, (PyMethodDef *)varget_FbxCamera_FilmSqueezeRatio, (PyMethodDef *)varset_FbxCamera_FilmSqueezeRatio, NULL, NULL},
    {InstanceVariable, sipName_FilmTranslateX, (PyMethodDef *)varget_FbxCamera_FilmTranslateX, (PyMethodDef *)varset_FbxCamera_FilmTranslateX, NULL, NULL},
    {InstanceVariable, sipName_FilmTranslateY, (PyMethodDef *)varget_FbxCamera_FilmTranslateY, (PyMethodDef *)varset_FbxCamera_FilmTranslateY, NULL, NULL},
    {InstanceVariable, sipName_FilmWidth, (PyMethodDef *)varget_FbxCamera_FilmWidth, (PyMethodDef *)varset_FbxCamera_FilmWidth, NULL, NULL},
    {InstanceVariable, sipName_FocalLength, (PyMethodDef *)varget_FbxCamera_FocalLength, (PyMethodDef *)varset_FbxCamera_FocalLength, NULL, NULL},
    {InstanceVariable, sipName_FocusAngle, (PyMethodDef *)varget_FbxCamera_FocusAngle, (PyMethodDef *)varset_FbxCamera_FocusAngle, NULL, NULL},
    {InstanceVariable, sipName_FocusDistance, (PyMethodDef *)varget_FbxCamera_FocusDistance, (PyMethodDef *)varset_FbxCamera_FocusDistance, NULL, NULL},
    {InstanceVariable, sipName_FocusSource, (PyMethodDef *)varget_FbxCamera_FocusSource, (PyMethodDef *)varset_FbxCamera_FocusSource, NULL, NULL},
    {InstanceVariable, sipName_ForegroundOpacity, (PyMethodDef *)varget_FbxCamera_ForegroundOpacity, (PyMethodDef *)varset_FbxCamera_ForegroundOpacity, NULL, NULL},
    {InstanceVariable, sipName_ForegroundTexture, (PyMethodDef *)varget_FbxCamera_ForegroundTexture, (PyMethodDef *)varset_FbxCamera_ForegroundTexture, NULL, NULL},
    {InstanceVariable, sipName_FrameColor, (PyMethodDef *)varget_FbxCamera_FrameColor, (PyMethodDef *)varset_FbxCamera_FrameColor, NULL, NULL},
    {InstanceVariable, sipName_FrameSamplingCount, (PyMethodDef *)varget_FbxCamera_FrameSamplingCount, (PyMethodDef *)varset_FbxCamera_FrameSamplingCount, NULL, NULL},
    {InstanceVariable, sipName_FrameSamplingType, (PyMethodDef *)varget_FbxCamera_FrameSamplingType, (PyMethodDef *)varset_FbxCamera_FrameSamplingType, NULL, NULL},
    {InstanceVariable, sipName_FrontPlaneDistance, (PyMethodDef *)varget_FbxCamera_FrontPlaneDistance, (PyMethodDef *)varset_FbxCamera_FrontPlaneDistance, NULL, NULL},
    {InstanceVariable, sipName_FrontPlaneDistanceMode, (PyMethodDef *)varget_FbxCamera_FrontPlaneDistanceMode, (PyMethodDef *)varset_FbxCamera_FrontPlaneDistanceMode, NULL, NULL},
    {InstanceVariable, sipName_FrontPlaneOffsetX, (PyMethodDef *)varget_FbxCamera_FrontPlaneOffsetX, (PyMethodDef *)varset_FbxCamera_FrontPlaneOffsetX, NULL, NULL},
    {InstanceVariable, sipName_FrontPlaneOffsetY, (PyMethodDef *)varget_FbxCamera_FrontPlaneOffsetY, (PyMethodDef *)varset_FbxCamera_FrontPlaneOffsetY, NULL, NULL},
    {InstanceVariable, sipName_FrontPlaneRotation, (PyMethodDef *)varget_FbxCamera_FrontPlaneRotation, (PyMethodDef *)varset_FbxCamera_FrontPlaneRotation, NULL, NULL},
    {InstanceVariable, sipName_FrontPlaneScaleX, (PyMethodDef *)varget_FbxCamera_FrontPlaneScaleX, (PyMethodDef *)varset_FbxCamera_FrontPlaneScaleX, NULL, NULL},
    {InstanceVariable, sipName_FrontPlaneScaleY, (PyMethodDef *)varget_FbxCamera_FrontPlaneScaleY, (PyMethodDef *)varset_FbxCamera_FrontPlaneScaleY, NULL, NULL},
    {InstanceVariable, sipName_FrontPlateCenter, (PyMethodDef *)varget_FbxCamera_FrontPlateCenter, (PyMethodDef *)varset_FbxCamera_FrontPlateCenter, NULL, NULL},
    {InstanceVariable, sipName_FrontPlateCrop, (PyMethodDef *)varget_FbxCamera_FrontPlateCrop, (PyMethodDef *)varset_FbxCamera_FrontPlateCrop, NULL, NULL},
    {InstanceVariable, sipName_FrontPlateFitImage, (PyMethodDef *)varget_FbxCamera_FrontPlateFitImage, (PyMethodDef *)varset_FbxCamera_FrontPlateFitImage, NULL, NULL},
    {InstanceVariable, sipName_FrontPlateKeepRatio, (PyMethodDef *)varget_FbxCamera_FrontPlateKeepRatio, (PyMethodDef *)varset_FbxCamera_FrontPlateKeepRatio, NULL, NULL},
    {InstanceVariable, sipName_GateFit, (PyMethodDef *)varget_FbxCamera_GateFit, (PyMethodDef *)varset_FbxCamera_GateFit, NULL, NULL},
    {InstanceVariable, sipName_InterestPosition, (PyMethodDef *)varget_FbxCamera_InterestPosition, (PyMethodDef *)varset_FbxCamera_InterestPosition, NULL, NULL},
    {InstanceVariable, sipName_LockInterestNavigation, (PyMethodDef *)varget_FbxCamera_LockInterestNavigation, (PyMethodDef *)varset_FbxCamera_LockInterestNavigation, NULL, NULL},
    {InstanceVariable, sipName_LockMode, (PyMethodDef *)varget_FbxCamera_LockMode, (PyMethodDef *)varset_FbxCamera_LockMode, NULL, NULL},
    {InstanceVariable, sipName_MotionBlurIntensity, (PyMethodDef *)varget_FbxCamera_MotionBlurIntensity, (PyMethodDef *)varset_FbxCamera_MotionBlurIntensity, NULL, NULL},
    {InstanceVariable, sipName_NearPlane, (PyMethodDef *)varget_FbxCamera_NearPlane, (PyMethodDef *)varset_FbxCamera_NearPlane, NULL, NULL},
    {InstanceVariable, sipName_OpticalCenterX, (PyMethodDef *)varget_FbxCamera_OpticalCenterX, (PyMethodDef *)varset_FbxCamera_OpticalCenterX, NULL, NULL},
    {InstanceVariable, sipName_OpticalCenterY, (PyMethodDef *)varget_FbxCamera_OpticalCenterY, (PyMethodDef *)varset_FbxCamera_OpticalCenterY, NULL, NULL},
    {InstanceVariable, sipName_OrthoZoom, (PyMethodDef *)varget_FbxCamera_OrthoZoom, (PyMethodDef *)varset_FbxCamera_OrthoZoom, NULL, NULL},
    {InstanceVariable, sipName_PixelAspectRatio, (PyMethodDef *)varget_FbxCamera_PixelAspectRatio, (PyMethodDef *)varset_FbxCamera_PixelAspectRatio, NULL, NULL},
    {InstanceVariable, sipName_Position, (PyMethodDef *)varget_FbxCamera_Position, (PyMethodDef *)varset_FbxCamera_Position, NULL, NULL},
    {InstanceVariable, sipName_PreScale, (PyMethodDef *)varget_FbxCamera_PreScale, (PyMethodDef *)varset_FbxCamera_PreScale, NULL, NULL},
    {InstanceVariable, sipName_ProjectionType, (PyMethodDef *)varget_FbxCamera_ProjectionType, (PyMethodDef *)varset_FbxCamera_ProjectionType, NULL, NULL},
    {InstanceVariable, sipName_Roll, (PyMethodDef *)varget_FbxCamera_Roll, (PyMethodDef *)varset_FbxCamera_Roll, NULL, NULL},
    {InstanceVariable, sipName_SafeAreaAspectRatio, (PyMethodDef *)varget_FbxCamera_SafeAreaAspectRatio, (PyMethodDef *)varset_FbxCamera_SafeAreaAspectRatio, NULL, NULL},
    {InstanceVariable, sipName_SafeAreaDisplayStyle, (PyMethodDef *)varget_FbxCamera_SafeAreaDisplayStyle, (PyMethodDef *)varset_FbxCamera_SafeAreaDisplayStyle, NULL, NULL},
    {InstanceVariable, sipName_ShowAudio, (PyMethodDef *)varget_FbxCamera_ShowAudio, (PyMethodDef *)varset_FbxCamera_ShowAudio, NULL, NULL},
    {InstanceVariable, sipName_ShowAzimut, (PyMethodDef *)varget_FbxCamera_ShowAzimut, (PyMethodDef *)varset_FbxCamera_ShowAzimut, NULL, NULL},
    {InstanceVariable, sipName_ShowBackplate, (PyMethodDef *)varget_FbxCamera_ShowBackplate, (PyMethodDef *)varset_FbxCamera_ShowBackplate, NULL, NULL},
    {InstanceVariable, sipName_ShowFrontplate, (PyMethodDef *)varget_FbxCamera_ShowFrontplate, (PyMethodDef *)varset_FbxCamera_ShowFrontplate, NULL, NULL},
    {InstanceVariable, sipName_ShowGrid, (PyMethodDef *)varget_FbxCamera_ShowGrid, (PyMethodDef *)varset_FbxCamera_ShowGrid, NULL, NULL},
    {InstanceVariable, sipName_ShowInfoOnMoving, (PyMethodDef *)varget_FbxCamera_ShowInfoOnMoving, (PyMethodDef *)varset_FbxCamera_ShowInfoOnMoving, NULL, NULL},
    {InstanceVariable, sipName_ShowName, (PyMethodDef *)varget_FbxCamera_ShowName, (PyMethodDef *)varset_FbxCamera_ShowName, NULL, NULL},
    {InstanceVariable, sipName_ShowOpticalCenter, (PyMethodDef *)varget_FbxCamera_ShowOpticalCenter, (PyMethodDef *)varset_FbxCamera_ShowOpticalCenter, NULL, NULL},
    {InstanceVariable, sipName_ShowTimeCode, (PyMethodDef *)varget_FbxCamera_ShowTimeCode, (PyMethodDef *)varset_FbxCamera_ShowTimeCode, NULL, NULL},
    {InstanceVariable, sipName_TurnTable, (PyMethodDef *)varget_FbxCamera_TurnTable, (PyMethodDef *)varset_FbxCamera_TurnTable, NULL, NULL},
    {InstanceVariable, sipName_UpVector, (PyMethodDef *)varget_FbxCamera_UpVector, (PyMethodDef *)varset_FbxCamera_UpVector, NULL, NULL},
    {InstanceVariable, sipName_Use2DMagnifierZoom, (PyMethodDef *)varget_FbxCamera_Use2DMagnifierZoom, (PyMethodDef *)varset_FbxCamera_Use2DMagnifierZoom, NULL, NULL},
    {InstanceVariable, sipName_UseAccumulationBuffer, (PyMethodDef *)varget_FbxCamera_UseAccumulationBuffer, (PyMethodDef *)varset_FbxCamera_UseAccumulationBuffer, NULL, NULL},
    {InstanceVariable, sipName_UseAntialiasing, (PyMethodDef *)varget_FbxCamera_UseAntialiasing, (PyMethodDef *)varset_FbxCamera_UseAntialiasing, NULL, NULL},
    {InstanceVariable, sipName_UseDepthOfField, (PyMethodDef *)varget_FbxCamera_UseDepthOfField, (PyMethodDef *)varset_FbxCamera_UseDepthOfField, NULL, NULL},
    {InstanceVariable, sipName_UseFrameColor, (PyMethodDef *)varget_FbxCamera_UseFrameColor, (PyMethodDef *)varset_FbxCamera_UseFrameColor, NULL, NULL},
    {InstanceVariable, sipName_UseMotionBlur, (PyMethodDef *)varget_FbxCamera_UseMotionBlur, (PyMethodDef *)varset_FbxCamera_UseMotionBlur, NULL, NULL},
    {InstanceVariable, sipName_UseRealTimeDOFAndAA, (PyMethodDef *)varget_FbxCamera_UseRealTimeDOFAndAA, (PyMethodDef *)varset_FbxCamera_UseRealTimeDOFAndAA, NULL, NULL},
    {InstanceVariable, sipName_UseRealTimeMotionBlur, (PyMethodDef *)varget_FbxCamera_UseRealTimeMotionBlur, (PyMethodDef *)varset_FbxCamera_UseRealTimeMotionBlur, NULL, NULL},
    {InstanceVariable, sipName_ViewCameraToLookAt, (PyMethodDef *)varget_FbxCamera_ViewCameraToLookAt, (PyMethodDef *)varset_FbxCamera_ViewCameraToLookAt, NULL, NULL},
    {InstanceVariable, sipName_ViewFrustumBackPlaneMode, (PyMethodDef *)varget_FbxCamera_ViewFrustumBackPlaneMode, (PyMethodDef *)varset_FbxCamera_ViewFrustumBackPlaneMode, NULL, NULL},
    {InstanceVariable, sipName_ViewFrustumFrontPlaneMode, (PyMethodDef *)varget_FbxCamera_ViewFrustumFrontPlaneMode, (PyMethodDef *)varset_FbxCamera_ViewFrustumFrontPlaneMode, NULL, NULL},
    {InstanceVariable, sipName_ViewFrustumNearFarPlane, (PyMethodDef *)varget_FbxCamera_ViewFrustumNearFarPlane, (PyMethodDef *)varset_FbxCamera_ViewFrustumNearFarPlane, NULL, NULL},
    {InstanceVariable, sipName__2DMagnifierX, (PyMethodDef *)varget_FbxCamera__2DMagnifierX, (PyMethodDef *)varset_FbxCamera__2DMagnifierX, NULL, NULL},
    {InstanceVariable, sipName__2DMagnifierY, (PyMethodDef *)varget_FbxCamera__2DMagnifierY, (PyMethodDef *)varset_FbxCamera__2DMagnifierY, NULL, NULL},
    {InstanceVariable, sipName__2DMagnifierZoom, (PyMethodDef *)varget_FbxCamera__2DMagnifierZoom, (PyMethodDef *)varset_FbxCamera__2DMagnifierZoom, NULL, NULL},
};


sipClassTypeDef sipTypeDef_fbx_FbxCamera = {
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_FbxCamera,
        {0},
        0
    },
    {
        sipNameNr_FbxCamera,
        {0, 0, 1},
        71, methods_FbxCamera,
        60, enummembers_FbxCamera,
        106, variables_FbxCamera,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    0,
    -1,
    -1,
    supers_FbxCamera,
    slots_FbxCamera,
    0,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    0,
    0,
    0,
    0,
    release_FbxCamera,
    cast_FbxCamera,
    0,
    0,
    0,
    0,
    0,
    0
};
