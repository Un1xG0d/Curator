/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.3
 *
 * Copyright (C) 2009 Autodesk, Inc. and/or its licensors.
 * All Rights Reserved.
 * 
 * The coded instructions, statements, computer programs, and/or related material 
 * (collectively the "Data") in these files contain unpublished information 
 * proprietary to Autodesk, Inc. and/or its licensors, which is protected by 
 * Canada and United States of America federal copyright law and by international 
 * treaties. 
 * 
 * The Data may not be disclosed or distributed to third parties, in whole or in
 * part, without the prior written consent of Autodesk, Inc. ("Autodesk").
 * 
 * THE DATA IS PROVIDED "AS IS" AND WITHOUT WARRANTY.
 * ALL WARRANTIES ARE EXPRESSLY EXCLUDED AND DISCLAIMED. AUTODESK MAKES NO
 * WARRANTY OF ANY KIND WITH RESPECT TO THE DATA, EXPRESS, IMPLIED OR ARISING
 * BY CUSTOM OR TRADE USAGE, AND DISCLAIMS ANY IMPLIED WARRANTIES OF TITLE, 
 * NON-INFRINGEMENT, MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE OR USE. 
 * WITHOUT LIMITING THE FOREGOING, AUTODESK DOES NOT WARRANT THAT THE OPERATION
 * OF THE DATA WILL BE UNINTERRUPTED OR ERROR FREE. 
 * 
 * IN NO EVENT SHALL AUTODESK, ITS AFFILIATES, PARENT COMPANIES, LICENSORS
 * OR SUPPLIERS ("AUTODESK GROUP") BE LIABLE FOR ANY LOSSES, DAMAGES OR EXPENSES
 * OF ANY KIND (INCLUDING WITHOUT LIMITATION PUNITIVE OR MULTIPLE DAMAGES OR OTHER
 * SPECIAL, DIRECT, INDIRECT, EXEMPLARY, INCIDENTAL, LOSS OF PROFITS, REVENUE
 * OR DATA, COST OF COVER OR CONSEQUENTIAL LOSSES OR DAMAGES OF ANY KIND),
 * HOWEVER CAUSED, AND REGARDLESS OF THE THEORY OF LIABILITY, WHETHER DERIVED
 * FROM CONTRACT, TORT (INCLUDING, BUT NOT LIMITED TO, NEGLIGENCE), OR OTHERWISE,
 * ARISING OUT OF OR RELATING TO THE DATA OR ITS USE OR ANY OTHER PERFORMANCE,
 * WHETHER OR NOT AUTODESK HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH LOSS
 * OR DAMAGE. 
 */

#include "sipAPIfbx.h"


#line 4 "/var/www/html/lib/fbxpy/sip/fbxstatus.sip"
#include <fbxsdk.h>
#line 44 "/var/www/html/lib/fbxpy/build/Python27_ucs4_x64/sipfbxFbxPose.cpp"
#line 5 "/var/www/html/lib/fbxpy/sip/fbxusernotification.sip"
#include <fbxsdk.h>
#line 47 "/var/www/html/lib/fbxpy/build/Python27_ucs4_x64/sipfbxFbxPose.cpp"


PyDoc_STRVAR(doc_FbxPose_Create, "Create(FbxManager, str) -> FbxPose\n"
    "Create(FbxObject, str) -> FbxPose");

extern "C" {static PyObject *meth_FbxPose_Create(PyObject *, PyObject *);}
static PyObject *meth_FbxPose_Create(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxManager* a0;
        const char* a1;
        PyObject *a1Keep;

        if (sipParseArgs(&sipParseErr, sipArgs, "J8A8", sipType_FbxManager, &a0, &a1Keep, &a1))
        {
             ::FbxPose*sipRes;

            sipRes =  ::FbxPose::Create(a0,a1);
            Py_DECREF(a1Keep);

            return sipConvertFromType(sipRes,sipType_FbxPose,NULL);
        }
    }

    {
         ::FbxObject* a0;
        const char* a1;
        PyObject *a1Keep;

        if (sipParseArgs(&sipParseErr, sipArgs, "J8A8", sipType_FbxObject, &a0, &a1Keep, &a1))
        {
             ::FbxPose*sipRes;

            sipRes =  ::FbxPose::Create(a0,a1);
            Py_DECREF(a1Keep);

            return sipConvertFromType(sipRes,sipType_FbxPose,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxPose, sipName_Create, doc_FbxPose_Create);

    return NULL;
}


PyDoc_STRVAR(doc_FbxPose_GetClassId, "GetClassId(self) -> FbxClassId");

extern "C" {static PyObject *meth_FbxPose_GetClassId(PyObject *, PyObject *);}
static PyObject *meth_FbxPose_GetClassId(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::FbxPose *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxPose, &sipCpp))
        {
             ::FbxClassId*sipRes;

            sipRes = new  ::FbxClassId((sipSelfWasArg ? sipCpp-> ::FbxPose::GetClassId() : sipCpp->GetClassId()));

            return sipConvertFromNewType(sipRes,sipType_FbxClassId,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxPose, sipName_GetClassId, doc_FbxPose_GetClassId);

    return NULL;
}


PyDoc_STRVAR(doc_FbxPose_SetIsBindPose, "SetIsBindPose(self, bool)");

extern "C" {static PyObject *meth_FbxPose_SetIsBindPose(PyObject *, PyObject *);}
static PyObject *meth_FbxPose_SetIsBindPose(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
         ::FbxPose *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_FbxPose, &sipCpp, &a0))
        {
            sipCpp->SetIsBindPose(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxPose, sipName_SetIsBindPose, doc_FbxPose_SetIsBindPose);

    return NULL;
}


PyDoc_STRVAR(doc_FbxPose_IsBindPose, "IsBindPose(self) -> bool");

extern "C" {static PyObject *meth_FbxPose_IsBindPose(PyObject *, PyObject *);}
static PyObject *meth_FbxPose_IsBindPose(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::FbxPose *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxPose, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->IsBindPose();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxPose, sipName_IsBindPose, doc_FbxPose_IsBindPose);

    return NULL;
}


PyDoc_STRVAR(doc_FbxPose_IsRestPose, "IsRestPose(self) -> bool");

extern "C" {static PyObject *meth_FbxPose_IsRestPose(PyObject *, PyObject *);}
static PyObject *meth_FbxPose_IsRestPose(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::FbxPose *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxPose, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->IsRestPose();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxPose, sipName_IsRestPose, doc_FbxPose_IsRestPose);

    return NULL;
}


PyDoc_STRVAR(doc_FbxPose_GetCount, "GetCount(self) -> int");

extern "C" {static PyObject *meth_FbxPose_GetCount(PyObject *, PyObject *);}
static PyObject *meth_FbxPose_GetCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::FbxPose *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxPose, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->GetCount();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxPose, sipName_GetCount, doc_FbxPose_GetCount);

    return NULL;
}


PyDoc_STRVAR(doc_FbxPose_Add, "Add(self, FbxNode, FbxMatrix, bool = False, bool = True) -> int");

extern "C" {static PyObject *meth_FbxPose_Add(PyObject *, PyObject *);}
static PyObject *meth_FbxPose_Add(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxNode* a0;
        const  ::FbxMatrix* a1;
        bool a2 = 0;
        bool a3 = 1;
         ::FbxPose *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8J9|bb", &sipSelf, sipType_FbxPose, &sipCpp, sipType_FbxNode, &a0, sipType_FbxMatrix, &a1, &a2, &a3))
        {
            int sipRes;

            sipRes = sipCpp->Add(a0,*a1,a2,a3);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxPose, sipName_Add, doc_FbxPose_Add);

    return NULL;
}


PyDoc_STRVAR(doc_FbxPose_Remove, "Remove(self, int)");

extern "C" {static PyObject *meth_FbxPose_Remove(PyObject *, PyObject *);}
static PyObject *meth_FbxPose_Remove(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
         ::FbxPose *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_FbxPose, &sipCpp, &a0))
        {
            sipCpp->Remove(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxPose, sipName_Remove, doc_FbxPose_Remove);

    return NULL;
}


PyDoc_STRVAR(doc_FbxPose_GetNodeName, "GetNodeName(self, int) -> FbxNameHandler");

extern "C" {static PyObject *meth_FbxPose_GetNodeName(PyObject *, PyObject *);}
static PyObject *meth_FbxPose_GetNodeName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const  ::FbxPose *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_FbxPose, &sipCpp, &a0))
        {
             ::FbxNameHandler*sipRes;

            sipRes = new  ::FbxNameHandler(sipCpp->GetNodeName(a0));

            return sipConvertFromNewType(sipRes,sipType_FbxNameHandler,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxPose, sipName_GetNodeName, doc_FbxPose_GetNodeName);

    return NULL;
}


PyDoc_STRVAR(doc_FbxPose_GetNode, "GetNode(self, int) -> FbxNode");

extern "C" {static PyObject *meth_FbxPose_GetNode(PyObject *, PyObject *);}
static PyObject *meth_FbxPose_GetNode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const  ::FbxPose *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_FbxPose, &sipCpp, &a0))
        {
             ::FbxNode*sipRes;

            sipRes = sipCpp->GetNode(a0);

            return sipConvertFromType(sipRes,sipType_FbxNode,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxPose, sipName_GetNode, doc_FbxPose_GetNode);

    return NULL;
}


PyDoc_STRVAR(doc_FbxPose_GetMatrix, "GetMatrix(self, int) -> FbxMatrix");

extern "C" {static PyObject *meth_FbxPose_GetMatrix(PyObject *, PyObject *);}
static PyObject *meth_FbxPose_GetMatrix(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const  ::FbxPose *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_FbxPose, &sipCpp, &a0))
        {
             ::FbxMatrix*sipRes;

            sipRes = new  ::FbxMatrix(sipCpp->GetMatrix(a0));

            return sipConvertFromNewType(sipRes,sipType_FbxMatrix,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxPose, sipName_GetMatrix, doc_FbxPose_GetMatrix);

    return NULL;
}


PyDoc_STRVAR(doc_FbxPose_IsLocalMatrix, "IsLocalMatrix(self, int) -> bool");

extern "C" {static PyObject *meth_FbxPose_IsLocalMatrix(PyObject *, PyObject *);}
static PyObject *meth_FbxPose_IsLocalMatrix(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const  ::FbxPose *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_FbxPose, &sipCpp, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->IsLocalMatrix(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxPose, sipName_IsLocalMatrix, doc_FbxPose_IsLocalMatrix);

    return NULL;
}


PyDoc_STRVAR(doc_FbxPose_Find, "Find(self, FbxNameHandler, str = FbxPose.eAllNameComponents) -> int\n"
    "Find(self, FbxNode) -> int");

extern "C" {static PyObject *meth_FbxPose_Find(PyObject *, PyObject *);}
static PyObject *meth_FbxPose_Find(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::FbxNameHandler* a0;
        char a1 =  ::FbxPose::eAllNameComponents;
        const  ::FbxPose *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9|a8", &sipSelf, sipType_FbxPose, &sipCpp, sipType_FbxNameHandler, &a0, &a1))
        {
            int sipRes;

            sipRes = sipCpp->Find(*a0,a1);

            return SIPLong_FromLong(sipRes);
        }
    }

    {
        const  ::FbxNode* a0;
        const  ::FbxPose *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_FbxPose, &sipCpp, sipType_FbxNode, &a0))
        {
            int sipRes;

            sipRes = sipCpp->Find(a0);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxPose, sipName_Find, doc_FbxPose_Find);

    return NULL;
}


PyDoc_STRVAR(doc_FbxPose_GetPosesContaining, "GetPosesContaining(FbxManager, FbxNode, FbxPoseArray, IntArray) -> bool\n"
    "GetPosesContaining(FbxScene, FbxNode, FbxPoseArray, IntArray) -> bool");

extern "C" {static PyObject *meth_FbxPose_GetPosesContaining(PyObject *, PyObject *);}
static PyObject *meth_FbxPose_GetPosesContaining(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxManager* a0;
         ::FbxNode* a1;
         ::FbxPoseArray* a2;
         ::IntArray* a3;

        if (sipParseArgs(&sipParseErr, sipArgs, "J9J8J9J9", sipType_FbxManager, &a0, sipType_FbxNode, &a1, sipType_FbxPoseArray, &a2, sipType_IntArray, &a3))
        {
            bool sipRes;

            sipRes =  ::FbxPose::GetPosesContaining(*a0,a1,*a2,*a3);

            return PyBool_FromLong(sipRes);
        }
    }

    {
         ::FbxScene* a0;
         ::FbxNode* a1;
         ::FbxPoseArray* a2;
         ::IntArray* a3;

        if (sipParseArgs(&sipParseErr, sipArgs, "J8J8J9J9", sipType_FbxScene, &a0, sipType_FbxNode, &a1, sipType_FbxPoseArray, &a2, sipType_IntArray, &a3))
        {
            bool sipRes;

            sipRes =  ::FbxPose::GetPosesContaining(a0,a1,*a2,*a3);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxPose, sipName_GetPosesContaining, doc_FbxPose_GetPosesContaining);

    return NULL;
}


PyDoc_STRVAR(doc_FbxPose_GetBindPoseContaining, "GetBindPoseContaining(FbxManager, FbxNode, FbxPoseArray, IntArray) -> bool\n"
    "GetBindPoseContaining(FbxScene, FbxNode, FbxPoseArray, IntArray) -> bool");

extern "C" {static PyObject *meth_FbxPose_GetBindPoseContaining(PyObject *, PyObject *);}
static PyObject *meth_FbxPose_GetBindPoseContaining(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxManager* a0;
         ::FbxNode* a1;
         ::FbxPoseArray* a2;
         ::IntArray* a3;

        if (sipParseArgs(&sipParseErr, sipArgs, "J9J8J9J9", sipType_FbxManager, &a0, sipType_FbxNode, &a1, sipType_FbxPoseArray, &a2, sipType_IntArray, &a3))
        {
            bool sipRes;

            sipRes =  ::FbxPose::GetBindPoseContaining(*a0,a1,*a2,*a3);

            return PyBool_FromLong(sipRes);
        }
    }

    {
         ::FbxScene* a0;
         ::FbxNode* a1;
         ::FbxPoseArray* a2;
         ::IntArray* a3;

        if (sipParseArgs(&sipParseErr, sipArgs, "J8J8J9J9", sipType_FbxScene, &a0, sipType_FbxNode, &a1, sipType_FbxPoseArray, &a2, sipType_IntArray, &a3))
        {
            bool sipRes;

            sipRes =  ::FbxPose::GetBindPoseContaining(a0,a1,*a2,*a3);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxPose, sipName_GetBindPoseContaining, doc_FbxPose_GetBindPoseContaining);

    return NULL;
}


PyDoc_STRVAR(doc_FbxPose_GetRestPoseContaining, "GetRestPoseContaining(FbxManager, FbxNode, FbxPoseArray, IntArray) -> bool\n"
    "GetRestPoseContaining(FbxScene, FbxNode, FbxPoseArray, IntArray) -> bool");

extern "C" {static PyObject *meth_FbxPose_GetRestPoseContaining(PyObject *, PyObject *);}
static PyObject *meth_FbxPose_GetRestPoseContaining(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxManager* a0;
         ::FbxNode* a1;
         ::FbxPoseArray* a2;
         ::IntArray* a3;

        if (sipParseArgs(&sipParseErr, sipArgs, "J9J8J9J9", sipType_FbxManager, &a0, sipType_FbxNode, &a1, sipType_FbxPoseArray, &a2, sipType_IntArray, &a3))
        {
            bool sipRes;

            sipRes =  ::FbxPose::GetRestPoseContaining(*a0,a1,*a2,*a3);

            return PyBool_FromLong(sipRes);
        }
    }

    {
         ::FbxScene* a0;
         ::FbxNode* a1;
         ::FbxPoseArray* a2;
         ::IntArray* a3;

        if (sipParseArgs(&sipParseErr, sipArgs, "J8J8J9J9", sipType_FbxScene, &a0, sipType_FbxNode, &a1, sipType_FbxPoseArray, &a2, sipType_IntArray, &a3))
        {
            bool sipRes;

            sipRes =  ::FbxPose::GetRestPoseContaining(a0,a1,*a2,*a3);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxPose, sipName_GetRestPoseContaining, doc_FbxPose_GetRestPoseContaining);

    return NULL;
}


PyDoc_STRVAR(doc_FbxPose_IsValidBindPose, "IsValidBindPose(self, FbxNode, float = 0.0001, FbxStatus = None) -> bool");

extern "C" {static PyObject *meth_FbxPose_IsValidBindPose(PyObject *, PyObject *);}
static PyObject *meth_FbxPose_IsValidBindPose(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxNode* a0;
        double a1 = 0.0001;
         ::FbxStatus* a2 = 0;
         ::FbxPose *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8|dJ8", &sipSelf, sipType_FbxPose, &sipCpp, sipType_FbxNode, &a0, &a1, sipType_FbxStatus, &a2))
        {
            bool sipRes;

            sipRes = sipCpp->IsValidBindPose(a0,a1,a2);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxPose, sipName_IsValidBindPose, doc_FbxPose_IsValidBindPose);

    return NULL;
}


PyDoc_STRVAR(doc_FbxPose_IsValidBindPoseVerbose, "IsValidBindPoseVerbose(self, FbxNode, FbxNodeArray, FbxNodeArray, FbxNodeArray, FbxNodeArray, float = 0.0001, FbxStatus = None) -> bool\n"
    "IsValidBindPoseVerbose(self, FbxNode, FbxUserNotification, float = 0.0001, FbxStatus = None) -> bool");

extern "C" {static PyObject *meth_FbxPose_IsValidBindPoseVerbose(PyObject *, PyObject *);}
static PyObject *meth_FbxPose_IsValidBindPoseVerbose(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxNode* a0;
         ::FbxNodeArray* a1;
         ::FbxNodeArray* a2;
         ::FbxNodeArray* a3;
         ::FbxNodeArray* a4;
        double a5 = 0.0001;
         ::FbxStatus* a6 = 0;
         ::FbxPose *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8J9J9J9J9|dJ8", &sipSelf, sipType_FbxPose, &sipCpp, sipType_FbxNode, &a0, sipType_FbxNodeArray, &a1, sipType_FbxNodeArray, &a2, sipType_FbxNodeArray, &a3, sipType_FbxNodeArray, &a4, &a5, sipType_FbxStatus, &a6))
        {
            bool sipRes;

            sipRes = sipCpp->IsValidBindPoseVerbose(a0,*a1,*a2,*a3,*a4,a5,a6);

            return PyBool_FromLong(sipRes);
        }
    }

    {
         ::FbxNode* a0;
         ::FbxUserNotification* a1;
        double a2 = 0.0001;
         ::FbxStatus* a3 = 0;
         ::FbxPose *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8J8|dJ8", &sipSelf, sipType_FbxPose, &sipCpp, sipType_FbxNode, &a0, sipType_FbxUserNotification, &a1, &a2, sipType_FbxStatus, &a3))
        {
            bool sipRes;

            sipRes = sipCpp->IsValidBindPoseVerbose(a0,a1,a2,a3);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxPose, sipName_IsValidBindPoseVerbose, doc_FbxPose_IsValidBindPoseVerbose);

    return NULL;
}


extern "C" {static PyObject *slot_FbxPose___ne__(PyObject *,PyObject *);}
static PyObject *slot_FbxPose___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::FbxPose *sipCpp = reinterpret_cast< ::FbxPose *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_FbxPose));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const  ::FbxPose* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_FbxPose, &a0))
        {
            bool sipRes;

            sipRes = !sipCpp-> ::FbxPose::operator==(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_fbx, ne_slot, sipType_FbxPose, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_FbxPose___eq__(PyObject *,PyObject *);}
static PyObject *slot_FbxPose___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::FbxPose *sipCpp = reinterpret_cast< ::FbxPose *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_FbxPose));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const  ::FbxPose* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_FbxPose, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::FbxPose::operator==(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_fbx, eq_slot, sipType_FbxPose, sipSelf, sipArg);
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_FbxPose(void *, const sipTypeDef *);}
static void *cast_FbxPose(void *sipCppV, const sipTypeDef *targetType)
{
     ::FbxPose *sipCpp = reinterpret_cast< ::FbxPose *>(sipCppV);

    if (targetType == sipType_FbxObject)
        return static_cast< ::FbxObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_FbxPose(void *, int);}
static void release_FbxPose(void *, int)
{
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_FbxPose[] = {{244, 255, 1}};


/* Define this type's Python slots. */
static sipPySlotDef slots_FbxPose[] = {
    {(void *)slot_FbxPose___ne__, ne_slot},
    {(void *)slot_FbxPose___eq__, eq_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_FbxPose[] = {
    {SIP_MLNAME_CAST(sipName_Add), meth_FbxPose_Add, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxPose_Add)},
    {SIP_MLNAME_CAST(sipName_Create), meth_FbxPose_Create, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxPose_Create)},
    {SIP_MLNAME_CAST(sipName_Find), meth_FbxPose_Find, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxPose_Find)},
    {SIP_MLNAME_CAST(sipName_GetBindPoseContaining), meth_FbxPose_GetBindPoseContaining, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxPose_GetBindPoseContaining)},
    {SIP_MLNAME_CAST(sipName_GetClassId), meth_FbxPose_GetClassId, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxPose_GetClassId)},
    {SIP_MLNAME_CAST(sipName_GetCount), meth_FbxPose_GetCount, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxPose_GetCount)},
    {SIP_MLNAME_CAST(sipName_GetMatrix), meth_FbxPose_GetMatrix, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxPose_GetMatrix)},
    {SIP_MLNAME_CAST(sipName_GetNode), meth_FbxPose_GetNode, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxPose_GetNode)},
    {SIP_MLNAME_CAST(sipName_GetNodeName), meth_FbxPose_GetNodeName, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxPose_GetNodeName)},
    {SIP_MLNAME_CAST(sipName_GetPosesContaining), meth_FbxPose_GetPosesContaining, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxPose_GetPosesContaining)},
    {SIP_MLNAME_CAST(sipName_GetRestPoseContaining), meth_FbxPose_GetRestPoseContaining, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxPose_GetRestPoseContaining)},
    {SIP_MLNAME_CAST(sipName_IsBindPose), meth_FbxPose_IsBindPose, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxPose_IsBindPose)},
    {SIP_MLNAME_CAST(sipName_IsLocalMatrix), meth_FbxPose_IsLocalMatrix, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxPose_IsLocalMatrix)},
    {SIP_MLNAME_CAST(sipName_IsRestPose), meth_FbxPose_IsRestPose, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxPose_IsRestPose)},
    {SIP_MLNAME_CAST(sipName_IsValidBindPose), meth_FbxPose_IsValidBindPose, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxPose_IsValidBindPose)},
    {SIP_MLNAME_CAST(sipName_IsValidBindPoseVerbose), meth_FbxPose_IsValidBindPoseVerbose, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxPose_IsValidBindPoseVerbose)},
    {SIP_MLNAME_CAST(sipName_Remove), meth_FbxPose_Remove, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxPose_Remove)},
    {SIP_MLNAME_CAST(sipName_SetIsBindPose), meth_FbxPose_SetIsBindPose, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxPose_SetIsBindPose)}
};

static sipEnumMemberDef enummembers_FbxPose[] = {
    {sipName_eAllNameComponents, static_cast<int>( ::FbxPose::eAllNameComponents), 254},
    {sipName_eCurrentNameComponent, static_cast<int>( ::FbxPose::eCurrentNameComponent), 254},
    {sipName_eInitialNameComponent, static_cast<int>( ::FbxPose::eInitialNameComponent), 254},
};


extern "C" {static PyObject *varget_FbxPose_ClassId(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxPose_ClassId(void *, PyObject *, PyObject *)
{
     ::FbxClassId*sipVal;

    sipVal = & ::FbxPose::ClassId;

    return sipConvertFromType(sipVal, sipType_FbxClassId, NULL);
}


extern "C" {static int varset_FbxPose_ClassId(void *, PyObject *, PyObject *);}
static int varset_FbxPose_ClassId(void *, PyObject *sipPy, PyObject *)
{
     ::FbxClassId*sipVal;
    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxClassId *>(sipForceConvertToType(sipPy,sipType_FbxClassId,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

     ::FbxPose::ClassId = *sipVal;

    return 0;
}

sipVariableDef variables_FbxPose[] = {
    {ClassVariable, sipName_ClassId, (PyMethodDef *)varget_FbxPose_ClassId, (PyMethodDef *)varset_FbxPose_ClassId, NULL, NULL},
};


sipClassTypeDef sipTypeDef_fbx_FbxPose = {
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_FbxPose,
        {0},
        0
    },
    {
        sipNameNr_FbxPose,
        {0, 0, 1},
        18, methods_FbxPose,
        3, enummembers_FbxPose,
        1, variables_FbxPose,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    0,
    -1,
    -1,
    supers_FbxPose,
    slots_FbxPose,
    0,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    0,
    0,
    0,
    0,
    release_FbxPose,
    cast_FbxPose,
    0,
    0,
    0,
    0,
    0,
    0
};
