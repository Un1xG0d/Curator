/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.3
 *
 * Copyright (C) 2009 Autodesk, Inc. and/or its licensors.
 * All Rights Reserved.
 * 
 * The coded instructions, statements, computer programs, and/or related material 
 * (collectively the "Data") in these files contain unpublished information 
 * proprietary to Autodesk, Inc. and/or its licensors, which is protected by 
 * Canada and United States of America federal copyright law and by international 
 * treaties. 
 * 
 * The Data may not be disclosed or distributed to third parties, in whole or in
 * part, without the prior written consent of Autodesk, Inc. ("Autodesk").
 * 
 * THE DATA IS PROVIDED "AS IS" AND WITHOUT WARRANTY.
 * ALL WARRANTIES ARE EXPRESSLY EXCLUDED AND DISCLAIMED. AUTODESK MAKES NO
 * WARRANTY OF ANY KIND WITH RESPECT TO THE DATA, EXPRESS, IMPLIED OR ARISING
 * BY CUSTOM OR TRADE USAGE, AND DISCLAIMS ANY IMPLIED WARRANTIES OF TITLE, 
 * NON-INFRINGEMENT, MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE OR USE. 
 * WITHOUT LIMITING THE FOREGOING, AUTODESK DOES NOT WARRANT THAT THE OPERATION
 * OF THE DATA WILL BE UNINTERRUPTED OR ERROR FREE. 
 * 
 * IN NO EVENT SHALL AUTODESK, ITS AFFILIATES, PARENT COMPANIES, LICENSORS
 * OR SUPPLIERS ("AUTODESK GROUP") BE LIABLE FOR ANY LOSSES, DAMAGES OR EXPENSES
 * OF ANY KIND (INCLUDING WITHOUT LIMITATION PUNITIVE OR MULTIPLE DAMAGES OR OTHER
 * SPECIAL, DIRECT, INDIRECT, EXEMPLARY, INCIDENTAL, LOSS OF PROFITS, REVENUE
 * OR DATA, COST OF COVER OR CONSEQUENTIAL LOSSES OR DAMAGES OF ANY KIND),
 * HOWEVER CAUSED, AND REGARDLESS OF THE THEORY OF LIABILITY, WHETHER DERIVED
 * FROM CONTRACT, TORT (INCLUDING, BUT NOT LIMITED TO, NEGLIGENCE), OR OTHERWISE,
 * ARISING OUT OF OR RELATING TO THE DATA OR ITS USE OR ANY OTHER PERFORMANCE,
 * WHETHER OR NOT AUTODESK HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH LOSS
 * OR DAMAGE. 
 */

#include "sipAPIfbx.h"




PyDoc_STRVAR(doc_FbxImplementation_Create, "Create(FbxManager, str) -> FbxImplementation\n"
    "Create(FbxObject, str) -> FbxImplementation");

extern "C" {static PyObject *meth_FbxImplementation_Create(PyObject *, PyObject *);}
static PyObject *meth_FbxImplementation_Create(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxManager* a0;
        const char* a1;
        PyObject *a1Keep;

        if (sipParseArgs(&sipParseErr, sipArgs, "J8A8", sipType_FbxManager, &a0, &a1Keep, &a1))
        {
             ::FbxImplementation*sipRes;

            sipRes =  ::FbxImplementation::Create(a0,a1);
            Py_DECREF(a1Keep);

            return sipConvertFromType(sipRes,sipType_FbxImplementation,NULL);
        }
    }

    {
         ::FbxObject* a0;
        const char* a1;
        PyObject *a1Keep;

        if (sipParseArgs(&sipParseErr, sipArgs, "J8A8", sipType_FbxObject, &a0, &a1Keep, &a1))
        {
             ::FbxImplementation*sipRes;

            sipRes =  ::FbxImplementation::Create(a0,a1);
            Py_DECREF(a1Keep);

            return sipConvertFromType(sipRes,sipType_FbxImplementation,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxImplementation, sipName_Create, doc_FbxImplementation_Create);

    return NULL;
}


PyDoc_STRVAR(doc_FbxImplementation_GetClassId, "GetClassId(self) -> FbxClassId");

extern "C" {static PyObject *meth_FbxImplementation_GetClassId(PyObject *, PyObject *);}
static PyObject *meth_FbxImplementation_GetClassId(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::FbxImplementation *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxImplementation, &sipCpp))
        {
             ::FbxClassId*sipRes;

            sipRes = new  ::FbxClassId((sipSelfWasArg ? sipCpp-> ::FbxImplementation::GetClassId() : sipCpp->GetClassId()));

            return sipConvertFromNewType(sipRes,sipType_FbxClassId,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxImplementation, sipName_GetClassId, doc_FbxImplementation_GetClassId);

    return NULL;
}


PyDoc_STRVAR(doc_FbxImplementation_GetConstants, "GetConstants(self) -> FbxProperty");

extern "C" {static PyObject *meth_FbxImplementation_GetConstants(PyObject *, PyObject *);}
static PyObject *meth_FbxImplementation_GetConstants(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::FbxImplementation *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxImplementation, &sipCpp))
        {
             ::FbxProperty*sipRes;

            sipRes = new  ::FbxProperty(sipCpp->GetConstants());

            return sipConvertFromNewType(sipRes,sipType_FbxProperty,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxImplementation, sipName_GetConstants, doc_FbxImplementation_GetConstants);

    return NULL;
}


PyDoc_STRVAR(doc_FbxImplementation_AddNewTable, "AddNewTable(self, str, str) -> FbxBindingTable");

extern "C" {static PyObject *meth_FbxImplementation_AddNewTable(PyObject *, PyObject *);}
static PyObject *meth_FbxImplementation_AddNewTable(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const char* a0;
        PyObject *a0Keep;
        const char* a1;
        PyObject *a1Keep;
         ::FbxImplementation *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BA8A8", &sipSelf, sipType_FbxImplementation, &sipCpp, &a0Keep, &a0, &a1Keep, &a1))
        {
             ::FbxBindingTable*sipRes;

            sipRes = sipCpp->AddNewTable(a0,a1);
            Py_DECREF(a0Keep);
            Py_DECREF(a1Keep);

            return sipConvertFromType(sipRes,sipType_FbxBindingTable,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxImplementation, sipName_AddNewTable, doc_FbxImplementation_AddNewTable);

    return NULL;
}


PyDoc_STRVAR(doc_FbxImplementation_GetRootTable, "GetRootTable(self) -> FbxBindingTable");

extern "C" {static PyObject *meth_FbxImplementation_GetRootTable(PyObject *, PyObject *);}
static PyObject *meth_FbxImplementation_GetRootTable(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxImplementation *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxImplementation, &sipCpp))
        {
             ::FbxBindingTable*sipRes;

            sipRes = sipCpp->GetRootTable();

            return sipConvertFromType(sipRes,sipType_FbxBindingTable,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxImplementation, sipName_GetRootTable, doc_FbxImplementation_GetRootTable);

    return NULL;
}


PyDoc_STRVAR(doc_FbxImplementation_GetTableCount, "GetTableCount(self) -> int");

extern "C" {static PyObject *meth_FbxImplementation_GetTableCount(PyObject *, PyObject *);}
static PyObject *meth_FbxImplementation_GetTableCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::FbxImplementation *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxImplementation, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->GetTableCount();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxImplementation, sipName_GetTableCount, doc_FbxImplementation_GetTableCount);

    return NULL;
}


PyDoc_STRVAR(doc_FbxImplementation_GetTable, "GetTable(self, int) -> FbxBindingTable");

extern "C" {static PyObject *meth_FbxImplementation_GetTable(PyObject *, PyObject *);}
static PyObject *meth_FbxImplementation_GetTable(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
         ::FbxImplementation *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_FbxImplementation, &sipCpp, &a0))
        {
             ::FbxBindingTable*sipRes;

            sipRes = sipCpp->GetTable(a0);

            return sipConvertFromType(sipRes,sipType_FbxBindingTable,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxImplementation, sipName_GetTable, doc_FbxImplementation_GetTable);

    return NULL;
}


PyDoc_STRVAR(doc_FbxImplementation_GetTableByTargetName, "GetTableByTargetName(self, str) -> FbxBindingTable");

extern "C" {static PyObject *meth_FbxImplementation_GetTableByTargetName(PyObject *, PyObject *);}
static PyObject *meth_FbxImplementation_GetTableByTargetName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const char* a0;
        PyObject *a0Keep;
         ::FbxImplementation *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BA8", &sipSelf, sipType_FbxImplementation, &sipCpp, &a0Keep, &a0))
        {
             ::FbxBindingTable*sipRes;

            sipRes = sipCpp->GetTableByTargetName(a0);
            Py_DECREF(a0Keep);

            return sipConvertFromType(sipRes,sipType_FbxBindingTable,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxImplementation, sipName_GetTableByTargetName, doc_FbxImplementation_GetTableByTargetName);

    return NULL;
}


PyDoc_STRVAR(doc_FbxImplementation_GetTableByTargetType, "GetTableByTargetType(self, str) -> FbxBindingTable");

extern "C" {static PyObject *meth_FbxImplementation_GetTableByTargetType(PyObject *, PyObject *);}
static PyObject *meth_FbxImplementation_GetTableByTargetType(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const char* a0;
        PyObject *a0Keep;
         ::FbxImplementation *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BA8", &sipSelf, sipType_FbxImplementation, &sipCpp, &a0Keep, &a0))
        {
             ::FbxBindingTable*sipRes;

            sipRes = sipCpp->GetTableByTargetType(a0);
            Py_DECREF(a0Keep);

            return sipConvertFromType(sipRes,sipType_FbxBindingTable,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxImplementation, sipName_GetTableByTargetType, doc_FbxImplementation_GetTableByTargetType);

    return NULL;
}


PyDoc_STRVAR(doc_FbxImplementation_AddNewBindingOperator, "AddNewBindingOperator(self, str, str) -> FbxBindingOperator");

extern "C" {static PyObject *meth_FbxImplementation_AddNewBindingOperator(PyObject *, PyObject *);}
static PyObject *meth_FbxImplementation_AddNewBindingOperator(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const char* a0;
        PyObject *a0Keep;
        const char* a1;
        PyObject *a1Keep;
         ::FbxImplementation *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BA8A8", &sipSelf, sipType_FbxImplementation, &sipCpp, &a0Keep, &a0, &a1Keep, &a1))
        {
             ::FbxBindingOperator*sipRes;

            sipRes = sipCpp->AddNewBindingOperator(a0,a1);
            Py_DECREF(a0Keep);
            Py_DECREF(a1Keep);

            return sipConvertFromType(sipRes,sipType_FbxBindingOperator,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxImplementation, sipName_AddNewBindingOperator, doc_FbxImplementation_AddNewBindingOperator);

    return NULL;
}


PyDoc_STRVAR(doc_FbxImplementation_GetBindingOperatorCount, "GetBindingOperatorCount(self) -> int");

extern "C" {static PyObject *meth_FbxImplementation_GetBindingOperatorCount(PyObject *, PyObject *);}
static PyObject *meth_FbxImplementation_GetBindingOperatorCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::FbxImplementation *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxImplementation, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->GetBindingOperatorCount();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxImplementation, sipName_GetBindingOperatorCount, doc_FbxImplementation_GetBindingOperatorCount);

    return NULL;
}


PyDoc_STRVAR(doc_FbxImplementation_GetOperatorByTargetName, "GetOperatorByTargetName(self, str) -> FbxBindingOperator");

extern "C" {static PyObject *meth_FbxImplementation_GetOperatorByTargetName(PyObject *, PyObject *);}
static PyObject *meth_FbxImplementation_GetOperatorByTargetName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const char* a0;
        PyObject *a0Keep;
        const  ::FbxImplementation *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BA8", &sipSelf, sipType_FbxImplementation, &sipCpp, &a0Keep, &a0))
        {
            const  ::FbxBindingOperator*sipRes;

            sipRes = sipCpp->GetOperatorByTargetName(a0);
            Py_DECREF(a0Keep);

            return sipConvertFromType(const_cast< ::FbxBindingOperator *>(sipRes),sipType_FbxBindingOperator,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxImplementation, sipName_GetOperatorByTargetName, doc_FbxImplementation_GetOperatorByTargetName);

    return NULL;
}


extern "C" {static PyObject *slot_FbxImplementation___ne__(PyObject *,PyObject *);}
static PyObject *slot_FbxImplementation___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::FbxImplementation *sipCpp = reinterpret_cast< ::FbxImplementation *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_FbxImplementation));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const  ::FbxImplementation* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_FbxImplementation, &a0))
        {
            bool sipRes;

            sipRes = !sipCpp-> ::FbxImplementation::operator==(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_fbx, ne_slot, sipType_FbxImplementation, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_FbxImplementation___eq__(PyObject *,PyObject *);}
static PyObject *slot_FbxImplementation___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::FbxImplementation *sipCpp = reinterpret_cast< ::FbxImplementation *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_FbxImplementation));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const  ::FbxImplementation* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_FbxImplementation, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::FbxImplementation::operator==(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_fbx, eq_slot, sipType_FbxImplementation, sipSelf, sipArg);
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_FbxImplementation(void *, const sipTypeDef *);}
static void *cast_FbxImplementation(void *sipCppV, const sipTypeDef *targetType)
{
     ::FbxImplementation *sipCpp = reinterpret_cast< ::FbxImplementation *>(sipCppV);

    if (targetType == sipType_FbxObject)
        return static_cast< ::FbxObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_FbxImplementation(void *, int);}
static void release_FbxImplementation(void *, int)
{
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_FbxImplementation[] = {{244, 255, 1}};


/* Define this type's Python slots. */
static sipPySlotDef slots_FbxImplementation[] = {
    {(void *)slot_FbxImplementation___ne__, ne_slot},
    {(void *)slot_FbxImplementation___eq__, eq_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_FbxImplementation[] = {
    {SIP_MLNAME_CAST(sipName_AddNewBindingOperator), meth_FbxImplementation_AddNewBindingOperator, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxImplementation_AddNewBindingOperator)},
    {SIP_MLNAME_CAST(sipName_AddNewTable), meth_FbxImplementation_AddNewTable, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxImplementation_AddNewTable)},
    {SIP_MLNAME_CAST(sipName_Create), meth_FbxImplementation_Create, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxImplementation_Create)},
    {SIP_MLNAME_CAST(sipName_GetBindingOperatorCount), meth_FbxImplementation_GetBindingOperatorCount, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxImplementation_GetBindingOperatorCount)},
    {SIP_MLNAME_CAST(sipName_GetClassId), meth_FbxImplementation_GetClassId, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxImplementation_GetClassId)},
    {SIP_MLNAME_CAST(sipName_GetConstants), meth_FbxImplementation_GetConstants, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxImplementation_GetConstants)},
    {SIP_MLNAME_CAST(sipName_GetOperatorByTargetName), meth_FbxImplementation_GetOperatorByTargetName, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxImplementation_GetOperatorByTargetName)},
    {SIP_MLNAME_CAST(sipName_GetRootTable), meth_FbxImplementation_GetRootTable, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxImplementation_GetRootTable)},
    {SIP_MLNAME_CAST(sipName_GetTable), meth_FbxImplementation_GetTable, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxImplementation_GetTable)},
    {SIP_MLNAME_CAST(sipName_GetTableByTargetName), meth_FbxImplementation_GetTableByTargetName, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxImplementation_GetTableByTargetName)},
    {SIP_MLNAME_CAST(sipName_GetTableByTargetType), meth_FbxImplementation_GetTableByTargetType, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxImplementation_GetTableByTargetType)},
    {SIP_MLNAME_CAST(sipName_GetTableCount), meth_FbxImplementation_GetTableCount, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxImplementation_GetTableCount)}
};


extern "C" {static PyObject *varget_FbxImplementation_ClassId(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxImplementation_ClassId(void *, PyObject *, PyObject *)
{
     ::FbxClassId*sipVal;

    sipVal = & ::FbxImplementation::ClassId;

    return sipConvertFromType(sipVal, sipType_FbxClassId, NULL);
}


extern "C" {static int varset_FbxImplementation_ClassId(void *, PyObject *, PyObject *);}
static int varset_FbxImplementation_ClassId(void *, PyObject *sipPy, PyObject *)
{
     ::FbxClassId*sipVal;
    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxClassId *>(sipForceConvertToType(sipPy,sipType_FbxClassId,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

     ::FbxImplementation::ClassId = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxImplementation_Language(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxImplementation_Language(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyString*sipVal;
     ::FbxImplementation *sipCpp = reinterpret_cast< ::FbxImplementation *>(sipSelf);

    sipVal = &sipCpp->Language;

    return sipConvertFromType(sipVal, sipType_FbxPropertyString, NULL);
}


extern "C" {static int varset_FbxImplementation_Language(void *, PyObject *, PyObject *);}
static int varset_FbxImplementation_Language(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyString*sipVal;
     ::FbxImplementation *sipCpp = reinterpret_cast< ::FbxImplementation *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyString *>(sipForceConvertToType(sipPy,sipType_FbxPropertyString,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->Language = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxImplementation_LanguageVersion(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxImplementation_LanguageVersion(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyString*sipVal;
     ::FbxImplementation *sipCpp = reinterpret_cast< ::FbxImplementation *>(sipSelf);

    sipVal = &sipCpp->LanguageVersion;

    return sipConvertFromType(sipVal, sipType_FbxPropertyString, NULL);
}


extern "C" {static int varset_FbxImplementation_LanguageVersion(void *, PyObject *, PyObject *);}
static int varset_FbxImplementation_LanguageVersion(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyString*sipVal;
     ::FbxImplementation *sipCpp = reinterpret_cast< ::FbxImplementation *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyString *>(sipForceConvertToType(sipPy,sipType_FbxPropertyString,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->LanguageVersion = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxImplementation_RenderAPI(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxImplementation_RenderAPI(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyString*sipVal;
     ::FbxImplementation *sipCpp = reinterpret_cast< ::FbxImplementation *>(sipSelf);

    sipVal = &sipCpp->RenderAPI;

    return sipConvertFromType(sipVal, sipType_FbxPropertyString, NULL);
}


extern "C" {static int varset_FbxImplementation_RenderAPI(void *, PyObject *, PyObject *);}
static int varset_FbxImplementation_RenderAPI(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyString*sipVal;
     ::FbxImplementation *sipCpp = reinterpret_cast< ::FbxImplementation *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyString *>(sipForceConvertToType(sipPy,sipType_FbxPropertyString,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->RenderAPI = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxImplementation_RenderAPIVersion(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxImplementation_RenderAPIVersion(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyString*sipVal;
     ::FbxImplementation *sipCpp = reinterpret_cast< ::FbxImplementation *>(sipSelf);

    sipVal = &sipCpp->RenderAPIVersion;

    return sipConvertFromType(sipVal, sipType_FbxPropertyString, NULL);
}


extern "C" {static int varset_FbxImplementation_RenderAPIVersion(void *, PyObject *, PyObject *);}
static int varset_FbxImplementation_RenderAPIVersion(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyString*sipVal;
     ::FbxImplementation *sipCpp = reinterpret_cast< ::FbxImplementation *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyString *>(sipForceConvertToType(sipPy,sipType_FbxPropertyString,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->RenderAPIVersion = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxImplementation_RenderName(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxImplementation_RenderName(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxString*sipVal;
     ::FbxImplementation *sipCpp = reinterpret_cast< ::FbxImplementation *>(sipSelf);

    sipVal = &sipCpp->RenderName;

    return sipConvertFromType(sipVal, sipType_FbxString, NULL);
}


extern "C" {static int varset_FbxImplementation_RenderName(void *, PyObject *, PyObject *);}
static int varset_FbxImplementation_RenderName(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxString*sipVal;
     ::FbxImplementation *sipCpp = reinterpret_cast< ::FbxImplementation *>(sipSelf);

    int sipValState;
    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxString *>(sipForceConvertToType(sipPy,sipType_FbxString,NULL,SIP_NOT_NONE,&sipValState,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->RenderName = *sipVal;

    sipReleaseType(sipVal, sipType_FbxString, sipValState);

    return 0;
}


extern "C" {static PyObject *varget_FbxImplementation_RootBindingName(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxImplementation_RootBindingName(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyString*sipVal;
     ::FbxImplementation *sipCpp = reinterpret_cast< ::FbxImplementation *>(sipSelf);

    sipVal = &sipCpp->RootBindingName;

    return sipConvertFromType(sipVal, sipType_FbxPropertyString, NULL);
}


extern "C" {static int varset_FbxImplementation_RootBindingName(void *, PyObject *, PyObject *);}
static int varset_FbxImplementation_RootBindingName(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyString*sipVal;
     ::FbxImplementation *sipCpp = reinterpret_cast< ::FbxImplementation *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyString *>(sipForceConvertToType(sipPy,sipType_FbxPropertyString,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->RootBindingName = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxImplementation_sConstants(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxImplementation_sConstants(void *, PyObject *, PyObject *)
{
    static PyObject *sipPy = NULL;
    const char*sipVal;

    if (sipPy)
    {
        Py_INCREF(sipPy);
        return sipPy;
    }

    sipVal =  ::FbxImplementation::sConstants;

    if (sipVal == NULL)
    {
        Py_INCREF(Py_None);
        return Py_None;
    }

#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromString(sipVal);
#else
    return PyUnicode_DecodeUTF8(sipVal, strlen(sipVal), NULL);
#endif
}


extern "C" {static int varset_FbxImplementation_sConstants(void *, PyObject *, PyObject *);}
static int varset_FbxImplementation_sConstants(void *, PyObject *sipPy, PyObject *)
{
    const char*sipVal;
    sipVal = sipString_AsUTF8String(&sipPy);

    if (PyErr_Occurred() != NULL)
        return -1;

     ::FbxImplementation::sConstants = sipVal;

    static PyObject *sipKeep = 0;

    Py_XDECREF(sipKeep);
    sipKeep = sipPy;
    Py_INCREF(sipKeep);

    return 0;
}


extern "C" {static PyObject *varget_FbxImplementation_sDefaultLanguage(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxImplementation_sDefaultLanguage(void *, PyObject *, PyObject *)
{
    static PyObject *sipPy = NULL;
    const char*sipVal;

    if (sipPy)
    {
        Py_INCREF(sipPy);
        return sipPy;
    }

    sipVal =  ::FbxImplementation::sDefaultLanguage;

    if (sipVal == NULL)
    {
        Py_INCREF(Py_None);
        return Py_None;
    }

#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromString(sipVal);
#else
    return PyUnicode_DecodeUTF8(sipVal, strlen(sipVal), NULL);
#endif
}


extern "C" {static int varset_FbxImplementation_sDefaultLanguage(void *, PyObject *, PyObject *);}
static int varset_FbxImplementation_sDefaultLanguage(void *, PyObject *sipPy, PyObject *)
{
    const char*sipVal;
    sipVal = sipString_AsUTF8String(&sipPy);

    if (PyErr_Occurred() != NULL)
        return -1;

     ::FbxImplementation::sDefaultLanguage = sipVal;

    static PyObject *sipKeep = 0;

    Py_XDECREF(sipKeep);
    sipKeep = sipPy;
    Py_INCREF(sipKeep);

    return 0;
}


extern "C" {static PyObject *varget_FbxImplementation_sDefaultLanguageVersion(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxImplementation_sDefaultLanguageVersion(void *, PyObject *, PyObject *)
{
    static PyObject *sipPy = NULL;
    const char*sipVal;

    if (sipPy)
    {
        Py_INCREF(sipPy);
        return sipPy;
    }

    sipVal =  ::FbxImplementation::sDefaultLanguageVersion;

    if (sipVal == NULL)
    {
        Py_INCREF(Py_None);
        return Py_None;
    }

#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromString(sipVal);
#else
    return PyUnicode_DecodeUTF8(sipVal, strlen(sipVal), NULL);
#endif
}


extern "C" {static int varset_FbxImplementation_sDefaultLanguageVersion(void *, PyObject *, PyObject *);}
static int varset_FbxImplementation_sDefaultLanguageVersion(void *, PyObject *sipPy, PyObject *)
{
    const char*sipVal;
    sipVal = sipString_AsUTF8String(&sipPy);

    if (PyErr_Occurred() != NULL)
        return -1;

     ::FbxImplementation::sDefaultLanguageVersion = sipVal;

    static PyObject *sipKeep = 0;

    Py_XDECREF(sipKeep);
    sipKeep = sipPy;
    Py_INCREF(sipKeep);

    return 0;
}


extern "C" {static PyObject *varget_FbxImplementation_sDefaultRenderAPI(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxImplementation_sDefaultRenderAPI(void *, PyObject *, PyObject *)
{
    static PyObject *sipPy = NULL;
    const char*sipVal;

    if (sipPy)
    {
        Py_INCREF(sipPy);
        return sipPy;
    }

    sipVal =  ::FbxImplementation::sDefaultRenderAPI;

    if (sipVal == NULL)
    {
        Py_INCREF(Py_None);
        return Py_None;
    }

#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromString(sipVal);
#else
    return PyUnicode_DecodeUTF8(sipVal, strlen(sipVal), NULL);
#endif
}


extern "C" {static int varset_FbxImplementation_sDefaultRenderAPI(void *, PyObject *, PyObject *);}
static int varset_FbxImplementation_sDefaultRenderAPI(void *, PyObject *sipPy, PyObject *)
{
    const char*sipVal;
    sipVal = sipString_AsUTF8String(&sipPy);

    if (PyErr_Occurred() != NULL)
        return -1;

     ::FbxImplementation::sDefaultRenderAPI = sipVal;

    static PyObject *sipKeep = 0;

    Py_XDECREF(sipKeep);
    sipKeep = sipPy;
    Py_INCREF(sipKeep);

    return 0;
}


extern "C" {static PyObject *varget_FbxImplementation_sDefaultRenderAPIVersion(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxImplementation_sDefaultRenderAPIVersion(void *, PyObject *, PyObject *)
{
    static PyObject *sipPy = NULL;
    const char*sipVal;

    if (sipPy)
    {
        Py_INCREF(sipPy);
        return sipPy;
    }

    sipVal =  ::FbxImplementation::sDefaultRenderAPIVersion;

    if (sipVal == NULL)
    {
        Py_INCREF(Py_None);
        return Py_None;
    }

#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromString(sipVal);
#else
    return PyUnicode_DecodeUTF8(sipVal, strlen(sipVal), NULL);
#endif
}


extern "C" {static int varset_FbxImplementation_sDefaultRenderAPIVersion(void *, PyObject *, PyObject *);}
static int varset_FbxImplementation_sDefaultRenderAPIVersion(void *, PyObject *sipPy, PyObject *)
{
    const char*sipVal;
    sipVal = sipString_AsUTF8String(&sipPy);

    if (PyErr_Occurred() != NULL)
        return -1;

     ::FbxImplementation::sDefaultRenderAPIVersion = sipVal;

    static PyObject *sipKeep = 0;

    Py_XDECREF(sipKeep);
    sipKeep = sipPy;
    Py_INCREF(sipKeep);

    return 0;
}


extern "C" {static PyObject *varget_FbxImplementation_sDefaultRootBindingName(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxImplementation_sDefaultRootBindingName(void *, PyObject *, PyObject *)
{
    static PyObject *sipPy = NULL;
    const char*sipVal;

    if (sipPy)
    {
        Py_INCREF(sipPy);
        return sipPy;
    }

    sipVal =  ::FbxImplementation::sDefaultRootBindingName;

    if (sipVal == NULL)
    {
        Py_INCREF(Py_None);
        return Py_None;
    }

#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromString(sipVal);
#else
    return PyUnicode_DecodeUTF8(sipVal, strlen(sipVal), NULL);
#endif
}


extern "C" {static int varset_FbxImplementation_sDefaultRootBindingName(void *, PyObject *, PyObject *);}
static int varset_FbxImplementation_sDefaultRootBindingName(void *, PyObject *sipPy, PyObject *)
{
    const char*sipVal;
    sipVal = sipString_AsUTF8String(&sipPy);

    if (PyErr_Occurred() != NULL)
        return -1;

     ::FbxImplementation::sDefaultRootBindingName = sipVal;

    static PyObject *sipKeep = 0;

    Py_XDECREF(sipKeep);
    sipKeep = sipPy;
    Py_INCREF(sipKeep);

    return 0;
}


extern "C" {static PyObject *varget_FbxImplementation_sLanguage(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxImplementation_sLanguage(void *, PyObject *, PyObject *)
{
    static PyObject *sipPy = NULL;
    const char*sipVal;

    if (sipPy)
    {
        Py_INCREF(sipPy);
        return sipPy;
    }

    sipVal =  ::FbxImplementation::sLanguage;

    if (sipVal == NULL)
    {
        Py_INCREF(Py_None);
        return Py_None;
    }

#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromString(sipVal);
#else
    return PyUnicode_DecodeUTF8(sipVal, strlen(sipVal), NULL);
#endif
}


extern "C" {static int varset_FbxImplementation_sLanguage(void *, PyObject *, PyObject *);}
static int varset_FbxImplementation_sLanguage(void *, PyObject *sipPy, PyObject *)
{
    const char*sipVal;
    sipVal = sipString_AsUTF8String(&sipPy);

    if (PyErr_Occurred() != NULL)
        return -1;

     ::FbxImplementation::sLanguage = sipVal;

    static PyObject *sipKeep = 0;

    Py_XDECREF(sipKeep);
    sipKeep = sipPy;
    Py_INCREF(sipKeep);

    return 0;
}


extern "C" {static PyObject *varget_FbxImplementation_sLanguageVersion(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxImplementation_sLanguageVersion(void *, PyObject *, PyObject *)
{
    static PyObject *sipPy = NULL;
    const char*sipVal;

    if (sipPy)
    {
        Py_INCREF(sipPy);
        return sipPy;
    }

    sipVal =  ::FbxImplementation::sLanguageVersion;

    if (sipVal == NULL)
    {
        Py_INCREF(Py_None);
        return Py_None;
    }

#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromString(sipVal);
#else
    return PyUnicode_DecodeUTF8(sipVal, strlen(sipVal), NULL);
#endif
}


extern "C" {static int varset_FbxImplementation_sLanguageVersion(void *, PyObject *, PyObject *);}
static int varset_FbxImplementation_sLanguageVersion(void *, PyObject *sipPy, PyObject *)
{
    const char*sipVal;
    sipVal = sipString_AsUTF8String(&sipPy);

    if (PyErr_Occurred() != NULL)
        return -1;

     ::FbxImplementation::sLanguageVersion = sipVal;

    static PyObject *sipKeep = 0;

    Py_XDECREF(sipKeep);
    sipKeep = sipPy;
    Py_INCREF(sipKeep);

    return 0;
}


extern "C" {static PyObject *varget_FbxImplementation_sRenderAPI(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxImplementation_sRenderAPI(void *, PyObject *, PyObject *)
{
    static PyObject *sipPy = NULL;
    const char*sipVal;

    if (sipPy)
    {
        Py_INCREF(sipPy);
        return sipPy;
    }

    sipVal =  ::FbxImplementation::sRenderAPI;

    if (sipVal == NULL)
    {
        Py_INCREF(Py_None);
        return Py_None;
    }

#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromString(sipVal);
#else
    return PyUnicode_DecodeUTF8(sipVal, strlen(sipVal), NULL);
#endif
}


extern "C" {static int varset_FbxImplementation_sRenderAPI(void *, PyObject *, PyObject *);}
static int varset_FbxImplementation_sRenderAPI(void *, PyObject *sipPy, PyObject *)
{
    const char*sipVal;
    sipVal = sipString_AsUTF8String(&sipPy);

    if (PyErr_Occurred() != NULL)
        return -1;

     ::FbxImplementation::sRenderAPI = sipVal;

    static PyObject *sipKeep = 0;

    Py_XDECREF(sipKeep);
    sipKeep = sipPy;
    Py_INCREF(sipKeep);

    return 0;
}


extern "C" {static PyObject *varget_FbxImplementation_sRenderAPIVersion(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxImplementation_sRenderAPIVersion(void *, PyObject *, PyObject *)
{
    static PyObject *sipPy = NULL;
    const char*sipVal;

    if (sipPy)
    {
        Py_INCREF(sipPy);
        return sipPy;
    }

    sipVal =  ::FbxImplementation::sRenderAPIVersion;

    if (sipVal == NULL)
    {
        Py_INCREF(Py_None);
        return Py_None;
    }

#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromString(sipVal);
#else
    return PyUnicode_DecodeUTF8(sipVal, strlen(sipVal), NULL);
#endif
}


extern "C" {static int varset_FbxImplementation_sRenderAPIVersion(void *, PyObject *, PyObject *);}
static int varset_FbxImplementation_sRenderAPIVersion(void *, PyObject *sipPy, PyObject *)
{
    const char*sipVal;
    sipVal = sipString_AsUTF8String(&sipPy);

    if (PyErr_Occurred() != NULL)
        return -1;

     ::FbxImplementation::sRenderAPIVersion = sipVal;

    static PyObject *sipKeep = 0;

    Py_XDECREF(sipKeep);
    sipKeep = sipPy;
    Py_INCREF(sipKeep);

    return 0;
}


extern "C" {static PyObject *varget_FbxImplementation_sRootBindingName(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxImplementation_sRootBindingName(void *, PyObject *, PyObject *)
{
    static PyObject *sipPy = NULL;
    const char*sipVal;

    if (sipPy)
    {
        Py_INCREF(sipPy);
        return sipPy;
    }

    sipVal =  ::FbxImplementation::sRootBindingName;

    if (sipVal == NULL)
    {
        Py_INCREF(Py_None);
        return Py_None;
    }

#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromString(sipVal);
#else
    return PyUnicode_DecodeUTF8(sipVal, strlen(sipVal), NULL);
#endif
}


extern "C" {static int varset_FbxImplementation_sRootBindingName(void *, PyObject *, PyObject *);}
static int varset_FbxImplementation_sRootBindingName(void *, PyObject *sipPy, PyObject *)
{
    const char*sipVal;
    sipVal = sipString_AsUTF8String(&sipPy);

    if (PyErr_Occurred() != NULL)
        return -1;

     ::FbxImplementation::sRootBindingName = sipVal;

    static PyObject *sipKeep = 0;

    Py_XDECREF(sipKeep);
    sipKeep = sipPy;
    Py_INCREF(sipKeep);

    return 0;
}

sipVariableDef variables_FbxImplementation[] = {
    {ClassVariable, sipName_ClassId, (PyMethodDef *)varget_FbxImplementation_ClassId, (PyMethodDef *)varset_FbxImplementation_ClassId, NULL, NULL},
    {InstanceVariable, sipName_Language, (PyMethodDef *)varget_FbxImplementation_Language, (PyMethodDef *)varset_FbxImplementation_Language, NULL, NULL},
    {InstanceVariable, sipName_LanguageVersion, (PyMethodDef *)varget_FbxImplementation_LanguageVersion, (PyMethodDef *)varset_FbxImplementation_LanguageVersion, NULL, NULL},
    {InstanceVariable, sipName_RenderAPI, (PyMethodDef *)varget_FbxImplementation_RenderAPI, (PyMethodDef *)varset_FbxImplementation_RenderAPI, NULL, NULL},
    {InstanceVariable, sipName_RenderAPIVersion, (PyMethodDef *)varget_FbxImplementation_RenderAPIVersion, (PyMethodDef *)varset_FbxImplementation_RenderAPIVersion, NULL, NULL},
    {InstanceVariable, sipName_RenderName, (PyMethodDef *)varget_FbxImplementation_RenderName, (PyMethodDef *)varset_FbxImplementation_RenderName, NULL, NULL},
    {InstanceVariable, sipName_RootBindingName, (PyMethodDef *)varget_FbxImplementation_RootBindingName, (PyMethodDef *)varset_FbxImplementation_RootBindingName, NULL, NULL},
    {ClassVariable, sipName_sConstants, (PyMethodDef *)varget_FbxImplementation_sConstants, (PyMethodDef *)varset_FbxImplementation_sConstants, NULL, NULL},
    {ClassVariable, sipName_sDefaultLanguage, (PyMethodDef *)varget_FbxImplementation_sDefaultLanguage, (PyMethodDef *)varset_FbxImplementation_sDefaultLanguage, NULL, NULL},
    {ClassVariable, sipName_sDefaultLanguageVersion, (PyMethodDef *)varget_FbxImplementation_sDefaultLanguageVersion, (PyMethodDef *)varset_FbxImplementation_sDefaultLanguageVersion, NULL, NULL},
    {ClassVariable, sipName_sDefaultRenderAPI, (PyMethodDef *)varget_FbxImplementation_sDefaultRenderAPI, (PyMethodDef *)varset_FbxImplementation_sDefaultRenderAPI, NULL, NULL},
    {ClassVariable, sipName_sDefaultRenderAPIVersion, (PyMethodDef *)varget_FbxImplementation_sDefaultRenderAPIVersion, (PyMethodDef *)varset_FbxImplementation_sDefaultRenderAPIVersion, NULL, NULL},
    {ClassVariable, sipName_sDefaultRootBindingName, (PyMethodDef *)varget_FbxImplementation_sDefaultRootBindingName, (PyMethodDef *)varset_FbxImplementation_sDefaultRootBindingName, NULL, NULL},
    {ClassVariable, sipName_sLanguage, (PyMethodDef *)varget_FbxImplementation_sLanguage, (PyMethodDef *)varset_FbxImplementation_sLanguage, NULL, NULL},
    {ClassVariable, sipName_sLanguageVersion, (PyMethodDef *)varget_FbxImplementation_sLanguageVersion, (PyMethodDef *)varset_FbxImplementation_sLanguageVersion, NULL, NULL},
    {ClassVariable, sipName_sRenderAPI, (PyMethodDef *)varget_FbxImplementation_sRenderAPI, (PyMethodDef *)varset_FbxImplementation_sRenderAPI, NULL, NULL},
    {ClassVariable, sipName_sRenderAPIVersion, (PyMethodDef *)varget_FbxImplementation_sRenderAPIVersion, (PyMethodDef *)varset_FbxImplementation_sRenderAPIVersion, NULL, NULL},
    {ClassVariable, sipName_sRootBindingName, (PyMethodDef *)varget_FbxImplementation_sRootBindingName, (PyMethodDef *)varset_FbxImplementation_sRootBindingName, NULL, NULL},
};


sipClassTypeDef sipTypeDef_fbx_FbxImplementation = {
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_FbxImplementation,
        {0},
        0
    },
    {
        sipNameNr_FbxImplementation,
        {0, 0, 1},
        12, methods_FbxImplementation,
        0, 0,
        18, variables_FbxImplementation,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    0,
    -1,
    -1,
    supers_FbxImplementation,
    slots_FbxImplementation,
    0,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    0,
    0,
    0,
    0,
    release_FbxImplementation,
    cast_FbxImplementation,
    0,
    0,
    0,
    0,
    0,
    0
};
