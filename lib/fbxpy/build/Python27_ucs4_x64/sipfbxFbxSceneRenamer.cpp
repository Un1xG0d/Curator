/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.3
 *
 * Copyright (C) 2009 Autodesk, Inc. and/or its licensors.
 * All Rights Reserved.
 * 
 * The coded instructions, statements, computer programs, and/or related material 
 * (collectively the "Data") in these files contain unpublished information 
 * proprietary to Autodesk, Inc. and/or its licensors, which is protected by 
 * Canada and United States of America federal copyright law and by international 
 * treaties. 
 * 
 * The Data may not be disclosed or distributed to third parties, in whole or in
 * part, without the prior written consent of Autodesk, Inc. ("Autodesk").
 * 
 * THE DATA IS PROVIDED "AS IS" AND WITHOUT WARRANTY.
 * ALL WARRANTIES ARE EXPRESSLY EXCLUDED AND DISCLAIMED. AUTODESK MAKES NO
 * WARRANTY OF ANY KIND WITH RESPECT TO THE DATA, EXPRESS, IMPLIED OR ARISING
 * BY CUSTOM OR TRADE USAGE, AND DISCLAIMS ANY IMPLIED WARRANTIES OF TITLE, 
 * NON-INFRINGEMENT, MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE OR USE. 
 * WITHOUT LIMITING THE FOREGOING, AUTODESK DOES NOT WARRANT THAT THE OPERATION
 * OF THE DATA WILL BE UNINTERRUPTED OR ERROR FREE. 
 * 
 * IN NO EVENT SHALL AUTODESK, ITS AFFILIATES, PARENT COMPANIES, LICENSORS
 * OR SUPPLIERS ("AUTODESK GROUP") BE LIABLE FOR ANY LOSSES, DAMAGES OR EXPENSES
 * OF ANY KIND (INCLUDING WITHOUT LIMITATION PUNITIVE OR MULTIPLE DAMAGES OR OTHER
 * SPECIAL, DIRECT, INDIRECT, EXEMPLARY, INCIDENTAL, LOSS OF PROFITS, REVENUE
 * OR DATA, COST OF COVER OR CONSEQUENTIAL LOSSES OR DAMAGES OF ANY KIND),
 * HOWEVER CAUSED, AND REGARDLESS OF THE THEORY OF LIABILITY, WHETHER DERIVED
 * FROM CONTRACT, TORT (INCLUDING, BUT NOT LIMITED TO, NEGLIGENCE), OR OTHERWISE,
 * ARISING OUT OF OR RELATING TO THE DATA OR ITS USE OR ANY OTHER PERFORMANCE,
 * WHETHER OR NOT AUTODESK HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH LOSS
 * OR DAMAGE. 
 */

#include "sipAPIfbx.h"




class sipFbxSceneRenamer : public  ::FbxSceneRenamer
{
public:
    sipFbxSceneRenamer( ::FbxScene*);
    sipFbxSceneRenamer(const  ::FbxSceneRenamer&);
    ~sipFbxSceneRenamer();

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipFbxSceneRenamer(const sipFbxSceneRenamer &);
    sipFbxSceneRenamer &operator = (const sipFbxSceneRenamer &);
};

sipFbxSceneRenamer::sipFbxSceneRenamer( ::FbxScene*a0):  ::FbxSceneRenamer(a0), sipPySelf(0)
{
}

sipFbxSceneRenamer::sipFbxSceneRenamer(const  ::FbxSceneRenamer& a0):  ::FbxSceneRenamer(a0), sipPySelf(0)
{
}

sipFbxSceneRenamer::~sipFbxSceneRenamer()
{
    sipInstanceDestroyed(sipPySelf);
}


PyDoc_STRVAR(doc_FbxSceneRenamer_RenameFor, "RenameFor(self, FbxSceneRenamer.ERenamingMode)");

extern "C" {static PyObject *meth_FbxSceneRenamer_RenameFor(PyObject *, PyObject *);}
static PyObject *meth_FbxSceneRenamer_RenameFor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxSceneRenamer::ERenamingMode a0;
         ::FbxSceneRenamer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_FbxSceneRenamer, &sipCpp, sipType_FbxSceneRenamer_ERenamingMode, &a0))
        {
            sipCpp->RenameFor(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxSceneRenamer, sipName_RenameFor, doc_FbxSceneRenamer_RenameFor);

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_FbxSceneRenamer(void *, int);}
static void release_FbxSceneRenamer(void *sipCppV, int sipState)
{
    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipFbxSceneRenamer *>(sipCppV);
    else
        delete reinterpret_cast< ::FbxSceneRenamer *>(sipCppV);
}


extern "C" {static void dealloc_FbxSceneRenamer(sipSimpleWrapper *);}
static void dealloc_FbxSceneRenamer(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipFbxSceneRenamer *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_FbxSceneRenamer(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_FbxSceneRenamer(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_FbxSceneRenamer(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipFbxSceneRenamer *sipCpp = 0;

    {
         ::FbxScene* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J8", sipType_FbxScene, &a0))
        {
            sipCpp = new sipFbxSceneRenamer(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const  ::FbxSceneRenamer* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_FbxSceneRenamer, &a0))
        {
            sipCpp = new sipFbxSceneRenamer(*a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


static PyMethodDef methods_FbxSceneRenamer[] = {
    {SIP_MLNAME_CAST(sipName_RenameFor), meth_FbxSceneRenamer_RenameFor, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxSceneRenamer_RenameFor)}
};

static sipEnumMemberDef enummembers_FbxSceneRenamer[] = {
    {sipName_eDAE_TO_FBX, static_cast<int>( ::FbxSceneRenamer::eDAE_TO_FBX), 331},
    {sipName_eFBXMB75_TO_FBXMB70, static_cast<int>( ::FbxSceneRenamer::eFBXMB75_TO_FBXMB70), 331},
    {sipName_eFBX_TO_DAE, static_cast<int>( ::FbxSceneRenamer::eFBX_TO_DAE), 331},
    {sipName_eFBX_TO_FBX, static_cast<int>( ::FbxSceneRenamer::eFBX_TO_FBX), 331},
    {sipName_eFBX_TO_LW, static_cast<int>( ::FbxSceneRenamer::eFBX_TO_LW), 331},
    {sipName_eFBX_TO_MAX, static_cast<int>( ::FbxSceneRenamer::eFBX_TO_MAX), 331},
    {sipName_eFBX_TO_MAYA, static_cast<int>( ::FbxSceneRenamer::eFBX_TO_MAYA), 331},
    {sipName_eFBX_TO_MB, static_cast<int>( ::FbxSceneRenamer::eFBX_TO_MB), 331},
    {sipName_eFBX_TO_XSI, static_cast<int>( ::FbxSceneRenamer::eFBX_TO_XSI), 331},
    {sipName_eLW_TO_FBX, static_cast<int>( ::FbxSceneRenamer::eLW_TO_FBX), 331},
    {sipName_eMAX_TO_FBX, static_cast<int>( ::FbxSceneRenamer::eMAX_TO_FBX), 331},
    {sipName_eMAYA_TO_FBX, static_cast<int>( ::FbxSceneRenamer::eMAYA_TO_FBX), 331},
    {sipName_eMAYA_TO_FBX5, static_cast<int>( ::FbxSceneRenamer::eMAYA_TO_FBX5), 331},
    {sipName_eMAYA_TO_FBX_MB70, static_cast<int>( ::FbxSceneRenamer::eMAYA_TO_FBX_MB70), 331},
    {sipName_eMAYA_TO_FBX_MB75, static_cast<int>( ::FbxSceneRenamer::eMAYA_TO_FBX_MB75), 331},
    {sipName_eMB_TO_FBX, static_cast<int>( ::FbxSceneRenamer::eMB_TO_FBX), 331},
    {sipName_eNone, static_cast<int>( ::FbxSceneRenamer::eNone), 331},
    {sipName_eXSI_TO_FBX, static_cast<int>( ::FbxSceneRenamer::eXSI_TO_FBX), 331},
};

PyDoc_STRVAR(doc_FbxSceneRenamer, "\1FbxSceneRenamer(FbxScene)\n"
    "FbxSceneRenamer(FbxSceneRenamer)");


sipClassTypeDef sipTypeDef_fbx_FbxSceneRenamer = {
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_FbxSceneRenamer,
        {0},
        0
    },
    {
        sipNameNr_FbxSceneRenamer,
        {0, 0, 1},
        1, methods_FbxSceneRenamer,
        18, enummembers_FbxSceneRenamer,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_FbxSceneRenamer,
    -1,
    -1,
    0,
    0,
    init_type_FbxSceneRenamer,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_FbxSceneRenamer,
    0,
    0,
    0,
    release_FbxSceneRenamer,
    0,
    0,
    0,
    0,
    0,
    0,
    0
};
