/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.3
 *
 * Copyright (C) 2009 Autodesk, Inc. and/or its licensors.
 * All Rights Reserved.
 * 
 * The coded instructions, statements, computer programs, and/or related material 
 * (collectively the "Data") in these files contain unpublished information 
 * proprietary to Autodesk, Inc. and/or its licensors, which is protected by 
 * Canada and United States of America federal copyright law and by international 
 * treaties. 
 * 
 * The Data may not be disclosed or distributed to third parties, in whole or in
 * part, without the prior written consent of Autodesk, Inc. ("Autodesk").
 * 
 * THE DATA IS PROVIDED "AS IS" AND WITHOUT WARRANTY.
 * ALL WARRANTIES ARE EXPRESSLY EXCLUDED AND DISCLAIMED. AUTODESK MAKES NO
 * WARRANTY OF ANY KIND WITH RESPECT TO THE DATA, EXPRESS, IMPLIED OR ARISING
 * BY CUSTOM OR TRADE USAGE, AND DISCLAIMS ANY IMPLIED WARRANTIES OF TITLE, 
 * NON-INFRINGEMENT, MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE OR USE. 
 * WITHOUT LIMITING THE FOREGOING, AUTODESK DOES NOT WARRANT THAT THE OPERATION
 * OF THE DATA WILL BE UNINTERRUPTED OR ERROR FREE. 
 * 
 * IN NO EVENT SHALL AUTODESK, ITS AFFILIATES, PARENT COMPANIES, LICENSORS
 * OR SUPPLIERS ("AUTODESK GROUP") BE LIABLE FOR ANY LOSSES, DAMAGES OR EXPENSES
 * OF ANY KIND (INCLUDING WITHOUT LIMITATION PUNITIVE OR MULTIPLE DAMAGES OR OTHER
 * SPECIAL, DIRECT, INDIRECT, EXEMPLARY, INCIDENTAL, LOSS OF PROFITS, REVENUE
 * OR DATA, COST OF COVER OR CONSEQUENTIAL LOSSES OR DAMAGES OF ANY KIND),
 * HOWEVER CAUSED, AND REGARDLESS OF THE THEORY OF LIABILITY, WHETHER DERIVED
 * FROM CONTRACT, TORT (INCLUDING, BUT NOT LIMITED TO, NEGLIGENCE), OR OTHERWISE,
 * ARISING OUT OF OR RELATING TO THE DATA OR ITS USE OR ANY OTHER PERFORMANCE,
 * WHETHER OR NOT AUTODESK HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH LOSS
 * OR DAMAGE. 
 */

#include "sipAPIfbx.h"




PyDoc_STRVAR(doc_FbxNodeAttribute_Create, "Create(FbxManager, str) -> FbxNodeAttribute\n"
    "Create(FbxObject, str) -> FbxNodeAttribute");

extern "C" {static PyObject *meth_FbxNodeAttribute_Create(PyObject *, PyObject *);}
static PyObject *meth_FbxNodeAttribute_Create(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxManager* a0;
        const char* a1;
        PyObject *a1Keep;

        if (sipParseArgs(&sipParseErr, sipArgs, "J8A8", sipType_FbxManager, &a0, &a1Keep, &a1))
        {
             ::FbxNodeAttribute*sipRes;

            sipRes =  ::FbxNodeAttribute::Create(a0,a1);
            Py_DECREF(a1Keep);

            return sipConvertFromType(sipRes,sipType_FbxNodeAttribute,NULL);
        }
    }

    {
         ::FbxObject* a0;
        const char* a1;
        PyObject *a1Keep;

        if (sipParseArgs(&sipParseErr, sipArgs, "J8A8", sipType_FbxObject, &a0, &a1Keep, &a1))
        {
             ::FbxNodeAttribute*sipRes;

            sipRes =  ::FbxNodeAttribute::Create(a0,a1);
            Py_DECREF(a1Keep);

            return sipConvertFromType(sipRes,sipType_FbxNodeAttribute,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxNodeAttribute, sipName_Create, doc_FbxNodeAttribute_Create);

    return NULL;
}


PyDoc_STRVAR(doc_FbxNodeAttribute_GetClassId, "GetClassId(self) -> FbxClassId");

extern "C" {static PyObject *meth_FbxNodeAttribute_GetClassId(PyObject *, PyObject *);}
static PyObject *meth_FbxNodeAttribute_GetClassId(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::FbxNodeAttribute *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxNodeAttribute, &sipCpp))
        {
             ::FbxClassId*sipRes;

            sipRes = new  ::FbxClassId((sipSelfWasArg ? sipCpp-> ::FbxNodeAttribute::GetClassId() : sipCpp->GetClassId()));

            return sipConvertFromNewType(sipRes,sipType_FbxClassId,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxNodeAttribute, sipName_GetClassId, doc_FbxNodeAttribute_GetClassId);

    return NULL;
}


PyDoc_STRVAR(doc_FbxNodeAttribute_GetAttributeType, "GetAttributeType(self) -> FbxNodeAttribute.EType");

extern "C" {static PyObject *meth_FbxNodeAttribute_GetAttributeType(PyObject *, PyObject *);}
static PyObject *meth_FbxNodeAttribute_GetAttributeType(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::FbxNodeAttribute *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxNodeAttribute, &sipCpp))
        {
             ::FbxNodeAttribute::EType sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::FbxNodeAttribute::GetAttributeType() : sipCpp->GetAttributeType());

            return sipConvertFromEnum(sipRes,sipType_FbxNodeAttribute_EType);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxNodeAttribute, sipName_GetAttributeType, doc_FbxNodeAttribute_GetAttributeType);

    return NULL;
}


PyDoc_STRVAR(doc_FbxNodeAttribute_GetNodeCount, "GetNodeCount(self) -> int");

extern "C" {static PyObject *meth_FbxNodeAttribute_GetNodeCount(PyObject *, PyObject *);}
static PyObject *meth_FbxNodeAttribute_GetNodeCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxNodeAttribute *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxNodeAttribute, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->GetNodeCount();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxNodeAttribute, sipName_GetNodeCount, doc_FbxNodeAttribute_GetNodeCount);

    return NULL;
}


PyDoc_STRVAR(doc_FbxNodeAttribute_GetNode, "GetNode(self, int = 0) -> FbxNode");

extern "C" {static PyObject *meth_FbxNodeAttribute_GetNode(PyObject *, PyObject *);}
static PyObject *meth_FbxNodeAttribute_GetNode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0 = 0;
        const  ::FbxNodeAttribute *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B|i", &sipSelf, sipType_FbxNodeAttribute, &sipCpp, &a0))
        {
             ::FbxNode*sipRes;

            sipRes = sipCpp->GetNode(a0);

            return sipConvertFromType(sipRes,sipType_FbxNode,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxNodeAttribute, sipName_GetNode, doc_FbxNodeAttribute_GetNode);

    return NULL;
}


extern "C" {static PyObject *slot_FbxNodeAttribute___ne__(PyObject *,PyObject *);}
static PyObject *slot_FbxNodeAttribute___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::FbxNodeAttribute *sipCpp = reinterpret_cast< ::FbxNodeAttribute *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_FbxNodeAttribute));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const  ::FbxNodeAttribute* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_FbxNodeAttribute, &a0))
        {
            bool sipRes;

            sipRes = !sipCpp-> ::FbxNodeAttribute::operator==(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_fbx, ne_slot, sipType_FbxNodeAttribute, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_FbxNodeAttribute___eq__(PyObject *,PyObject *);}
static PyObject *slot_FbxNodeAttribute___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::FbxNodeAttribute *sipCpp = reinterpret_cast< ::FbxNodeAttribute *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_FbxNodeAttribute));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const  ::FbxNodeAttribute* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_FbxNodeAttribute, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::FbxNodeAttribute::operator==(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_fbx, eq_slot, sipType_FbxNodeAttribute, sipSelf, sipArg);
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_FbxNodeAttribute(void *, const sipTypeDef *);}
static void *cast_FbxNodeAttribute(void *sipCppV, const sipTypeDef *targetType)
{
     ::FbxNodeAttribute *sipCpp = reinterpret_cast< ::FbxNodeAttribute *>(sipCppV);

    if (targetType == sipType_FbxObject)
        return static_cast< ::FbxObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_FbxNodeAttribute(void *, int);}
static void release_FbxNodeAttribute(void *, int)
{
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_FbxNodeAttribute[] = {{244, 255, 1}};


/* Define this type's Python slots. */
static sipPySlotDef slots_FbxNodeAttribute[] = {
    {(void *)slot_FbxNodeAttribute___ne__, ne_slot},
    {(void *)slot_FbxNodeAttribute___eq__, eq_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_FbxNodeAttribute[] = {
    {SIP_MLNAME_CAST(sipName_Create), meth_FbxNodeAttribute_Create, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxNodeAttribute_Create)},
    {SIP_MLNAME_CAST(sipName_GetAttributeType), meth_FbxNodeAttribute_GetAttributeType, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxNodeAttribute_GetAttributeType)},
    {SIP_MLNAME_CAST(sipName_GetClassId), meth_FbxNodeAttribute_GetClassId, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxNodeAttribute_GetClassId)},
    {SIP_MLNAME_CAST(sipName_GetNode), meth_FbxNodeAttribute_GetNode, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxNodeAttribute_GetNode)},
    {SIP_MLNAME_CAST(sipName_GetNodeCount), meth_FbxNodeAttribute_GetNodeCount, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxNodeAttribute_GetNodeCount)}
};

static sipEnumMemberDef enummembers_FbxNodeAttribute[] = {
    {sipName_eBoundary, static_cast<int>( ::FbxNodeAttribute::eBoundary), 234},
    {sipName_eCachedEffect, static_cast<int>( ::FbxNodeAttribute::eCachedEffect), 234},
    {sipName_eCamera, static_cast<int>( ::FbxNodeAttribute::eCamera), 234},
    {sipName_eCameraStereo, static_cast<int>( ::FbxNodeAttribute::eCameraStereo), 234},
    {sipName_eCameraSwitcher, static_cast<int>( ::FbxNodeAttribute::eCameraSwitcher), 234},
    {sipName_eLODGroup, static_cast<int>( ::FbxNodeAttribute::eLODGroup), 234},
    {sipName_eLight, static_cast<int>( ::FbxNodeAttribute::eLight), 234},
    {sipName_eLine, static_cast<int>( ::FbxNodeAttribute::eLine), 234},
    {sipName_eMarker, static_cast<int>( ::FbxNodeAttribute::eMarker), 234},
    {sipName_eMesh, static_cast<int>( ::FbxNodeAttribute::eMesh), 234},
    {sipName_eNull, static_cast<int>( ::FbxNodeAttribute::eNull), 234},
    {sipName_eNurbs, static_cast<int>( ::FbxNodeAttribute::eNurbs), 234},
    {sipName_eNurbsCurve, static_cast<int>( ::FbxNodeAttribute::eNurbsCurve), 234},
    {sipName_eNurbsSurface, static_cast<int>( ::FbxNodeAttribute::eNurbsSurface), 234},
    {sipName_eOpticalMarker, static_cast<int>( ::FbxNodeAttribute::eOpticalMarker), 234},
    {sipName_eOpticalReference, static_cast<int>( ::FbxNodeAttribute::eOpticalReference), 234},
    {sipName_ePatch, static_cast<int>( ::FbxNodeAttribute::ePatch), 234},
    {sipName_eShape, static_cast<int>( ::FbxNodeAttribute::eShape), 234},
    {sipName_eSkeleton, static_cast<int>( ::FbxNodeAttribute::eSkeleton), 234},
    {sipName_eSubDiv, static_cast<int>( ::FbxNodeAttribute::eSubDiv), 234},
    {sipName_eTrimNurbsSurface, static_cast<int>( ::FbxNodeAttribute::eTrimNurbsSurface), 234},
    {sipName_eUnknown, static_cast<int>( ::FbxNodeAttribute::eUnknown), 234},
};


extern "C" {static PyObject *varget_FbxNodeAttribute_ClassId(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxNodeAttribute_ClassId(void *, PyObject *, PyObject *)
{
     ::FbxClassId*sipVal;

    sipVal = & ::FbxNodeAttribute::ClassId;

    return sipConvertFromType(sipVal, sipType_FbxClassId, NULL);
}


extern "C" {static int varset_FbxNodeAttribute_ClassId(void *, PyObject *, PyObject *);}
static int varset_FbxNodeAttribute_ClassId(void *, PyObject *sipPy, PyObject *)
{
     ::FbxClassId*sipVal;
    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxClassId *>(sipForceConvertToType(sipPy,sipType_FbxClassId,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

     ::FbxNodeAttribute::ClassId = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxNodeAttribute_Color(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxNodeAttribute_Color(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyDouble3*sipVal;
     ::FbxNodeAttribute *sipCpp = reinterpret_cast< ::FbxNodeAttribute *>(sipSelf);

    sipVal = &sipCpp->Color;

    return sipConvertFromType(sipVal, sipType_FbxPropertyDouble3, NULL);
}


extern "C" {static int varset_FbxNodeAttribute_Color(void *, PyObject *, PyObject *);}
static int varset_FbxNodeAttribute_Color(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyDouble3*sipVal;
     ::FbxNodeAttribute *sipCpp = reinterpret_cast< ::FbxNodeAttribute *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyDouble3 *>(sipForceConvertToType(sipPy,sipType_FbxPropertyDouble3,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->Color = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxNodeAttribute_sColor(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxNodeAttribute_sColor(void *, PyObject *, PyObject *)
{
    static PyObject *sipPy = NULL;
    const char*sipVal;

    if (sipPy)
    {
        Py_INCREF(sipPy);
        return sipPy;
    }

    sipVal =  ::FbxNodeAttribute::sColor;

    if (sipVal == NULL)
    {
        Py_INCREF(Py_None);
        return Py_None;
    }

#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromString(sipVal);
#else
    return PyUnicode_DecodeUTF8(sipVal, strlen(sipVal), NULL);
#endif
}


extern "C" {static int varset_FbxNodeAttribute_sColor(void *, PyObject *, PyObject *);}
static int varset_FbxNodeAttribute_sColor(void *, PyObject *sipPy, PyObject *)
{
    const char*sipVal;
    sipVal = sipString_AsUTF8String(&sipPy);

    if (PyErr_Occurred() != NULL)
        return -1;

     ::FbxNodeAttribute::sColor = sipVal;

    static PyObject *sipKeep = 0;

    Py_XDECREF(sipKeep);
    sipKeep = sipPy;
    Py_INCREF(sipKeep);

    return 0;
}


extern "C" {static PyObject *varget_FbxNodeAttribute_sDefaultColor(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxNodeAttribute_sDefaultColor(void *, PyObject *, PyObject *)
{
    const  ::FbxDouble3*sipVal;

    sipVal = new  ::FbxDouble3( ::FbxNodeAttribute::sDefaultColor);

    return sipConvertFromNewType(const_cast< ::FbxDouble3 *>(sipVal), sipType_FbxDouble3, NULL);
}

sipVariableDef variables_FbxNodeAttribute[] = {
    {ClassVariable, sipName_ClassId, (PyMethodDef *)varget_FbxNodeAttribute_ClassId, (PyMethodDef *)varset_FbxNodeAttribute_ClassId, NULL, NULL},
    {InstanceVariable, sipName_Color, (PyMethodDef *)varget_FbxNodeAttribute_Color, (PyMethodDef *)varset_FbxNodeAttribute_Color, NULL, NULL},
    {ClassVariable, sipName_sColor, (PyMethodDef *)varget_FbxNodeAttribute_sColor, (PyMethodDef *)varset_FbxNodeAttribute_sColor, NULL, NULL},
    {ClassVariable, sipName_sDefaultColor, (PyMethodDef *)varget_FbxNodeAttribute_sDefaultColor, NULL, NULL, NULL},
};


sipClassTypeDef sipTypeDef_fbx_FbxNodeAttribute = {
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_FbxNodeAttribute,
        {0},
        0
    },
    {
        sipNameNr_FbxNodeAttribute,
        {0, 0, 1},
        5, methods_FbxNodeAttribute,
        22, enummembers_FbxNodeAttribute,
        4, variables_FbxNodeAttribute,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    0,
    -1,
    -1,
    supers_FbxNodeAttribute,
    slots_FbxNodeAttribute,
    0,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    0,
    0,
    0,
    0,
    release_FbxNodeAttribute,
    cast_FbxNodeAttribute,
    0,
    0,
    0,
    0,
    0,
    0
};
