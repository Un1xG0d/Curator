/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.3
 *
 * Copyright (C) 2009 Autodesk, Inc. and/or its licensors.
 * All Rights Reserved.
 * 
 * The coded instructions, statements, computer programs, and/or related material 
 * (collectively the "Data") in these files contain unpublished information 
 * proprietary to Autodesk, Inc. and/or its licensors, which is protected by 
 * Canada and United States of America federal copyright law and by international 
 * treaties. 
 * 
 * The Data may not be disclosed or distributed to third parties, in whole or in
 * part, without the prior written consent of Autodesk, Inc. ("Autodesk").
 * 
 * THE DATA IS PROVIDED "AS IS" AND WITHOUT WARRANTY.
 * ALL WARRANTIES ARE EXPRESSLY EXCLUDED AND DISCLAIMED. AUTODESK MAKES NO
 * WARRANTY OF ANY KIND WITH RESPECT TO THE DATA, EXPRESS, IMPLIED OR ARISING
 * BY CUSTOM OR TRADE USAGE, AND DISCLAIMS ANY IMPLIED WARRANTIES OF TITLE, 
 * NON-INFRINGEMENT, MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE OR USE. 
 * WITHOUT LIMITING THE FOREGOING, AUTODESK DOES NOT WARRANT THAT THE OPERATION
 * OF THE DATA WILL BE UNINTERRUPTED OR ERROR FREE. 
 * 
 * IN NO EVENT SHALL AUTODESK, ITS AFFILIATES, PARENT COMPANIES, LICENSORS
 * OR SUPPLIERS ("AUTODESK GROUP") BE LIABLE FOR ANY LOSSES, DAMAGES OR EXPENSES
 * OF ANY KIND (INCLUDING WITHOUT LIMITATION PUNITIVE OR MULTIPLE DAMAGES OR OTHER
 * SPECIAL, DIRECT, INDIRECT, EXEMPLARY, INCIDENTAL, LOSS OF PROFITS, REVENUE
 * OR DATA, COST OF COVER OR CONSEQUENTIAL LOSSES OR DAMAGES OF ANY KIND),
 * HOWEVER CAUSED, AND REGARDLESS OF THE THEORY OF LIABILITY, WHETHER DERIVED
 * FROM CONTRACT, TORT (INCLUDING, BUT NOT LIMITED TO, NEGLIGENCE), OR OTHERWISE,
 * ARISING OUT OF OR RELATING TO THE DATA OR ITS USE OR ANY OTHER PERFORMANCE,
 * WHETHER OR NOT AUTODESK HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH LOSS
 * OR DAMAGE. 
 */

#include "sipAPIfbx.h"




/* Call the instance's destructor. */
extern "C" {static void release_FbxAnimCurveTangentInfo(void *, int);}
static void release_FbxAnimCurveTangentInfo(void *sipCppV, int)
{
    delete reinterpret_cast< ::FbxAnimCurveTangentInfo *>(sipCppV);
}


extern "C" {static void assign_FbxAnimCurveTangentInfo(void *, SIP_SSIZE_T, const void *);}
static void assign_FbxAnimCurveTangentInfo(void *sipDst, SIP_SSIZE_T sipDstIdx, const void *sipSrc)
{
    reinterpret_cast< ::FbxAnimCurveTangentInfo *>(sipDst)[sipDstIdx] = *reinterpret_cast<const  ::FbxAnimCurveTangentInfo *>(sipSrc);
}


extern "C" {static void *array_FbxAnimCurveTangentInfo(SIP_SSIZE_T);}
static void *array_FbxAnimCurveTangentInfo(SIP_SSIZE_T sipNrElem)
{
    return new  ::FbxAnimCurveTangentInfo[sipNrElem];
}


extern "C" {static void *copy_FbxAnimCurveTangentInfo(const void *, SIP_SSIZE_T);}
static void *copy_FbxAnimCurveTangentInfo(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::FbxAnimCurveTangentInfo(reinterpret_cast<const  ::FbxAnimCurveTangentInfo *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_FbxAnimCurveTangentInfo(sipSimpleWrapper *);}
static void dealloc_FbxAnimCurveTangentInfo(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_FbxAnimCurveTangentInfo(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_FbxAnimCurveTangentInfo(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_FbxAnimCurveTangentInfo(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::FbxAnimCurveTangentInfo *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            sipCpp = new  ::FbxAnimCurveTangentInfo();

            return sipCpp;
        }
    }

    {
        const  ::FbxAnimCurveTangentInfo* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_FbxAnimCurveTangentInfo, &a0))
        {
            sipCpp = new  ::FbxAnimCurveTangentInfo(*a0);

            return sipCpp;
        }
    }

    return NULL;
}


extern "C" {static PyObject *varget_FbxAnimCurveTangentInfo_mAuto(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxAnimCurveTangentInfo_mAuto(void *sipSelf, PyObject *, PyObject *)
{
    float sipVal;
     ::FbxAnimCurveTangentInfo *sipCpp = reinterpret_cast< ::FbxAnimCurveTangentInfo *>(sipSelf);

    sipVal = sipCpp->mAuto;

    return PyFloat_FromDouble((double)sipVal);
}


extern "C" {static int varset_FbxAnimCurveTangentInfo_mAuto(void *, PyObject *, PyObject *);}
static int varset_FbxAnimCurveTangentInfo_mAuto(void *sipSelf, PyObject *sipPy, PyObject *)
{
    float sipVal;
     ::FbxAnimCurveTangentInfo *sipCpp = reinterpret_cast< ::FbxAnimCurveTangentInfo *>(sipSelf);

    sipVal = (float)PyFloat_AsDouble(sipPy);

    if (PyErr_Occurred() != NULL)
        return -1;

    sipCpp->mAuto = sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxAnimCurveTangentInfo_mDerivative(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxAnimCurveTangentInfo_mDerivative(void *sipSelf, PyObject *, PyObject *)
{
    float sipVal;
     ::FbxAnimCurveTangentInfo *sipCpp = reinterpret_cast< ::FbxAnimCurveTangentInfo *>(sipSelf);

    sipVal = sipCpp->mDerivative;

    return PyFloat_FromDouble((double)sipVal);
}


extern "C" {static int varset_FbxAnimCurveTangentInfo_mDerivative(void *, PyObject *, PyObject *);}
static int varset_FbxAnimCurveTangentInfo_mDerivative(void *sipSelf, PyObject *sipPy, PyObject *)
{
    float sipVal;
     ::FbxAnimCurveTangentInfo *sipCpp = reinterpret_cast< ::FbxAnimCurveTangentInfo *>(sipSelf);

    sipVal = (float)PyFloat_AsDouble(sipPy);

    if (PyErr_Occurred() != NULL)
        return -1;

    sipCpp->mDerivative = sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxAnimCurveTangentInfo_mHasVelocity(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxAnimCurveTangentInfo_mHasVelocity(void *sipSelf, PyObject *, PyObject *)
{
    bool sipVal;
     ::FbxAnimCurveTangentInfo *sipCpp = reinterpret_cast< ::FbxAnimCurveTangentInfo *>(sipSelf);

    sipVal = sipCpp->mHasVelocity;

    return PyBool_FromLong(sipVal);
}


extern "C" {static int varset_FbxAnimCurveTangentInfo_mHasVelocity(void *, PyObject *, PyObject *);}
static int varset_FbxAnimCurveTangentInfo_mHasVelocity(void *sipSelf, PyObject *sipPy, PyObject *)
{
    bool sipVal;
     ::FbxAnimCurveTangentInfo *sipCpp = reinterpret_cast< ::FbxAnimCurveTangentInfo *>(sipSelf);

    sipVal = (bool)SIPLong_AsLong(sipPy);

    if (PyErr_Occurred() != NULL)
        return -1;

    sipCpp->mHasVelocity = sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxAnimCurveTangentInfo_mVelocity(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxAnimCurveTangentInfo_mVelocity(void *sipSelf, PyObject *, PyObject *)
{
    float sipVal;
     ::FbxAnimCurveTangentInfo *sipCpp = reinterpret_cast< ::FbxAnimCurveTangentInfo *>(sipSelf);

    sipVal = sipCpp->mVelocity;

    return PyFloat_FromDouble((double)sipVal);
}


extern "C" {static int varset_FbxAnimCurveTangentInfo_mVelocity(void *, PyObject *, PyObject *);}
static int varset_FbxAnimCurveTangentInfo_mVelocity(void *sipSelf, PyObject *sipPy, PyObject *)
{
    float sipVal;
     ::FbxAnimCurveTangentInfo *sipCpp = reinterpret_cast< ::FbxAnimCurveTangentInfo *>(sipSelf);

    sipVal = (float)PyFloat_AsDouble(sipPy);

    if (PyErr_Occurred() != NULL)
        return -1;

    sipCpp->mVelocity = sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxAnimCurveTangentInfo_mWeight(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxAnimCurveTangentInfo_mWeight(void *sipSelf, PyObject *, PyObject *)
{
    float sipVal;
     ::FbxAnimCurveTangentInfo *sipCpp = reinterpret_cast< ::FbxAnimCurveTangentInfo *>(sipSelf);

    sipVal = sipCpp->mWeight;

    return PyFloat_FromDouble((double)sipVal);
}


extern "C" {static int varset_FbxAnimCurveTangentInfo_mWeight(void *, PyObject *, PyObject *);}
static int varset_FbxAnimCurveTangentInfo_mWeight(void *sipSelf, PyObject *sipPy, PyObject *)
{
    float sipVal;
     ::FbxAnimCurveTangentInfo *sipCpp = reinterpret_cast< ::FbxAnimCurveTangentInfo *>(sipSelf);

    sipVal = (float)PyFloat_AsDouble(sipPy);

    if (PyErr_Occurred() != NULL)
        return -1;

    sipCpp->mWeight = sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxAnimCurveTangentInfo_mWeighted(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxAnimCurveTangentInfo_mWeighted(void *sipSelf, PyObject *, PyObject *)
{
    bool sipVal;
     ::FbxAnimCurveTangentInfo *sipCpp = reinterpret_cast< ::FbxAnimCurveTangentInfo *>(sipSelf);

    sipVal = sipCpp->mWeighted;

    return PyBool_FromLong(sipVal);
}


extern "C" {static int varset_FbxAnimCurveTangentInfo_mWeighted(void *, PyObject *, PyObject *);}
static int varset_FbxAnimCurveTangentInfo_mWeighted(void *sipSelf, PyObject *sipPy, PyObject *)
{
    bool sipVal;
     ::FbxAnimCurveTangentInfo *sipCpp = reinterpret_cast< ::FbxAnimCurveTangentInfo *>(sipSelf);

    sipVal = (bool)SIPLong_AsLong(sipPy);

    if (PyErr_Occurred() != NULL)
        return -1;

    sipCpp->mWeighted = sipVal;

    return 0;
}

sipVariableDef variables_FbxAnimCurveTangentInfo[] = {
    {InstanceVariable, sipName_mAuto, (PyMethodDef *)varget_FbxAnimCurveTangentInfo_mAuto, (PyMethodDef *)varset_FbxAnimCurveTangentInfo_mAuto, NULL, NULL},
    {InstanceVariable, sipName_mDerivative, (PyMethodDef *)varget_FbxAnimCurveTangentInfo_mDerivative, (PyMethodDef *)varset_FbxAnimCurveTangentInfo_mDerivative, NULL, NULL},
    {InstanceVariable, sipName_mHasVelocity, (PyMethodDef *)varget_FbxAnimCurveTangentInfo_mHasVelocity, (PyMethodDef *)varset_FbxAnimCurveTangentInfo_mHasVelocity, NULL, NULL},
    {InstanceVariable, sipName_mVelocity, (PyMethodDef *)varget_FbxAnimCurveTangentInfo_mVelocity, (PyMethodDef *)varset_FbxAnimCurveTangentInfo_mVelocity, NULL, NULL},
    {InstanceVariable, sipName_mWeight, (PyMethodDef *)varget_FbxAnimCurveTangentInfo_mWeight, (PyMethodDef *)varset_FbxAnimCurveTangentInfo_mWeight, NULL, NULL},
    {InstanceVariable, sipName_mWeighted, (PyMethodDef *)varget_FbxAnimCurveTangentInfo_mWeighted, (PyMethodDef *)varset_FbxAnimCurveTangentInfo_mWeighted, NULL, NULL},
};

PyDoc_STRVAR(doc_FbxAnimCurveTangentInfo, "\1FbxAnimCurveTangentInfo()\n"
    "FbxAnimCurveTangentInfo(FbxAnimCurveTangentInfo)");


sipClassTypeDef sipTypeDef_fbx_FbxAnimCurveTangentInfo = {
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_FbxAnimCurveTangentInfo,
        {0},
        0
    },
    {
        sipNameNr_FbxAnimCurveTangentInfo,
        {0, 0, 1},
        0, 0,
        0, 0,
        6, variables_FbxAnimCurveTangentInfo,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_FbxAnimCurveTangentInfo,
    -1,
    -1,
    0,
    0,
    init_type_FbxAnimCurveTangentInfo,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_FbxAnimCurveTangentInfo,
    assign_FbxAnimCurveTangentInfo,
    array_FbxAnimCurveTangentInfo,
    copy_FbxAnimCurveTangentInfo,
    release_FbxAnimCurveTangentInfo,
    0,
    0,
    0,
    0,
    0,
    0,
    0
};
