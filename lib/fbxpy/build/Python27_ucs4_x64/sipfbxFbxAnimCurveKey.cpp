/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.3
 *
 * Copyright (C) 2009 Autodesk, Inc. and/or its licensors.
 * All Rights Reserved.
 * 
 * The coded instructions, statements, computer programs, and/or related material 
 * (collectively the "Data") in these files contain unpublished information 
 * proprietary to Autodesk, Inc. and/or its licensors, which is protected by 
 * Canada and United States of America federal copyright law and by international 
 * treaties. 
 * 
 * The Data may not be disclosed or distributed to third parties, in whole or in
 * part, without the prior written consent of Autodesk, Inc. ("Autodesk").
 * 
 * THE DATA IS PROVIDED "AS IS" AND WITHOUT WARRANTY.
 * ALL WARRANTIES ARE EXPRESSLY EXCLUDED AND DISCLAIMED. AUTODESK MAKES NO
 * WARRANTY OF ANY KIND WITH RESPECT TO THE DATA, EXPRESS, IMPLIED OR ARISING
 * BY CUSTOM OR TRADE USAGE, AND DISCLAIMS ANY IMPLIED WARRANTIES OF TITLE, 
 * NON-INFRINGEMENT, MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE OR USE. 
 * WITHOUT LIMITING THE FOREGOING, AUTODESK DOES NOT WARRANT THAT THE OPERATION
 * OF THE DATA WILL BE UNINTERRUPTED OR ERROR FREE. 
 * 
 * IN NO EVENT SHALL AUTODESK, ITS AFFILIATES, PARENT COMPANIES, LICENSORS
 * OR SUPPLIERS ("AUTODESK GROUP") BE LIABLE FOR ANY LOSSES, DAMAGES OR EXPENSES
 * OF ANY KIND (INCLUDING WITHOUT LIMITATION PUNITIVE OR MULTIPLE DAMAGES OR OTHER
 * SPECIAL, DIRECT, INDIRECT, EXEMPLARY, INCIDENTAL, LOSS OF PROFITS, REVENUE
 * OR DATA, COST OF COVER OR CONSEQUENTIAL LOSSES OR DAMAGES OF ANY KIND),
 * HOWEVER CAUSED, AND REGARDLESS OF THE THEORY OF LIABILITY, WHETHER DERIVED
 * FROM CONTRACT, TORT (INCLUDING, BUT NOT LIMITED TO, NEGLIGENCE), OR OTHERWISE,
 * ARISING OUT OF OR RELATING TO THE DATA OR ITS USE OR ANY OTHER PERFORMANCE,
 * WHETHER OR NOT AUTODESK HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH LOSS
 * OR DAMAGE. 
 */

#include "sipAPIfbx.h"




class sipFbxAnimCurveKey : public  ::FbxAnimCurveKey
{
public:
    sipFbxAnimCurveKey();
    sipFbxAnimCurveKey( ::FbxTime);
    sipFbxAnimCurveKey( ::FbxTime,float);
    sipFbxAnimCurveKey(const  ::FbxAnimCurveKey&);
    virtual ~sipFbxAnimCurveKey();

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
     ::FbxTime GetTime() const;
    void SetTime(const  ::FbxTime&);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipFbxAnimCurveKey(const sipFbxAnimCurveKey &);
    sipFbxAnimCurveKey &operator = (const sipFbxAnimCurveKey &);

    char sipPyMethods[2];
};

sipFbxAnimCurveKey::sipFbxAnimCurveKey():  ::FbxAnimCurveKey(), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipFbxAnimCurveKey::sipFbxAnimCurveKey( ::FbxTime a0):  ::FbxAnimCurveKey(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipFbxAnimCurveKey::sipFbxAnimCurveKey( ::FbxTime a0,float a1):  ::FbxAnimCurveKey(a0,a1), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipFbxAnimCurveKey::sipFbxAnimCurveKey(const  ::FbxAnimCurveKey& a0):  ::FbxAnimCurveKey(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipFbxAnimCurveKey::~sipFbxAnimCurveKey()
{
    sipInstanceDestroyed(sipPySelf);
}

 ::FbxTime sipFbxAnimCurveKey::GetTime() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[0]),sipPySelf,NULL,sipName_GetTime);

    if (!sipMeth)
        return  ::FbxAnimCurveKey::GetTime();

    extern  ::FbxTime sipVH_fbx_42(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_fbx_42(sipGILState, 0, sipPySelf, sipMeth);
}

void sipFbxAnimCurveKey::SetTime(const  ::FbxTime& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_SetTime);

    if (!sipMeth)
    {
         ::FbxAnimCurveKey::SetTime(a0);
        return;
    }

    extern void sipVH_fbx_43(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::FbxTime&);

    sipVH_fbx_43(sipGILState, 0, sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_FbxAnimCurveKey_GetTime, "GetTime(self) -> FbxTime");

extern "C" {static PyObject *meth_FbxAnimCurveKey_GetTime(PyObject *, PyObject *);}
static PyObject *meth_FbxAnimCurveKey_GetTime(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::FbxAnimCurveKey *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxAnimCurveKey, &sipCpp))
        {
             ::FbxTime*sipRes;

            sipRes = new  ::FbxTime((sipSelfWasArg ? sipCpp-> ::FbxAnimCurveKey::GetTime() : sipCpp->GetTime()));

            return sipConvertFromNewType(sipRes,sipType_FbxTime,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxAnimCurveKey, sipName_GetTime, doc_FbxAnimCurveKey_GetTime);

    return NULL;
}


PyDoc_STRVAR(doc_FbxAnimCurveKey_SetTime, "SetTime(self, FbxTime)");

extern "C" {static PyObject *meth_FbxAnimCurveKey_SetTime(PyObject *, PyObject *);}
static PyObject *meth_FbxAnimCurveKey_SetTime(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::FbxTime* a0;
         ::FbxAnimCurveKey *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_FbxAnimCurveKey, &sipCpp, sipType_FbxTime, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::FbxAnimCurveKey::SetTime(*a0) : sipCpp->SetTime(*a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxAnimCurveKey, sipName_SetTime, doc_FbxAnimCurveKey_SetTime);

    return NULL;
}


PyDoc_STRVAR(doc_FbxAnimCurveKey_Set, "Set(self, FbxTime, float)");

extern "C" {static PyObject *meth_FbxAnimCurveKey_Set(PyObject *, PyObject *);}
static PyObject *meth_FbxAnimCurveKey_Set(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxTime* a0;
        float a1;
         ::FbxAnimCurveKey *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9f", &sipSelf, sipType_FbxAnimCurveKey, &sipCpp, sipType_FbxTime, &a0, &a1))
        {
            sipCpp->Set(*a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxAnimCurveKey, sipName_Set, doc_FbxAnimCurveKey_Set);

    return NULL;
}


PyDoc_STRVAR(doc_FbxAnimCurveKey_SetTCB, "SetTCB(self, FbxTime, float, float = 0, float = 0, float = 0)");

extern "C" {static PyObject *meth_FbxAnimCurveKey_SetTCB(PyObject *, PyObject *);}
static PyObject *meth_FbxAnimCurveKey_SetTCB(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxTime* a0;
        float a1;
        float a2 = 0;
        float a3 = 0;
        float a4 = 0;
         ::FbxAnimCurveKey *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9f|fff", &sipSelf, sipType_FbxAnimCurveKey, &sipCpp, sipType_FbxTime, &a0, &a1, &a2, &a3, &a4))
        {
            sipCpp->SetTCB(*a0,a1,a2,a3,a4);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxAnimCurveKey, sipName_SetTCB, doc_FbxAnimCurveKey_SetTCB);

    return NULL;
}


PyDoc_STRVAR(doc_FbxAnimCurveKey_GetValue, "GetValue(self) -> float");

extern "C" {static PyObject *meth_FbxAnimCurveKey_GetValue(PyObject *, PyObject *);}
static PyObject *meth_FbxAnimCurveKey_GetValue(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::FbxAnimCurveKey *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxAnimCurveKey, &sipCpp))
        {
            float sipRes;

            sipRes = sipCpp->GetValue();

            return PyFloat_FromDouble((double)sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxAnimCurveKey, sipName_GetValue, doc_FbxAnimCurveKey_GetValue);

    return NULL;
}


PyDoc_STRVAR(doc_FbxAnimCurveKey_SetValue, "SetValue(self, float)");

extern "C" {static PyObject *meth_FbxAnimCurveKey_SetValue(PyObject *, PyObject *);}
static PyObject *meth_FbxAnimCurveKey_SetValue(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        float a0;
         ::FbxAnimCurveKey *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bf", &sipSelf, sipType_FbxAnimCurveKey, &sipCpp, &a0))
        {
            sipCpp->SetValue(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxAnimCurveKey, sipName_SetValue, doc_FbxAnimCurveKey_SetValue);

    return NULL;
}


PyDoc_STRVAR(doc_FbxAnimCurveKey_GetInterpolation, "GetInterpolation(self) -> FbxAnimCurveDef.EInterpolationType");

extern "C" {static PyObject *meth_FbxAnimCurveKey_GetInterpolation(PyObject *, PyObject *);}
static PyObject *meth_FbxAnimCurveKey_GetInterpolation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxAnimCurveKey *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxAnimCurveKey, &sipCpp))
        {
             ::FbxAnimCurveDef::EInterpolationType sipRes;

            sipRes = sipCpp->GetInterpolation();

            return sipConvertFromEnum(sipRes,sipType_FbxAnimCurveDef_EInterpolationType);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxAnimCurveKey, sipName_GetInterpolation, doc_FbxAnimCurveKey_GetInterpolation);

    return NULL;
}


PyDoc_STRVAR(doc_FbxAnimCurveKey_SetInterpolation, "SetInterpolation(self, FbxAnimCurveDef.EInterpolationType)");

extern "C" {static PyObject *meth_FbxAnimCurveKey_SetInterpolation(PyObject *, PyObject *);}
static PyObject *meth_FbxAnimCurveKey_SetInterpolation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxAnimCurveDef::EInterpolationType a0;
         ::FbxAnimCurveKey *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_FbxAnimCurveKey, &sipCpp, sipType_FbxAnimCurveDef_EInterpolationType, &a0))
        {
            sipCpp->SetInterpolation(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxAnimCurveKey, sipName_SetInterpolation, doc_FbxAnimCurveKey_SetInterpolation);

    return NULL;
}


PyDoc_STRVAR(doc_FbxAnimCurveKey_GetTangentMode, "GetTangentMode(self, bool = False) -> FbxAnimCurveDef.ETangentMode");

extern "C" {static PyObject *meth_FbxAnimCurveKey_GetTangentMode(PyObject *, PyObject *);}
static PyObject *meth_FbxAnimCurveKey_GetTangentMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0 = 0;
         ::FbxAnimCurveKey *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B|b", &sipSelf, sipType_FbxAnimCurveKey, &sipCpp, &a0))
        {
             ::FbxAnimCurveDef::ETangentMode sipRes;

            sipRes = sipCpp->GetTangentMode(a0);

            return sipConvertFromEnum(sipRes,sipType_FbxAnimCurveDef_ETangentMode);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxAnimCurveKey, sipName_GetTangentMode, doc_FbxAnimCurveKey_GetTangentMode);

    return NULL;
}


PyDoc_STRVAR(doc_FbxAnimCurveKey_SetTangentMode, "SetTangentMode(self, FbxAnimCurveDef.ETangentMode)");

extern "C" {static PyObject *meth_FbxAnimCurveKey_SetTangentMode(PyObject *, PyObject *);}
static PyObject *meth_FbxAnimCurveKey_SetTangentMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxAnimCurveDef::ETangentMode a0;
         ::FbxAnimCurveKey *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_FbxAnimCurveKey, &sipCpp, sipType_FbxAnimCurveDef_ETangentMode, &a0))
        {
            sipCpp->SetTangentMode(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxAnimCurveKey, sipName_SetTangentMode, doc_FbxAnimCurveKey_SetTangentMode);

    return NULL;
}


PyDoc_STRVAR(doc_FbxAnimCurveKey_GetTangentWeightMode, "GetTangentWeightMode(self) -> FbxAnimCurveDef.EWeightedMode");

extern "C" {static PyObject *meth_FbxAnimCurveKey_GetTangentWeightMode(PyObject *, PyObject *);}
static PyObject *meth_FbxAnimCurveKey_GetTangentWeightMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::FbxAnimCurveKey *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxAnimCurveKey, &sipCpp))
        {
             ::FbxAnimCurveDef::EWeightedMode sipRes;

            sipRes = sipCpp->GetTangentWeightMode();

            return sipConvertFromEnum(sipRes,sipType_FbxAnimCurveDef_EWeightedMode);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxAnimCurveKey, sipName_GetTangentWeightMode, doc_FbxAnimCurveKey_GetTangentWeightMode);

    return NULL;
}


PyDoc_STRVAR(doc_FbxAnimCurveKey_SetTangentWeightMode, "SetTangentWeightMode(self, FbxAnimCurveDef.EWeightedMode, FbxAnimCurveDef.EWeightedMode = FbxAnimCurveDef.eWeightedAll)");

extern "C" {static PyObject *meth_FbxAnimCurveKey_SetTangentWeightMode(PyObject *, PyObject *);}
static PyObject *meth_FbxAnimCurveKey_SetTangentWeightMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxAnimCurveDef::EWeightedMode a0;
         ::FbxAnimCurveDef::EWeightedMode a1 = FbxAnimCurveDef::eWeightedAll;
         ::FbxAnimCurveKey *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE|E", &sipSelf, sipType_FbxAnimCurveKey, &sipCpp, sipType_FbxAnimCurveDef_EWeightedMode, &a0, sipType_FbxAnimCurveDef_EWeightedMode, &a1))
        {
            sipCpp->SetTangentWeightMode(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxAnimCurveKey, sipName_SetTangentWeightMode, doc_FbxAnimCurveKey_SetTangentWeightMode);

    return NULL;
}


PyDoc_STRVAR(doc_FbxAnimCurveKey_GetTangentVelocityMode, "GetTangentVelocityMode(self) -> FbxAnimCurveDef.EVelocityMode");

extern "C" {static PyObject *meth_FbxAnimCurveKey_GetTangentVelocityMode(PyObject *, PyObject *);}
static PyObject *meth_FbxAnimCurveKey_GetTangentVelocityMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::FbxAnimCurveKey *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxAnimCurveKey, &sipCpp))
        {
             ::FbxAnimCurveDef::EVelocityMode sipRes;

            sipRes = sipCpp->GetTangentVelocityMode();

            return sipConvertFromEnum(sipRes,sipType_FbxAnimCurveDef_EVelocityMode);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxAnimCurveKey, sipName_GetTangentVelocityMode, doc_FbxAnimCurveKey_GetTangentVelocityMode);

    return NULL;
}


PyDoc_STRVAR(doc_FbxAnimCurveKey_SetTangentVelocityMode, "SetTangentVelocityMode(self, FbxAnimCurveDef.EVelocityMode, FbxAnimCurveDef.EVelocityMode = FbxAnimCurveDef.eVelocityAll)");

extern "C" {static PyObject *meth_FbxAnimCurveKey_SetTangentVelocityMode(PyObject *, PyObject *);}
static PyObject *meth_FbxAnimCurveKey_SetTangentVelocityMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxAnimCurveDef::EVelocityMode a0;
         ::FbxAnimCurveDef::EVelocityMode a1 = FbxAnimCurveDef::eVelocityAll;
         ::FbxAnimCurveKey *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE|E", &sipSelf, sipType_FbxAnimCurveKey, &sipCpp, sipType_FbxAnimCurveDef_EVelocityMode, &a0, sipType_FbxAnimCurveDef_EVelocityMode, &a1))
        {
            sipCpp->SetTangentVelocityMode(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxAnimCurveKey, sipName_SetTangentVelocityMode, doc_FbxAnimCurveKey_SetTangentVelocityMode);

    return NULL;
}


PyDoc_STRVAR(doc_FbxAnimCurveKey_GetConstantMode, "GetConstantMode(self) -> FbxAnimCurveDef.EConstantMode");

extern "C" {static PyObject *meth_FbxAnimCurveKey_GetConstantMode(PyObject *, PyObject *);}
static PyObject *meth_FbxAnimCurveKey_GetConstantMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::FbxAnimCurveKey *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxAnimCurveKey, &sipCpp))
        {
             ::FbxAnimCurveDef::EConstantMode sipRes;

            sipRes = sipCpp->GetConstantMode();

            return sipConvertFromEnum(sipRes,sipType_FbxAnimCurveDef_EConstantMode);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxAnimCurveKey, sipName_GetConstantMode, doc_FbxAnimCurveKey_GetConstantMode);

    return NULL;
}


PyDoc_STRVAR(doc_FbxAnimCurveKey_SetConstantMode, "SetConstantMode(self, FbxAnimCurveDef.EConstantMode)");

extern "C" {static PyObject *meth_FbxAnimCurveKey_SetConstantMode(PyObject *, PyObject *);}
static PyObject *meth_FbxAnimCurveKey_SetConstantMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxAnimCurveDef::EConstantMode a0;
         ::FbxAnimCurveKey *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_FbxAnimCurveKey, &sipCpp, sipType_FbxAnimCurveDef_EConstantMode, &a0))
        {
            sipCpp->SetConstantMode(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxAnimCurveKey, sipName_SetConstantMode, doc_FbxAnimCurveKey_SetConstantMode);

    return NULL;
}


PyDoc_STRVAR(doc_FbxAnimCurveKey_GetDataFloat, "GetDataFloat(self, FbxAnimCurveDef.EDataIndex) -> float");

extern "C" {static PyObject *meth_FbxAnimCurveKey_GetDataFloat(PyObject *, PyObject *);}
static PyObject *meth_FbxAnimCurveKey_GetDataFloat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxAnimCurveDef::EDataIndex a0;
        const  ::FbxAnimCurveKey *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_FbxAnimCurveKey, &sipCpp, sipType_FbxAnimCurveDef_EDataIndex, &a0))
        {
            float sipRes;

            sipRes = sipCpp->GetDataFloat(a0);

            return PyFloat_FromDouble((double)sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxAnimCurveKey, sipName_GetDataFloat, doc_FbxAnimCurveKey_GetDataFloat);

    return NULL;
}


PyDoc_STRVAR(doc_FbxAnimCurveKey_SetDataFloat, "SetDataFloat(self, FbxAnimCurveDef.EDataIndex, float)");

extern "C" {static PyObject *meth_FbxAnimCurveKey_SetDataFloat(PyObject *, PyObject *);}
static PyObject *meth_FbxAnimCurveKey_SetDataFloat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxAnimCurveDef::EDataIndex a0;
        float a1;
         ::FbxAnimCurveKey *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BEf", &sipSelf, sipType_FbxAnimCurveKey, &sipCpp, sipType_FbxAnimCurveDef_EDataIndex, &a0, &a1))
        {
            sipCpp->SetDataFloat(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxAnimCurveKey, sipName_SetDataFloat, doc_FbxAnimCurveKey_SetDataFloat);

    return NULL;
}


PyDoc_STRVAR(doc_FbxAnimCurveKey_SetTangentVisibility, "SetTangentVisibility(self, FbxAnimCurveDef.ETangentVisibility)");

extern "C" {static PyObject *meth_FbxAnimCurveKey_SetTangentVisibility(PyObject *, PyObject *);}
static PyObject *meth_FbxAnimCurveKey_SetTangentVisibility(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxAnimCurveDef::ETangentVisibility a0;
         ::FbxAnimCurveKey *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_FbxAnimCurveKey, &sipCpp, sipType_FbxAnimCurveDef_ETangentVisibility, &a0))
        {
            sipCpp->SetTangentVisibility(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxAnimCurveKey, sipName_SetTangentVisibility, doc_FbxAnimCurveKey_SetTangentVisibility);

    return NULL;
}


PyDoc_STRVAR(doc_FbxAnimCurveKey_GetTangentVisibility, "GetTangentVisibility(self) -> FbxAnimCurveDef.ETangentVisibility");

extern "C" {static PyObject *meth_FbxAnimCurveKey_GetTangentVisibility(PyObject *, PyObject *);}
static PyObject *meth_FbxAnimCurveKey_GetTangentVisibility(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::FbxAnimCurveKey *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxAnimCurveKey, &sipCpp))
        {
             ::FbxAnimCurveDef::ETangentVisibility sipRes;

            sipRes = sipCpp->GetTangentVisibility();

            return sipConvertFromEnum(sipRes,sipType_FbxAnimCurveDef_ETangentVisibility);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxAnimCurveKey, sipName_GetTangentVisibility, doc_FbxAnimCurveKey_GetTangentVisibility);

    return NULL;
}


PyDoc_STRVAR(doc_FbxAnimCurveKey_SetBreak, "SetBreak(self, bool)");

extern "C" {static PyObject *meth_FbxAnimCurveKey_SetBreak(PyObject *, PyObject *);}
static PyObject *meth_FbxAnimCurveKey_SetBreak(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
         ::FbxAnimCurveKey *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_FbxAnimCurveKey, &sipCpp, &a0))
        {
            sipCpp->SetBreak(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxAnimCurveKey, sipName_SetBreak, doc_FbxAnimCurveKey_SetBreak);

    return NULL;
}


PyDoc_STRVAR(doc_FbxAnimCurveKey_GetBreak, "GetBreak(self) -> bool");

extern "C" {static PyObject *meth_FbxAnimCurveKey_GetBreak(PyObject *, PyObject *);}
static PyObject *meth_FbxAnimCurveKey_GetBreak(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::FbxAnimCurveKey *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxAnimCurveKey, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->GetBreak();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxAnimCurveKey, sipName_GetBreak, doc_FbxAnimCurveKey_GetBreak);

    return NULL;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_FbxAnimCurveKey(void *, const sipTypeDef *);}
static void *cast_FbxAnimCurveKey(void *sipCppV, const sipTypeDef *targetType)
{
     ::FbxAnimCurveKey *sipCpp = reinterpret_cast< ::FbxAnimCurveKey *>(sipCppV);

    if (targetType == sipType_FbxAnimCurveKeyBase)
        return static_cast< ::FbxAnimCurveKeyBase *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_FbxAnimCurveKey(void *, int);}
static void release_FbxAnimCurveKey(void *sipCppV, int sipState)
{
    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipFbxAnimCurveKey *>(sipCppV);
    else
        delete reinterpret_cast< ::FbxAnimCurveKey *>(sipCppV);
}


extern "C" {static void assign_FbxAnimCurveKey(void *, SIP_SSIZE_T, const void *);}
static void assign_FbxAnimCurveKey(void *sipDst, SIP_SSIZE_T sipDstIdx, const void *sipSrc)
{
    reinterpret_cast< ::FbxAnimCurveKey *>(sipDst)[sipDstIdx] = *reinterpret_cast<const  ::FbxAnimCurveKey *>(sipSrc);
}


extern "C" {static void *array_FbxAnimCurveKey(SIP_SSIZE_T);}
static void *array_FbxAnimCurveKey(SIP_SSIZE_T sipNrElem)
{
    return new  ::FbxAnimCurveKey[sipNrElem];
}


extern "C" {static void *copy_FbxAnimCurveKey(const void *, SIP_SSIZE_T);}
static void *copy_FbxAnimCurveKey(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::FbxAnimCurveKey(reinterpret_cast<const  ::FbxAnimCurveKey *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_FbxAnimCurveKey(sipSimpleWrapper *);}
static void dealloc_FbxAnimCurveKey(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipFbxAnimCurveKey *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_FbxAnimCurveKey(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_FbxAnimCurveKey(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_FbxAnimCurveKey(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipFbxAnimCurveKey *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            sipCpp = new sipFbxAnimCurveKey();

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
         ::FbxTime* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_FbxTime, &a0))
        {
            sipCpp = new sipFbxAnimCurveKey(*a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
         ::FbxTime* a0;
        float a1;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9f", sipType_FbxTime, &a0, &a1))
        {
            sipCpp = new sipFbxAnimCurveKey(*a0,a1);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const  ::FbxAnimCurveKey* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_FbxAnimCurveKey, &a0))
        {
            sipCpp = new sipFbxAnimCurveKey(*a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_FbxAnimCurveKey[] = {{29, 255, 1}};


static PyMethodDef methods_FbxAnimCurveKey[] = {
    {SIP_MLNAME_CAST(sipName_GetBreak), meth_FbxAnimCurveKey_GetBreak, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxAnimCurveKey_GetBreak)},
    {SIP_MLNAME_CAST(sipName_GetConstantMode), meth_FbxAnimCurveKey_GetConstantMode, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxAnimCurveKey_GetConstantMode)},
    {SIP_MLNAME_CAST(sipName_GetDataFloat), meth_FbxAnimCurveKey_GetDataFloat, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxAnimCurveKey_GetDataFloat)},
    {SIP_MLNAME_CAST(sipName_GetInterpolation), meth_FbxAnimCurveKey_GetInterpolation, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxAnimCurveKey_GetInterpolation)},
    {SIP_MLNAME_CAST(sipName_GetTangentMode), meth_FbxAnimCurveKey_GetTangentMode, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxAnimCurveKey_GetTangentMode)},
    {SIP_MLNAME_CAST(sipName_GetTangentVelocityMode), meth_FbxAnimCurveKey_GetTangentVelocityMode, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxAnimCurveKey_GetTangentVelocityMode)},
    {SIP_MLNAME_CAST(sipName_GetTangentVisibility), meth_FbxAnimCurveKey_GetTangentVisibility, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxAnimCurveKey_GetTangentVisibility)},
    {SIP_MLNAME_CAST(sipName_GetTangentWeightMode), meth_FbxAnimCurveKey_GetTangentWeightMode, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxAnimCurveKey_GetTangentWeightMode)},
    {SIP_MLNAME_CAST(sipName_GetTime), meth_FbxAnimCurveKey_GetTime, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxAnimCurveKey_GetTime)},
    {SIP_MLNAME_CAST(sipName_GetValue), meth_FbxAnimCurveKey_GetValue, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxAnimCurveKey_GetValue)},
    {SIP_MLNAME_CAST(sipName_Set), meth_FbxAnimCurveKey_Set, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxAnimCurveKey_Set)},
    {SIP_MLNAME_CAST(sipName_SetBreak), meth_FbxAnimCurveKey_SetBreak, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxAnimCurveKey_SetBreak)},
    {SIP_MLNAME_CAST(sipName_SetConstantMode), meth_FbxAnimCurveKey_SetConstantMode, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxAnimCurveKey_SetConstantMode)},
    {SIP_MLNAME_CAST(sipName_SetDataFloat), meth_FbxAnimCurveKey_SetDataFloat, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxAnimCurveKey_SetDataFloat)},
    {SIP_MLNAME_CAST(sipName_SetInterpolation), meth_FbxAnimCurveKey_SetInterpolation, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxAnimCurveKey_SetInterpolation)},
    {SIP_MLNAME_CAST(sipName_SetTCB), meth_FbxAnimCurveKey_SetTCB, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxAnimCurveKey_SetTCB)},
    {SIP_MLNAME_CAST(sipName_SetTangentMode), meth_FbxAnimCurveKey_SetTangentMode, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxAnimCurveKey_SetTangentMode)},
    {SIP_MLNAME_CAST(sipName_SetTangentVelocityMode), meth_FbxAnimCurveKey_SetTangentVelocityMode, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxAnimCurveKey_SetTangentVelocityMode)},
    {SIP_MLNAME_CAST(sipName_SetTangentVisibility), meth_FbxAnimCurveKey_SetTangentVisibility, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxAnimCurveKey_SetTangentVisibility)},
    {SIP_MLNAME_CAST(sipName_SetTangentWeightMode), meth_FbxAnimCurveKey_SetTangentWeightMode, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxAnimCurveKey_SetTangentWeightMode)},
    {SIP_MLNAME_CAST(sipName_SetTime), meth_FbxAnimCurveKey_SetTime, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxAnimCurveKey_SetTime)},
    {SIP_MLNAME_CAST(sipName_SetValue), meth_FbxAnimCurveKey_SetValue, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxAnimCurveKey_SetValue)}
};

PyDoc_STRVAR(doc_FbxAnimCurveKey, "\1FbxAnimCurveKey()\n"
    "FbxAnimCurveKey(FbxTime)\n"
    "FbxAnimCurveKey(FbxTime, float)\n"
    "FbxAnimCurveKey(FbxAnimCurveKey)");


sipClassTypeDef sipTypeDef_fbx_FbxAnimCurveKey = {
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_FbxAnimCurveKey,
        {0},
        0
    },
    {
        sipNameNr_FbxAnimCurveKey,
        {0, 0, 1},
        22, methods_FbxAnimCurveKey,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_FbxAnimCurveKey,
    -1,
    -1,
    supers_FbxAnimCurveKey,
    0,
    init_type_FbxAnimCurveKey,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_FbxAnimCurveKey,
    assign_FbxAnimCurveKey,
    array_FbxAnimCurveKey,
    copy_FbxAnimCurveKey,
    release_FbxAnimCurveKey,
    cast_FbxAnimCurveKey,
    0,
    0,
    0,
    0,
    0,
    0
};
