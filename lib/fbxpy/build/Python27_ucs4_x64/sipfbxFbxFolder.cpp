/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.3
 *
 * Copyright (C) 2009 Autodesk, Inc. and/or its licensors.
 * All Rights Reserved.
 * 
 * The coded instructions, statements, computer programs, and/or related material 
 * (collectively the "Data") in these files contain unpublished information 
 * proprietary to Autodesk, Inc. and/or its licensors, which is protected by 
 * Canada and United States of America federal copyright law and by international 
 * treaties. 
 * 
 * The Data may not be disclosed or distributed to third parties, in whole or in
 * part, without the prior written consent of Autodesk, Inc. ("Autodesk").
 * 
 * THE DATA IS PROVIDED "AS IS" AND WITHOUT WARRANTY.
 * ALL WARRANTIES ARE EXPRESSLY EXCLUDED AND DISCLAIMED. AUTODESK MAKES NO
 * WARRANTY OF ANY KIND WITH RESPECT TO THE DATA, EXPRESS, IMPLIED OR ARISING
 * BY CUSTOM OR TRADE USAGE, AND DISCLAIMS ANY IMPLIED WARRANTIES OF TITLE, 
 * NON-INFRINGEMENT, MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE OR USE. 
 * WITHOUT LIMITING THE FOREGOING, AUTODESK DOES NOT WARRANT THAT THE OPERATION
 * OF THE DATA WILL BE UNINTERRUPTED OR ERROR FREE. 
 * 
 * IN NO EVENT SHALL AUTODESK, ITS AFFILIATES, PARENT COMPANIES, LICENSORS
 * OR SUPPLIERS ("AUTODESK GROUP") BE LIABLE FOR ANY LOSSES, DAMAGES OR EXPENSES
 * OF ANY KIND (INCLUDING WITHOUT LIMITATION PUNITIVE OR MULTIPLE DAMAGES OR OTHER
 * SPECIAL, DIRECT, INDIRECT, EXEMPLARY, INCIDENTAL, LOSS OF PROFITS, REVENUE
 * OR DATA, COST OF COVER OR CONSEQUENTIAL LOSSES OR DAMAGES OF ANY KIND),
 * HOWEVER CAUSED, AND REGARDLESS OF THE THEORY OF LIABILITY, WHETHER DERIVED
 * FROM CONTRACT, TORT (INCLUDING, BUT NOT LIMITED TO, NEGLIGENCE), OR OTHERWISE,
 * ARISING OUT OF OR RELATING TO THE DATA OR ITS USE OR ANY OTHER PERFORMANCE,
 * WHETHER OR NOT AUTODESK HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH LOSS
 * OR DAMAGE. 
 */

#include "sipAPIfbx.h"




PyDoc_STRVAR(doc_FbxFolder_Open, "Open(self, str) -> bool");

extern "C" {static PyObject *meth_FbxFolder_Open(PyObject *, PyObject *);}
static PyObject *meth_FbxFolder_Open(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const char* a0;
        PyObject *a0Keep;
         ::FbxFolder *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BA8", &sipSelf, sipType_FbxFolder, &sipCpp, &a0Keep, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->Open(a0);
            Py_DECREF(a0Keep);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxFolder, sipName_Open, doc_FbxFolder_Open);

    return NULL;
}


PyDoc_STRVAR(doc_FbxFolder_Next, "Next(self) -> bool");

extern "C" {static PyObject *meth_FbxFolder_Next(PyObject *, PyObject *);}
static PyObject *meth_FbxFolder_Next(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxFolder *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxFolder, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->Next();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxFolder, sipName_Next, doc_FbxFolder_Next);

    return NULL;
}


PyDoc_STRVAR(doc_FbxFolder_GetEntryType, "GetEntryType(self) -> FbxFolder.EEntryType");

extern "C" {static PyObject *meth_FbxFolder_GetEntryType(PyObject *, PyObject *);}
static PyObject *meth_FbxFolder_GetEntryType(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::FbxFolder *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxFolder, &sipCpp))
        {
             ::FbxFolder::EEntryType sipRes;

            sipRes = sipCpp->GetEntryType();

            return sipConvertFromEnum(sipRes,sipType_FbxFolder_EEntryType);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxFolder, sipName_GetEntryType, doc_FbxFolder_GetEntryType);

    return NULL;
}


PyDoc_STRVAR(doc_FbxFolder_GetEntryName, "GetEntryName(self) -> FbxString");

extern "C" {static PyObject *meth_FbxFolder_GetEntryName(PyObject *, PyObject *);}
static PyObject *meth_FbxFolder_GetEntryName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::FbxFolder *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxFolder, &sipCpp))
        {
             ::FbxString*sipRes;

            sipRes = new  ::FbxString(sipCpp->GetEntryName());

            return sipConvertFromNewType(sipRes,sipType_FbxString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxFolder, sipName_GetEntryName, doc_FbxFolder_GetEntryName);

    return NULL;
}


PyDoc_STRVAR(doc_FbxFolder_GetEntryExtension, "GetEntryExtension(self) -> str");

extern "C" {static PyObject *meth_FbxFolder_GetEntryExtension(PyObject *, PyObject *);}
static PyObject *meth_FbxFolder_GetEntryExtension(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::FbxFolder *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxFolder, &sipCpp))
        {
            char*sipRes;

            sipRes = sipCpp->GetEntryExtension();

            if (sipRes == NULL)
            {
                Py_INCREF(Py_None);
                return Py_None;
            }

#if PY_MAJOR_VERSION >= 3
            return PyUnicode_FromString(sipRes);
#else
            return PyUnicode_DecodeUTF8(sipRes, strlen(sipRes), NULL);
#endif
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxFolder, sipName_GetEntryExtension, doc_FbxFolder_GetEntryExtension);

    return NULL;
}


PyDoc_STRVAR(doc_FbxFolder_Close, "Close(self)");

extern "C" {static PyObject *meth_FbxFolder_Close(PyObject *, PyObject *);}
static PyObject *meth_FbxFolder_Close(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxFolder *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxFolder, &sipCpp))
        {
            sipCpp->Close();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxFolder, sipName_Close, doc_FbxFolder_Close);

    return NULL;
}


PyDoc_STRVAR(doc_FbxFolder_IsOpen, "IsOpen(self) -> bool");

extern "C" {static PyObject *meth_FbxFolder_IsOpen(PyObject *, PyObject *);}
static PyObject *meth_FbxFolder_IsOpen(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::FbxFolder *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxFolder, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->IsOpen();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxFolder, sipName_IsOpen, doc_FbxFolder_IsOpen);

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_FbxFolder(void *, int);}
static void release_FbxFolder(void *sipCppV, int)
{
    delete reinterpret_cast< ::FbxFolder *>(sipCppV);
}


extern "C" {static void assign_FbxFolder(void *, SIP_SSIZE_T, const void *);}
static void assign_FbxFolder(void *sipDst, SIP_SSIZE_T sipDstIdx, const void *sipSrc)
{
    reinterpret_cast< ::FbxFolder *>(sipDst)[sipDstIdx] = *reinterpret_cast<const  ::FbxFolder *>(sipSrc);
}


extern "C" {static void *array_FbxFolder(SIP_SSIZE_T);}
static void *array_FbxFolder(SIP_SSIZE_T sipNrElem)
{
    return new  ::FbxFolder[sipNrElem];
}


extern "C" {static void *copy_FbxFolder(const void *, SIP_SSIZE_T);}
static void *copy_FbxFolder(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::FbxFolder(reinterpret_cast<const  ::FbxFolder *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_FbxFolder(sipSimpleWrapper *);}
static void dealloc_FbxFolder(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_FbxFolder(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_FbxFolder(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_FbxFolder(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::FbxFolder *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            sipCpp = new  ::FbxFolder();

            return sipCpp;
        }
    }

    {
        const  ::FbxFolder* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_FbxFolder, &a0))
        {
            sipCpp = new  ::FbxFolder(*a0);

            return sipCpp;
        }
    }

    return NULL;
}


static PyMethodDef methods_FbxFolder[] = {
    {SIP_MLNAME_CAST(sipName_Close), meth_FbxFolder_Close, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxFolder_Close)},
    {SIP_MLNAME_CAST(sipName_GetEntryExtension), meth_FbxFolder_GetEntryExtension, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxFolder_GetEntryExtension)},
    {SIP_MLNAME_CAST(sipName_GetEntryName), meth_FbxFolder_GetEntryName, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxFolder_GetEntryName)},
    {SIP_MLNAME_CAST(sipName_GetEntryType), meth_FbxFolder_GetEntryType, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxFolder_GetEntryType)},
    {SIP_MLNAME_CAST(sipName_IsOpen), meth_FbxFolder_IsOpen, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxFolder_IsOpen)},
    {SIP_MLNAME_CAST(sipName_Next), meth_FbxFolder_Next, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxFolder_Next)},
    {SIP_MLNAME_CAST(sipName_Open), meth_FbxFolder_Open, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxFolder_Open)}
};

static sipEnumMemberDef enummembers_FbxFolder[] = {
    {sipName_eFolderEntry, static_cast<int>( ::FbxFolder::eFolderEntry), 146},
    {sipName_eRegularEntry, static_cast<int>( ::FbxFolder::eRegularEntry), 146},
};

PyDoc_STRVAR(doc_FbxFolder, "\1FbxFolder()\n"
    "FbxFolder(FbxFolder)");


sipClassTypeDef sipTypeDef_fbx_FbxFolder = {
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_FbxFolder,
        {0},
        0
    },
    {
        sipNameNr_FbxFolder,
        {0, 0, 1},
        7, methods_FbxFolder,
        2, enummembers_FbxFolder,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_FbxFolder,
    -1,
    -1,
    0,
    0,
    init_type_FbxFolder,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_FbxFolder,
    assign_FbxFolder,
    array_FbxFolder,
    copy_FbxFolder,
    release_FbxFolder,
    0,
    0,
    0,
    0,
    0,
    0,
    0
};
