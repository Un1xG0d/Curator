/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.3
 *
 * Copyright (C) 2009 Autodesk, Inc. and/or its licensors.
 * All Rights Reserved.
 * 
 * The coded instructions, statements, computer programs, and/or related material 
 * (collectively the "Data") in these files contain unpublished information 
 * proprietary to Autodesk, Inc. and/or its licensors, which is protected by 
 * Canada and United States of America federal copyright law and by international 
 * treaties. 
 * 
 * The Data may not be disclosed or distributed to third parties, in whole or in
 * part, without the prior written consent of Autodesk, Inc. ("Autodesk").
 * 
 * THE DATA IS PROVIDED "AS IS" AND WITHOUT WARRANTY.
 * ALL WARRANTIES ARE EXPRESSLY EXCLUDED AND DISCLAIMED. AUTODESK MAKES NO
 * WARRANTY OF ANY KIND WITH RESPECT TO THE DATA, EXPRESS, IMPLIED OR ARISING
 * BY CUSTOM OR TRADE USAGE, AND DISCLAIMS ANY IMPLIED WARRANTIES OF TITLE, 
 * NON-INFRINGEMENT, MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE OR USE. 
 * WITHOUT LIMITING THE FOREGOING, AUTODESK DOES NOT WARRANT THAT THE OPERATION
 * OF THE DATA WILL BE UNINTERRUPTED OR ERROR FREE. 
 * 
 * IN NO EVENT SHALL AUTODESK, ITS AFFILIATES, PARENT COMPANIES, LICENSORS
 * OR SUPPLIERS ("AUTODESK GROUP") BE LIABLE FOR ANY LOSSES, DAMAGES OR EXPENSES
 * OF ANY KIND (INCLUDING WITHOUT LIMITATION PUNITIVE OR MULTIPLE DAMAGES OR OTHER
 * SPECIAL, DIRECT, INDIRECT, EXEMPLARY, INCIDENTAL, LOSS OF PROFITS, REVENUE
 * OR DATA, COST OF COVER OR CONSEQUENTIAL LOSSES OR DAMAGES OF ANY KIND),
 * HOWEVER CAUSED, AND REGARDLESS OF THE THEORY OF LIABILITY, WHETHER DERIVED
 * FROM CONTRACT, TORT (INCLUDING, BUT NOT LIMITED TO, NEGLIGENCE), OR OTHERWISE,
 * ARISING OUT OF OR RELATING TO THE DATA OR ITS USE OR ANY OTHER PERFORMANCE,
 * WHETHER OR NOT AUTODESK HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH LOSS
 * OR DAMAGE. 
 */

#include "sipAPIfbx.h"


#line 4 "/var/www/html/lib/fbxpy/sip/fbxstatus.sip"
#include <fbxsdk.h>
#line 44 "/var/www/html/lib/fbxpy/build/Python27_ucs4_x64/sipfbxFbxAnimCurveFilterResample.cpp"


class sipFbxAnimCurveFilterResample : public  ::FbxAnimCurveFilterResample
{
public:
    sipFbxAnimCurveFilterResample();
    sipFbxAnimCurveFilterResample(const  ::FbxAnimCurveFilterResample&);
    virtual ~sipFbxAnimCurveFilterResample();

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    const char* GetName() const;
    bool NeedApply( ::FbxAnimStack*, ::FbxStatus*);
    bool NeedApply( ::FbxObject*, ::FbxAnimStack*, ::FbxStatus*);
    bool NeedApply( ::FbxAnimCurveNode&, ::FbxStatus*);
    bool NeedApply( ::FbxAnimCurve**,int, ::FbxStatus*);
    bool NeedApply( ::FbxAnimCurve&, ::FbxStatus*);
    bool Apply( ::FbxAnimStack*, ::FbxStatus*);
    bool Apply( ::FbxObject*, ::FbxAnimStack*, ::FbxStatus*);
    bool Apply( ::FbxAnimCurveNode&, ::FbxStatus*);
    bool Apply( ::FbxAnimCurve**,int, ::FbxStatus*);
    bool Apply( ::FbxAnimCurve&, ::FbxStatus*);
    void Reset();

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipFbxAnimCurveFilterResample(const sipFbxAnimCurveFilterResample &);
    sipFbxAnimCurveFilterResample &operator = (const sipFbxAnimCurveFilterResample &);

    char sipPyMethods[12];
};

sipFbxAnimCurveFilterResample::sipFbxAnimCurveFilterResample():  ::FbxAnimCurveFilterResample(), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipFbxAnimCurveFilterResample::sipFbxAnimCurveFilterResample(const  ::FbxAnimCurveFilterResample& a0):  ::FbxAnimCurveFilterResample(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipFbxAnimCurveFilterResample::~sipFbxAnimCurveFilterResample()
{
    sipInstanceDestroyed(sipPySelf);
}

const char* sipFbxAnimCurveFilterResample::GetName() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[0]),sipPySelf,NULL,sipName_GetName);

    if (!sipMeth)
        return  ::FbxAnimCurveFilterResample::GetName();

    extern const char* sipVH_fbx_27(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return sipVH_fbx_27(sipGILState, 0, sipPySelf, sipMeth, -67);
}

bool sipFbxAnimCurveFilterResample::NeedApply( ::FbxAnimStack*a0, ::FbxStatus*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_NeedApply);

    if (!sipMeth)
        return  ::FbxAnimCurveFilterResample::NeedApply(a0,a1);

    extern bool sipVH_fbx_28(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::FbxAnimStack*, ::FbxStatus*);

    return sipVH_fbx_28(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

bool sipFbxAnimCurveFilterResample::NeedApply( ::FbxObject*a0, ::FbxAnimStack*a1, ::FbxStatus*a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_NeedApply);

    if (!sipMeth)
        return  ::FbxAnimCurveFilterResample::NeedApply(a0,a1,a2);

    extern bool sipVH_fbx_29(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::FbxObject*, ::FbxAnimStack*, ::FbxStatus*);

    return sipVH_fbx_29(sipGILState, 0, sipPySelf, sipMeth, a0, a1, a2);
}

bool sipFbxAnimCurveFilterResample::NeedApply( ::FbxAnimCurveNode& a0, ::FbxStatus*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_NeedApply);

    if (!sipMeth)
        return  ::FbxAnimCurveFilterResample::NeedApply(a0,a1);

    extern bool sipVH_fbx_30(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::FbxAnimCurveNode&, ::FbxStatus*);

    return sipVH_fbx_30(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

bool sipFbxAnimCurveFilterResample::NeedApply( ::FbxAnimCurve**a0,int a1, ::FbxStatus*a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_NeedApply);

    if (!sipMeth)
        return  ::FbxAnimCurveFilterResample::NeedApply(a0,a1,a2);

    extern bool sipVH_fbx_31(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::FbxAnimCurve**,int, ::FbxStatus*);

    return sipVH_fbx_31(sipGILState, 0, sipPySelf, sipMeth, a0, a1, a2);
}

bool sipFbxAnimCurveFilterResample::NeedApply( ::FbxAnimCurve& a0, ::FbxStatus*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_NeedApply);

    if (!sipMeth)
        return  ::FbxAnimCurveFilterResample::NeedApply(a0,a1);

    extern bool sipVH_fbx_32(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::FbxAnimCurve&, ::FbxStatus*);

    return sipVH_fbx_32(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

bool sipFbxAnimCurveFilterResample::Apply( ::FbxAnimStack*a0, ::FbxStatus*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_Apply);

    if (!sipMeth)
        return  ::FbxAnimCurveFilterResample::Apply(a0,a1);

    extern bool sipVH_fbx_28(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::FbxAnimStack*, ::FbxStatus*);

    return sipVH_fbx_28(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

bool sipFbxAnimCurveFilterResample::Apply( ::FbxObject*a0, ::FbxAnimStack*a1, ::FbxStatus*a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,NULL,sipName_Apply);

    if (!sipMeth)
        return  ::FbxAnimCurveFilterResample::Apply(a0,a1,a2);

    extern bool sipVH_fbx_29(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::FbxObject*, ::FbxAnimStack*, ::FbxStatus*);

    return sipVH_fbx_29(sipGILState, 0, sipPySelf, sipMeth, a0, a1, a2);
}

bool sipFbxAnimCurveFilterResample::Apply( ::FbxAnimCurveNode& a0, ::FbxStatus*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,NULL,sipName_Apply);

    if (!sipMeth)
        return  ::FbxAnimCurveFilterResample::Apply(a0,a1);

    extern bool sipVH_fbx_30(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::FbxAnimCurveNode&, ::FbxStatus*);

    return sipVH_fbx_30(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

bool sipFbxAnimCurveFilterResample::Apply( ::FbxAnimCurve**a0,int a1, ::FbxStatus*a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[9],sipPySelf,NULL,sipName_Apply);

    if (!sipMeth)
        return  ::FbxAnimCurveFilterResample::Apply(a0,a1,a2);

    extern bool sipVH_fbx_31(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::FbxAnimCurve**,int, ::FbxStatus*);

    return sipVH_fbx_31(sipGILState, 0, sipPySelf, sipMeth, a0, a1, a2);
}

bool sipFbxAnimCurveFilterResample::Apply( ::FbxAnimCurve& a0, ::FbxStatus*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[10],sipPySelf,NULL,sipName_Apply);

    if (!sipMeth)
        return  ::FbxAnimCurveFilterResample::Apply(a0,a1);

    extern bool sipVH_fbx_32(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::FbxAnimCurve&, ::FbxStatus*);

    return sipVH_fbx_32(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

void sipFbxAnimCurveFilterResample::Reset()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[11],sipPySelf,NULL,sipName_Reset);

    if (!sipMeth)
    {
         ::FbxAnimCurveFilterResample::Reset();
        return;
    }

    extern void sipVH_fbx_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH_fbx_0(sipGILState, 0, sipPySelf, sipMeth);
}


PyDoc_STRVAR(doc_FbxAnimCurveFilterResample_GetName, "GetName(self) -> str");

extern "C" {static PyObject *meth_FbxAnimCurveFilterResample_GetName(PyObject *, PyObject *);}
static PyObject *meth_FbxAnimCurveFilterResample_GetName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::FbxAnimCurveFilterResample *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxAnimCurveFilterResample, &sipCpp))
        {
            const char*sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::FbxAnimCurveFilterResample::GetName() : sipCpp->GetName());

            if (sipRes == NULL)
            {
                Py_INCREF(Py_None);
                return Py_None;
            }

#if PY_MAJOR_VERSION >= 3
            return PyUnicode_FromString(sipRes);
#else
            return PyUnicode_DecodeUTF8(sipRes, strlen(sipRes), NULL);
#endif
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxAnimCurveFilterResample, sipName_GetName, doc_FbxAnimCurveFilterResample_GetName);

    return NULL;
}


PyDoc_STRVAR(doc_FbxAnimCurveFilterResample_Apply, "Apply(self, FbxAnimStack, FbxStatus = None) -> bool\n"
    "Apply(self, FbxObject, FbxAnimStack, FbxStatus = None) -> bool\n"
    "Apply(self, FbxAnimCurveNode, FbxStatus = None) -> bool\n"
    "Apply(self, int, FbxStatus = None) -> Tuple[bool, FbxAnimCurve]\n"
    "Apply(self, FbxAnimCurve, FbxStatus = None) -> bool");

extern "C" {static PyObject *meth_FbxAnimCurveFilterResample_Apply(PyObject *, PyObject *);}
static PyObject *meth_FbxAnimCurveFilterResample_Apply(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::FbxAnimStack* a0;
         ::FbxStatus* a1 = 0;
         ::FbxAnimCurveFilterResample *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8|J8", &sipSelf, sipType_FbxAnimCurveFilterResample, &sipCpp, sipType_FbxAnimStack, &a0, sipType_FbxStatus, &a1))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::FbxAnimCurveFilterResample::Apply(a0,a1) : sipCpp->Apply(a0,a1));

            return PyBool_FromLong(sipRes);
        }
    }

    {
         ::FbxObject* a0;
         ::FbxAnimStack* a1;
         ::FbxStatus* a2 = 0;
         ::FbxAnimCurveFilterResample *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8J8|J8", &sipSelf, sipType_FbxAnimCurveFilterResample, &sipCpp, sipType_FbxObject, &a0, sipType_FbxAnimStack, &a1, sipType_FbxStatus, &a2))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::FbxAnimCurveFilterResample::Apply(a0,a1,a2) : sipCpp->Apply(a0,a1,a2));

            return PyBool_FromLong(sipRes);
        }
    }

    {
         ::FbxAnimCurveNode* a0;
         ::FbxStatus* a1 = 0;
         ::FbxAnimCurveFilterResample *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9|J8", &sipSelf, sipType_FbxAnimCurveFilterResample, &sipCpp, sipType_FbxAnimCurveNode, &a0, sipType_FbxStatus, &a1))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::FbxAnimCurveFilterResample::Apply(*a0,a1) : sipCpp->Apply(*a0,a1));

            return PyBool_FromLong(sipRes);
        }
    }

    {
         ::FbxAnimCurve* a0;
        int a1;
         ::FbxStatus* a2 = 0;
         ::FbxAnimCurveFilterResample *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi|J8", &sipSelf, sipType_FbxAnimCurveFilterResample, &sipCpp, &a1, sipType_FbxStatus, &a2))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::FbxAnimCurveFilterResample::Apply(&a0,a1,a2) : sipCpp->Apply(&a0,a1,a2));

            return sipBuildResult(0,"(bD)",sipRes,a0,sipType_FbxAnimCurve,NULL);
        }
    }

    {
         ::FbxAnimCurve* a0;
         ::FbxStatus* a1 = 0;
         ::FbxAnimCurveFilterResample *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9|J8", &sipSelf, sipType_FbxAnimCurveFilterResample, &sipCpp, sipType_FbxAnimCurve, &a0, sipType_FbxStatus, &a1))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::FbxAnimCurveFilterResample::Apply(*a0,a1) : sipCpp->Apply(*a0,a1));

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxAnimCurveFilterResample, sipName_Apply, doc_FbxAnimCurveFilterResample_Apply);

    return NULL;
}


PyDoc_STRVAR(doc_FbxAnimCurveFilterResample_Reset, "Reset(self)");

extern "C" {static PyObject *meth_FbxAnimCurveFilterResample_Reset(PyObject *, PyObject *);}
static PyObject *meth_FbxAnimCurveFilterResample_Reset(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::FbxAnimCurveFilterResample *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxAnimCurveFilterResample, &sipCpp))
        {
            (sipSelfWasArg ? sipCpp-> ::FbxAnimCurveFilterResample::Reset() : sipCpp->Reset());

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxAnimCurveFilterResample, sipName_Reset, doc_FbxAnimCurveFilterResample_Reset);

    return NULL;
}


PyDoc_STRVAR(doc_FbxAnimCurveFilterResample_SetKeysOnFrame, "SetKeysOnFrame(self, bool)");

extern "C" {static PyObject *meth_FbxAnimCurveFilterResample_SetKeysOnFrame(PyObject *, PyObject *);}
static PyObject *meth_FbxAnimCurveFilterResample_SetKeysOnFrame(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
         ::FbxAnimCurveFilterResample *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_FbxAnimCurveFilterResample, &sipCpp, &a0))
        {
            sipCpp->SetKeysOnFrame(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxAnimCurveFilterResample, sipName_SetKeysOnFrame, doc_FbxAnimCurveFilterResample_SetKeysOnFrame);

    return NULL;
}


PyDoc_STRVAR(doc_FbxAnimCurveFilterResample_GetKeysOnFrame, "GetKeysOnFrame(self) -> bool");

extern "C" {static PyObject *meth_FbxAnimCurveFilterResample_GetKeysOnFrame(PyObject *, PyObject *);}
static PyObject *meth_FbxAnimCurveFilterResample_GetKeysOnFrame(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::FbxAnimCurveFilterResample *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxAnimCurveFilterResample, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->GetKeysOnFrame();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxAnimCurveFilterResample, sipName_GetKeysOnFrame, doc_FbxAnimCurveFilterResample_GetKeysOnFrame);

    return NULL;
}


PyDoc_STRVAR(doc_FbxAnimCurveFilterResample_GetPeriodTime, "GetPeriodTime(self) -> FbxTime");

extern "C" {static PyObject *meth_FbxAnimCurveFilterResample_GetPeriodTime(PyObject *, PyObject *);}
static PyObject *meth_FbxAnimCurveFilterResample_GetPeriodTime(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::FbxAnimCurveFilterResample *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxAnimCurveFilterResample, &sipCpp))
        {
             ::FbxTime*sipRes;

            sipRes = new  ::FbxTime(sipCpp->GetPeriodTime());

            return sipConvertFromNewType(sipRes,sipType_FbxTime,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxAnimCurveFilterResample, sipName_GetPeriodTime, doc_FbxAnimCurveFilterResample_GetPeriodTime);

    return NULL;
}


PyDoc_STRVAR(doc_FbxAnimCurveFilterResample_SetPeriodTime, "SetPeriodTime(self, FbxTime)");

extern "C" {static PyObject *meth_FbxAnimCurveFilterResample_SetPeriodTime(PyObject *, PyObject *);}
static PyObject *meth_FbxAnimCurveFilterResample_SetPeriodTime(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxTime* a0;
         ::FbxAnimCurveFilterResample *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_FbxAnimCurveFilterResample, &sipCpp, sipType_FbxTime, &a0))
        {
            sipCpp->SetPeriodTime(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxAnimCurveFilterResample, sipName_SetPeriodTime, doc_FbxAnimCurveFilterResample_SetPeriodTime);

    return NULL;
}


PyDoc_STRVAR(doc_FbxAnimCurveFilterResample_GetIntelligentMode, "GetIntelligentMode(self) -> bool");

extern "C" {static PyObject *meth_FbxAnimCurveFilterResample_GetIntelligentMode(PyObject *, PyObject *);}
static PyObject *meth_FbxAnimCurveFilterResample_GetIntelligentMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::FbxAnimCurveFilterResample *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxAnimCurveFilterResample, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->GetIntelligentMode();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxAnimCurveFilterResample, sipName_GetIntelligentMode, doc_FbxAnimCurveFilterResample_GetIntelligentMode);

    return NULL;
}


PyDoc_STRVAR(doc_FbxAnimCurveFilterResample_SetIntelligentMode, "SetIntelligentMode(self, bool)");

extern "C" {static PyObject *meth_FbxAnimCurveFilterResample_SetIntelligentMode(PyObject *, PyObject *);}
static PyObject *meth_FbxAnimCurveFilterResample_SetIntelligentMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
         ::FbxAnimCurveFilterResample *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_FbxAnimCurveFilterResample, &sipCpp, &a0))
        {
            sipCpp->SetIntelligentMode(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxAnimCurveFilterResample, sipName_SetIntelligentMode, doc_FbxAnimCurveFilterResample_SetIntelligentMode);

    return NULL;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_FbxAnimCurveFilterResample(void *, const sipTypeDef *);}
static void *cast_FbxAnimCurveFilterResample(void *sipCppV, const sipTypeDef *targetType)
{
     ::FbxAnimCurveFilterResample *sipCpp = reinterpret_cast< ::FbxAnimCurveFilterResample *>(sipCppV);

    if (targetType == sipType_FbxAnimCurveFilter)
        return static_cast< ::FbxAnimCurveFilter *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_FbxAnimCurveFilterResample(void *, int);}
static void release_FbxAnimCurveFilterResample(void *sipCppV, int sipState)
{
    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipFbxAnimCurveFilterResample *>(sipCppV);
    else
        delete reinterpret_cast< ::FbxAnimCurveFilterResample *>(sipCppV);
}


extern "C" {static void assign_FbxAnimCurveFilterResample(void *, SIP_SSIZE_T, const void *);}
static void assign_FbxAnimCurveFilterResample(void *sipDst, SIP_SSIZE_T sipDstIdx, const void *sipSrc)
{
    reinterpret_cast< ::FbxAnimCurveFilterResample *>(sipDst)[sipDstIdx] = *reinterpret_cast<const  ::FbxAnimCurveFilterResample *>(sipSrc);
}


extern "C" {static void *array_FbxAnimCurveFilterResample(SIP_SSIZE_T);}
static void *array_FbxAnimCurveFilterResample(SIP_SSIZE_T sipNrElem)
{
    return new  ::FbxAnimCurveFilterResample[sipNrElem];
}


extern "C" {static void *copy_FbxAnimCurveFilterResample(const void *, SIP_SSIZE_T);}
static void *copy_FbxAnimCurveFilterResample(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::FbxAnimCurveFilterResample(reinterpret_cast<const  ::FbxAnimCurveFilterResample *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_FbxAnimCurveFilterResample(sipSimpleWrapper *);}
static void dealloc_FbxAnimCurveFilterResample(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipFbxAnimCurveFilterResample *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_FbxAnimCurveFilterResample(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_FbxAnimCurveFilterResample(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_FbxAnimCurveFilterResample(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipFbxAnimCurveFilterResample *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            sipCpp = new sipFbxAnimCurveFilterResample();

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const  ::FbxAnimCurveFilterResample* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_FbxAnimCurveFilterResample, &a0))
        {
            sipCpp = new sipFbxAnimCurveFilterResample(*a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_FbxAnimCurveFilterResample[] = {{17, 255, 1}};


static PyMethodDef methods_FbxAnimCurveFilterResample[] = {
    {SIP_MLNAME_CAST(sipName_Apply), meth_FbxAnimCurveFilterResample_Apply, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxAnimCurveFilterResample_Apply)},
    {SIP_MLNAME_CAST(sipName_GetIntelligentMode), meth_FbxAnimCurveFilterResample_GetIntelligentMode, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxAnimCurveFilterResample_GetIntelligentMode)},
    {SIP_MLNAME_CAST(sipName_GetKeysOnFrame), meth_FbxAnimCurveFilterResample_GetKeysOnFrame, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxAnimCurveFilterResample_GetKeysOnFrame)},
    {SIP_MLNAME_CAST(sipName_GetName), meth_FbxAnimCurveFilterResample_GetName, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxAnimCurveFilterResample_GetName)},
    {SIP_MLNAME_CAST(sipName_GetPeriodTime), meth_FbxAnimCurveFilterResample_GetPeriodTime, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxAnimCurveFilterResample_GetPeriodTime)},
    {SIP_MLNAME_CAST(sipName_Reset), meth_FbxAnimCurveFilterResample_Reset, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxAnimCurveFilterResample_Reset)},
    {SIP_MLNAME_CAST(sipName_SetIntelligentMode), meth_FbxAnimCurveFilterResample_SetIntelligentMode, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxAnimCurveFilterResample_SetIntelligentMode)},
    {SIP_MLNAME_CAST(sipName_SetKeysOnFrame), meth_FbxAnimCurveFilterResample_SetKeysOnFrame, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxAnimCurveFilterResample_SetKeysOnFrame)},
    {SIP_MLNAME_CAST(sipName_SetPeriodTime), meth_FbxAnimCurveFilterResample_SetPeriodTime, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxAnimCurveFilterResample_SetPeriodTime)}
};

PyDoc_STRVAR(doc_FbxAnimCurveFilterResample, "\1FbxAnimCurveFilterResample()\n"
    "FbxAnimCurveFilterResample(FbxAnimCurveFilterResample)");


sipClassTypeDef sipTypeDef_fbx_FbxAnimCurveFilterResample = {
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_FbxAnimCurveFilterResample,
        {0},
        0
    },
    {
        sipNameNr_FbxAnimCurveFilterResample,
        {0, 0, 1},
        9, methods_FbxAnimCurveFilterResample,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_FbxAnimCurveFilterResample,
    -1,
    -1,
    supers_FbxAnimCurveFilterResample,
    0,
    init_type_FbxAnimCurveFilterResample,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_FbxAnimCurveFilterResample,
    assign_FbxAnimCurveFilterResample,
    array_FbxAnimCurveFilterResample,
    copy_FbxAnimCurveFilterResample,
    release_FbxAnimCurveFilterResample,
    cast_FbxAnimCurveFilterResample,
    0,
    0,
    0,
    0,
    0,
    0
};
