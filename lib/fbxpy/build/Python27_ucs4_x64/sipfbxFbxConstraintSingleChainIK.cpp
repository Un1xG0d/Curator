/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.3
 *
 * Copyright (C) 2009 Autodesk, Inc. and/or its licensors.
 * All Rights Reserved.
 * 
 * The coded instructions, statements, computer programs, and/or related material 
 * (collectively the "Data") in these files contain unpublished information 
 * proprietary to Autodesk, Inc. and/or its licensors, which is protected by 
 * Canada and United States of America federal copyright law and by international 
 * treaties. 
 * 
 * The Data may not be disclosed or distributed to third parties, in whole or in
 * part, without the prior written consent of Autodesk, Inc. ("Autodesk").
 * 
 * THE DATA IS PROVIDED "AS IS" AND WITHOUT WARRANTY.
 * ALL WARRANTIES ARE EXPRESSLY EXCLUDED AND DISCLAIMED. AUTODESK MAKES NO
 * WARRANTY OF ANY KIND WITH RESPECT TO THE DATA, EXPRESS, IMPLIED OR ARISING
 * BY CUSTOM OR TRADE USAGE, AND DISCLAIMS ANY IMPLIED WARRANTIES OF TITLE, 
 * NON-INFRINGEMENT, MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE OR USE. 
 * WITHOUT LIMITING THE FOREGOING, AUTODESK DOES NOT WARRANT THAT THE OPERATION
 * OF THE DATA WILL BE UNINTERRUPTED OR ERROR FREE. 
 * 
 * IN NO EVENT SHALL AUTODESK, ITS AFFILIATES, PARENT COMPANIES, LICENSORS
 * OR SUPPLIERS ("AUTODESK GROUP") BE LIABLE FOR ANY LOSSES, DAMAGES OR EXPENSES
 * OF ANY KIND (INCLUDING WITHOUT LIMITATION PUNITIVE OR MULTIPLE DAMAGES OR OTHER
 * SPECIAL, DIRECT, INDIRECT, EXEMPLARY, INCIDENTAL, LOSS OF PROFITS, REVENUE
 * OR DATA, COST OF COVER OR CONSEQUENTIAL LOSSES OR DAMAGES OF ANY KIND),
 * HOWEVER CAUSED, AND REGARDLESS OF THE THEORY OF LIABILITY, WHETHER DERIVED
 * FROM CONTRACT, TORT (INCLUDING, BUT NOT LIMITED TO, NEGLIGENCE), OR OTHERWISE,
 * ARISING OUT OF OR RELATING TO THE DATA OR ITS USE OR ANY OTHER PERFORMANCE,
 * WHETHER OR NOT AUTODESK HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH LOSS
 * OR DAMAGE. 
 */

#include "sipAPIfbx.h"




PyDoc_STRVAR(doc_FbxConstraintSingleChainIK_Create, "Create(FbxManager, str) -> FbxConstraintSingleChainIK\n"
    "Create(FbxObject, str) -> FbxConstraintSingleChainIK");

extern "C" {static PyObject *meth_FbxConstraintSingleChainIK_Create(PyObject *, PyObject *);}
static PyObject *meth_FbxConstraintSingleChainIK_Create(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxManager* a0;
        const char* a1;
        PyObject *a1Keep;

        if (sipParseArgs(&sipParseErr, sipArgs, "J8A8", sipType_FbxManager, &a0, &a1Keep, &a1))
        {
             ::FbxConstraintSingleChainIK*sipRes;

            sipRes =  ::FbxConstraintSingleChainIK::Create(a0,a1);
            Py_DECREF(a1Keep);

            return sipConvertFromType(sipRes,sipType_FbxConstraintSingleChainIK,NULL);
        }
    }

    {
         ::FbxObject* a0;
        const char* a1;
        PyObject *a1Keep;

        if (sipParseArgs(&sipParseErr, sipArgs, "J8A8", sipType_FbxObject, &a0, &a1Keep, &a1))
        {
             ::FbxConstraintSingleChainIK*sipRes;

            sipRes =  ::FbxConstraintSingleChainIK::Create(a0,a1);
            Py_DECREF(a1Keep);

            return sipConvertFromType(sipRes,sipType_FbxConstraintSingleChainIK,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxConstraintSingleChainIK, sipName_Create, doc_FbxConstraintSingleChainIK_Create);

    return NULL;
}


PyDoc_STRVAR(doc_FbxConstraintSingleChainIK_GetClassId, "GetClassId(self) -> FbxClassId");

extern "C" {static PyObject *meth_FbxConstraintSingleChainIK_GetClassId(PyObject *, PyObject *);}
static PyObject *meth_FbxConstraintSingleChainIK_GetClassId(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::FbxConstraintSingleChainIK *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxConstraintSingleChainIK, &sipCpp))
        {
             ::FbxClassId*sipRes;

            sipRes = new  ::FbxClassId((sipSelfWasArg ? sipCpp-> ::FbxConstraintSingleChainIK::GetClassId() : sipCpp->GetClassId()));

            return sipConvertFromNewType(sipRes,sipType_FbxClassId,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxConstraintSingleChainIK, sipName_GetClassId, doc_FbxConstraintSingleChainIK_GetClassId);

    return NULL;
}


PyDoc_STRVAR(doc_FbxConstraintSingleChainIK_GetPoleVectorObjectWeight, "GetPoleVectorObjectWeight(self, FbxObject) -> float");

extern "C" {static PyObject *meth_FbxConstraintSingleChainIK_GetPoleVectorObjectWeight(PyObject *, PyObject *);}
static PyObject *meth_FbxConstraintSingleChainIK_GetPoleVectorObjectWeight(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::FbxObject* a0;
        const  ::FbxConstraintSingleChainIK *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_FbxConstraintSingleChainIK, &sipCpp, sipType_FbxObject, &a0))
        {
            double sipRes;

            sipRes = sipCpp->GetPoleVectorObjectWeight(a0);

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxConstraintSingleChainIK, sipName_GetPoleVectorObjectWeight, doc_FbxConstraintSingleChainIK_GetPoleVectorObjectWeight);

    return NULL;
}


PyDoc_STRVAR(doc_FbxConstraintSingleChainIK_AddPoleVectorObject, "AddPoleVectorObject(self, FbxObject, float = 100)");

extern "C" {static PyObject *meth_FbxConstraintSingleChainIK_AddPoleVectorObject(PyObject *, PyObject *);}
static PyObject *meth_FbxConstraintSingleChainIK_AddPoleVectorObject(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxObject* a0;
        double a1 = 100;
         ::FbxConstraintSingleChainIK *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8|d", &sipSelf, sipType_FbxConstraintSingleChainIK, &sipCpp, sipType_FbxObject, &a0, &a1))
        {
            sipCpp->AddPoleVectorObject(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxConstraintSingleChainIK, sipName_AddPoleVectorObject, doc_FbxConstraintSingleChainIK_AddPoleVectorObject);

    return NULL;
}


PyDoc_STRVAR(doc_FbxConstraintSingleChainIK_GetConstraintPoleVectorCount, "GetConstraintPoleVectorCount(self) -> int");

extern "C" {static PyObject *meth_FbxConstraintSingleChainIK_GetConstraintPoleVectorCount(PyObject *, PyObject *);}
static PyObject *meth_FbxConstraintSingleChainIK_GetConstraintPoleVectorCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::FbxConstraintSingleChainIK *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxConstraintSingleChainIK, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->GetConstraintPoleVectorCount();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxConstraintSingleChainIK, sipName_GetConstraintPoleVectorCount, doc_FbxConstraintSingleChainIK_GetConstraintPoleVectorCount);

    return NULL;
}


PyDoc_STRVAR(doc_FbxConstraintSingleChainIK_GetPoleVectorObject, "GetPoleVectorObject(self, int) -> FbxObject");

extern "C" {static PyObject *meth_FbxConstraintSingleChainIK_GetPoleVectorObject(PyObject *, PyObject *);}
static PyObject *meth_FbxConstraintSingleChainIK_GetPoleVectorObject(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const  ::FbxConstraintSingleChainIK *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_FbxConstraintSingleChainIK, &sipCpp, &a0))
        {
             ::FbxObject*sipRes;

            sipRes = sipCpp->GetPoleVectorObject(a0);

            return sipConvertFromType(sipRes,sipType_FbxObject,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxConstraintSingleChainIK, sipName_GetPoleVectorObject, doc_FbxConstraintSingleChainIK_GetPoleVectorObject);

    return NULL;
}


PyDoc_STRVAR(doc_FbxConstraintSingleChainIK_SetFirstJointObject, "SetFirstJointObject(self, FbxObject)");

extern "C" {static PyObject *meth_FbxConstraintSingleChainIK_SetFirstJointObject(PyObject *, PyObject *);}
static PyObject *meth_FbxConstraintSingleChainIK_SetFirstJointObject(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxObject* a0;
         ::FbxConstraintSingleChainIK *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_FbxConstraintSingleChainIK, &sipCpp, sipType_FbxObject, &a0))
        {
            sipCpp->SetFirstJointObject(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxConstraintSingleChainIK, sipName_SetFirstJointObject, doc_FbxConstraintSingleChainIK_SetFirstJointObject);

    return NULL;
}


PyDoc_STRVAR(doc_FbxConstraintSingleChainIK_GetFirstJointObject, "GetFirstJointObject(self) -> FbxObject");

extern "C" {static PyObject *meth_FbxConstraintSingleChainIK_GetFirstJointObject(PyObject *, PyObject *);}
static PyObject *meth_FbxConstraintSingleChainIK_GetFirstJointObject(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::FbxConstraintSingleChainIK *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxConstraintSingleChainIK, &sipCpp))
        {
             ::FbxObject*sipRes;

            sipRes = sipCpp->GetFirstJointObject();

            return sipConvertFromType(sipRes,sipType_FbxObject,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxConstraintSingleChainIK, sipName_GetFirstJointObject, doc_FbxConstraintSingleChainIK_GetFirstJointObject);

    return NULL;
}


PyDoc_STRVAR(doc_FbxConstraintSingleChainIK_SetEndJointObject, "SetEndJointObject(self, FbxObject)");

extern "C" {static PyObject *meth_FbxConstraintSingleChainIK_SetEndJointObject(PyObject *, PyObject *);}
static PyObject *meth_FbxConstraintSingleChainIK_SetEndJointObject(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxObject* a0;
         ::FbxConstraintSingleChainIK *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_FbxConstraintSingleChainIK, &sipCpp, sipType_FbxObject, &a0))
        {
            sipCpp->SetEndJointObject(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxConstraintSingleChainIK, sipName_SetEndJointObject, doc_FbxConstraintSingleChainIK_SetEndJointObject);

    return NULL;
}


PyDoc_STRVAR(doc_FbxConstraintSingleChainIK_GetEndJointObject, "GetEndJointObject(self) -> FbxObject");

extern "C" {static PyObject *meth_FbxConstraintSingleChainIK_GetEndJointObject(PyObject *, PyObject *);}
static PyObject *meth_FbxConstraintSingleChainIK_GetEndJointObject(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::FbxConstraintSingleChainIK *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxConstraintSingleChainIK, &sipCpp))
        {
             ::FbxObject*sipRes;

            sipRes = sipCpp->GetEndJointObject();

            return sipConvertFromType(sipRes,sipType_FbxObject,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxConstraintSingleChainIK, sipName_GetEndJointObject, doc_FbxConstraintSingleChainIK_GetEndJointObject);

    return NULL;
}


PyDoc_STRVAR(doc_FbxConstraintSingleChainIK_SetEffectorObject, "SetEffectorObject(self, FbxObject)");

extern "C" {static PyObject *meth_FbxConstraintSingleChainIK_SetEffectorObject(PyObject *, PyObject *);}
static PyObject *meth_FbxConstraintSingleChainIK_SetEffectorObject(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxObject* a0;
         ::FbxConstraintSingleChainIK *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_FbxConstraintSingleChainIK, &sipCpp, sipType_FbxObject, &a0))
        {
            sipCpp->SetEffectorObject(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxConstraintSingleChainIK, sipName_SetEffectorObject, doc_FbxConstraintSingleChainIK_SetEffectorObject);

    return NULL;
}


PyDoc_STRVAR(doc_FbxConstraintSingleChainIK_GetEffectorObject, "GetEffectorObject(self) -> FbxObject");

extern "C" {static PyObject *meth_FbxConstraintSingleChainIK_GetEffectorObject(PyObject *, PyObject *);}
static PyObject *meth_FbxConstraintSingleChainIK_GetEffectorObject(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::FbxConstraintSingleChainIK *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxConstraintSingleChainIK, &sipCpp))
        {
             ::FbxObject*sipRes;

            sipRes = sipCpp->GetEffectorObject();

            return sipConvertFromType(sipRes,sipType_FbxObject,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxConstraintSingleChainIK, sipName_GetEffectorObject, doc_FbxConstraintSingleChainIK_GetEffectorObject);

    return NULL;
}


extern "C" {static PyObject *slot_FbxConstraintSingleChainIK___ne__(PyObject *,PyObject *);}
static PyObject *slot_FbxConstraintSingleChainIK___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::FbxConstraintSingleChainIK *sipCpp = reinterpret_cast< ::FbxConstraintSingleChainIK *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_FbxConstraintSingleChainIK));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const  ::FbxConstraintSingleChainIK* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_FbxConstraintSingleChainIK, &a0))
        {
            bool sipRes;

            sipRes = !sipCpp-> ::FbxConstraintSingleChainIK::operator==(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_fbx, ne_slot, sipType_FbxConstraintSingleChainIK, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_FbxConstraintSingleChainIK___eq__(PyObject *,PyObject *);}
static PyObject *slot_FbxConstraintSingleChainIK___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::FbxConstraintSingleChainIK *sipCpp = reinterpret_cast< ::FbxConstraintSingleChainIK *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_FbxConstraintSingleChainIK));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const  ::FbxConstraintSingleChainIK* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_FbxConstraintSingleChainIK, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::FbxConstraintSingleChainIK::operator==(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_fbx, eq_slot, sipType_FbxConstraintSingleChainIK, sipSelf, sipArg);
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_FbxConstraintSingleChainIK(void *, const sipTypeDef *);}
static void *cast_FbxConstraintSingleChainIK(void *sipCppV, const sipTypeDef *targetType)
{
     ::FbxConstraintSingleChainIK *sipCpp = reinterpret_cast< ::FbxConstraintSingleChainIK *>(sipCppV);

    if (targetType == sipType_FbxConstraint)
        return static_cast< ::FbxConstraint *>(sipCpp);

    if (targetType == sipType_FbxObject)
        return static_cast< ::FbxObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_FbxConstraintSingleChainIK(void *, int);}
static void release_FbxConstraintSingleChainIK(void *, int)
{
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_FbxConstraintSingleChainIK[] = {{106, 255, 1}};


/* Define this type's Python slots. */
static sipPySlotDef slots_FbxConstraintSingleChainIK[] = {
    {(void *)slot_FbxConstraintSingleChainIK___ne__, ne_slot},
    {(void *)slot_FbxConstraintSingleChainIK___eq__, eq_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_FbxConstraintSingleChainIK[] = {
    {SIP_MLNAME_CAST(sipName_AddPoleVectorObject), meth_FbxConstraintSingleChainIK_AddPoleVectorObject, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxConstraintSingleChainIK_AddPoleVectorObject)},
    {SIP_MLNAME_CAST(sipName_Create), meth_FbxConstraintSingleChainIK_Create, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxConstraintSingleChainIK_Create)},
    {SIP_MLNAME_CAST(sipName_GetClassId), meth_FbxConstraintSingleChainIK_GetClassId, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxConstraintSingleChainIK_GetClassId)},
    {SIP_MLNAME_CAST(sipName_GetConstraintPoleVectorCount), meth_FbxConstraintSingleChainIK_GetConstraintPoleVectorCount, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxConstraintSingleChainIK_GetConstraintPoleVectorCount)},
    {SIP_MLNAME_CAST(sipName_GetEffectorObject), meth_FbxConstraintSingleChainIK_GetEffectorObject, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxConstraintSingleChainIK_GetEffectorObject)},
    {SIP_MLNAME_CAST(sipName_GetEndJointObject), meth_FbxConstraintSingleChainIK_GetEndJointObject, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxConstraintSingleChainIK_GetEndJointObject)},
    {SIP_MLNAME_CAST(sipName_GetFirstJointObject), meth_FbxConstraintSingleChainIK_GetFirstJointObject, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxConstraintSingleChainIK_GetFirstJointObject)},
    {SIP_MLNAME_CAST(sipName_GetPoleVectorObject), meth_FbxConstraintSingleChainIK_GetPoleVectorObject, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxConstraintSingleChainIK_GetPoleVectorObject)},
    {SIP_MLNAME_CAST(sipName_GetPoleVectorObjectWeight), meth_FbxConstraintSingleChainIK_GetPoleVectorObjectWeight, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxConstraintSingleChainIK_GetPoleVectorObjectWeight)},
    {SIP_MLNAME_CAST(sipName_SetEffectorObject), meth_FbxConstraintSingleChainIK_SetEffectorObject, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxConstraintSingleChainIK_SetEffectorObject)},
    {SIP_MLNAME_CAST(sipName_SetEndJointObject), meth_FbxConstraintSingleChainIK_SetEndJointObject, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxConstraintSingleChainIK_SetEndJointObject)},
    {SIP_MLNAME_CAST(sipName_SetFirstJointObject), meth_FbxConstraintSingleChainIK_SetFirstJointObject, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxConstraintSingleChainIK_SetFirstJointObject)}
};

static sipEnumMemberDef enummembers_FbxConstraintSingleChainIK[] = {
    {sipName_eAlwaysTS, static_cast<int>( ::FbxConstraintSingleChainIK::eAlwaysTS), 115},
    {sipName_eAutoDetect, static_cast<int>( ::FbxConstraintSingleChainIK::eAutoDetect), 115},
    {sipName_eNeverTS, static_cast<int>( ::FbxConstraintSingleChainIK::eNeverTS), 115},
    {sipName_eObject, static_cast<int>( ::FbxConstraintSingleChainIK::eObject), 116},
    {sipName_eRotatePlane, static_cast<int>( ::FbxConstraintSingleChainIK::eRotatePlane), 117},
    {sipName_eSingleChain, static_cast<int>( ::FbxConstraintSingleChainIK::eSingleChain), 117},
    {sipName_eVector, static_cast<int>( ::FbxConstraintSingleChainIK::eVector), 116},
};


extern "C" {static PyObject *varget_FbxConstraintSingleChainIK_Active(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxConstraintSingleChainIK_Active(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyBool1*sipVal;
     ::FbxConstraintSingleChainIK *sipCpp = reinterpret_cast< ::FbxConstraintSingleChainIK *>(sipSelf);

    sipVal = &sipCpp->Active;

    return sipConvertFromType(sipVal, sipType_FbxPropertyBool1, NULL);
}


extern "C" {static int varset_FbxConstraintSingleChainIK_Active(void *, PyObject *, PyObject *);}
static int varset_FbxConstraintSingleChainIK_Active(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyBool1*sipVal;
     ::FbxConstraintSingleChainIK *sipCpp = reinterpret_cast< ::FbxConstraintSingleChainIK *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyBool1 *>(sipForceConvertToType(sipPy,sipType_FbxPropertyBool1,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->Active = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxConstraintSingleChainIK_ClassId(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxConstraintSingleChainIK_ClassId(void *, PyObject *, PyObject *)
{
     ::FbxClassId*sipVal;

    sipVal = & ::FbxConstraintSingleChainIK::ClassId;

    return sipConvertFromType(sipVal, sipType_FbxClassId, NULL);
}


extern "C" {static int varset_FbxConstraintSingleChainIK_ClassId(void *, PyObject *, PyObject *);}
static int varset_FbxConstraintSingleChainIK_ClassId(void *, PyObject *sipPy, PyObject *)
{
     ::FbxClassId*sipVal;
    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxClassId *>(sipForceConvertToType(sipPy,sipType_FbxClassId,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

     ::FbxConstraintSingleChainIK::ClassId = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxConstraintSingleChainIK_EffectorObject(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxConstraintSingleChainIK_EffectorObject(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyFbxReference*sipVal;
     ::FbxConstraintSingleChainIK *sipCpp = reinterpret_cast< ::FbxConstraintSingleChainIK *>(sipSelf);

    sipVal = &sipCpp->EffectorObject;

    return sipConvertFromType(sipVal, sipType_FbxPropertyFbxReference, NULL);
}


extern "C" {static int varset_FbxConstraintSingleChainIK_EffectorObject(void *, PyObject *, PyObject *);}
static int varset_FbxConstraintSingleChainIK_EffectorObject(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyFbxReference*sipVal;
     ::FbxConstraintSingleChainIK *sipCpp = reinterpret_cast< ::FbxConstraintSingleChainIK *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyFbxReference *>(sipForceConvertToType(sipPy,sipType_FbxPropertyFbxReference,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->EffectorObject = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxConstraintSingleChainIK_EndJointObject(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxConstraintSingleChainIK_EndJointObject(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyFbxReference*sipVal;
     ::FbxConstraintSingleChainIK *sipCpp = reinterpret_cast< ::FbxConstraintSingleChainIK *>(sipSelf);

    sipVal = &sipCpp->EndJointObject;

    return sipConvertFromType(sipVal, sipType_FbxPropertyFbxReference, NULL);
}


extern "C" {static int varset_FbxConstraintSingleChainIK_EndJointObject(void *, PyObject *, PyObject *);}
static int varset_FbxConstraintSingleChainIK_EndJointObject(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyFbxReference*sipVal;
     ::FbxConstraintSingleChainIK *sipCpp = reinterpret_cast< ::FbxConstraintSingleChainIK *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyFbxReference *>(sipForceConvertToType(sipPy,sipType_FbxPropertyFbxReference,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->EndJointObject = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxConstraintSingleChainIK_EvaluateTSAnim(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxConstraintSingleChainIK_EvaluateTSAnim(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyEnum*sipVal;
     ::FbxConstraintSingleChainIK *sipCpp = reinterpret_cast< ::FbxConstraintSingleChainIK *>(sipSelf);

    sipVal = &sipCpp->EvaluateTSAnim;

    return sipConvertFromType(sipVal, sipType_FbxPropertyEnum, NULL);
}


extern "C" {static int varset_FbxConstraintSingleChainIK_EvaluateTSAnim(void *, PyObject *, PyObject *);}
static int varset_FbxConstraintSingleChainIK_EvaluateTSAnim(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyEnum*sipVal;
     ::FbxConstraintSingleChainIK *sipCpp = reinterpret_cast< ::FbxConstraintSingleChainIK *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyEnum *>(sipForceConvertToType(sipPy,sipType_FbxPropertyEnum,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->EvaluateTSAnim = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxConstraintSingleChainIK_FirstJointObject(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxConstraintSingleChainIK_FirstJointObject(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyFbxReference*sipVal;
     ::FbxConstraintSingleChainIK *sipCpp = reinterpret_cast< ::FbxConstraintSingleChainIK *>(sipSelf);

    sipVal = &sipCpp->FirstJointObject;

    return sipConvertFromType(sipVal, sipType_FbxPropertyFbxReference, NULL);
}


extern "C" {static int varset_FbxConstraintSingleChainIK_FirstJointObject(void *, PyObject *, PyObject *);}
static int varset_FbxConstraintSingleChainIK_FirstJointObject(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyFbxReference*sipVal;
     ::FbxConstraintSingleChainIK *sipCpp = reinterpret_cast< ::FbxConstraintSingleChainIK *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyFbxReference *>(sipForceConvertToType(sipPy,sipType_FbxPropertyFbxReference,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->FirstJointObject = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxConstraintSingleChainIK_Lock(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxConstraintSingleChainIK_Lock(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyBool1*sipVal;
     ::FbxConstraintSingleChainIK *sipCpp = reinterpret_cast< ::FbxConstraintSingleChainIK *>(sipSelf);

    sipVal = &sipCpp->Lock;

    return sipConvertFromType(sipVal, sipType_FbxPropertyBool1, NULL);
}


extern "C" {static int varset_FbxConstraintSingleChainIK_Lock(void *, PyObject *, PyObject *);}
static int varset_FbxConstraintSingleChainIK_Lock(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyBool1*sipVal;
     ::FbxConstraintSingleChainIK *sipCpp = reinterpret_cast< ::FbxConstraintSingleChainIK *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyBool1 *>(sipForceConvertToType(sipPy,sipType_FbxPropertyBool1,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->Lock = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxConstraintSingleChainIK_PoleVector(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxConstraintSingleChainIK_PoleVector(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyDouble3*sipVal;
     ::FbxConstraintSingleChainIK *sipCpp = reinterpret_cast< ::FbxConstraintSingleChainIK *>(sipSelf);

    sipVal = &sipCpp->PoleVector;

    return sipConvertFromType(sipVal, sipType_FbxPropertyDouble3, NULL);
}


extern "C" {static int varset_FbxConstraintSingleChainIK_PoleVector(void *, PyObject *, PyObject *);}
static int varset_FbxConstraintSingleChainIK_PoleVector(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyDouble3*sipVal;
     ::FbxConstraintSingleChainIK *sipCpp = reinterpret_cast< ::FbxConstraintSingleChainIK *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyDouble3 *>(sipForceConvertToType(sipPy,sipType_FbxPropertyDouble3,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->PoleVector = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxConstraintSingleChainIK_PoleVectorObjects(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxConstraintSingleChainIK_PoleVectorObjects(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyFbxReference*sipVal;
     ::FbxConstraintSingleChainIK *sipCpp = reinterpret_cast< ::FbxConstraintSingleChainIK *>(sipSelf);

    sipVal = &sipCpp->PoleVectorObjects;

    return sipConvertFromType(sipVal, sipType_FbxPropertyFbxReference, NULL);
}


extern "C" {static int varset_FbxConstraintSingleChainIK_PoleVectorObjects(void *, PyObject *, PyObject *);}
static int varset_FbxConstraintSingleChainIK_PoleVectorObjects(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyFbxReference*sipVal;
     ::FbxConstraintSingleChainIK *sipCpp = reinterpret_cast< ::FbxConstraintSingleChainIK *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyFbxReference *>(sipForceConvertToType(sipPy,sipType_FbxPropertyFbxReference,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->PoleVectorObjects = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxConstraintSingleChainIK_PoleVectorType(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxConstraintSingleChainIK_PoleVectorType(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyEnum*sipVal;
     ::FbxConstraintSingleChainIK *sipCpp = reinterpret_cast< ::FbxConstraintSingleChainIK *>(sipSelf);

    sipVal = &sipCpp->PoleVectorType;

    return sipConvertFromType(sipVal, sipType_FbxPropertyEnum, NULL);
}


extern "C" {static int varset_FbxConstraintSingleChainIK_PoleVectorType(void *, PyObject *, PyObject *);}
static int varset_FbxConstraintSingleChainIK_PoleVectorType(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyEnum*sipVal;
     ::FbxConstraintSingleChainIK *sipCpp = reinterpret_cast< ::FbxConstraintSingleChainIK *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyEnum *>(sipForceConvertToType(sipPy,sipType_FbxPropertyEnum,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->PoleVectorType = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxConstraintSingleChainIK_SolverType(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxConstraintSingleChainIK_SolverType(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyEnum*sipVal;
     ::FbxConstraintSingleChainIK *sipCpp = reinterpret_cast< ::FbxConstraintSingleChainIK *>(sipSelf);

    sipVal = &sipCpp->SolverType;

    return sipConvertFromType(sipVal, sipType_FbxPropertyEnum, NULL);
}


extern "C" {static int varset_FbxConstraintSingleChainIK_SolverType(void *, PyObject *, PyObject *);}
static int varset_FbxConstraintSingleChainIK_SolverType(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyEnum*sipVal;
     ::FbxConstraintSingleChainIK *sipCpp = reinterpret_cast< ::FbxConstraintSingleChainIK *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyEnum *>(sipForceConvertToType(sipPy,sipType_FbxPropertyEnum,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->SolverType = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxConstraintSingleChainIK_Twist(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxConstraintSingleChainIK_Twist(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyDouble1*sipVal;
     ::FbxConstraintSingleChainIK *sipCpp = reinterpret_cast< ::FbxConstraintSingleChainIK *>(sipSelf);

    sipVal = &sipCpp->Twist;

    return sipConvertFromType(sipVal, sipType_FbxPropertyDouble1, NULL);
}


extern "C" {static int varset_FbxConstraintSingleChainIK_Twist(void *, PyObject *, PyObject *);}
static int varset_FbxConstraintSingleChainIK_Twist(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyDouble1*sipVal;
     ::FbxConstraintSingleChainIK *sipCpp = reinterpret_cast< ::FbxConstraintSingleChainIK *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyDouble1 *>(sipForceConvertToType(sipPy,sipType_FbxPropertyDouble1,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->Twist = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxConstraintSingleChainIK_Weight(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxConstraintSingleChainIK_Weight(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyDouble1*sipVal;
     ::FbxConstraintSingleChainIK *sipCpp = reinterpret_cast< ::FbxConstraintSingleChainIK *>(sipSelf);

    sipVal = &sipCpp->Weight;

    return sipConvertFromType(sipVal, sipType_FbxPropertyDouble1, NULL);
}


extern "C" {static int varset_FbxConstraintSingleChainIK_Weight(void *, PyObject *, PyObject *);}
static int varset_FbxConstraintSingleChainIK_Weight(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyDouble1*sipVal;
     ::FbxConstraintSingleChainIK *sipCpp = reinterpret_cast< ::FbxConstraintSingleChainIK *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyDouble1 *>(sipForceConvertToType(sipPy,sipType_FbxPropertyDouble1,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->Weight = *sipVal;

    return 0;
}

sipVariableDef variables_FbxConstraintSingleChainIK[] = {
    {InstanceVariable, sipName_Active, (PyMethodDef *)varget_FbxConstraintSingleChainIK_Active, (PyMethodDef *)varset_FbxConstraintSingleChainIK_Active, NULL, NULL},
    {ClassVariable, sipName_ClassId, (PyMethodDef *)varget_FbxConstraintSingleChainIK_ClassId, (PyMethodDef *)varset_FbxConstraintSingleChainIK_ClassId, NULL, NULL},
    {InstanceVariable, sipName_EffectorObject, (PyMethodDef *)varget_FbxConstraintSingleChainIK_EffectorObject, (PyMethodDef *)varset_FbxConstraintSingleChainIK_EffectorObject, NULL, NULL},
    {InstanceVariable, sipName_EndJointObject, (PyMethodDef *)varget_FbxConstraintSingleChainIK_EndJointObject, (PyMethodDef *)varset_FbxConstraintSingleChainIK_EndJointObject, NULL, NULL},
    {InstanceVariable, sipName_EvaluateTSAnim, (PyMethodDef *)varget_FbxConstraintSingleChainIK_EvaluateTSAnim, (PyMethodDef *)varset_FbxConstraintSingleChainIK_EvaluateTSAnim, NULL, NULL},
    {InstanceVariable, sipName_FirstJointObject, (PyMethodDef *)varget_FbxConstraintSingleChainIK_FirstJointObject, (PyMethodDef *)varset_FbxConstraintSingleChainIK_FirstJointObject, NULL, NULL},
    {InstanceVariable, sipName_Lock, (PyMethodDef *)varget_FbxConstraintSingleChainIK_Lock, (PyMethodDef *)varset_FbxConstraintSingleChainIK_Lock, NULL, NULL},
    {InstanceVariable, sipName_PoleVector, (PyMethodDef *)varget_FbxConstraintSingleChainIK_PoleVector, (PyMethodDef *)varset_FbxConstraintSingleChainIK_PoleVector, NULL, NULL},
    {InstanceVariable, sipName_PoleVectorObjects, (PyMethodDef *)varget_FbxConstraintSingleChainIK_PoleVectorObjects, (PyMethodDef *)varset_FbxConstraintSingleChainIK_PoleVectorObjects, NULL, NULL},
    {InstanceVariable, sipName_PoleVectorType, (PyMethodDef *)varget_FbxConstraintSingleChainIK_PoleVectorType, (PyMethodDef *)varset_FbxConstraintSingleChainIK_PoleVectorType, NULL, NULL},
    {InstanceVariable, sipName_SolverType, (PyMethodDef *)varget_FbxConstraintSingleChainIK_SolverType, (PyMethodDef *)varset_FbxConstraintSingleChainIK_SolverType, NULL, NULL},
    {InstanceVariable, sipName_Twist, (PyMethodDef *)varget_FbxConstraintSingleChainIK_Twist, (PyMethodDef *)varset_FbxConstraintSingleChainIK_Twist, NULL, NULL},
    {InstanceVariable, sipName_Weight, (PyMethodDef *)varget_FbxConstraintSingleChainIK_Weight, (PyMethodDef *)varset_FbxConstraintSingleChainIK_Weight, NULL, NULL},
};


sipClassTypeDef sipTypeDef_fbx_FbxConstraintSingleChainIK = {
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_FbxConstraintSingleChainIK,
        {0},
        0
    },
    {
        sipNameNr_FbxConstraintSingleChainIK,
        {0, 0, 1},
        12, methods_FbxConstraintSingleChainIK,
        7, enummembers_FbxConstraintSingleChainIK,
        13, variables_FbxConstraintSingleChainIK,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    0,
    -1,
    -1,
    supers_FbxConstraintSingleChainIK,
    slots_FbxConstraintSingleChainIK,
    0,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    0,
    0,
    0,
    0,
    release_FbxConstraintSingleChainIK,
    cast_FbxConstraintSingleChainIK,
    0,
    0,
    0,
    0,
    0,
    0
};
