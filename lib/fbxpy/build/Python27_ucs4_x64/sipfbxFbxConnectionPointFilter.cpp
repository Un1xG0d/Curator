/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.3
 *
 * Copyright (C) 2009 Autodesk, Inc. and/or its licensors.
 * All Rights Reserved.
 * 
 * The coded instructions, statements, computer programs, and/or related material 
 * (collectively the "Data") in these files contain unpublished information 
 * proprietary to Autodesk, Inc. and/or its licensors, which is protected by 
 * Canada and United States of America federal copyright law and by international 
 * treaties. 
 * 
 * The Data may not be disclosed or distributed to third parties, in whole or in
 * part, without the prior written consent of Autodesk, Inc. ("Autodesk").
 * 
 * THE DATA IS PROVIDED "AS IS" AND WITHOUT WARRANTY.
 * ALL WARRANTIES ARE EXPRESSLY EXCLUDED AND DISCLAIMED. AUTODESK MAKES NO
 * WARRANTY OF ANY KIND WITH RESPECT TO THE DATA, EXPRESS, IMPLIED OR ARISING
 * BY CUSTOM OR TRADE USAGE, AND DISCLAIMS ANY IMPLIED WARRANTIES OF TITLE, 
 * NON-INFRINGEMENT, MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE OR USE. 
 * WITHOUT LIMITING THE FOREGOING, AUTODESK DOES NOT WARRANT THAT THE OPERATION
 * OF THE DATA WILL BE UNINTERRUPTED OR ERROR FREE. 
 * 
 * IN NO EVENT SHALL AUTODESK, ITS AFFILIATES, PARENT COMPANIES, LICENSORS
 * OR SUPPLIERS ("AUTODESK GROUP") BE LIABLE FOR ANY LOSSES, DAMAGES OR EXPENSES
 * OF ANY KIND (INCLUDING WITHOUT LIMITATION PUNITIVE OR MULTIPLE DAMAGES OR OTHER
 * SPECIAL, DIRECT, INDIRECT, EXEMPLARY, INCIDENTAL, LOSS OF PROFITS, REVENUE
 * OR DATA, COST OF COVER OR CONSEQUENTIAL LOSSES OR DAMAGES OF ANY KIND),
 * HOWEVER CAUSED, AND REGARDLESS OF THE THEORY OF LIABILITY, WHETHER DERIVED
 * FROM CONTRACT, TORT (INCLUDING, BUT NOT LIMITED TO, NEGLIGENCE), OR OTHERWISE,
 * ARISING OUT OF OR RELATING TO THE DATA OR ITS USE OR ANY OTHER PERFORMANCE,
 * WHETHER OR NOT AUTODESK HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH LOSS
 * OR DAMAGE. 
 */

#include "sipAPIfbx.h"




class sipFbxConnectionPointFilter : public  ::FbxConnectionPointFilter
{
public:
    sipFbxConnectionPointFilter();
    sipFbxConnectionPointFilter(const  ::FbxConnectionPointFilter&);
    virtual ~sipFbxConnectionPointFilter();

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    bool IsEqual( ::FbxConnectionPointFilter*) const;
    int GetUniqueId() const;
    void Unref();
     ::FbxConnectionPointFilter* Ref();

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipFbxConnectionPointFilter(const sipFbxConnectionPointFilter &);
    sipFbxConnectionPointFilter &operator = (const sipFbxConnectionPointFilter &);

    char sipPyMethods[4];
};

sipFbxConnectionPointFilter::sipFbxConnectionPointFilter():  ::FbxConnectionPointFilter(), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipFbxConnectionPointFilter::sipFbxConnectionPointFilter(const  ::FbxConnectionPointFilter& a0):  ::FbxConnectionPointFilter(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipFbxConnectionPointFilter::~sipFbxConnectionPointFilter()
{
    sipInstanceDestroyed(sipPySelf);
}

bool sipFbxConnectionPointFilter::IsEqual( ::FbxConnectionPointFilter*a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[0]),sipPySelf,NULL,sipName_IsEqual);

    if (!sipMeth)
        return  ::FbxConnectionPointFilter::IsEqual(a0);

    extern bool sipVH_fbx_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::FbxConnectionPointFilter*);

    return sipVH_fbx_6(sipGILState, 0, sipPySelf, sipMeth, a0);
}

int sipFbxConnectionPointFilter::GetUniqueId() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[1]),sipPySelf,NULL,sipName_GetUniqueId);

    if (!sipMeth)
        return  ::FbxConnectionPointFilter::GetUniqueId();

    extern int sipVH_fbx_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_fbx_5(sipGILState, 0, sipPySelf, sipMeth);
}

void sipFbxConnectionPointFilter::Unref()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_Unref);

    if (!sipMeth)
    {
         ::FbxConnectionPointFilter::Unref();
        return;
    }

    extern void sipVH_fbx_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH_fbx_0(sipGILState, 0, sipPySelf, sipMeth);
}

 ::FbxConnectionPointFilter* sipFbxConnectionPointFilter::Ref()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_Ref);

    if (!sipMeth)
        return  ::FbxConnectionPointFilter::Ref();

    extern  ::FbxConnectionPointFilter* sipVH_fbx_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_fbx_4(sipGILState, 0, sipPySelf, sipMeth);
}


PyDoc_STRVAR(doc_FbxConnectionPointFilter_Ref, "Ref(self) -> FbxConnectionPointFilter");

extern "C" {static PyObject *meth_FbxConnectionPointFilter_Ref(PyObject *, PyObject *);}
static PyObject *meth_FbxConnectionPointFilter_Ref(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::FbxConnectionPointFilter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxConnectionPointFilter, &sipCpp))
        {
             ::FbxConnectionPointFilter*sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::FbxConnectionPointFilter::Ref() : sipCpp->Ref());

            return sipConvertFromType(sipRes,sipType_FbxConnectionPointFilter,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxConnectionPointFilter, sipName_Ref, doc_FbxConnectionPointFilter_Ref);

    return NULL;
}


PyDoc_STRVAR(doc_FbxConnectionPointFilter_Unref, "Unref(self)");

extern "C" {static PyObject *meth_FbxConnectionPointFilter_Unref(PyObject *, PyObject *);}
static PyObject *meth_FbxConnectionPointFilter_Unref(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::FbxConnectionPointFilter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxConnectionPointFilter, &sipCpp))
        {
            (sipSelfWasArg ? sipCpp-> ::FbxConnectionPointFilter::Unref() : sipCpp->Unref());

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxConnectionPointFilter, sipName_Unref, doc_FbxConnectionPointFilter_Unref);

    return NULL;
}


PyDoc_STRVAR(doc_FbxConnectionPointFilter_GetUniqueId, "GetUniqueId(self) -> int");

extern "C" {static PyObject *meth_FbxConnectionPointFilter_GetUniqueId(PyObject *, PyObject *);}
static PyObject *meth_FbxConnectionPointFilter_GetUniqueId(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::FbxConnectionPointFilter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxConnectionPointFilter, &sipCpp))
        {
            int sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::FbxConnectionPointFilter::GetUniqueId() : sipCpp->GetUniqueId());

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxConnectionPointFilter, sipName_GetUniqueId, doc_FbxConnectionPointFilter_GetUniqueId);

    return NULL;
}


PyDoc_STRVAR(doc_FbxConnectionPointFilter_IsEqual, "IsEqual(self, FbxConnectionPointFilter) -> bool");

extern "C" {static PyObject *meth_FbxConnectionPointFilter_IsEqual(PyObject *, PyObject *);}
static PyObject *meth_FbxConnectionPointFilter_IsEqual(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::FbxConnectionPointFilter* a0;
        const  ::FbxConnectionPointFilter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_FbxConnectionPointFilter, &sipCpp, sipType_FbxConnectionPointFilter, &a0))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::FbxConnectionPointFilter::IsEqual(a0) : sipCpp->IsEqual(a0));

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxConnectionPointFilter, sipName_IsEqual, doc_FbxConnectionPointFilter_IsEqual);

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_FbxConnectionPointFilter(void *, int);}
static void release_FbxConnectionPointFilter(void *sipCppV, int sipState)
{
    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipFbxConnectionPointFilter *>(sipCppV);
    else
        delete reinterpret_cast< ::FbxConnectionPointFilter *>(sipCppV);
}


extern "C" {static void assign_FbxConnectionPointFilter(void *, SIP_SSIZE_T, const void *);}
static void assign_FbxConnectionPointFilter(void *sipDst, SIP_SSIZE_T sipDstIdx, const void *sipSrc)
{
    reinterpret_cast< ::FbxConnectionPointFilter *>(sipDst)[sipDstIdx] = *reinterpret_cast<const  ::FbxConnectionPointFilter *>(sipSrc);
}


extern "C" {static void *array_FbxConnectionPointFilter(SIP_SSIZE_T);}
static void *array_FbxConnectionPointFilter(SIP_SSIZE_T sipNrElem)
{
    return new  ::FbxConnectionPointFilter[sipNrElem];
}


extern "C" {static void *copy_FbxConnectionPointFilter(const void *, SIP_SSIZE_T);}
static void *copy_FbxConnectionPointFilter(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::FbxConnectionPointFilter(reinterpret_cast<const  ::FbxConnectionPointFilter *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_FbxConnectionPointFilter(sipSimpleWrapper *);}
static void dealloc_FbxConnectionPointFilter(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipFbxConnectionPointFilter *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_FbxConnectionPointFilter(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_FbxConnectionPointFilter(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_FbxConnectionPointFilter(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipFbxConnectionPointFilter *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            sipCpp = new sipFbxConnectionPointFilter();

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const  ::FbxConnectionPointFilter* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_FbxConnectionPointFilter, &a0))
        {
            sipCpp = new sipFbxConnectionPointFilter(*a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


static PyMethodDef methods_FbxConnectionPointFilter[] = {
    {SIP_MLNAME_CAST(sipName_GetUniqueId), meth_FbxConnectionPointFilter_GetUniqueId, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxConnectionPointFilter_GetUniqueId)},
    {SIP_MLNAME_CAST(sipName_IsEqual), meth_FbxConnectionPointFilter_IsEqual, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxConnectionPointFilter_IsEqual)},
    {SIP_MLNAME_CAST(sipName_Ref), meth_FbxConnectionPointFilter_Ref, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxConnectionPointFilter_Ref)},
    {SIP_MLNAME_CAST(sipName_Unref), meth_FbxConnectionPointFilter_Unref, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxConnectionPointFilter_Unref)}
};

PyDoc_STRVAR(doc_FbxConnectionPointFilter, "\1FbxConnectionPointFilter()\n"
    "FbxConnectionPointFilter(FbxConnectionPointFilter)");


sipClassTypeDef sipTypeDef_fbx_FbxConnectionPointFilter = {
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_FbxConnectionPointFilter,
        {0},
        0
    },
    {
        sipNameNr_FbxConnectionPointFilter,
        {0, 0, 1},
        4, methods_FbxConnectionPointFilter,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_FbxConnectionPointFilter,
    -1,
    -1,
    0,
    0,
    init_type_FbxConnectionPointFilter,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_FbxConnectionPointFilter,
    assign_FbxConnectionPointFilter,
    array_FbxConnectionPointFilter,
    copy_FbxConnectionPointFilter,
    release_FbxConnectionPointFilter,
    0,
    0,
    0,
    0,
    0,
    0,
    0
};
