/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.3
 *
 * Copyright (C) 2009 Autodesk, Inc. and/or its licensors.
 * All Rights Reserved.
 * 
 * The coded instructions, statements, computer programs, and/or related material 
 * (collectively the "Data") in these files contain unpublished information 
 * proprietary to Autodesk, Inc. and/or its licensors, which is protected by 
 * Canada and United States of America federal copyright law and by international 
 * treaties. 
 * 
 * The Data may not be disclosed or distributed to third parties, in whole or in
 * part, without the prior written consent of Autodesk, Inc. ("Autodesk").
 * 
 * THE DATA IS PROVIDED "AS IS" AND WITHOUT WARRANTY.
 * ALL WARRANTIES ARE EXPRESSLY EXCLUDED AND DISCLAIMED. AUTODESK MAKES NO
 * WARRANTY OF ANY KIND WITH RESPECT TO THE DATA, EXPRESS, IMPLIED OR ARISING
 * BY CUSTOM OR TRADE USAGE, AND DISCLAIMS ANY IMPLIED WARRANTIES OF TITLE, 
 * NON-INFRINGEMENT, MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE OR USE. 
 * WITHOUT LIMITING THE FOREGOING, AUTODESK DOES NOT WARRANT THAT THE OPERATION
 * OF THE DATA WILL BE UNINTERRUPTED OR ERROR FREE. 
 * 
 * IN NO EVENT SHALL AUTODESK, ITS AFFILIATES, PARENT COMPANIES, LICENSORS
 * OR SUPPLIERS ("AUTODESK GROUP") BE LIABLE FOR ANY LOSSES, DAMAGES OR EXPENSES
 * OF ANY KIND (INCLUDING WITHOUT LIMITATION PUNITIVE OR MULTIPLE DAMAGES OR OTHER
 * SPECIAL, DIRECT, INDIRECT, EXEMPLARY, INCIDENTAL, LOSS OF PROFITS, REVENUE
 * OR DATA, COST OF COVER OR CONSEQUENTIAL LOSSES OR DAMAGES OF ANY KIND),
 * HOWEVER CAUSED, AND REGARDLESS OF THE THEORY OF LIABILITY, WHETHER DERIVED
 * FROM CONTRACT, TORT (INCLUDING, BUT NOT LIMITED TO, NEGLIGENCE), OR OTHERWISE,
 * ARISING OUT OF OR RELATING TO THE DATA OR ITS USE OR ANY OTHER PERFORMANCE,
 * WHETHER OR NOT AUTODESK HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH LOSS
 * OR DAMAGE. 
 */

#include "sipAPIfbx.h"


#line 4 "/var/www/html/lib/fbxpy/sip/fbxstatus.sip"
#include <fbxsdk.h>
#line 44 "/var/www/html/lib/fbxpy/build/Python27_ucs4_x64/sipfbxFbxGeometry.cpp"


PyDoc_STRVAR(doc_FbxGeometry_Create, "Create(FbxManager, str) -> FbxGeometry\n"
    "Create(FbxObject, str) -> FbxGeometry");

extern "C" {static PyObject *meth_FbxGeometry_Create(PyObject *, PyObject *);}
static PyObject *meth_FbxGeometry_Create(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxManager* a0;
        const char* a1;
        PyObject *a1Keep;

        if (sipParseArgs(&sipParseErr, sipArgs, "J8A8", sipType_FbxManager, &a0, &a1Keep, &a1))
        {
             ::FbxGeometry*sipRes;

            sipRes =  ::FbxGeometry::Create(a0,a1);
            Py_DECREF(a1Keep);

            return sipConvertFromType(sipRes,sipType_FbxGeometry,NULL);
        }
    }

    {
         ::FbxObject* a0;
        const char* a1;
        PyObject *a1Keep;

        if (sipParseArgs(&sipParseErr, sipArgs, "J8A8", sipType_FbxObject, &a0, &a1Keep, &a1))
        {
             ::FbxGeometry*sipRes;

            sipRes =  ::FbxGeometry::Create(a0,a1);
            Py_DECREF(a1Keep);

            return sipConvertFromType(sipRes,sipType_FbxGeometry,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxGeometry, sipName_Create, doc_FbxGeometry_Create);

    return NULL;
}


PyDoc_STRVAR(doc_FbxGeometry_GetClassId, "GetClassId(self) -> FbxClassId");

extern "C" {static PyObject *meth_FbxGeometry_GetClassId(PyObject *, PyObject *);}
static PyObject *meth_FbxGeometry_GetClassId(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::FbxGeometry *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxGeometry, &sipCpp))
        {
             ::FbxClassId*sipRes;

            sipRes = new  ::FbxClassId((sipSelfWasArg ? sipCpp-> ::FbxGeometry::GetClassId() : sipCpp->GetClassId()));

            return sipConvertFromNewType(sipRes,sipType_FbxClassId,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxGeometry, sipName_GetClassId, doc_FbxGeometry_GetClassId);

    return NULL;
}


PyDoc_STRVAR(doc_FbxGeometry_GetAttributeType, "GetAttributeType(self) -> FbxNodeAttribute.EType");

extern "C" {static PyObject *meth_FbxGeometry_GetAttributeType(PyObject *, PyObject *);}
static PyObject *meth_FbxGeometry_GetAttributeType(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::FbxGeometry *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxGeometry, &sipCpp))
        {
             ::FbxNodeAttribute::EType sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::FbxGeometry::GetAttributeType() : sipCpp->GetAttributeType());

            return sipConvertFromEnum(sipRes,sipType_FbxNodeAttribute_EType);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxGeometry, sipName_GetAttributeType, doc_FbxGeometry_GetAttributeType);

    return NULL;
}


PyDoc_STRVAR(doc_FbxGeometry_AddDeformer, "AddDeformer(self, FbxDeformer) -> int");

extern "C" {static PyObject *meth_FbxGeometry_AddDeformer(PyObject *, PyObject *);}
static PyObject *meth_FbxGeometry_AddDeformer(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxDeformer* a0;
         ::FbxGeometry *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_FbxGeometry, &sipCpp, sipType_FbxDeformer, &a0))
        {
            int sipRes;

            sipRes = sipCpp->AddDeformer(a0);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxGeometry, sipName_AddDeformer, doc_FbxGeometry_AddDeformer);

    return NULL;
}


PyDoc_STRVAR(doc_FbxGeometry_RemoveDeformer, "RemoveDeformer(self, int, FbxStatus = None) -> FbxDeformer");

extern "C" {static PyObject *meth_FbxGeometry_RemoveDeformer(PyObject *, PyObject *);}
static PyObject *meth_FbxGeometry_RemoveDeformer(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
         ::FbxStatus* a1 = 0;
         ::FbxGeometry *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi|J8", &sipSelf, sipType_FbxGeometry, &sipCpp, &a0, sipType_FbxStatus, &a1))
        {
             ::FbxDeformer*sipRes;

            sipRes = sipCpp->RemoveDeformer(a0,a1);

            return sipConvertFromType(sipRes,sipType_FbxDeformer,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxGeometry, sipName_RemoveDeformer, doc_FbxGeometry_RemoveDeformer);

    return NULL;
}


PyDoc_STRVAR(doc_FbxGeometry_GetDeformerCount, "GetDeformerCount(self) -> int\n"
    "GetDeformerCount(self, FbxDeformer.EDeformerType) -> int");

extern "C" {static PyObject *meth_FbxGeometry_GetDeformerCount(PyObject *, PyObject *);}
static PyObject *meth_FbxGeometry_GetDeformerCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::FbxGeometry *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxGeometry, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->GetDeformerCount();

            return SIPLong_FromLong(sipRes);
        }
    }

    {
         ::FbxDeformer::EDeformerType a0;
        const  ::FbxGeometry *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_FbxGeometry, &sipCpp, sipType_FbxDeformer_EDeformerType, &a0))
        {
            int sipRes;

            sipRes = sipCpp->GetDeformerCount(a0);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxGeometry, sipName_GetDeformerCount, doc_FbxGeometry_GetDeformerCount);

    return NULL;
}


PyDoc_STRVAR(doc_FbxGeometry_GetDeformer, "GetDeformer(self, int, FbxStatus = None) -> FbxDeformer\n"
    "GetDeformer(self, int, FbxDeformer.EDeformerType, FbxStatus = None) -> FbxDeformer");

extern "C" {static PyObject *meth_FbxGeometry_GetDeformer(PyObject *, PyObject *);}
static PyObject *meth_FbxGeometry_GetDeformer(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
         ::FbxStatus* a1 = 0;
        const  ::FbxGeometry *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi|J8", &sipSelf, sipType_FbxGeometry, &sipCpp, &a0, sipType_FbxStatus, &a1))
        {
             ::FbxDeformer*sipRes;

            sipRes = sipCpp->GetDeformer(a0,a1);

            return sipConvertFromType(sipRes,sipType_FbxDeformer,NULL);
        }
    }

    {
        int a0;
         ::FbxDeformer::EDeformerType a1;
         ::FbxStatus* a2 = 0;
        const  ::FbxGeometry *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiE|J8", &sipSelf, sipType_FbxGeometry, &sipCpp, &a0, sipType_FbxDeformer_EDeformerType, &a1, sipType_FbxStatus, &a2))
        {
             ::FbxDeformer*sipRes;

            sipRes = sipCpp->GetDeformer(a0,a1,a2);

            return sipConvertFromType(sipRes,sipType_FbxDeformer,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxGeometry, sipName_GetDeformer, doc_FbxGeometry_GetDeformer);

    return NULL;
}


PyDoc_STRVAR(doc_FbxGeometry_GetSourceGeometryWeightedMap, "GetSourceGeometryWeightedMap(self) -> FbxGeometryWeightedMap");

extern "C" {static PyObject *meth_FbxGeometry_GetSourceGeometryWeightedMap(PyObject *, PyObject *);}
static PyObject *meth_FbxGeometry_GetSourceGeometryWeightedMap(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxGeometry *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxGeometry, &sipCpp))
        {
             ::FbxGeometryWeightedMap*sipRes;

            sipRes = sipCpp->GetSourceGeometryWeightedMap();

            return sipConvertFromType(sipRes,sipType_FbxGeometryWeightedMap,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxGeometry, sipName_GetSourceGeometryWeightedMap, doc_FbxGeometry_GetSourceGeometryWeightedMap);

    return NULL;
}


PyDoc_STRVAR(doc_FbxGeometry_GetDestinationGeometryWeightedMapCount, "GetDestinationGeometryWeightedMapCount(self) -> int");

extern "C" {static PyObject *meth_FbxGeometry_GetDestinationGeometryWeightedMapCount(PyObject *, PyObject *);}
static PyObject *meth_FbxGeometry_GetDestinationGeometryWeightedMapCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::FbxGeometry *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxGeometry, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->GetDestinationGeometryWeightedMapCount();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxGeometry, sipName_GetDestinationGeometryWeightedMapCount, doc_FbxGeometry_GetDestinationGeometryWeightedMapCount);

    return NULL;
}


PyDoc_STRVAR(doc_FbxGeometry_GetDestinationGeometryWeightedMap, "GetDestinationGeometryWeightedMap(self, int) -> FbxGeometryWeightedMap");

extern "C" {static PyObject *meth_FbxGeometry_GetDestinationGeometryWeightedMap(PyObject *, PyObject *);}
static PyObject *meth_FbxGeometry_GetDestinationGeometryWeightedMap(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
         ::FbxGeometry *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_FbxGeometry, &sipCpp, &a0))
        {
             ::FbxGeometryWeightedMap*sipRes;

            sipRes = sipCpp->GetDestinationGeometryWeightedMap(a0);

            return sipConvertFromType(sipRes,sipType_FbxGeometryWeightedMap,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxGeometry, sipName_GetDestinationGeometryWeightedMap, doc_FbxGeometry_GetDestinationGeometryWeightedMap);

    return NULL;
}


PyDoc_STRVAR(doc_FbxGeometry_AddShape, "AddShape(self, int, int, FbxShape, float = 100, FbxStatus = None) -> bool");

extern "C" {static PyObject *meth_FbxGeometry_AddShape(PyObject *, PyObject *);}
static PyObject *meth_FbxGeometry_AddShape(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        int a1;
         ::FbxShape* a2;
        double a3 = 100;
         ::FbxStatus* a4 = 0;
         ::FbxGeometry *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiiJ8|dJ8", &sipSelf, sipType_FbxGeometry, &sipCpp, &a0, &a1, sipType_FbxShape, &a2, &a3, sipType_FbxStatus, &a4))
        {
            bool sipRes;

            sipRes = sipCpp->AddShape(a0,a1,a2,a3,a4);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxGeometry, sipName_AddShape, doc_FbxGeometry_AddShape);

    return NULL;
}


PyDoc_STRVAR(doc_FbxGeometry_ClearShape, "ClearShape(self)");

extern "C" {static PyObject *meth_FbxGeometry_ClearShape(PyObject *, PyObject *);}
static PyObject *meth_FbxGeometry_ClearShape(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxGeometry *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxGeometry, &sipCpp))
        {
            sipCpp->ClearShape();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxGeometry, sipName_ClearShape, doc_FbxGeometry_ClearShape);

    return NULL;
}


PyDoc_STRVAR(doc_FbxGeometry_GetShapeCount, "GetShapeCount(self) -> int\n"
    "GetShapeCount(self, int, int, FbxStatus = None) -> int");

extern "C" {static PyObject *meth_FbxGeometry_GetShapeCount(PyObject *, PyObject *);}
static PyObject *meth_FbxGeometry_GetShapeCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::FbxGeometry *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxGeometry, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->GetShapeCount();

            return SIPLong_FromLong(sipRes);
        }
    }

    {
        int a0;
        int a1;
         ::FbxStatus* a2 = 0;
        const  ::FbxGeometry *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bii|J8", &sipSelf, sipType_FbxGeometry, &sipCpp, &a0, &a1, sipType_FbxStatus, &a2))
        {
            int sipRes;

            sipRes = sipCpp->GetShapeCount(a0,a1,a2);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxGeometry, sipName_GetShapeCount, doc_FbxGeometry_GetShapeCount);

    return NULL;
}


PyDoc_STRVAR(doc_FbxGeometry_GetShape, "GetShape(self, int, int, int, FbxStatus = None) -> FbxShape");

extern "C" {static PyObject *meth_FbxGeometry_GetShape(PyObject *, PyObject *);}
static PyObject *meth_FbxGeometry_GetShape(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        int a1;
        int a2;
         ::FbxStatus* a3 = 0;
         ::FbxGeometry *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Biii|J8", &sipSelf, sipType_FbxGeometry, &sipCpp, &a0, &a1, &a2, sipType_FbxStatus, &a3))
        {
             ::FbxShape*sipRes;

            sipRes = sipCpp->GetShape(a0,a1,a2,a3);

            return sipConvertFromType(sipRes,sipType_FbxShape,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxGeometry, sipName_GetShape, doc_FbxGeometry_GetShape);

    return NULL;
}


PyDoc_STRVAR(doc_FbxGeometry_GetShapeChannel, "GetShapeChannel(self, int, int, FbxAnimLayer, bool = False, FbxStatus = None) -> FbxAnimCurve");

extern "C" {static PyObject *meth_FbxGeometry_GetShapeChannel(PyObject *, PyObject *);}
static PyObject *meth_FbxGeometry_GetShapeChannel(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        int a1;
         ::FbxAnimLayer* a2;
        bool a3 = 0;
         ::FbxStatus* a4 = 0;
         ::FbxGeometry *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiiJ8|bJ8", &sipSelf, sipType_FbxGeometry, &sipCpp, &a0, &a1, sipType_FbxAnimLayer, &a2, &a3, sipType_FbxStatus, &a4))
        {
             ::FbxAnimCurve*sipRes;

            sipRes = sipCpp->GetShapeChannel(a0,a1,a2,a3,a4);

            return sipConvertFromType(sipRes,sipType_FbxAnimCurve,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxGeometry, sipName_GetShapeChannel, doc_FbxGeometry_GetShapeChannel);

    return NULL;
}


PyDoc_STRVAR(doc_FbxGeometry_GetPivot, "GetPivot(self, FbxAMatrix) -> FbxAMatrix");

extern "C" {static PyObject *meth_FbxGeometry_GetPivot(PyObject *, PyObject *);}
static PyObject *meth_FbxGeometry_GetPivot(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxAMatrix* a0;
        const  ::FbxGeometry *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_FbxGeometry, &sipCpp, sipType_FbxAMatrix, &a0))
        {
             ::FbxAMatrix*sipRes;

            sipRes = &sipCpp->GetPivot(*a0);

            return sipConvertFromType(sipRes,sipType_FbxAMatrix,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxGeometry, sipName_GetPivot, doc_FbxGeometry_GetPivot);

    return NULL;
}


PyDoc_STRVAR(doc_FbxGeometry_SetPivot, "SetPivot(self, FbxAMatrix)");

extern "C" {static PyObject *meth_FbxGeometry_SetPivot(PyObject *, PyObject *);}
static PyObject *meth_FbxGeometry_SetPivot(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxAMatrix* a0;
         ::FbxGeometry *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_FbxGeometry, &sipCpp, sipType_FbxAMatrix, &a0))
        {
            sipCpp->SetPivot(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxGeometry, sipName_SetPivot, doc_FbxGeometry_SetPivot);

    return NULL;
}


PyDoc_STRVAR(doc_FbxGeometry_ApplyPivot, "ApplyPivot(self)");

extern "C" {static PyObject *meth_FbxGeometry_ApplyPivot(PyObject *, PyObject *);}
static PyObject *meth_FbxGeometry_ApplyPivot(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxGeometry *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxGeometry, &sipCpp))
        {
            sipCpp->ApplyPivot();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxGeometry, sipName_ApplyPivot, doc_FbxGeometry_ApplyPivot);

    return NULL;
}


PyDoc_STRVAR(doc_FbxGeometry_SetDefaultShape, "SetDefaultShape(self, int, int, float)\n"
    "SetDefaultShape(self, FbxBlendShapeChannel, float)");

extern "C" {static PyObject *meth_FbxGeometry_SetDefaultShape(PyObject *, PyObject *);}
static PyObject *meth_FbxGeometry_SetDefaultShape(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        int a1;
        double a2;
         ::FbxGeometry *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Biid", &sipSelf, sipType_FbxGeometry, &sipCpp, &a0, &a1, &a2))
        {
            sipCpp->SetDefaultShape(a0,a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
         ::FbxBlendShapeChannel* a0;
        double a1;
         ::FbxGeometry *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8d", &sipSelf, sipType_FbxGeometry, &sipCpp, sipType_FbxBlendShapeChannel, &a0, &a1))
        {
            sipCpp->SetDefaultShape(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxGeometry, sipName_SetDefaultShape, doc_FbxGeometry_SetDefaultShape);

    return NULL;
}


PyDoc_STRVAR(doc_FbxGeometry_GetDefaultShape, "GetDefaultShape(self, int, int) -> float\n"
    "GetDefaultShape(self, FbxBlendShapeChannel) -> float");

extern "C" {static PyObject *meth_FbxGeometry_GetDefaultShape(PyObject *, PyObject *);}
static PyObject *meth_FbxGeometry_GetDefaultShape(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        int a1;
        const  ::FbxGeometry *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bii", &sipSelf, sipType_FbxGeometry, &sipCpp, &a0, &a1))
        {
            double sipRes;

            sipRes = sipCpp->GetDefaultShape(a0,a1);

            return PyFloat_FromDouble(sipRes);
        }
    }

    {
         ::FbxBlendShapeChannel* a0;
        const  ::FbxGeometry *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_FbxGeometry, &sipCpp, sipType_FbxBlendShapeChannel, &a0))
        {
            double sipRes;

            sipRes = sipCpp->GetDefaultShape(a0);

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxGeometry, sipName_GetDefaultShape, doc_FbxGeometry_GetDefaultShape);

    return NULL;
}


extern "C" {static PyObject *slot_FbxGeometry___ne__(PyObject *,PyObject *);}
static PyObject *slot_FbxGeometry___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::FbxGeometry *sipCpp = reinterpret_cast< ::FbxGeometry *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_FbxGeometry));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const  ::FbxGeometry* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_FbxGeometry, &a0))
        {
            bool sipRes;

            sipRes = !sipCpp-> ::FbxGeometry::operator==(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_fbx, ne_slot, sipType_FbxGeometry, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_FbxGeometry___eq__(PyObject *,PyObject *);}
static PyObject *slot_FbxGeometry___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::FbxGeometry *sipCpp = reinterpret_cast< ::FbxGeometry *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_FbxGeometry));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const  ::FbxGeometry* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_FbxGeometry, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::FbxGeometry::operator==(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_fbx, eq_slot, sipType_FbxGeometry, sipSelf, sipArg);
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_FbxGeometry(void *, const sipTypeDef *);}
static void *cast_FbxGeometry(void *sipCppV, const sipTypeDef *targetType)
{
     ::FbxGeometry *sipCpp = reinterpret_cast< ::FbxGeometry *>(sipCppV);

    if (targetType == sipType_FbxGeometryBase)
        return static_cast< ::FbxGeometryBase *>(sipCpp);

    if (targetType == sipType_FbxLayerContainer)
        return static_cast< ::FbxLayerContainer *>(sipCpp);

    if (targetType == sipType_FbxNodeAttribute)
        return static_cast< ::FbxNodeAttribute *>(sipCpp);

    if (targetType == sipType_FbxObject)
        return static_cast< ::FbxObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_FbxGeometry(void *, int);}
static void release_FbxGeometry(void *, int)
{
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_FbxGeometry[] = {{149, 255, 1}};


/* Define this type's Python slots. */
static sipPySlotDef slots_FbxGeometry[] = {
    {(void *)slot_FbxGeometry___ne__, ne_slot},
    {(void *)slot_FbxGeometry___eq__, eq_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_FbxGeometry[] = {
    {SIP_MLNAME_CAST(sipName_AddDeformer), meth_FbxGeometry_AddDeformer, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxGeometry_AddDeformer)},
    {SIP_MLNAME_CAST(sipName_AddShape), meth_FbxGeometry_AddShape, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxGeometry_AddShape)},
    {SIP_MLNAME_CAST(sipName_ApplyPivot), meth_FbxGeometry_ApplyPivot, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxGeometry_ApplyPivot)},
    {SIP_MLNAME_CAST(sipName_ClearShape), meth_FbxGeometry_ClearShape, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxGeometry_ClearShape)},
    {SIP_MLNAME_CAST(sipName_Create), meth_FbxGeometry_Create, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxGeometry_Create)},
    {SIP_MLNAME_CAST(sipName_GetAttributeType), meth_FbxGeometry_GetAttributeType, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxGeometry_GetAttributeType)},
    {SIP_MLNAME_CAST(sipName_GetClassId), meth_FbxGeometry_GetClassId, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxGeometry_GetClassId)},
    {SIP_MLNAME_CAST(sipName_GetDefaultShape), meth_FbxGeometry_GetDefaultShape, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxGeometry_GetDefaultShape)},
    {SIP_MLNAME_CAST(sipName_GetDeformer), meth_FbxGeometry_GetDeformer, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxGeometry_GetDeformer)},
    {SIP_MLNAME_CAST(sipName_GetDeformerCount), meth_FbxGeometry_GetDeformerCount, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxGeometry_GetDeformerCount)},
    {SIP_MLNAME_CAST(sipName_GetDestinationGeometryWeightedMap), meth_FbxGeometry_GetDestinationGeometryWeightedMap, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxGeometry_GetDestinationGeometryWeightedMap)},
    {SIP_MLNAME_CAST(sipName_GetDestinationGeometryWeightedMapCount), meth_FbxGeometry_GetDestinationGeometryWeightedMapCount, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxGeometry_GetDestinationGeometryWeightedMapCount)},
    {SIP_MLNAME_CAST(sipName_GetPivot), meth_FbxGeometry_GetPivot, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxGeometry_GetPivot)},
    {SIP_MLNAME_CAST(sipName_GetShape), meth_FbxGeometry_GetShape, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxGeometry_GetShape)},
    {SIP_MLNAME_CAST(sipName_GetShapeChannel), meth_FbxGeometry_GetShapeChannel, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxGeometry_GetShapeChannel)},
    {SIP_MLNAME_CAST(sipName_GetShapeCount), meth_FbxGeometry_GetShapeCount, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxGeometry_GetShapeCount)},
    {SIP_MLNAME_CAST(sipName_GetSourceGeometryWeightedMap), meth_FbxGeometry_GetSourceGeometryWeightedMap, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxGeometry_GetSourceGeometryWeightedMap)},
    {SIP_MLNAME_CAST(sipName_RemoveDeformer), meth_FbxGeometry_RemoveDeformer, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxGeometry_RemoveDeformer)},
    {SIP_MLNAME_CAST(sipName_SetDefaultShape), meth_FbxGeometry_SetDefaultShape, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxGeometry_SetDefaultShape)},
    {SIP_MLNAME_CAST(sipName_SetPivot), meth_FbxGeometry_SetPivot, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxGeometry_SetPivot)}
};

static sipEnumMemberDef enummembers_FbxGeometry[] = {
    {sipName_eHigh, static_cast<int>( ::FbxGeometry::eHigh), 148},
    {sipName_eHighNoNormals, static_cast<int>( ::FbxGeometry::eHighNoNormals), 148},
    {sipName_eLow, static_cast<int>( ::FbxGeometry::eLow), 148},
    {sipName_eLowNoNormals, static_cast<int>( ::FbxGeometry::eLowNoNormals), 148},
    {sipName_eRaw, static_cast<int>( ::FbxGeometry::eRaw), 148},
};


extern "C" {static PyObject *varget_FbxGeometry_ClassId(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxGeometry_ClassId(void *, PyObject *, PyObject *)
{
     ::FbxClassId*sipVal;

    sipVal = & ::FbxGeometry::ClassId;

    return sipConvertFromType(sipVal, sipType_FbxClassId, NULL);
}


extern "C" {static int varset_FbxGeometry_ClassId(void *, PyObject *, PyObject *);}
static int varset_FbxGeometry_ClassId(void *, PyObject *sipPy, PyObject *)
{
     ::FbxClassId*sipVal;
    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxClassId *>(sipForceConvertToType(sipPy,sipType_FbxClassId,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

     ::FbxGeometry::ClassId = *sipVal;

    return 0;
}

sipVariableDef variables_FbxGeometry[] = {
    {ClassVariable, sipName_ClassId, (PyMethodDef *)varget_FbxGeometry_ClassId, (PyMethodDef *)varset_FbxGeometry_ClassId, NULL, NULL},
};


sipClassTypeDef sipTypeDef_fbx_FbxGeometry = {
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_FbxGeometry,
        {0},
        0
    },
    {
        sipNameNr_FbxGeometry,
        {0, 0, 1},
        20, methods_FbxGeometry,
        5, enummembers_FbxGeometry,
        1, variables_FbxGeometry,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    0,
    -1,
    -1,
    supers_FbxGeometry,
    slots_FbxGeometry,
    0,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    0,
    0,
    0,
    0,
    release_FbxGeometry,
    cast_FbxGeometry,
    0,
    0,
    0,
    0,
    0,
    0
};
