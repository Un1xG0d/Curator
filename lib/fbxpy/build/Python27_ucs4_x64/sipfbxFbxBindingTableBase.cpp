/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.3
 *
 * Copyright (C) 2009 Autodesk, Inc. and/or its licensors.
 * All Rights Reserved.
 * 
 * The coded instructions, statements, computer programs, and/or related material 
 * (collectively the "Data") in these files contain unpublished information 
 * proprietary to Autodesk, Inc. and/or its licensors, which is protected by 
 * Canada and United States of America federal copyright law and by international 
 * treaties. 
 * 
 * The Data may not be disclosed or distributed to third parties, in whole or in
 * part, without the prior written consent of Autodesk, Inc. ("Autodesk").
 * 
 * THE DATA IS PROVIDED "AS IS" AND WITHOUT WARRANTY.
 * ALL WARRANTIES ARE EXPRESSLY EXCLUDED AND DISCLAIMED. AUTODESK MAKES NO
 * WARRANTY OF ANY KIND WITH RESPECT TO THE DATA, EXPRESS, IMPLIED OR ARISING
 * BY CUSTOM OR TRADE USAGE, AND DISCLAIMS ANY IMPLIED WARRANTIES OF TITLE, 
 * NON-INFRINGEMENT, MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE OR USE. 
 * WITHOUT LIMITING THE FOREGOING, AUTODESK DOES NOT WARRANT THAT THE OPERATION
 * OF THE DATA WILL BE UNINTERRUPTED OR ERROR FREE. 
 * 
 * IN NO EVENT SHALL AUTODESK, ITS AFFILIATES, PARENT COMPANIES, LICENSORS
 * OR SUPPLIERS ("AUTODESK GROUP") BE LIABLE FOR ANY LOSSES, DAMAGES OR EXPENSES
 * OF ANY KIND (INCLUDING WITHOUT LIMITATION PUNITIVE OR MULTIPLE DAMAGES OR OTHER
 * SPECIAL, DIRECT, INDIRECT, EXEMPLARY, INCIDENTAL, LOSS OF PROFITS, REVENUE
 * OR DATA, COST OF COVER OR CONSEQUENTIAL LOSSES OR DAMAGES OF ANY KIND),
 * HOWEVER CAUSED, AND REGARDLESS OF THE THEORY OF LIABILITY, WHETHER DERIVED
 * FROM CONTRACT, TORT (INCLUDING, BUT NOT LIMITED TO, NEGLIGENCE), OR OTHERWISE,
 * ARISING OUT OF OR RELATING TO THE DATA OR ITS USE OR ANY OTHER PERFORMANCE,
 * WHETHER OR NOT AUTODESK HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH LOSS
 * OR DAMAGE. 
 */

#include "sipAPIfbx.h"




class sipFbxBindingTableBase : public  ::FbxBindingTableBase
{
public:
    sipFbxBindingTableBase( ::FbxManager&,const char*);
    virtual ~sipFbxBindingTableBase();

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
     ::FbxClassId GetClassId() const;
     ::FbxObject* Clone( ::FbxObject::ECloneType, ::FbxObject*) const;
    bool GetSelected();
    void SetSelected(bool);
    const char* Localize(const char*,const char*) const;
     ::FbxString GetUrl() const;
    bool SetUrl(char*);
    const char* GetTypeName() const;
     ::FbxStringList GetTypeFlags() const;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipFbxBindingTableBase(const sipFbxBindingTableBase &);
    sipFbxBindingTableBase &operator = (const sipFbxBindingTableBase &);

    char sipPyMethods[9];
};

sipFbxBindingTableBase::sipFbxBindingTableBase( ::FbxManager& a0,const char*a1):  ::FbxBindingTableBase(a0,a1), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipFbxBindingTableBase::~sipFbxBindingTableBase()
{
    sipInstanceDestroyed(sipPySelf);
}

 ::FbxClassId sipFbxBindingTableBase::GetClassId() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[0]),sipPySelf,NULL,sipName_GetClassId);

    if (!sipMeth)
        return  ::FbxBindingTableBase::GetClassId();

    extern  ::FbxClassId sipVH_fbx_33(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_fbx_33(sipGILState, 0, sipPySelf, sipMeth);
}

 ::FbxObject* sipFbxBindingTableBase::Clone( ::FbxObject::ECloneType a0, ::FbxObject*a1) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[1]),sipPySelf,NULL,sipName_Clone);

    if (!sipMeth)
        return  ::FbxBindingTableBase::Clone(a0,a1);

    extern  ::FbxObject* sipVH_fbx_34(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::FbxObject::ECloneType, ::FbxObject*);

    return sipVH_fbx_34(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

bool sipFbxBindingTableBase::GetSelected()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_GetSelected);

    if (!sipMeth)
        return  ::FbxBindingTableBase::GetSelected();

    extern bool sipVH_fbx_17(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_fbx_17(sipGILState, 0, sipPySelf, sipMeth);
}

void sipFbxBindingTableBase::SetSelected(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_SetSelected);

    if (!sipMeth)
    {
         ::FbxBindingTableBase::SetSelected(a0);
        return;
    }

    extern void sipVH_fbx_35(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    sipVH_fbx_35(sipGILState, 0, sipPySelf, sipMeth, a0);
}

const char* sipFbxBindingTableBase::Localize(const char*a0,const char*a1) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[4]),sipPySelf,NULL,sipName_Localize);

    if (!sipMeth)
        return  ::FbxBindingTableBase::Localize(a0,a1);

    extern const char* sipVH_fbx_36(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const char*,const char*, int);

    return sipVH_fbx_36(sipGILState, 0, sipPySelf, sipMeth, a0, a1, -19);
}

 ::FbxString sipFbxBindingTableBase::GetUrl() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[5]),sipPySelf,NULL,sipName_GetUrl);

    if (!sipMeth)
        return  ::FbxBindingTableBase::GetUrl();

    extern  ::FbxString sipVH_fbx_37(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_fbx_37(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipFbxBindingTableBase::SetUrl(char*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_SetUrl);

    if (!sipMeth)
        return  ::FbxBindingTableBase::SetUrl(a0);

    extern bool sipVH_fbx_16(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, char*);

    return sipVH_fbx_16(sipGILState, 0, sipPySelf, sipMeth, a0);
}

const char* sipFbxBindingTableBase::GetTypeName() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[7]),sipPySelf,NULL,sipName_GetTypeName);

    if (!sipMeth)
        return  ::FbxBindingTableBase::GetTypeName();

    extern const char* sipVH_fbx_27(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return sipVH_fbx_27(sipGILState, 0, sipPySelf, sipMeth, -20);
}

 ::FbxStringList sipFbxBindingTableBase::GetTypeFlags() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[8]),sipPySelf,NULL,sipName_GetTypeFlags);

    if (!sipMeth)
        return  ::FbxBindingTableBase::GetTypeFlags();

    extern  ::FbxStringList sipVH_fbx_38(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_fbx_38(sipGILState, 0, sipPySelf, sipMeth);
}


PyDoc_STRVAR(doc_FbxBindingTableBase_Create, "Create(FbxManager, str) -> FbxBindingTableBase");

extern "C" {static PyObject *meth_FbxBindingTableBase_Create(PyObject *, PyObject *);}
static PyObject *meth_FbxBindingTableBase_Create(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxManager* a0;
        const char* a1;
        PyObject *a1Keep;

        if (sipParseArgs(&sipParseErr, sipArgs, "J8A8", sipType_FbxManager, &a0, &a1Keep, &a1))
        {
             ::FbxBindingTableBase*sipRes;

            sipRes =  ::FbxBindingTableBase::Create(a0,a1);
            Py_DECREF(a1Keep);

            return sipConvertFromType(sipRes,sipType_FbxBindingTableBase,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxBindingTableBase, sipName_Create, doc_FbxBindingTableBase_Create);

    return NULL;
}


PyDoc_STRVAR(doc_FbxBindingTableBase_GetClassId, "GetClassId(self) -> FbxClassId");

extern "C" {static PyObject *meth_FbxBindingTableBase_GetClassId(PyObject *, PyObject *);}
static PyObject *meth_FbxBindingTableBase_GetClassId(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::FbxBindingTableBase *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxBindingTableBase, &sipCpp))
        {
             ::FbxClassId*sipRes;

            sipRes = new  ::FbxClassId((sipSelfWasArg ? sipCpp-> ::FbxBindingTableBase::GetClassId() : sipCpp->GetClassId()));

            return sipConvertFromNewType(sipRes,sipType_FbxClassId,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxBindingTableBase, sipName_GetClassId, doc_FbxBindingTableBase_GetClassId);

    return NULL;
}


PyDoc_STRVAR(doc_FbxBindingTableBase_AddNewEntry, "AddNewEntry(self) -> FbxBindingTableEntry");

extern "C" {static PyObject *meth_FbxBindingTableBase_AddNewEntry(PyObject *, PyObject *);}
static PyObject *meth_FbxBindingTableBase_AddNewEntry(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxBindingTableBase *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxBindingTableBase, &sipCpp))
        {
             ::FbxBindingTableEntry*sipRes;

            sipRes = &sipCpp->AddNewEntry();

            return sipConvertFromType(sipRes,sipType_FbxBindingTableEntry,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxBindingTableBase, sipName_AddNewEntry, doc_FbxBindingTableBase_AddNewEntry);

    return NULL;
}


PyDoc_STRVAR(doc_FbxBindingTableBase_GetEntryCount, "GetEntryCount(self) -> int");

extern "C" {static PyObject *meth_FbxBindingTableBase_GetEntryCount(PyObject *, PyObject *);}
static PyObject *meth_FbxBindingTableBase_GetEntryCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::FbxBindingTableBase *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxBindingTableBase, &sipCpp))
        {
             ::size_t sipRes;

            sipRes = sipCpp->GetEntryCount();

            return PyLong_FromUnsignedLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxBindingTableBase, sipName_GetEntryCount, doc_FbxBindingTableBase_GetEntryCount);

    return NULL;
}


PyDoc_STRVAR(doc_FbxBindingTableBase_GetEntry, "GetEntry(self, int) -> FbxBindingTableEntry");

extern "C" {static PyObject *meth_FbxBindingTableBase_GetEntry(PyObject *, PyObject *);}
static PyObject *meth_FbxBindingTableBase_GetEntry(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::size_t a0;
         ::FbxBindingTableBase *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bm", &sipSelf, sipType_FbxBindingTableBase, &sipCpp, &a0))
        {
             ::FbxBindingTableEntry*sipRes;

            sipRes = new  ::FbxBindingTableEntry(sipCpp->GetEntry(a0));

            return sipConvertFromNewType(sipRes,sipType_FbxBindingTableEntry,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxBindingTableBase, sipName_GetEntry, doc_FbxBindingTableBase_GetEntry);

    return NULL;
}


PyDoc_STRVAR(doc_FbxBindingTableBase_GetEntryForSource, "GetEntryForSource(self, str) -> FbxBindingTableEntry");

extern "C" {static PyObject *meth_FbxBindingTableBase_GetEntryForSource(PyObject *, PyObject *);}
static PyObject *meth_FbxBindingTableBase_GetEntryForSource(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const char* a0;
        PyObject *a0Keep;
        const  ::FbxBindingTableBase *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BA8", &sipSelf, sipType_FbxBindingTableBase, &sipCpp, &a0Keep, &a0))
        {
            const  ::FbxBindingTableEntry*sipRes;

            sipRes = sipCpp->GetEntryForSource(a0);
            Py_DECREF(a0Keep);

            return sipConvertFromType(const_cast< ::FbxBindingTableEntry *>(sipRes),sipType_FbxBindingTableEntry,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxBindingTableBase, sipName_GetEntryForSource, doc_FbxBindingTableBase_GetEntryForSource);

    return NULL;
}


PyDoc_STRVAR(doc_FbxBindingTableBase_GetEntryForDestination, "GetEntryForDestination(self, str) -> FbxBindingTableEntry");

extern "C" {static PyObject *meth_FbxBindingTableBase_GetEntryForDestination(PyObject *, PyObject *);}
static PyObject *meth_FbxBindingTableBase_GetEntryForDestination(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const char* a0;
        PyObject *a0Keep;
        const  ::FbxBindingTableBase *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BA8", &sipSelf, sipType_FbxBindingTableBase, &sipCpp, &a0Keep, &a0))
        {
            const  ::FbxBindingTableEntry*sipRes;

            sipRes = sipCpp->GetEntryForDestination(a0);
            Py_DECREF(a0Keep);

            return sipConvertFromType(const_cast< ::FbxBindingTableEntry *>(sipRes),sipType_FbxBindingTableEntry,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxBindingTableBase, sipName_GetEntryForDestination, doc_FbxBindingTableBase_GetEntryForDestination);

    return NULL;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_FbxBindingTableBase(void *, const sipTypeDef *);}
static void *cast_FbxBindingTableBase(void *sipCppV, const sipTypeDef *targetType)
{
     ::FbxBindingTableBase *sipCpp = reinterpret_cast< ::FbxBindingTableBase *>(sipCppV);

    if (targetType == sipType_FbxObject)
        return static_cast< ::FbxObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_FbxBindingTableBase(void *, int);}
static void release_FbxBindingTableBase(void *sipCppV, int sipState)
{
    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipFbxBindingTableBase *>(sipCppV);
}


extern "C" {static void dealloc_FbxBindingTableBase(sipSimpleWrapper *);}
static void dealloc_FbxBindingTableBase(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipFbxBindingTableBase *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_FbxBindingTableBase(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_FbxBindingTableBase(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_FbxBindingTableBase(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipFbxBindingTableBase *sipCpp = 0;

    {
         ::FbxManager* a0;
        const char* a1;
        PyObject *a1Keep;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9A8", sipType_FbxManager, &a0, &a1Keep, &a1))
        {
            sipCpp = new sipFbxBindingTableBase(*a0,a1);
            Py_DECREF(a1Keep);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_FbxBindingTableBase[] = {{244, 255, 1}};


static PyMethodDef methods_FbxBindingTableBase[] = {
    {SIP_MLNAME_CAST(sipName_AddNewEntry), meth_FbxBindingTableBase_AddNewEntry, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxBindingTableBase_AddNewEntry)},
    {SIP_MLNAME_CAST(sipName_Create), meth_FbxBindingTableBase_Create, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxBindingTableBase_Create)},
    {SIP_MLNAME_CAST(sipName_GetClassId), meth_FbxBindingTableBase_GetClassId, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxBindingTableBase_GetClassId)},
    {SIP_MLNAME_CAST(sipName_GetEntry), meth_FbxBindingTableBase_GetEntry, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxBindingTableBase_GetEntry)},
    {SIP_MLNAME_CAST(sipName_GetEntryCount), meth_FbxBindingTableBase_GetEntryCount, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxBindingTableBase_GetEntryCount)},
    {SIP_MLNAME_CAST(sipName_GetEntryForDestination), meth_FbxBindingTableBase_GetEntryForDestination, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxBindingTableBase_GetEntryForDestination)},
    {SIP_MLNAME_CAST(sipName_GetEntryForSource), meth_FbxBindingTableBase_GetEntryForSource, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxBindingTableBase_GetEntryForSource)}
};


extern "C" {static PyObject *varget_FbxBindingTableBase_ClassId(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxBindingTableBase_ClassId(void *, PyObject *, PyObject *)
{
     ::FbxClassId*sipVal;

    sipVal = & ::FbxBindingTableBase::ClassId;

    return sipConvertFromType(sipVal, sipType_FbxClassId, NULL);
}


extern "C" {static int varset_FbxBindingTableBase_ClassId(void *, PyObject *, PyObject *);}
static int varset_FbxBindingTableBase_ClassId(void *, PyObject *sipPy, PyObject *)
{
     ::FbxClassId*sipVal;
    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxClassId *>(sipForceConvertToType(sipPy,sipType_FbxClassId,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

     ::FbxBindingTableBase::ClassId = *sipVal;

    return 0;
}

sipVariableDef variables_FbxBindingTableBase[] = {
    {ClassVariable, sipName_ClassId, (PyMethodDef *)varget_FbxBindingTableBase_ClassId, (PyMethodDef *)varset_FbxBindingTableBase_ClassId, NULL, NULL},
};

PyDoc_STRVAR(doc_FbxBindingTableBase, "\1FbxBindingTableBase(FbxManager, str)");


sipClassTypeDef sipTypeDef_fbx_FbxBindingTableBase = {
    {
        -1,
        0,
        0,
        SIP_TYPE_ABSTRACT|SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_FbxBindingTableBase,
        {0},
        0
    },
    {
        sipNameNr_FbxBindingTableBase,
        {0, 0, 1},
        7, methods_FbxBindingTableBase,
        0, 0,
        1, variables_FbxBindingTableBase,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_FbxBindingTableBase,
    -1,
    -1,
    supers_FbxBindingTableBase,
    0,
    init_type_FbxBindingTableBase,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_FbxBindingTableBase,
    0,
    0,
    0,
    release_FbxBindingTableBase,
    cast_FbxBindingTableBase,
    0,
    0,
    0,
    0,
    0,
    0
};
