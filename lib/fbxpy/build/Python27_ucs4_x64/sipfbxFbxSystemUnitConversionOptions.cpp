/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.3
 *
 * Copyright (C) 2009 Autodesk, Inc. and/or its licensors.
 * All Rights Reserved.
 * 
 * The coded instructions, statements, computer programs, and/or related material 
 * (collectively the "Data") in these files contain unpublished information 
 * proprietary to Autodesk, Inc. and/or its licensors, which is protected by 
 * Canada and United States of America federal copyright law and by international 
 * treaties. 
 * 
 * The Data may not be disclosed or distributed to third parties, in whole or in
 * part, without the prior written consent of Autodesk, Inc. ("Autodesk").
 * 
 * THE DATA IS PROVIDED "AS IS" AND WITHOUT WARRANTY.
 * ALL WARRANTIES ARE EXPRESSLY EXCLUDED AND DISCLAIMED. AUTODESK MAKES NO
 * WARRANTY OF ANY KIND WITH RESPECT TO THE DATA, EXPRESS, IMPLIED OR ARISING
 * BY CUSTOM OR TRADE USAGE, AND DISCLAIMS ANY IMPLIED WARRANTIES OF TITLE, 
 * NON-INFRINGEMENT, MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE OR USE. 
 * WITHOUT LIMITING THE FOREGOING, AUTODESK DOES NOT WARRANT THAT THE OPERATION
 * OF THE DATA WILL BE UNINTERRUPTED OR ERROR FREE. 
 * 
 * IN NO EVENT SHALL AUTODESK, ITS AFFILIATES, PARENT COMPANIES, LICENSORS
 * OR SUPPLIERS ("AUTODESK GROUP") BE LIABLE FOR ANY LOSSES, DAMAGES OR EXPENSES
 * OF ANY KIND (INCLUDING WITHOUT LIMITATION PUNITIVE OR MULTIPLE DAMAGES OR OTHER
 * SPECIAL, DIRECT, INDIRECT, EXEMPLARY, INCIDENTAL, LOSS OF PROFITS, REVENUE
 * OR DATA, COST OF COVER OR CONSEQUENTIAL LOSSES OR DAMAGES OF ANY KIND),
 * HOWEVER CAUSED, AND REGARDLESS OF THE THEORY OF LIABILITY, WHETHER DERIVED
 * FROM CONTRACT, TORT (INCLUDING, BUT NOT LIMITED TO, NEGLIGENCE), OR OTHERWISE,
 * ARISING OUT OF OR RELATING TO THE DATA OR ITS USE OR ANY OTHER PERFORMANCE,
 * WHETHER OR NOT AUTODESK HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH LOSS
 * OR DAMAGE. 
 */

#include "sipAPIfbx.h"




/* Call the instance's destructor. */
extern "C" {static void release_FbxSystemUnit_ConversionOptions(void *, int);}
static void release_FbxSystemUnit_ConversionOptions(void *sipCppV, int)
{
    delete reinterpret_cast< ::FbxSystemUnit::ConversionOptions *>(sipCppV);
}


extern "C" {static void assign_FbxSystemUnit_ConversionOptions(void *, SIP_SSIZE_T, const void *);}
static void assign_FbxSystemUnit_ConversionOptions(void *sipDst, SIP_SSIZE_T sipDstIdx, const void *sipSrc)
{
    reinterpret_cast< ::FbxSystemUnit::ConversionOptions *>(sipDst)[sipDstIdx] = *reinterpret_cast<const  ::FbxSystemUnit::ConversionOptions *>(sipSrc);
}


extern "C" {static void *array_FbxSystemUnit_ConversionOptions(SIP_SSIZE_T);}
static void *array_FbxSystemUnit_ConversionOptions(SIP_SSIZE_T sipNrElem)
{
    return new  ::FbxSystemUnit::ConversionOptions[sipNrElem];
}


extern "C" {static void *copy_FbxSystemUnit_ConversionOptions(const void *, SIP_SSIZE_T);}
static void *copy_FbxSystemUnit_ConversionOptions(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::FbxSystemUnit::ConversionOptions(reinterpret_cast<const  ::FbxSystemUnit::ConversionOptions *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_FbxSystemUnit_ConversionOptions(sipSimpleWrapper *);}
static void dealloc_FbxSystemUnit_ConversionOptions(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_FbxSystemUnit_ConversionOptions(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_FbxSystemUnit_ConversionOptions(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_FbxSystemUnit_ConversionOptions(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::FbxSystemUnit::ConversionOptions *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            sipCpp = new  ::FbxSystemUnit::ConversionOptions();

            return sipCpp;
        }
    }

    {
        const  ::FbxSystemUnit::ConversionOptions* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_FbxSystemUnit_ConversionOptions, &a0))
        {
            sipCpp = new  ::FbxSystemUnit::ConversionOptions(*a0);

            return sipCpp;
        }
    }

    return NULL;
}


extern "C" {static PyObject *varget_FbxSystemUnit_ConversionOptions_mConvertCameraClipPlanes(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxSystemUnit_ConversionOptions_mConvertCameraClipPlanes(void *sipSelf, PyObject *, PyObject *)
{
    bool sipVal;
     ::FbxSystemUnit::ConversionOptions *sipCpp = reinterpret_cast< ::FbxSystemUnit::ConversionOptions *>(sipSelf);

    sipVal = sipCpp->mConvertCameraClipPlanes;

    return PyBool_FromLong(sipVal);
}


extern "C" {static int varset_FbxSystemUnit_ConversionOptions_mConvertCameraClipPlanes(void *, PyObject *, PyObject *);}
static int varset_FbxSystemUnit_ConversionOptions_mConvertCameraClipPlanes(void *sipSelf, PyObject *sipPy, PyObject *)
{
    bool sipVal;
     ::FbxSystemUnit::ConversionOptions *sipCpp = reinterpret_cast< ::FbxSystemUnit::ConversionOptions *>(sipSelf);

    sipVal = (bool)SIPLong_AsLong(sipPy);

    if (PyErr_Occurred() != NULL)
        return -1;

    sipCpp->mConvertCameraClipPlanes = sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxSystemUnit_ConversionOptions_mConvertClusters(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxSystemUnit_ConversionOptions_mConvertClusters(void *sipSelf, PyObject *, PyObject *)
{
    bool sipVal;
     ::FbxSystemUnit::ConversionOptions *sipCpp = reinterpret_cast< ::FbxSystemUnit::ConversionOptions *>(sipSelf);

    sipVal = sipCpp->mConvertClusters;

    return PyBool_FromLong(sipVal);
}


extern "C" {static int varset_FbxSystemUnit_ConversionOptions_mConvertClusters(void *, PyObject *, PyObject *);}
static int varset_FbxSystemUnit_ConversionOptions_mConvertClusters(void *sipSelf, PyObject *sipPy, PyObject *)
{
    bool sipVal;
     ::FbxSystemUnit::ConversionOptions *sipCpp = reinterpret_cast< ::FbxSystemUnit::ConversionOptions *>(sipSelf);

    sipVal = (bool)SIPLong_AsLong(sipPy);

    if (PyErr_Occurred() != NULL)
        return -1;

    sipCpp->mConvertClusters = sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxSystemUnit_ConversionOptions_mConvertLightIntensity(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxSystemUnit_ConversionOptions_mConvertLightIntensity(void *sipSelf, PyObject *, PyObject *)
{
    bool sipVal;
     ::FbxSystemUnit::ConversionOptions *sipCpp = reinterpret_cast< ::FbxSystemUnit::ConversionOptions *>(sipSelf);

    sipVal = sipCpp->mConvertLightIntensity;

    return PyBool_FromLong(sipVal);
}


extern "C" {static int varset_FbxSystemUnit_ConversionOptions_mConvertLightIntensity(void *, PyObject *, PyObject *);}
static int varset_FbxSystemUnit_ConversionOptions_mConvertLightIntensity(void *sipSelf, PyObject *sipPy, PyObject *)
{
    bool sipVal;
     ::FbxSystemUnit::ConversionOptions *sipCpp = reinterpret_cast< ::FbxSystemUnit::ConversionOptions *>(sipSelf);

    sipVal = (bool)SIPLong_AsLong(sipPy);

    if (PyErr_Occurred() != NULL)
        return -1;

    sipCpp->mConvertLightIntensity = sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxSystemUnit_ConversionOptions_mConvertLimits(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxSystemUnit_ConversionOptions_mConvertLimits(void *sipSelf, PyObject *, PyObject *)
{
    bool sipVal;
     ::FbxSystemUnit::ConversionOptions *sipCpp = reinterpret_cast< ::FbxSystemUnit::ConversionOptions *>(sipSelf);

    sipVal = sipCpp->mConvertLimits;

    return PyBool_FromLong(sipVal);
}


extern "C" {static int varset_FbxSystemUnit_ConversionOptions_mConvertLimits(void *, PyObject *, PyObject *);}
static int varset_FbxSystemUnit_ConversionOptions_mConvertLimits(void *sipSelf, PyObject *sipPy, PyObject *)
{
    bool sipVal;
     ::FbxSystemUnit::ConversionOptions *sipCpp = reinterpret_cast< ::FbxSystemUnit::ConversionOptions *>(sipSelf);

    sipVal = (bool)SIPLong_AsLong(sipPy);

    if (PyErr_Occurred() != NULL)
        return -1;

    sipCpp->mConvertLimits = sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxSystemUnit_ConversionOptions_mConvertPhotometricLProperties(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxSystemUnit_ConversionOptions_mConvertPhotometricLProperties(void *sipSelf, PyObject *, PyObject *)
{
    bool sipVal;
     ::FbxSystemUnit::ConversionOptions *sipCpp = reinterpret_cast< ::FbxSystemUnit::ConversionOptions *>(sipSelf);

    sipVal = sipCpp->mConvertPhotometricLProperties;

    return PyBool_FromLong(sipVal);
}


extern "C" {static int varset_FbxSystemUnit_ConversionOptions_mConvertPhotometricLProperties(void *, PyObject *, PyObject *);}
static int varset_FbxSystemUnit_ConversionOptions_mConvertPhotometricLProperties(void *sipSelf, PyObject *sipPy, PyObject *)
{
    bool sipVal;
     ::FbxSystemUnit::ConversionOptions *sipCpp = reinterpret_cast< ::FbxSystemUnit::ConversionOptions *>(sipSelf);

    sipVal = (bool)SIPLong_AsLong(sipPy);

    if (PyErr_Occurred() != NULL)
        return -1;

    sipCpp->mConvertPhotometricLProperties = sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxSystemUnit_ConversionOptions_mConvertRrsNodes(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxSystemUnit_ConversionOptions_mConvertRrsNodes(void *sipSelf, PyObject *, PyObject *)
{
    bool sipVal;
     ::FbxSystemUnit::ConversionOptions *sipCpp = reinterpret_cast< ::FbxSystemUnit::ConversionOptions *>(sipSelf);

    sipVal = sipCpp->mConvertRrsNodes;

    return PyBool_FromLong(sipVal);
}


extern "C" {static int varset_FbxSystemUnit_ConversionOptions_mConvertRrsNodes(void *, PyObject *, PyObject *);}
static int varset_FbxSystemUnit_ConversionOptions_mConvertRrsNodes(void *sipSelf, PyObject *sipPy, PyObject *)
{
    bool sipVal;
     ::FbxSystemUnit::ConversionOptions *sipCpp = reinterpret_cast< ::FbxSystemUnit::ConversionOptions *>(sipSelf);

    sipVal = (bool)SIPLong_AsLong(sipPy);

    if (PyErr_Occurred() != NULL)
        return -1;

    sipCpp->mConvertRrsNodes = sipVal;

    return 0;
}

sipVariableDef variables_FbxSystemUnit_ConversionOptions[] = {
    {InstanceVariable, sipName_mConvertCameraClipPlanes, (PyMethodDef *)varget_FbxSystemUnit_ConversionOptions_mConvertCameraClipPlanes, (PyMethodDef *)varset_FbxSystemUnit_ConversionOptions_mConvertCameraClipPlanes, NULL, NULL},
    {InstanceVariable, sipName_mConvertClusters, (PyMethodDef *)varget_FbxSystemUnit_ConversionOptions_mConvertClusters, (PyMethodDef *)varset_FbxSystemUnit_ConversionOptions_mConvertClusters, NULL, NULL},
    {InstanceVariable, sipName_mConvertLightIntensity, (PyMethodDef *)varget_FbxSystemUnit_ConversionOptions_mConvertLightIntensity, (PyMethodDef *)varset_FbxSystemUnit_ConversionOptions_mConvertLightIntensity, NULL, NULL},
    {InstanceVariable, sipName_mConvertLimits, (PyMethodDef *)varget_FbxSystemUnit_ConversionOptions_mConvertLimits, (PyMethodDef *)varset_FbxSystemUnit_ConversionOptions_mConvertLimits, NULL, NULL},
    {InstanceVariable, sipName_mConvertPhotometricLProperties, (PyMethodDef *)varget_FbxSystemUnit_ConversionOptions_mConvertPhotometricLProperties, (PyMethodDef *)varset_FbxSystemUnit_ConversionOptions_mConvertPhotometricLProperties, NULL, NULL},
    {InstanceVariable, sipName_mConvertRrsNodes, (PyMethodDef *)varget_FbxSystemUnit_ConversionOptions_mConvertRrsNodes, (PyMethodDef *)varset_FbxSystemUnit_ConversionOptions_mConvertRrsNodes, NULL, NULL},
};

PyDoc_STRVAR(doc_FbxSystemUnit_ConversionOptions, "\1FbxSystemUnit.ConversionOptions()\n"
    "FbxSystemUnit.ConversionOptions(FbxSystemUnit.ConversionOptions)");


sipClassTypeDef sipTypeDef_fbx_FbxSystemUnit_ConversionOptions = {
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_FbxSystemUnit__ConversionOptions,
        {0},
        0
    },
    {
        sipNameNr_ConversionOptions,
        {354, 255, 0},
        0, 0,
        0, 0,
        6, variables_FbxSystemUnit_ConversionOptions,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_FbxSystemUnit_ConversionOptions,
    -1,
    -1,
    0,
    0,
    init_type_FbxSystemUnit_ConversionOptions,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_FbxSystemUnit_ConversionOptions,
    assign_FbxSystemUnit_ConversionOptions,
    array_FbxSystemUnit_ConversionOptions,
    copy_FbxSystemUnit_ConversionOptions,
    release_FbxSystemUnit_ConversionOptions,
    0,
    0,
    0,
    0,
    0,
    0,
    0
};
