/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.3
 *
 * Copyright (C) 2009 Autodesk, Inc. and/or its licensors.
 * All Rights Reserved.
 * 
 * The coded instructions, statements, computer programs, and/or related material 
 * (collectively the "Data") in these files contain unpublished information 
 * proprietary to Autodesk, Inc. and/or its licensors, which is protected by 
 * Canada and United States of America federal copyright law and by international 
 * treaties. 
 * 
 * The Data may not be disclosed or distributed to third parties, in whole or in
 * part, without the prior written consent of Autodesk, Inc. ("Autodesk").
 * 
 * THE DATA IS PROVIDED "AS IS" AND WITHOUT WARRANTY.
 * ALL WARRANTIES ARE EXPRESSLY EXCLUDED AND DISCLAIMED. AUTODESK MAKES NO
 * WARRANTY OF ANY KIND WITH RESPECT TO THE DATA, EXPRESS, IMPLIED OR ARISING
 * BY CUSTOM OR TRADE USAGE, AND DISCLAIMS ANY IMPLIED WARRANTIES OF TITLE, 
 * NON-INFRINGEMENT, MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE OR USE. 
 * WITHOUT LIMITING THE FOREGOING, AUTODESK DOES NOT WARRANT THAT THE OPERATION
 * OF THE DATA WILL BE UNINTERRUPTED OR ERROR FREE. 
 * 
 * IN NO EVENT SHALL AUTODESK, ITS AFFILIATES, PARENT COMPANIES, LICENSORS
 * OR SUPPLIERS ("AUTODESK GROUP") BE LIABLE FOR ANY LOSSES, DAMAGES OR EXPENSES
 * OF ANY KIND (INCLUDING WITHOUT LIMITATION PUNITIVE OR MULTIPLE DAMAGES OR OTHER
 * SPECIAL, DIRECT, INDIRECT, EXEMPLARY, INCIDENTAL, LOSS OF PROFITS, REVENUE
 * OR DATA, COST OF COVER OR CONSEQUENTIAL LOSSES OR DAMAGES OF ANY KIND),
 * HOWEVER CAUSED, AND REGARDLESS OF THE THEORY OF LIABILITY, WHETHER DERIVED
 * FROM CONTRACT, TORT (INCLUDING, BUT NOT LIMITED TO, NEGLIGENCE), OR OTHERWISE,
 * ARISING OUT OF OR RELATING TO THE DATA OR ITS USE OR ANY OTHER PERFORMANCE,
 * WHETHER OR NOT AUTODESK HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH LOSS
 * OR DAMAGE. 
 */

#include "sipAPIfbx.h"


#line 4 "/var/www/html/lib/fbxpy/sip/fbxstatus.sip"
#include <fbxsdk.h>
#line 44 "/var/www/html/lib/fbxpy/build/Python27_ucs4_x64/sipfbxFbxPatch.cpp"


PyDoc_STRVAR(doc_FbxPatch_Create, "Create(FbxManager, str) -> FbxPatch\n"
    "Create(FbxObject, str) -> FbxPatch");

extern "C" {static PyObject *meth_FbxPatch_Create(PyObject *, PyObject *);}
static PyObject *meth_FbxPatch_Create(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxManager* a0;
        const char* a1;
        PyObject *a1Keep;

        if (sipParseArgs(&sipParseErr, sipArgs, "J8A8", sipType_FbxManager, &a0, &a1Keep, &a1))
        {
             ::FbxPatch*sipRes;

            sipRes =  ::FbxPatch::Create(a0,a1);
            Py_DECREF(a1Keep);

            return sipConvertFromType(sipRes,sipType_FbxPatch,NULL);
        }
    }

    {
         ::FbxObject* a0;
        const char* a1;
        PyObject *a1Keep;

        if (sipParseArgs(&sipParseErr, sipArgs, "J8A8", sipType_FbxObject, &a0, &a1Keep, &a1))
        {
             ::FbxPatch*sipRes;

            sipRes =  ::FbxPatch::Create(a0,a1);
            Py_DECREF(a1Keep);

            return sipConvertFromType(sipRes,sipType_FbxPatch,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxPatch, sipName_Create, doc_FbxPatch_Create);

    return NULL;
}


PyDoc_STRVAR(doc_FbxPatch_GetClassId, "GetClassId(self) -> FbxClassId");

extern "C" {static PyObject *meth_FbxPatch_GetClassId(PyObject *, PyObject *);}
static PyObject *meth_FbxPatch_GetClassId(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::FbxPatch *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxPatch, &sipCpp))
        {
             ::FbxClassId*sipRes;

            sipRes = new  ::FbxClassId((sipSelfWasArg ? sipCpp-> ::FbxPatch::GetClassId() : sipCpp->GetClassId()));

            return sipConvertFromNewType(sipRes,sipType_FbxClassId,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxPatch, sipName_GetClassId, doc_FbxPatch_GetClassId);

    return NULL;
}


PyDoc_STRVAR(doc_FbxPatch_GetAttributeType, "GetAttributeType(self) -> FbxNodeAttribute.EType");

extern "C" {static PyObject *meth_FbxPatch_GetAttributeType(PyObject *, PyObject *);}
static PyObject *meth_FbxPatch_GetAttributeType(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::FbxPatch *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxPatch, &sipCpp))
        {
             ::FbxNodeAttribute::EType sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::FbxPatch::GetAttributeType() : sipCpp->GetAttributeType());

            return sipConvertFromEnum(sipRes,sipType_FbxNodeAttribute_EType);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxPatch, sipName_GetAttributeType, doc_FbxPatch_GetAttributeType);

    return NULL;
}


PyDoc_STRVAR(doc_FbxPatch_Reset, "Reset(self)");

extern "C" {static PyObject *meth_FbxPatch_Reset(PyObject *, PyObject *);}
static PyObject *meth_FbxPatch_Reset(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxPatch *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxPatch, &sipCpp))
        {
            sipCpp->Reset();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxPatch, sipName_Reset, doc_FbxPatch_Reset);

    return NULL;
}


PyDoc_STRVAR(doc_FbxPatch_SetSurfaceMode, "SetSurfaceMode(self, FbxGeometry.ESurfaceMode)");

extern "C" {static PyObject *meth_FbxPatch_SetSurfaceMode(PyObject *, PyObject *);}
static PyObject *meth_FbxPatch_SetSurfaceMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxGeometry::ESurfaceMode a0;
         ::FbxPatch *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_FbxPatch, &sipCpp, sipType_FbxGeometry_ESurfaceMode, &a0))
        {
            sipCpp->SetSurfaceMode(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxPatch, sipName_SetSurfaceMode, doc_FbxPatch_SetSurfaceMode);

    return NULL;
}


PyDoc_STRVAR(doc_FbxPatch_GetSurfaceMode, "GetSurfaceMode(self) -> FbxGeometry.ESurfaceMode");

extern "C" {static PyObject *meth_FbxPatch_GetSurfaceMode(PyObject *, PyObject *);}
static PyObject *meth_FbxPatch_GetSurfaceMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::FbxPatch *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxPatch, &sipCpp))
        {
             ::FbxGeometry::ESurfaceMode sipRes;

            sipRes = sipCpp->GetSurfaceMode();

            return sipConvertFromEnum(sipRes,sipType_FbxGeometry_ESurfaceMode);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxPatch, sipName_GetSurfaceMode, doc_FbxPatch_GetSurfaceMode);

    return NULL;
}


PyDoc_STRVAR(doc_FbxPatch_InitControlPoints, "InitControlPoints(self, int, FbxPatch.EType, int, FbxPatch.EType)");

extern "C" {static PyObject *meth_FbxPatch_InitControlPoints(PyObject *, PyObject *);}
static PyObject *meth_FbxPatch_InitControlPoints(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
         ::FbxPatch::EType a1;
        int a2;
         ::FbxPatch::EType a3;
         ::FbxPatch *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiEiE", &sipSelf, sipType_FbxPatch, &sipCpp, &a0, sipType_FbxPatch_EType, &a1, &a2, sipType_FbxPatch_EType, &a3))
        {
            sipCpp->InitControlPoints(a0,a1,a2,a3);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxPatch, sipName_InitControlPoints, doc_FbxPatch_InitControlPoints);

    return NULL;
}


PyDoc_STRVAR(doc_FbxPatch_GetUCount, "GetUCount(self) -> int");

extern "C" {static PyObject *meth_FbxPatch_GetUCount(PyObject *, PyObject *);}
static PyObject *meth_FbxPatch_GetUCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::FbxPatch *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxPatch, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->GetUCount();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxPatch, sipName_GetUCount, doc_FbxPatch_GetUCount);

    return NULL;
}


PyDoc_STRVAR(doc_FbxPatch_GetVCount, "GetVCount(self) -> int");

extern "C" {static PyObject *meth_FbxPatch_GetVCount(PyObject *, PyObject *);}
static PyObject *meth_FbxPatch_GetVCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::FbxPatch *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxPatch, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->GetVCount();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxPatch, sipName_GetVCount, doc_FbxPatch_GetVCount);

    return NULL;
}


PyDoc_STRVAR(doc_FbxPatch_GetPatchUType, "GetPatchUType(self) -> FbxPatch.EType");

extern "C" {static PyObject *meth_FbxPatch_GetPatchUType(PyObject *, PyObject *);}
static PyObject *meth_FbxPatch_GetPatchUType(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::FbxPatch *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxPatch, &sipCpp))
        {
             ::FbxPatch::EType sipRes;

            sipRes = sipCpp->GetPatchUType();

            return sipConvertFromEnum(sipRes,sipType_FbxPatch_EType);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxPatch, sipName_GetPatchUType, doc_FbxPatch_GetPatchUType);

    return NULL;
}


PyDoc_STRVAR(doc_FbxPatch_GetPatchVType, "GetPatchVType(self) -> FbxPatch.EType");

extern "C" {static PyObject *meth_FbxPatch_GetPatchVType(PyObject *, PyObject *);}
static PyObject *meth_FbxPatch_GetPatchVType(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::FbxPatch *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxPatch, &sipCpp))
        {
             ::FbxPatch::EType sipRes;

            sipRes = sipCpp->GetPatchVType();

            return sipConvertFromEnum(sipRes,sipType_FbxPatch_EType);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxPatch, sipName_GetPatchVType, doc_FbxPatch_GetPatchVType);

    return NULL;
}


PyDoc_STRVAR(doc_FbxPatch_SetStep, "SetStep(self, int, int)");

extern "C" {static PyObject *meth_FbxPatch_SetStep(PyObject *, PyObject *);}
static PyObject *meth_FbxPatch_SetStep(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        int a1;
         ::FbxPatch *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bii", &sipSelf, sipType_FbxPatch, &sipCpp, &a0, &a1))
        {
            sipCpp->SetStep(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxPatch, sipName_SetStep, doc_FbxPatch_SetStep);

    return NULL;
}


PyDoc_STRVAR(doc_FbxPatch_GetUStep, "GetUStep(self) -> int");

extern "C" {static PyObject *meth_FbxPatch_GetUStep(PyObject *, PyObject *);}
static PyObject *meth_FbxPatch_GetUStep(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::FbxPatch *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxPatch, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->GetUStep();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxPatch, sipName_GetUStep, doc_FbxPatch_GetUStep);

    return NULL;
}


PyDoc_STRVAR(doc_FbxPatch_GetVStep, "GetVStep(self) -> int");

extern "C" {static PyObject *meth_FbxPatch_GetVStep(PyObject *, PyObject *);}
static PyObject *meth_FbxPatch_GetVStep(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::FbxPatch *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxPatch, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->GetVStep();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxPatch, sipName_GetVStep, doc_FbxPatch_GetVStep);

    return NULL;
}


PyDoc_STRVAR(doc_FbxPatch_SetClosed, "SetClosed(self, bool, bool)");

extern "C" {static PyObject *meth_FbxPatch_SetClosed(PyObject *, PyObject *);}
static PyObject *meth_FbxPatch_SetClosed(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        bool a1;
         ::FbxPatch *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bbb", &sipSelf, sipType_FbxPatch, &sipCpp, &a0, &a1))
        {
            sipCpp->SetClosed(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxPatch, sipName_SetClosed, doc_FbxPatch_SetClosed);

    return NULL;
}


PyDoc_STRVAR(doc_FbxPatch_GetUClosed, "GetUClosed(self) -> bool");

extern "C" {static PyObject *meth_FbxPatch_GetUClosed(PyObject *, PyObject *);}
static PyObject *meth_FbxPatch_GetUClosed(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::FbxPatch *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxPatch, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->GetUClosed();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxPatch, sipName_GetUClosed, doc_FbxPatch_GetUClosed);

    return NULL;
}


PyDoc_STRVAR(doc_FbxPatch_GetVClosed, "GetVClosed(self) -> bool");

extern "C" {static PyObject *meth_FbxPatch_GetVClosed(PyObject *, PyObject *);}
static PyObject *meth_FbxPatch_GetVClosed(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::FbxPatch *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxPatch, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->GetVClosed();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxPatch, sipName_GetVClosed, doc_FbxPatch_GetVClosed);

    return NULL;
}


PyDoc_STRVAR(doc_FbxPatch_SetUCapped, "SetUCapped(self, bool, bool)");

extern "C" {static PyObject *meth_FbxPatch_SetUCapped(PyObject *, PyObject *);}
static PyObject *meth_FbxPatch_SetUCapped(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        bool a1;
         ::FbxPatch *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bbb", &sipSelf, sipType_FbxPatch, &sipCpp, &a0, &a1))
        {
            sipCpp->SetUCapped(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxPatch, sipName_SetUCapped, doc_FbxPatch_SetUCapped);

    return NULL;
}


PyDoc_STRVAR(doc_FbxPatch_GetUCappedBottom, "GetUCappedBottom(self) -> bool");

extern "C" {static PyObject *meth_FbxPatch_GetUCappedBottom(PyObject *, PyObject *);}
static PyObject *meth_FbxPatch_GetUCappedBottom(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::FbxPatch *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxPatch, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->GetUCappedBottom();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxPatch, sipName_GetUCappedBottom, doc_FbxPatch_GetUCappedBottom);

    return NULL;
}


PyDoc_STRVAR(doc_FbxPatch_GetUCappedTop, "GetUCappedTop(self) -> bool");

extern "C" {static PyObject *meth_FbxPatch_GetUCappedTop(PyObject *, PyObject *);}
static PyObject *meth_FbxPatch_GetUCappedTop(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::FbxPatch *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxPatch, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->GetUCappedTop();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxPatch, sipName_GetUCappedTop, doc_FbxPatch_GetUCappedTop);

    return NULL;
}


PyDoc_STRVAR(doc_FbxPatch_SetVCapped, "SetVCapped(self, bool, bool)");

extern "C" {static PyObject *meth_FbxPatch_SetVCapped(PyObject *, PyObject *);}
static PyObject *meth_FbxPatch_SetVCapped(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        bool a1;
         ::FbxPatch *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bbb", &sipSelf, sipType_FbxPatch, &sipCpp, &a0, &a1))
        {
            sipCpp->SetVCapped(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxPatch, sipName_SetVCapped, doc_FbxPatch_SetVCapped);

    return NULL;
}


PyDoc_STRVAR(doc_FbxPatch_GetVCappedBottom, "GetVCappedBottom(self) -> bool");

extern "C" {static PyObject *meth_FbxPatch_GetVCappedBottom(PyObject *, PyObject *);}
static PyObject *meth_FbxPatch_GetVCappedBottom(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::FbxPatch *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxPatch, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->GetVCappedBottom();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxPatch, sipName_GetVCappedBottom, doc_FbxPatch_GetVCappedBottom);

    return NULL;
}


PyDoc_STRVAR(doc_FbxPatch_GetVCappedTop, "GetVCappedTop(self) -> bool");

extern "C" {static PyObject *meth_FbxPatch_GetVCappedTop(PyObject *, PyObject *);}
static PyObject *meth_FbxPatch_GetVCappedTop(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::FbxPatch *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxPatch, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->GetVCappedTop();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxPatch, sipName_GetVCappedTop, doc_FbxPatch_GetVCappedTop);

    return NULL;
}


extern "C" {static PyObject *slot_FbxPatch___ne__(PyObject *,PyObject *);}
static PyObject *slot_FbxPatch___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::FbxPatch *sipCpp = reinterpret_cast< ::FbxPatch *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_FbxPatch));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const  ::FbxPatch* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_FbxPatch, &a0))
        {
            bool sipRes;

            sipRes = !sipCpp-> ::FbxPatch::operator==(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_fbx, ne_slot, sipType_FbxPatch, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_FbxPatch___eq__(PyObject *,PyObject *);}
static PyObject *slot_FbxPatch___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::FbxPatch *sipCpp = reinterpret_cast< ::FbxPatch *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_FbxPatch));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const  ::FbxPatch* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_FbxPatch, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::FbxPatch::operator==(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_fbx, eq_slot, sipType_FbxPatch, sipSelf, sipArg);
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_FbxPatch(void *, const sipTypeDef *);}
static void *cast_FbxPatch(void *sipCppV, const sipTypeDef *targetType)
{
     ::FbxPatch *sipCpp = reinterpret_cast< ::FbxPatch *>(sipCppV);

    if (targetType == sipType_FbxGeometry)
        return static_cast< ::FbxGeometry *>(sipCpp);

    if (targetType == sipType_FbxGeometryBase)
        return static_cast< ::FbxGeometryBase *>(sipCpp);

    if (targetType == sipType_FbxLayerContainer)
        return static_cast< ::FbxLayerContainer *>(sipCpp);

    if (targetType == sipType_FbxNodeAttribute)
        return static_cast< ::FbxNodeAttribute *>(sipCpp);

    if (targetType == sipType_FbxObject)
        return static_cast< ::FbxObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_FbxPatch(void *, int);}
static void release_FbxPatch(void *, int)
{
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_FbxPatch[] = {{147, 255, 1}};


/* Define this type's Python slots. */
static sipPySlotDef slots_FbxPatch[] = {
    {(void *)slot_FbxPatch___ne__, ne_slot},
    {(void *)slot_FbxPatch___eq__, eq_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_FbxPatch[] = {
    {SIP_MLNAME_CAST(sipName_Create), meth_FbxPatch_Create, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxPatch_Create)},
    {SIP_MLNAME_CAST(sipName_GetAttributeType), meth_FbxPatch_GetAttributeType, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxPatch_GetAttributeType)},
    {SIP_MLNAME_CAST(sipName_GetClassId), meth_FbxPatch_GetClassId, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxPatch_GetClassId)},
    {SIP_MLNAME_CAST(sipName_GetPatchUType), meth_FbxPatch_GetPatchUType, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxPatch_GetPatchUType)},
    {SIP_MLNAME_CAST(sipName_GetPatchVType), meth_FbxPatch_GetPatchVType, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxPatch_GetPatchVType)},
    {SIP_MLNAME_CAST(sipName_GetSurfaceMode), meth_FbxPatch_GetSurfaceMode, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxPatch_GetSurfaceMode)},
    {SIP_MLNAME_CAST(sipName_GetUCappedBottom), meth_FbxPatch_GetUCappedBottom, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxPatch_GetUCappedBottom)},
    {SIP_MLNAME_CAST(sipName_GetUCappedTop), meth_FbxPatch_GetUCappedTop, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxPatch_GetUCappedTop)},
    {SIP_MLNAME_CAST(sipName_GetUClosed), meth_FbxPatch_GetUClosed, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxPatch_GetUClosed)},
    {SIP_MLNAME_CAST(sipName_GetUCount), meth_FbxPatch_GetUCount, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxPatch_GetUCount)},
    {SIP_MLNAME_CAST(sipName_GetUStep), meth_FbxPatch_GetUStep, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxPatch_GetUStep)},
    {SIP_MLNAME_CAST(sipName_GetVCappedBottom), meth_FbxPatch_GetVCappedBottom, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxPatch_GetVCappedBottom)},
    {SIP_MLNAME_CAST(sipName_GetVCappedTop), meth_FbxPatch_GetVCappedTop, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxPatch_GetVCappedTop)},
    {SIP_MLNAME_CAST(sipName_GetVClosed), meth_FbxPatch_GetVClosed, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxPatch_GetVClosed)},
    {SIP_MLNAME_CAST(sipName_GetVCount), meth_FbxPatch_GetVCount, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxPatch_GetVCount)},
    {SIP_MLNAME_CAST(sipName_GetVStep), meth_FbxPatch_GetVStep, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxPatch_GetVStep)},
    {SIP_MLNAME_CAST(sipName_InitControlPoints), meth_FbxPatch_InitControlPoints, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxPatch_InitControlPoints)},
    {SIP_MLNAME_CAST(sipName_Reset), meth_FbxPatch_Reset, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxPatch_Reset)},
    {SIP_MLNAME_CAST(sipName_SetClosed), meth_FbxPatch_SetClosed, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxPatch_SetClosed)},
    {SIP_MLNAME_CAST(sipName_SetStep), meth_FbxPatch_SetStep, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxPatch_SetStep)},
    {SIP_MLNAME_CAST(sipName_SetSurfaceMode), meth_FbxPatch_SetSurfaceMode, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxPatch_SetSurfaceMode)},
    {SIP_MLNAME_CAST(sipName_SetUCapped), meth_FbxPatch_SetUCapped, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxPatch_SetUCapped)},
    {SIP_MLNAME_CAST(sipName_SetVCapped), meth_FbxPatch_SetVCapped, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxPatch_SetVCapped)}
};

static sipEnumMemberDef enummembers_FbxPatch[] = {
    {sipName_eBSpline, static_cast<int>( ::FbxPatch::eBSpline), 250},
    {sipName_eBezier, static_cast<int>( ::FbxPatch::eBezier), 250},
    {sipName_eBezierQuadric, static_cast<int>( ::FbxPatch::eBezierQuadric), 250},
    {sipName_eCardinal, static_cast<int>( ::FbxPatch::eCardinal), 250},
    {sipName_eLinear, static_cast<int>( ::FbxPatch::eLinear), 250},
};


extern "C" {static PyObject *varget_FbxPatch_ClassId(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxPatch_ClassId(void *, PyObject *, PyObject *)
{
     ::FbxClassId*sipVal;

    sipVal = & ::FbxPatch::ClassId;

    return sipConvertFromType(sipVal, sipType_FbxClassId, NULL);
}


extern "C" {static int varset_FbxPatch_ClassId(void *, PyObject *, PyObject *);}
static int varset_FbxPatch_ClassId(void *, PyObject *sipPy, PyObject *)
{
     ::FbxClassId*sipVal;
    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxClassId *>(sipForceConvertToType(sipPy,sipType_FbxClassId,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

     ::FbxPatch::ClassId = *sipVal;

    return 0;
}

sipVariableDef variables_FbxPatch[] = {
    {ClassVariable, sipName_ClassId, (PyMethodDef *)varget_FbxPatch_ClassId, (PyMethodDef *)varset_FbxPatch_ClassId, NULL, NULL},
};


sipClassTypeDef sipTypeDef_fbx_FbxPatch = {
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_FbxPatch,
        {0},
        0
    },
    {
        sipNameNr_FbxPatch,
        {0, 0, 1},
        23, methods_FbxPatch,
        5, enummembers_FbxPatch,
        1, variables_FbxPatch,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    0,
    -1,
    -1,
    supers_FbxPatch,
    slots_FbxPatch,
    0,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    0,
    0,
    0,
    0,
    release_FbxPatch,
    cast_FbxPatch,
    0,
    0,
    0,
    0,
    0,
    0
};
