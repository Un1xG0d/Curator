/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.3
 *
 * Copyright (C) 2009 Autodesk, Inc. and/or its licensors.
 * All Rights Reserved.
 * 
 * The coded instructions, statements, computer programs, and/or related material 
 * (collectively the "Data") in these files contain unpublished information 
 * proprietary to Autodesk, Inc. and/or its licensors, which is protected by 
 * Canada and United States of America federal copyright law and by international 
 * treaties. 
 * 
 * The Data may not be disclosed or distributed to third parties, in whole or in
 * part, without the prior written consent of Autodesk, Inc. ("Autodesk").
 * 
 * THE DATA IS PROVIDED "AS IS" AND WITHOUT WARRANTY.
 * ALL WARRANTIES ARE EXPRESSLY EXCLUDED AND DISCLAIMED. AUTODESK MAKES NO
 * WARRANTY OF ANY KIND WITH RESPECT TO THE DATA, EXPRESS, IMPLIED OR ARISING
 * BY CUSTOM OR TRADE USAGE, AND DISCLAIMS ANY IMPLIED WARRANTIES OF TITLE, 
 * NON-INFRINGEMENT, MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE OR USE. 
 * WITHOUT LIMITING THE FOREGOING, AUTODESK DOES NOT WARRANT THAT THE OPERATION
 * OF THE DATA WILL BE UNINTERRUPTED OR ERROR FREE. 
 * 
 * IN NO EVENT SHALL AUTODESK, ITS AFFILIATES, PARENT COMPANIES, LICENSORS
 * OR SUPPLIERS ("AUTODESK GROUP") BE LIABLE FOR ANY LOSSES, DAMAGES OR EXPENSES
 * OF ANY KIND (INCLUDING WITHOUT LIMITATION PUNITIVE OR MULTIPLE DAMAGES OR OTHER
 * SPECIAL, DIRECT, INDIRECT, EXEMPLARY, INCIDENTAL, LOSS OF PROFITS, REVENUE
 * OR DATA, COST OF COVER OR CONSEQUENTIAL LOSSES OR DAMAGES OF ANY KIND),
 * HOWEVER CAUSED, AND REGARDLESS OF THE THEORY OF LIABILITY, WHETHER DERIVED
 * FROM CONTRACT, TORT (INCLUDING, BUT NOT LIMITED TO, NEGLIGENCE), OR OTHERWISE,
 * ARISING OUT OF OR RELATING TO THE DATA OR ITS USE OR ANY OTHER PERFORMANCE,
 * WHETHER OR NOT AUTODESK HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH LOSS
 * OR DAMAGE. 
 */

#include "sipAPIfbx.h"




PyDoc_STRVAR(doc_FbxTransform_GetInheritType, "GetInheritType(self) -> FbxTransform.EInheritType");

extern "C" {static PyObject *meth_FbxTransform_GetInheritType(PyObject *, PyObject *);}
static PyObject *meth_FbxTransform_GetInheritType(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxTransform *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxTransform, &sipCpp))
        {
             ::FbxTransform::EInheritType sipRes;

            sipRes = sipCpp->GetInheritType();

            return sipConvertFromEnum(sipRes,sipType_FbxTransform_EInheritType);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxTransform, sipName_GetInheritType, doc_FbxTransform_GetInheritType);

    return NULL;
}


PyDoc_STRVAR(doc_FbxTransform_SetInheritType, "SetInheritType(self, FbxTransform.EInheritType)");

extern "C" {static PyObject *meth_FbxTransform_SetInheritType(PyObject *, PyObject *);}
static PyObject *meth_FbxTransform_SetInheritType(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxTransform::EInheritType a0;
         ::FbxTransform *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_FbxTransform, &sipCpp, sipType_FbxTransform_EInheritType, &a0))
        {
            sipCpp->SetInheritType(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxTransform, sipName_SetInheritType, doc_FbxTransform_SetInheritType);

    return NULL;
}


PyDoc_STRVAR(doc_FbxTransform_GetTranslationLimits, "GetTranslationLimits(self) -> FbxLimits");

extern "C" {static PyObject *meth_FbxTransform_GetTranslationLimits(PyObject *, PyObject *);}
static PyObject *meth_FbxTransform_GetTranslationLimits(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxTransform *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxTransform, &sipCpp))
        {
             ::FbxLimits*sipRes;

            sipRes = &sipCpp->GetTranslationLimits();

            return sipConvertFromType(sipRes,sipType_FbxLimits,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxTransform, sipName_GetTranslationLimits, doc_FbxTransform_GetTranslationLimits);

    return NULL;
}


PyDoc_STRVAR(doc_FbxTransform_GetRotationLimits, "GetRotationLimits(self) -> FbxLimits");

extern "C" {static PyObject *meth_FbxTransform_GetRotationLimits(PyObject *, PyObject *);}
static PyObject *meth_FbxTransform_GetRotationLimits(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxTransform *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxTransform, &sipCpp))
        {
             ::FbxLimits*sipRes;

            sipRes = &sipCpp->GetRotationLimits();

            return sipConvertFromType(sipRes,sipType_FbxLimits,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxTransform, sipName_GetRotationLimits, doc_FbxTransform_GetRotationLimits);

    return NULL;
}


PyDoc_STRVAR(doc_FbxTransform_GetScalingLimits, "GetScalingLimits(self) -> FbxLimits");

extern "C" {static PyObject *meth_FbxTransform_GetScalingLimits(PyObject *, PyObject *);}
static PyObject *meth_FbxTransform_GetScalingLimits(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxTransform *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxTransform, &sipCpp))
        {
             ::FbxLimits*sipRes;

            sipRes = &sipCpp->GetScalingLimits();

            return sipConvertFromType(sipRes,sipType_FbxLimits,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxTransform, sipName_GetScalingLimits, doc_FbxTransform_GetScalingLimits);

    return NULL;
}


PyDoc_STRVAR(doc_FbxTransform_GetRotationOrder, "GetRotationOrder(self) -> FbxRotationOrder");

extern "C" {static PyObject *meth_FbxTransform_GetRotationOrder(PyObject *, PyObject *);}
static PyObject *meth_FbxTransform_GetRotationOrder(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxTransform *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxTransform, &sipCpp))
        {
             ::FbxRotationOrder*sipRes;

            sipRes = &sipCpp->GetRotationOrder();

            return sipConvertFromType(sipRes,sipType_FbxRotationOrder,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxTransform, sipName_GetRotationOrder, doc_FbxTransform_GetRotationOrder);

    return NULL;
}


PyDoc_STRVAR(doc_FbxTransform_HasROffset, "HasROffset(self) -> bool");

extern "C" {static PyObject *meth_FbxTransform_HasROffset(PyObject *, PyObject *);}
static PyObject *meth_FbxTransform_HasROffset(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxTransform *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxTransform, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->HasROffset();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxTransform, sipName_HasROffset, doc_FbxTransform_HasROffset);

    return NULL;
}


PyDoc_STRVAR(doc_FbxTransform_HasRPivot, "HasRPivot(self) -> bool");

extern "C" {static PyObject *meth_FbxTransform_HasRPivot(PyObject *, PyObject *);}
static PyObject *meth_FbxTransform_HasRPivot(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxTransform *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxTransform, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->HasRPivot();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxTransform, sipName_HasRPivot, doc_FbxTransform_HasRPivot);

    return NULL;
}


PyDoc_STRVAR(doc_FbxTransform_HasSOffset, "HasSOffset(self) -> bool");

extern "C" {static PyObject *meth_FbxTransform_HasSOffset(PyObject *, PyObject *);}
static PyObject *meth_FbxTransform_HasSOffset(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxTransform *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxTransform, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->HasSOffset();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxTransform, sipName_HasSOffset, doc_FbxTransform_HasSOffset);

    return NULL;
}


PyDoc_STRVAR(doc_FbxTransform_HasSPivot, "HasSPivot(self) -> bool");

extern "C" {static PyObject *meth_FbxTransform_HasSPivot(PyObject *, PyObject *);}
static PyObject *meth_FbxTransform_HasSPivot(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxTransform *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxTransform, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->HasSPivot();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxTransform, sipName_HasSPivot, doc_FbxTransform_HasSPivot);

    return NULL;
}


PyDoc_STRVAR(doc_FbxTransform_HasPreRM, "HasPreRM(self) -> bool");

extern "C" {static PyObject *meth_FbxTransform_HasPreRM(PyObject *, PyObject *);}
static PyObject *meth_FbxTransform_HasPreRM(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxTransform *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxTransform, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->HasPreRM();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxTransform, sipName_HasPreRM, doc_FbxTransform_HasPreRM);

    return NULL;
}


PyDoc_STRVAR(doc_FbxTransform_HasPostRM, "HasPostRM(self) -> bool");

extern "C" {static PyObject *meth_FbxTransform_HasPostRM(PyObject *, PyObject *);}
static PyObject *meth_FbxTransform_HasPostRM(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxTransform *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxTransform, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->HasPostRM();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxTransform, sipName_HasPostRM, doc_FbxTransform_HasPostRM);

    return NULL;
}


PyDoc_STRVAR(doc_FbxTransform_SetROffset, "SetROffset(self, FbxVector4)");

extern "C" {static PyObject *meth_FbxTransform_SetROffset(PyObject *, PyObject *);}
static PyObject *meth_FbxTransform_SetROffset(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxVector4* a0;
         ::FbxTransform *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_FbxTransform, &sipCpp, sipType_FbxVector4, &a0))
        {
            sipCpp->SetROffset(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxTransform, sipName_SetROffset, doc_FbxTransform_SetROffset);

    return NULL;
}


PyDoc_STRVAR(doc_FbxTransform_SetRPivot, "SetRPivot(self, FbxVector4)");

extern "C" {static PyObject *meth_FbxTransform_SetRPivot(PyObject *, PyObject *);}
static PyObject *meth_FbxTransform_SetRPivot(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxVector4* a0;
         ::FbxTransform *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_FbxTransform, &sipCpp, sipType_FbxVector4, &a0))
        {
            sipCpp->SetRPivot(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxTransform, sipName_SetRPivot, doc_FbxTransform_SetRPivot);

    return NULL;
}


PyDoc_STRVAR(doc_FbxTransform_SetSOffset, "SetSOffset(self, FbxVector4)");

extern "C" {static PyObject *meth_FbxTransform_SetSOffset(PyObject *, PyObject *);}
static PyObject *meth_FbxTransform_SetSOffset(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxVector4* a0;
         ::FbxTransform *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_FbxTransform, &sipCpp, sipType_FbxVector4, &a0))
        {
            sipCpp->SetSOffset(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxTransform, sipName_SetSOffset, doc_FbxTransform_SetSOffset);

    return NULL;
}


PyDoc_STRVAR(doc_FbxTransform_SetSPivot, "SetSPivot(self, FbxVector4)");

extern "C" {static PyObject *meth_FbxTransform_SetSPivot(PyObject *, PyObject *);}
static PyObject *meth_FbxTransform_SetSPivot(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxVector4* a0;
         ::FbxTransform *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_FbxTransform, &sipCpp, sipType_FbxVector4, &a0))
        {
            sipCpp->SetSPivot(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxTransform, sipName_SetSPivot, doc_FbxTransform_SetSPivot);

    return NULL;
}


PyDoc_STRVAR(doc_FbxTransform_SetPreRM, "SetPreRM(self, FbxVector4)");

extern "C" {static PyObject *meth_FbxTransform_SetPreRM(PyObject *, PyObject *);}
static PyObject *meth_FbxTransform_SetPreRM(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxVector4* a0;
         ::FbxTransform *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_FbxTransform, &sipCpp, sipType_FbxVector4, &a0))
        {
            sipCpp->SetPreRM(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxTransform, sipName_SetPreRM, doc_FbxTransform_SetPreRM);

    return NULL;
}


PyDoc_STRVAR(doc_FbxTransform_SetPostRM, "SetPostRM(self, FbxVector4)");

extern "C" {static PyObject *meth_FbxTransform_SetPostRM(PyObject *, PyObject *);}
static PyObject *meth_FbxTransform_SetPostRM(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxVector4* a0;
         ::FbxTransform *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_FbxTransform, &sipCpp, sipType_FbxVector4, &a0))
        {
            sipCpp->SetPostRM(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxTransform, sipName_SetPostRM, doc_FbxTransform_SetPostRM);

    return NULL;
}


PyDoc_STRVAR(doc_FbxTransform_GetRotationSpaceForLimitOnly, "GetRotationSpaceForLimitOnly(self) -> bool");

extern "C" {static PyObject *meth_FbxTransform_GetRotationSpaceForLimitOnly(PyObject *, PyObject *);}
static PyObject *meth_FbxTransform_GetRotationSpaceForLimitOnly(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxTransform *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxTransform, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->GetRotationSpaceForLimitOnly();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxTransform, sipName_GetRotationSpaceForLimitOnly, doc_FbxTransform_GetRotationSpaceForLimitOnly);

    return NULL;
}


PyDoc_STRVAR(doc_FbxTransform_SetRotationSpaceForLimitOnly, "SetRotationSpaceForLimitOnly(self, bool)");

extern "C" {static PyObject *meth_FbxTransform_SetRotationSpaceForLimitOnly(PyObject *, PyObject *);}
static PyObject *meth_FbxTransform_SetRotationSpaceForLimitOnly(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
         ::FbxTransform *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_FbxTransform, &sipCpp, &a0))
        {
            sipCpp->SetRotationSpaceForLimitOnly(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxTransform, sipName_SetRotationSpaceForLimitOnly, doc_FbxTransform_SetRotationSpaceForLimitOnly);

    return NULL;
}


PyDoc_STRVAR(doc_FbxTransform_DoF2LT, "DoF2LT(self, FbxVector4, FbxVector4, FbxAMatrix, FbxAMatrix)");

extern "C" {static PyObject *meth_FbxTransform_DoF2LT(PyObject *, PyObject *);}
static PyObject *meth_FbxTransform_DoF2LT(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxVector4* a0;
         ::FbxVector4* a1;
         ::FbxAMatrix* a2;
         ::FbxAMatrix* a3;
         ::FbxTransform *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9J9J9J9", &sipSelf, sipType_FbxTransform, &sipCpp, sipType_FbxVector4, &a0, sipType_FbxVector4, &a1, sipType_FbxAMatrix, &a2, sipType_FbxAMatrix, &a3))
        {
            sipCpp->DoF2LT(*a0,*a1,*a2,*a3);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxTransform, sipName_DoF2LT, doc_FbxTransform_DoF2LT);

    return NULL;
}


PyDoc_STRVAR(doc_FbxTransform_LT2DoF, "LT2DoF(self, FbxVector4, FbxVector4, FbxAMatrix, FbxAMatrix)");

extern "C" {static PyObject *meth_FbxTransform_LT2DoF(PyObject *, PyObject *);}
static PyObject *meth_FbxTransform_LT2DoF(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxVector4* a0;
         ::FbxVector4* a1;
         ::FbxAMatrix* a2;
         ::FbxAMatrix* a3;
         ::FbxTransform *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9J9J9J9", &sipSelf, sipType_FbxTransform, &sipCpp, sipType_FbxVector4, &a0, sipType_FbxVector4, &a1, sipType_FbxAMatrix, &a2, sipType_FbxAMatrix, &a3))
        {
            sipCpp->LT2DoF(*a0,*a1,*a2,*a3);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxTransform, sipName_LT2DoF, doc_FbxTransform_LT2DoF);

    return NULL;
}


PyDoc_STRVAR(doc_FbxTransform_DoF2LRM, "DoF2LRM(self, FbxAMatrix, FbxVector4, bool = False)");

extern "C" {static PyObject *meth_FbxTransform_DoF2LRM(PyObject *, PyObject *);}
static PyObject *meth_FbxTransform_DoF2LRM(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxAMatrix* a0;
         ::FbxVector4* a1;
        bool a2 = 0;
         ::FbxTransform *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9J9|b", &sipSelf, sipType_FbxTransform, &sipCpp, sipType_FbxAMatrix, &a0, sipType_FbxVector4, &a1, &a2))
        {
            sipCpp->DoF2LRM(*a0,*a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxTransform, sipName_DoF2LRM, doc_FbxTransform_DoF2LRM);

    return NULL;
}


PyDoc_STRVAR(doc_FbxTransform_LRM2DoF, "LRM2DoF(self, FbxVector4, FbxAMatrix, bool = False)");

extern "C" {static PyObject *meth_FbxTransform_LRM2DoF(PyObject *, PyObject *);}
static PyObject *meth_FbxTransform_LRM2DoF(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxVector4* a0;
         ::FbxAMatrix* a1;
        bool a2 = 0;
         ::FbxTransform *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9J9|b", &sipSelf, sipType_FbxTransform, &sipCpp, sipType_FbxVector4, &a0, sipType_FbxAMatrix, &a1, &a2))
        {
            sipCpp->LRM2DoF(*a0,*a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxTransform, sipName_LRM2DoF, doc_FbxTransform_LRM2DoF);

    return NULL;
}


PyDoc_STRVAR(doc_FbxTransform_LSM2GSM, "LSM2GSM(self, FbxAMatrix, FbxAMatrix, FbxAMatrix, FbxAMatrix, FbxVector4)");

extern "C" {static PyObject *meth_FbxTransform_LSM2GSM(PyObject *, PyObject *);}
static PyObject *meth_FbxTransform_LSM2GSM(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxAMatrix* a0;
         ::FbxAMatrix* a1;
         ::FbxAMatrix* a2;
         ::FbxAMatrix* a3;
         ::FbxVector4* a4;
         ::FbxTransform *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9J9J9J9J9", &sipSelf, sipType_FbxTransform, &sipCpp, sipType_FbxAMatrix, &a0, sipType_FbxAMatrix, &a1, sipType_FbxAMatrix, &a2, sipType_FbxAMatrix, &a3, sipType_FbxVector4, &a4))
        {
            sipCpp->LSM2GSM(*a0,*a1,*a2,*a3,*a4);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxTransform, sipName_LSM2GSM, doc_FbxTransform_LSM2GSM);

    return NULL;
}


PyDoc_STRVAR(doc_FbxTransform_GTRSM2GX, "GTRSM2GX(self, FbxAMatrix, FbxVector4, FbxAMatrix, FbxAMatrix)");

extern "C" {static PyObject *meth_FbxTransform_GTRSM2GX(PyObject *, PyObject *);}
static PyObject *meth_FbxTransform_GTRSM2GX(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxAMatrix* a0;
         ::FbxVector4* a1;
         ::FbxAMatrix* a2;
         ::FbxAMatrix* a3;
         ::FbxTransform *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9J9J9J9", &sipSelf, sipType_FbxTransform, &sipCpp, sipType_FbxAMatrix, &a0, sipType_FbxVector4, &a1, sipType_FbxAMatrix, &a2, sipType_FbxAMatrix, &a3))
        {
            sipCpp->GTRSM2GX(*a0,*a1,*a2,*a3);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxTransform, sipName_GTRSM2GX, doc_FbxTransform_GTRSM2GX);

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_FbxTransform(void *, int);}
static void release_FbxTransform(void *sipCppV, int)
{
    delete reinterpret_cast< ::FbxTransform *>(sipCppV);
}


extern "C" {static void assign_FbxTransform(void *, SIP_SSIZE_T, const void *);}
static void assign_FbxTransform(void *sipDst, SIP_SSIZE_T sipDstIdx, const void *sipSrc)
{
    reinterpret_cast< ::FbxTransform *>(sipDst)[sipDstIdx] = *reinterpret_cast<const  ::FbxTransform *>(sipSrc);
}


extern "C" {static void *array_FbxTransform(SIP_SSIZE_T);}
static void *array_FbxTransform(SIP_SSIZE_T sipNrElem)
{
    return new  ::FbxTransform[sipNrElem];
}


extern "C" {static void *copy_FbxTransform(const void *, SIP_SSIZE_T);}
static void *copy_FbxTransform(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::FbxTransform(reinterpret_cast<const  ::FbxTransform *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_FbxTransform(sipSimpleWrapper *);}
static void dealloc_FbxTransform(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_FbxTransform(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_FbxTransform(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_FbxTransform(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::FbxTransform *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            sipCpp = new  ::FbxTransform();

            return sipCpp;
        }
    }

    {
        const  ::FbxTransform* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_FbxTransform, &a0))
        {
            sipCpp = new  ::FbxTransform(*a0);

            return sipCpp;
        }
    }

    return NULL;
}


static PyMethodDef methods_FbxTransform[] = {
    {SIP_MLNAME_CAST(sipName_DoF2LRM), meth_FbxTransform_DoF2LRM, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxTransform_DoF2LRM)},
    {SIP_MLNAME_CAST(sipName_DoF2LT), meth_FbxTransform_DoF2LT, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxTransform_DoF2LT)},
    {SIP_MLNAME_CAST(sipName_GTRSM2GX), meth_FbxTransform_GTRSM2GX, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxTransform_GTRSM2GX)},
    {SIP_MLNAME_CAST(sipName_GetInheritType), meth_FbxTransform_GetInheritType, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxTransform_GetInheritType)},
    {SIP_MLNAME_CAST(sipName_GetRotationLimits), meth_FbxTransform_GetRotationLimits, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxTransform_GetRotationLimits)},
    {SIP_MLNAME_CAST(sipName_GetRotationOrder), meth_FbxTransform_GetRotationOrder, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxTransform_GetRotationOrder)},
    {SIP_MLNAME_CAST(sipName_GetRotationSpaceForLimitOnly), meth_FbxTransform_GetRotationSpaceForLimitOnly, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxTransform_GetRotationSpaceForLimitOnly)},
    {SIP_MLNAME_CAST(sipName_GetScalingLimits), meth_FbxTransform_GetScalingLimits, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxTransform_GetScalingLimits)},
    {SIP_MLNAME_CAST(sipName_GetTranslationLimits), meth_FbxTransform_GetTranslationLimits, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxTransform_GetTranslationLimits)},
    {SIP_MLNAME_CAST(sipName_HasPostRM), meth_FbxTransform_HasPostRM, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxTransform_HasPostRM)},
    {SIP_MLNAME_CAST(sipName_HasPreRM), meth_FbxTransform_HasPreRM, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxTransform_HasPreRM)},
    {SIP_MLNAME_CAST(sipName_HasROffset), meth_FbxTransform_HasROffset, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxTransform_HasROffset)},
    {SIP_MLNAME_CAST(sipName_HasRPivot), meth_FbxTransform_HasRPivot, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxTransform_HasRPivot)},
    {SIP_MLNAME_CAST(sipName_HasSOffset), meth_FbxTransform_HasSOffset, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxTransform_HasSOffset)},
    {SIP_MLNAME_CAST(sipName_HasSPivot), meth_FbxTransform_HasSPivot, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxTransform_HasSPivot)},
    {SIP_MLNAME_CAST(sipName_LRM2DoF), meth_FbxTransform_LRM2DoF, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxTransform_LRM2DoF)},
    {SIP_MLNAME_CAST(sipName_LSM2GSM), meth_FbxTransform_LSM2GSM, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxTransform_LSM2GSM)},
    {SIP_MLNAME_CAST(sipName_LT2DoF), meth_FbxTransform_LT2DoF, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxTransform_LT2DoF)},
    {SIP_MLNAME_CAST(sipName_SetInheritType), meth_FbxTransform_SetInheritType, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxTransform_SetInheritType)},
    {SIP_MLNAME_CAST(sipName_SetPostRM), meth_FbxTransform_SetPostRM, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxTransform_SetPostRM)},
    {SIP_MLNAME_CAST(sipName_SetPreRM), meth_FbxTransform_SetPreRM, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxTransform_SetPreRM)},
    {SIP_MLNAME_CAST(sipName_SetROffset), meth_FbxTransform_SetROffset, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxTransform_SetROffset)},
    {SIP_MLNAME_CAST(sipName_SetRPivot), meth_FbxTransform_SetRPivot, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxTransform_SetRPivot)},
    {SIP_MLNAME_CAST(sipName_SetRotationSpaceForLimitOnly), meth_FbxTransform_SetRotationSpaceForLimitOnly, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxTransform_SetRotationSpaceForLimitOnly)},
    {SIP_MLNAME_CAST(sipName_SetSOffset), meth_FbxTransform_SetSOffset, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxTransform_SetSOffset)},
    {SIP_MLNAME_CAST(sipName_SetSPivot), meth_FbxTransform_SetSPivot, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxTransform_SetSPivot)}
};

static sipEnumMemberDef enummembers_FbxTransform[] = {
    {sipName_eInheritRSrs, static_cast<int>( ::FbxTransform::eInheritRSrs), 379},
    {sipName_eInheritRrSs, static_cast<int>( ::FbxTransform::eInheritRrSs), 379},
    {sipName_eInheritRrs, static_cast<int>( ::FbxTransform::eInheritRrs), 379},
};

PyDoc_STRVAR(doc_FbxTransform, "\1FbxTransform()\n"
    "FbxTransform(FbxTransform)");


sipClassTypeDef sipTypeDef_fbx_FbxTransform = {
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_FbxTransform,
        {0},
        0
    },
    {
        sipNameNr_FbxTransform,
        {0, 0, 1},
        26, methods_FbxTransform,
        3, enummembers_FbxTransform,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_FbxTransform,
    -1,
    -1,
    0,
    0,
    init_type_FbxTransform,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_FbxTransform,
    assign_FbxTransform,
    array_FbxTransform,
    copy_FbxTransform,
    release_FbxTransform,
    0,
    0,
    0,
    0,
    0,
    0,
    0
};
