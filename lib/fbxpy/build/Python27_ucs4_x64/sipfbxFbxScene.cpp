/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.3
 *
 * Copyright (C) 2009 Autodesk, Inc. and/or its licensors.
 * All Rights Reserved.
 * 
 * The coded instructions, statements, computer programs, and/or related material 
 * (collectively the "Data") in these files contain unpublished information 
 * proprietary to Autodesk, Inc. and/or its licensors, which is protected by 
 * Canada and United States of America federal copyright law and by international 
 * treaties. 
 * 
 * The Data may not be disclosed or distributed to third parties, in whole or in
 * part, without the prior written consent of Autodesk, Inc. ("Autodesk").
 * 
 * THE DATA IS PROVIDED "AS IS" AND WITHOUT WARRANTY.
 * ALL WARRANTIES ARE EXPRESSLY EXCLUDED AND DISCLAIMED. AUTODESK MAKES NO
 * WARRANTY OF ANY KIND WITH RESPECT TO THE DATA, EXPRESS, IMPLIED OR ARISING
 * BY CUSTOM OR TRADE USAGE, AND DISCLAIMS ANY IMPLIED WARRANTIES OF TITLE, 
 * NON-INFRINGEMENT, MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE OR USE. 
 * WITHOUT LIMITING THE FOREGOING, AUTODESK DOES NOT WARRANT THAT THE OPERATION
 * OF THE DATA WILL BE UNINTERRUPTED OR ERROR FREE. 
 * 
 * IN NO EVENT SHALL AUTODESK, ITS AFFILIATES, PARENT COMPANIES, LICENSORS
 * OR SUPPLIERS ("AUTODESK GROUP") BE LIABLE FOR ANY LOSSES, DAMAGES OR EXPENSES
 * OF ANY KIND (INCLUDING WITHOUT LIMITATION PUNITIVE OR MULTIPLE DAMAGES OR OTHER
 * SPECIAL, DIRECT, INDIRECT, EXEMPLARY, INCIDENTAL, LOSS OF PROFITS, REVENUE
 * OR DATA, COST OF COVER OR CONSEQUENTIAL LOSSES OR DAMAGES OF ANY KIND),
 * HOWEVER CAUSED, AND REGARDLESS OF THE THEORY OF LIABILITY, WHETHER DERIVED
 * FROM CONTRACT, TORT (INCLUDING, BUT NOT LIMITED TO, NEGLIGENCE), OR OTHERWISE,
 * ARISING OUT OF OR RELATING TO THE DATA OR ITS USE OR ANY OTHER PERFORMANCE,
 * WHETHER OR NOT AUTODESK HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH LOSS
 * OR DAMAGE. 
 */

#include "sipAPIfbx.h"


#line 4 "/var/www/html/lib/fbxpy/sip/fbxstatus.sip"
#include <fbxsdk.h>
#line 44 "/var/www/html/lib/fbxpy/build/Python27_ucs4_x64/sipfbxFbxScene.cpp"


PyDoc_STRVAR(doc_FbxScene_Create, "Create(FbxManager, str) -> FbxScene\n"
    "Create(FbxObject, str) -> FbxScene");

extern "C" {static PyObject *meth_FbxScene_Create(PyObject *, PyObject *);}
static PyObject *meth_FbxScene_Create(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxManager* a0;
        const char* a1;
        PyObject *a1Keep;

        if (sipParseArgs(&sipParseErr, sipArgs, "J8A8", sipType_FbxManager, &a0, &a1Keep, &a1))
        {
             ::FbxScene*sipRes;

            sipRes =  ::FbxScene::Create(a0,a1);
            Py_DECREF(a1Keep);

            return sipConvertFromType(sipRes,sipType_FbxScene,NULL);
        }
    }

    {
         ::FbxObject* a0;
        const char* a1;
        PyObject *a1Keep;

        if (sipParseArgs(&sipParseErr, sipArgs, "J8A8", sipType_FbxObject, &a0, &a1Keep, &a1))
        {
             ::FbxScene*sipRes;

            sipRes =  ::FbxScene::Create(a0,a1);
            Py_DECREF(a1Keep);

            return sipConvertFromType(sipRes,sipType_FbxScene,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxScene, sipName_Create, doc_FbxScene_Create);

    return NULL;
}


PyDoc_STRVAR(doc_FbxScene_GetClassId, "GetClassId(self) -> FbxClassId");

extern "C" {static PyObject *meth_FbxScene_GetClassId(PyObject *, PyObject *);}
static PyObject *meth_FbxScene_GetClassId(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::FbxScene *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxScene, &sipCpp))
        {
             ::FbxClassId*sipRes;

            sipRes = new  ::FbxClassId((sipSelfWasArg ? sipCpp-> ::FbxScene::GetClassId() : sipCpp->GetClassId()));

            return sipConvertFromNewType(sipRes,sipType_FbxClassId,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxScene, sipName_GetClassId, doc_FbxScene_GetClassId);

    return NULL;
}


PyDoc_STRVAR(doc_FbxScene_Clear, "Clear(self)");

extern "C" {static PyObject *meth_FbxScene_Clear(PyObject *, PyObject *);}
static PyObject *meth_FbxScene_Clear(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::FbxScene *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxScene, &sipCpp))
        {
            (sipSelfWasArg ? sipCpp-> ::FbxScene::Clear() : sipCpp->Clear());

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxScene, sipName_Clear, doc_FbxScene_Clear);

    return NULL;
}


PyDoc_STRVAR(doc_FbxScene_GetRootNode, "GetRootNode(self) -> FbxNode");

extern "C" {static PyObject *meth_FbxScene_GetRootNode(PyObject *, PyObject *);}
static PyObject *meth_FbxScene_GetRootNode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::FbxScene *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxScene, &sipCpp))
        {
             ::FbxNode*sipRes;

            sipRes = sipCpp->GetRootNode();

            return sipConvertFromType(sipRes,sipType_FbxNode,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxScene, sipName_GetRootNode, doc_FbxScene_GetRootNode);

    return NULL;
}


PyDoc_STRVAR(doc_FbxScene_FillTextureArray, "FillTextureArray(self, FbxTextureArray)");

extern "C" {static PyObject *meth_FbxScene_FillTextureArray(PyObject *, PyObject *);}
static PyObject *meth_FbxScene_FillTextureArray(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxTextureArray* a0;
         ::FbxScene *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_FbxScene, &sipCpp, sipType_FbxTextureArray, &a0))
        {
            sipCpp->FillTextureArray(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxScene, sipName_FillTextureArray, doc_FbxScene_FillTextureArray);

    return NULL;
}


PyDoc_STRVAR(doc_FbxScene_FillMaterialArray, "FillMaterialArray(self, FbxSurfaceMaterialArray)");

extern "C" {static PyObject *meth_FbxScene_FillMaterialArray(PyObject *, PyObject *);}
static PyObject *meth_FbxScene_FillMaterialArray(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxSurfaceMaterialArray* a0;
         ::FbxScene *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_FbxScene, &sipCpp, sipType_FbxSurfaceMaterialArray, &a0))
        {
            sipCpp->FillMaterialArray(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxScene, sipName_FillMaterialArray, doc_FbxScene_FillMaterialArray);

    return NULL;
}


PyDoc_STRVAR(doc_FbxScene_GetCharacterCount, "GetCharacterCount(self) -> int");

extern "C" {static PyObject *meth_FbxScene_GetCharacterCount(PyObject *, PyObject *);}
static PyObject *meth_FbxScene_GetCharacterCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxScene *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxScene, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->GetCharacterCount();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxScene, sipName_GetCharacterCount, doc_FbxScene_GetCharacterCount);

    return NULL;
}


PyDoc_STRVAR(doc_FbxScene_GetCharacter, "GetCharacter(self, int) -> FbxCharacter");

extern "C" {static PyObject *meth_FbxScene_GetCharacter(PyObject *, PyObject *);}
static PyObject *meth_FbxScene_GetCharacter(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
         ::FbxScene *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_FbxScene, &sipCpp, &a0))
        {
             ::FbxCharacter*sipRes;

            sipRes = sipCpp->GetCharacter(a0);

            return sipConvertFromType(sipRes,sipType_FbxCharacter,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxScene, sipName_GetCharacter, doc_FbxScene_GetCharacter);

    return NULL;
}


PyDoc_STRVAR(doc_FbxScene_CreateCharacter, "CreateCharacter(self, str) -> int");

extern "C" {static PyObject *meth_FbxScene_CreateCharacter(PyObject *, PyObject *);}
static PyObject *meth_FbxScene_CreateCharacter(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        char* a0;
        PyObject *a0Keep;
         ::FbxScene *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BA8", &sipSelf, sipType_FbxScene, &sipCpp, &a0Keep, &a0))
        {
            int sipRes;

            sipRes = sipCpp->CreateCharacter(a0);
            Py_DECREF(a0Keep);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxScene, sipName_CreateCharacter, doc_FbxScene_CreateCharacter);

    return NULL;
}


PyDoc_STRVAR(doc_FbxScene_DestroyCharacter, "DestroyCharacter(self, int)");

extern "C" {static PyObject *meth_FbxScene_DestroyCharacter(PyObject *, PyObject *);}
static PyObject *meth_FbxScene_DestroyCharacter(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
         ::FbxScene *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_FbxScene, &sipCpp, &a0))
        {
            sipCpp->DestroyCharacter(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxScene, sipName_DestroyCharacter, doc_FbxScene_DestroyCharacter);

    return NULL;
}


PyDoc_STRVAR(doc_FbxScene_GetControlSetPlugCount, "GetControlSetPlugCount(self) -> int");

extern "C" {static PyObject *meth_FbxScene_GetControlSetPlugCount(PyObject *, PyObject *);}
static PyObject *meth_FbxScene_GetControlSetPlugCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxScene *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxScene, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->GetControlSetPlugCount();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxScene, sipName_GetControlSetPlugCount, doc_FbxScene_GetControlSetPlugCount);

    return NULL;
}


PyDoc_STRVAR(doc_FbxScene_CreateControlSetPlug, "CreateControlSetPlug(self, str) -> int");

extern "C" {static PyObject *meth_FbxScene_CreateControlSetPlug(PyObject *, PyObject *);}
static PyObject *meth_FbxScene_CreateControlSetPlug(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        char* a0;
        PyObject *a0Keep;
         ::FbxScene *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BA8", &sipSelf, sipType_FbxScene, &sipCpp, &a0Keep, &a0))
        {
            int sipRes;

            sipRes = sipCpp->CreateControlSetPlug(a0);
            Py_DECREF(a0Keep);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxScene, sipName_CreateControlSetPlug, doc_FbxScene_CreateControlSetPlug);

    return NULL;
}


PyDoc_STRVAR(doc_FbxScene_DestroyControlSetPlug, "DestroyControlSetPlug(self, int)");

extern "C" {static PyObject *meth_FbxScene_DestroyControlSetPlug(PyObject *, PyObject *);}
static PyObject *meth_FbxScene_DestroyControlSetPlug(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
         ::FbxScene *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_FbxScene, &sipCpp, &a0))
        {
            sipCpp->DestroyControlSetPlug(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxScene, sipName_DestroyControlSetPlug, doc_FbxScene_DestroyControlSetPlug);

    return NULL;
}


PyDoc_STRVAR(doc_FbxScene_GetCharacterPoseCount, "GetCharacterPoseCount(self) -> int");

extern "C" {static PyObject *meth_FbxScene_GetCharacterPoseCount(PyObject *, PyObject *);}
static PyObject *meth_FbxScene_GetCharacterPoseCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxScene *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxScene, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->GetCharacterPoseCount();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxScene, sipName_GetCharacterPoseCount, doc_FbxScene_GetCharacterPoseCount);

    return NULL;
}


PyDoc_STRVAR(doc_FbxScene_GetCharacterPose, "GetCharacterPose(self, int) -> FbxCharacterPose");

extern "C" {static PyObject *meth_FbxScene_GetCharacterPose(PyObject *, PyObject *);}
static PyObject *meth_FbxScene_GetCharacterPose(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
         ::FbxScene *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_FbxScene, &sipCpp, &a0))
        {
             ::FbxCharacterPose*sipRes;

            sipRes = sipCpp->GetCharacterPose(a0);

            return sipConvertFromType(sipRes,sipType_FbxCharacterPose,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxScene, sipName_GetCharacterPose, doc_FbxScene_GetCharacterPose);

    return NULL;
}


PyDoc_STRVAR(doc_FbxScene_CreateCharacterPose, "CreateCharacterPose(self, str) -> int");

extern "C" {static PyObject *meth_FbxScene_CreateCharacterPose(PyObject *, PyObject *);}
static PyObject *meth_FbxScene_CreateCharacterPose(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        char* a0;
        PyObject *a0Keep;
         ::FbxScene *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BA8", &sipSelf, sipType_FbxScene, &sipCpp, &a0Keep, &a0))
        {
            int sipRes;

            sipRes = sipCpp->CreateCharacterPose(a0);
            Py_DECREF(a0Keep);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxScene, sipName_CreateCharacterPose, doc_FbxScene_CreateCharacterPose);

    return NULL;
}


PyDoc_STRVAR(doc_FbxScene_DestroyCharacterPose, "DestroyCharacterPose(self, int)");

extern "C" {static PyObject *meth_FbxScene_DestroyCharacterPose(PyObject *, PyObject *);}
static PyObject *meth_FbxScene_DestroyCharacterPose(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
         ::FbxScene *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_FbxScene, &sipCpp, &a0))
        {
            sipCpp->DestroyCharacterPose(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxScene, sipName_DestroyCharacterPose, doc_FbxScene_DestroyCharacterPose);

    return NULL;
}


PyDoc_STRVAR(doc_FbxScene_GetPoseCount, "GetPoseCount(self) -> int");

extern "C" {static PyObject *meth_FbxScene_GetPoseCount(PyObject *, PyObject *);}
static PyObject *meth_FbxScene_GetPoseCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxScene *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxScene, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->GetPoseCount();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxScene, sipName_GetPoseCount, doc_FbxScene_GetPoseCount);

    return NULL;
}


PyDoc_STRVAR(doc_FbxScene_GetPose, "GetPose(self, int) -> FbxPose");

extern "C" {static PyObject *meth_FbxScene_GetPose(PyObject *, PyObject *);}
static PyObject *meth_FbxScene_GetPose(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
         ::FbxScene *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_FbxScene, &sipCpp, &a0))
        {
             ::FbxPose*sipRes;

            sipRes = sipCpp->GetPose(a0);

            return sipConvertFromType(sipRes,sipType_FbxPose,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxScene, sipName_GetPose, doc_FbxScene_GetPose);

    return NULL;
}


PyDoc_STRVAR(doc_FbxScene_AddPose, "AddPose(self, FbxPose) -> bool");

extern "C" {static PyObject *meth_FbxScene_AddPose(PyObject *, PyObject *);}
static PyObject *meth_FbxScene_AddPose(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxPose* a0;
         ::FbxScene *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_FbxScene, &sipCpp, sipType_FbxPose, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->AddPose(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxScene, sipName_AddPose, doc_FbxScene_AddPose);

    return NULL;
}


PyDoc_STRVAR(doc_FbxScene_RemovePose, "RemovePose(self, FbxPose) -> bool\n"
    "RemovePose(self, int) -> bool");

extern "C" {static PyObject *meth_FbxScene_RemovePose(PyObject *, PyObject *);}
static PyObject *meth_FbxScene_RemovePose(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxPose* a0;
         ::FbxScene *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_FbxScene, &sipCpp, sipType_FbxPose, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->RemovePose(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    {
        int a0;
         ::FbxScene *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_FbxScene, &sipCpp, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->RemovePose(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxScene, sipName_RemovePose, doc_FbxScene_RemovePose);

    return NULL;
}


PyDoc_STRVAR(doc_FbxScene_GetSceneInfo, "GetSceneInfo(self) -> FbxDocumentInfo");

extern "C" {static PyObject *meth_FbxScene_GetSceneInfo(PyObject *, PyObject *);}
static PyObject *meth_FbxScene_GetSceneInfo(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxScene *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxScene, &sipCpp))
        {
             ::FbxDocumentInfo*sipRes;

            sipRes = sipCpp->GetSceneInfo();

            return sipConvertFromType(sipRes,sipType_FbxDocumentInfo,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxScene, sipName_GetSceneInfo, doc_FbxScene_GetSceneInfo);

    return NULL;
}


PyDoc_STRVAR(doc_FbxScene_SetSceneInfo, "SetSceneInfo(self, FbxDocumentInfo)");

extern "C" {static PyObject *meth_FbxScene_SetSceneInfo(PyObject *, PyObject *);}
static PyObject *meth_FbxScene_SetSceneInfo(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxDocumentInfo* a0;
         ::FbxScene *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_FbxScene, &sipCpp, sipType_FbxDocumentInfo, &a0))
        {
            sipCpp->SetSceneInfo(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxScene, sipName_SetSceneInfo, doc_FbxScene_SetSceneInfo);

    return NULL;
}


PyDoc_STRVAR(doc_FbxScene_GetGlobalSettings, "GetGlobalSettings(self) -> FbxGlobalSettings");

extern "C" {static PyObject *meth_FbxScene_GetGlobalSettings(PyObject *, PyObject *);}
static PyObject *meth_FbxScene_GetGlobalSettings(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxScene *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxScene, &sipCpp))
        {
             ::FbxGlobalSettings*sipRes;

            sipRes = &sipCpp->GetGlobalSettings();

            return sipConvertFromType(sipRes,sipType_FbxGlobalSettings,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxScene, sipName_GetGlobalSettings, doc_FbxScene_GetGlobalSettings);

    return NULL;
}


PyDoc_STRVAR(doc_FbxScene_GetMaterialCount, "GetMaterialCount(self) -> int");

extern "C" {static PyObject *meth_FbxScene_GetMaterialCount(PyObject *, PyObject *);}
static PyObject *meth_FbxScene_GetMaterialCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxScene *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxScene, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->GetMaterialCount();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxScene, sipName_GetMaterialCount, doc_FbxScene_GetMaterialCount);

    return NULL;
}


PyDoc_STRVAR(doc_FbxScene_GetMaterial, "GetMaterial(self, int) -> FbxSurfaceMaterial\n"
    "GetMaterial(self, str) -> FbxSurfaceMaterial");

extern "C" {static PyObject *meth_FbxScene_GetMaterial(PyObject *, PyObject *);}
static PyObject *meth_FbxScene_GetMaterial(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
         ::FbxScene *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_FbxScene, &sipCpp, &a0))
        {
             ::FbxSurfaceMaterial*sipRes;

            sipRes = sipCpp->GetMaterial(a0);

            return sipConvertFromType(sipRes,sipType_FbxSurfaceMaterial,NULL);
        }
    }

    {
        char* a0;
        PyObject *a0Keep;
         ::FbxScene *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BA8", &sipSelf, sipType_FbxScene, &sipCpp, &a0Keep, &a0))
        {
             ::FbxSurfaceMaterial*sipRes;

            sipRes = sipCpp->GetMaterial(a0);
            Py_DECREF(a0Keep);

            return sipConvertFromType(sipRes,sipType_FbxSurfaceMaterial,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxScene, sipName_GetMaterial, doc_FbxScene_GetMaterial);

    return NULL;
}


PyDoc_STRVAR(doc_FbxScene_AddMaterial, "AddMaterial(self, FbxSurfaceMaterial) -> bool");

extern "C" {static PyObject *meth_FbxScene_AddMaterial(PyObject *, PyObject *);}
static PyObject *meth_FbxScene_AddMaterial(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxSurfaceMaterial* a0;
         ::FbxScene *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_FbxScene, &sipCpp, sipType_FbxSurfaceMaterial, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->AddMaterial(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxScene, sipName_AddMaterial, doc_FbxScene_AddMaterial);

    return NULL;
}


PyDoc_STRVAR(doc_FbxScene_RemoveMaterial, "RemoveMaterial(self, FbxSurfaceMaterial) -> bool");

extern "C" {static PyObject *meth_FbxScene_RemoveMaterial(PyObject *, PyObject *);}
static PyObject *meth_FbxScene_RemoveMaterial(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxSurfaceMaterial* a0;
         ::FbxScene *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_FbxScene, &sipCpp, sipType_FbxSurfaceMaterial, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->RemoveMaterial(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxScene, sipName_RemoveMaterial, doc_FbxScene_RemoveMaterial);

    return NULL;
}


PyDoc_STRVAR(doc_FbxScene_GetTextureCount, "GetTextureCount(self) -> int");

extern "C" {static PyObject *meth_FbxScene_GetTextureCount(PyObject *, PyObject *);}
static PyObject *meth_FbxScene_GetTextureCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxScene *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxScene, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->GetTextureCount();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxScene, sipName_GetTextureCount, doc_FbxScene_GetTextureCount);

    return NULL;
}


PyDoc_STRVAR(doc_FbxScene_GetTexture, "GetTexture(self, int) -> FbxTexture\n"
    "GetTexture(self, str) -> FbxTexture");

extern "C" {static PyObject *meth_FbxScene_GetTexture(PyObject *, PyObject *);}
static PyObject *meth_FbxScene_GetTexture(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
         ::FbxScene *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_FbxScene, &sipCpp, &a0))
        {
             ::FbxTexture*sipRes;

            sipRes = sipCpp->GetTexture(a0);

            return sipConvertFromType(sipRes,sipType_FbxTexture,NULL);
        }
    }

    {
        char* a0;
        PyObject *a0Keep;
         ::FbxScene *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BA8", &sipSelf, sipType_FbxScene, &sipCpp, &a0Keep, &a0))
        {
             ::FbxTexture*sipRes;

            sipRes = sipCpp->GetTexture(a0);
            Py_DECREF(a0Keep);

            return sipConvertFromType(sipRes,sipType_FbxTexture,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxScene, sipName_GetTexture, doc_FbxScene_GetTexture);

    return NULL;
}


PyDoc_STRVAR(doc_FbxScene_AddTexture, "AddTexture(self, FbxTexture) -> bool");

extern "C" {static PyObject *meth_FbxScene_AddTexture(PyObject *, PyObject *);}
static PyObject *meth_FbxScene_AddTexture(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxTexture* a0;
         ::FbxScene *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_FbxScene, &sipCpp, sipType_FbxTexture, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->AddTexture(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxScene, sipName_AddTexture, doc_FbxScene_AddTexture);

    return NULL;
}


PyDoc_STRVAR(doc_FbxScene_RemoveTexture, "RemoveTexture(self, FbxTexture) -> bool");

extern "C" {static PyObject *meth_FbxScene_RemoveTexture(PyObject *, PyObject *);}
static PyObject *meth_FbxScene_RemoveTexture(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxTexture* a0;
         ::FbxScene *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_FbxScene, &sipCpp, sipType_FbxTexture, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->RemoveTexture(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxScene, sipName_RemoveTexture, doc_FbxScene_RemoveTexture);

    return NULL;
}


PyDoc_STRVAR(doc_FbxScene_GetNodeCount, "GetNodeCount(self) -> int");

extern "C" {static PyObject *meth_FbxScene_GetNodeCount(PyObject *, PyObject *);}
static PyObject *meth_FbxScene_GetNodeCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxScene *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxScene, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->GetNodeCount();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxScene, sipName_GetNodeCount, doc_FbxScene_GetNodeCount);

    return NULL;
}


PyDoc_STRVAR(doc_FbxScene_GetNode, "GetNode(self, int) -> FbxNode");

extern "C" {static PyObject *meth_FbxScene_GetNode(PyObject *, PyObject *);}
static PyObject *meth_FbxScene_GetNode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
         ::FbxScene *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_FbxScene, &sipCpp, &a0))
        {
             ::FbxNode*sipRes;

            sipRes = sipCpp->GetNode(a0);

            return sipConvertFromType(sipRes,sipType_FbxNode,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxScene, sipName_GetNode, doc_FbxScene_GetNode);

    return NULL;
}


PyDoc_STRVAR(doc_FbxScene_AddNode, "AddNode(self, FbxNode) -> bool");

extern "C" {static PyObject *meth_FbxScene_AddNode(PyObject *, PyObject *);}
static PyObject *meth_FbxScene_AddNode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxNode* a0;
         ::FbxScene *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_FbxScene, &sipCpp, sipType_FbxNode, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->AddNode(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxScene, sipName_AddNode, doc_FbxScene_AddNode);

    return NULL;
}


PyDoc_STRVAR(doc_FbxScene_RemoveNode, "RemoveNode(self, FbxNode) -> bool");

extern "C" {static PyObject *meth_FbxScene_RemoveNode(PyObject *, PyObject *);}
static PyObject *meth_FbxScene_RemoveNode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxNode* a0;
         ::FbxScene *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_FbxScene, &sipCpp, sipType_FbxNode, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->RemoveNode(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxScene, sipName_RemoveNode, doc_FbxScene_RemoveNode);

    return NULL;
}


PyDoc_STRVAR(doc_FbxScene_GetCurveOnSurfaceCount, "GetCurveOnSurfaceCount(self) -> int");

extern "C" {static PyObject *meth_FbxScene_GetCurveOnSurfaceCount(PyObject *, PyObject *);}
static PyObject *meth_FbxScene_GetCurveOnSurfaceCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxScene *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxScene, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->GetCurveOnSurfaceCount();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxScene, sipName_GetCurveOnSurfaceCount, doc_FbxScene_GetCurveOnSurfaceCount);

    return NULL;
}


PyDoc_STRVAR(doc_FbxScene_FindNodeByName, "FindNodeByName(self, FbxString) -> FbxNode");

extern "C" {static PyObject *meth_FbxScene_FindNodeByName(PyObject *, PyObject *);}
static PyObject *meth_FbxScene_FindNodeByName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::FbxString* a0;
        int a0State = 0;
         ::FbxScene *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_FbxScene, &sipCpp, sipType_FbxString, &a0, &a0State))
        {
             ::FbxNode*sipRes;

            sipRes = sipCpp->FindNodeByName(*a0);
            sipReleaseType(const_cast< ::FbxString *>(a0),sipType_FbxString,a0State);

            return sipConvertFromType(sipRes,sipType_FbxNode,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxScene, sipName_FindNodeByName, doc_FbxScene_FindNodeByName);

    return NULL;
}


PyDoc_STRVAR(doc_FbxScene_GetGeometryCount, "GetGeometryCount(self) -> int");

extern "C" {static PyObject *meth_FbxScene_GetGeometryCount(PyObject *, PyObject *);}
static PyObject *meth_FbxScene_GetGeometryCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxScene *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxScene, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->GetGeometryCount();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxScene, sipName_GetGeometryCount, doc_FbxScene_GetGeometryCount);

    return NULL;
}


PyDoc_STRVAR(doc_FbxScene_GetGeometry, "GetGeometry(self, int) -> FbxGeometry");

extern "C" {static PyObject *meth_FbxScene_GetGeometry(PyObject *, PyObject *);}
static PyObject *meth_FbxScene_GetGeometry(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
         ::FbxScene *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_FbxScene, &sipCpp, &a0))
        {
             ::FbxGeometry*sipRes;

            sipRes = sipCpp->GetGeometry(a0);

            return sipConvertFromType(sipRes,sipType_FbxGeometry,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxScene, sipName_GetGeometry, doc_FbxScene_GetGeometry);

    return NULL;
}


PyDoc_STRVAR(doc_FbxScene_AddGeometry, "AddGeometry(self, FbxGeometry) -> bool");

extern "C" {static PyObject *meth_FbxScene_AddGeometry(PyObject *, PyObject *);}
static PyObject *meth_FbxScene_AddGeometry(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxGeometry* a0;
         ::FbxScene *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_FbxScene, &sipCpp, sipType_FbxGeometry, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->AddGeometry(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxScene, sipName_AddGeometry, doc_FbxScene_AddGeometry);

    return NULL;
}


PyDoc_STRVAR(doc_FbxScene_RemoveGeometry, "RemoveGeometry(self, FbxGeometry) -> bool");

extern "C" {static PyObject *meth_FbxScene_RemoveGeometry(PyObject *, PyObject *);}
static PyObject *meth_FbxScene_RemoveGeometry(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxGeometry* a0;
         ::FbxScene *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_FbxScene, &sipCpp, sipType_FbxGeometry, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->RemoveGeometry(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxScene, sipName_RemoveGeometry, doc_FbxScene_RemoveGeometry);

    return NULL;
}


PyDoc_STRVAR(doc_FbxScene_GetVideoCount, "GetVideoCount(self) -> int");

extern "C" {static PyObject *meth_FbxScene_GetVideoCount(PyObject *, PyObject *);}
static PyObject *meth_FbxScene_GetVideoCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxScene *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxScene, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->GetVideoCount();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxScene, sipName_GetVideoCount, doc_FbxScene_GetVideoCount);

    return NULL;
}


PyDoc_STRVAR(doc_FbxScene_GetVideo, "GetVideo(self, int) -> FbxVideo");

extern "C" {static PyObject *meth_FbxScene_GetVideo(PyObject *, PyObject *);}
static PyObject *meth_FbxScene_GetVideo(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
         ::FbxScene *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_FbxScene, &sipCpp, &a0))
        {
             ::FbxVideo*sipRes;

            sipRes = sipCpp->GetVideo(a0);

            return sipConvertFromType(sipRes,sipType_FbxVideo,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxScene, sipName_GetVideo, doc_FbxScene_GetVideo);

    return NULL;
}


PyDoc_STRVAR(doc_FbxScene_AddVideo, "AddVideo(self, FbxVideo) -> bool");

extern "C" {static PyObject *meth_FbxScene_AddVideo(PyObject *, PyObject *);}
static PyObject *meth_FbxScene_AddVideo(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxVideo* a0;
         ::FbxScene *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_FbxScene, &sipCpp, sipType_FbxVideo, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->AddVideo(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxScene, sipName_AddVideo, doc_FbxScene_AddVideo);

    return NULL;
}


PyDoc_STRVAR(doc_FbxScene_RemoveVideo, "RemoveVideo(self, FbxVideo) -> bool");

extern "C" {static PyObject *meth_FbxScene_RemoveVideo(PyObject *, PyObject *);}
static PyObject *meth_FbxScene_RemoveVideo(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxVideo* a0;
         ::FbxScene *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_FbxScene, &sipCpp, sipType_FbxVideo, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->RemoveVideo(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxScene, sipName_RemoveVideo, doc_FbxScene_RemoveVideo);

    return NULL;
}


PyDoc_STRVAR(doc_FbxScene_SetCurrentAnimationStack, "SetCurrentAnimationStack(self, FbxAnimStack)");

extern "C" {static PyObject *meth_FbxScene_SetCurrentAnimationStack(PyObject *, PyObject *);}
static PyObject *meth_FbxScene_SetCurrentAnimationStack(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxAnimStack* a0;
         ::FbxScene *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_FbxScene, &sipCpp, sipType_FbxAnimStack, &a0))
        {
            sipCpp->SetCurrentAnimationStack(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxScene, sipName_SetCurrentAnimationStack, doc_FbxScene_SetCurrentAnimationStack);

    return NULL;
}


PyDoc_STRVAR(doc_FbxScene_GetCurrentAnimationStack, "GetCurrentAnimationStack(self) -> FbxAnimStack");

extern "C" {static PyObject *meth_FbxScene_GetCurrentAnimationStack(PyObject *, PyObject *);}
static PyObject *meth_FbxScene_GetCurrentAnimationStack(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxScene *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxScene, &sipCpp))
        {
             ::FbxAnimStack*sipRes;

            sipRes = sipCpp->GetCurrentAnimationStack();

            return sipConvertFromType(sipRes,sipType_FbxAnimStack,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxScene, sipName_GetCurrentAnimationStack, doc_FbxScene_GetCurrentAnimationStack);

    return NULL;
}


PyDoc_STRVAR(doc_FbxScene_SetAnimationEvaluator, "SetAnimationEvaluator(self, FbxAnimEvaluator)");

extern "C" {static PyObject *meth_FbxScene_SetAnimationEvaluator(PyObject *, PyObject *);}
static PyObject *meth_FbxScene_SetAnimationEvaluator(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxAnimEvaluator* a0;
         ::FbxScene *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_FbxScene, &sipCpp, sipType_FbxAnimEvaluator, &a0))
        {
            sipCpp->SetAnimationEvaluator(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxScene, sipName_SetAnimationEvaluator, doc_FbxScene_SetAnimationEvaluator);

    return NULL;
}


PyDoc_STRVAR(doc_FbxScene_GetAnimationEvaluator, "GetAnimationEvaluator(self) -> FbxAnimEvaluator");

extern "C" {static PyObject *meth_FbxScene_GetAnimationEvaluator(PyObject *, PyObject *);}
static PyObject *meth_FbxScene_GetAnimationEvaluator(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxScene *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxScene, &sipCpp))
        {
             ::FbxAnimEvaluator*sipRes;

            sipRes = sipCpp->GetAnimationEvaluator();

            return sipConvertFromType(sipRes,sipType_FbxAnimEvaluator,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxScene, sipName_GetAnimationEvaluator, doc_FbxScene_GetAnimationEvaluator);

    return NULL;
}


PyDoc_STRVAR(doc_FbxScene_ComputeBoundingBoxMinMaxCenter, "ComputeBoundingBoxMinMaxCenter(self, FbxVector4, FbxVector4, FbxVector4, bool = False, FbxTime = FBXSDK_TIME_INFINITE) -> bool");

extern "C" {static PyObject *meth_FbxScene_ComputeBoundingBoxMinMaxCenter(PyObject *, PyObject *);}
static PyObject *meth_FbxScene_ComputeBoundingBoxMinMaxCenter(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxVector4* a0;
         ::FbxVector4* a1;
         ::FbxVector4* a2;
        bool a3 = 0;
        const  ::FbxTime& a4def = FBXSDK_TIME_INFINITE;
        const  ::FbxTime* a4 = &a4def;
         ::FbxScene *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9J9J9|bJ9", &sipSelf, sipType_FbxScene, &sipCpp, sipType_FbxVector4, &a0, sipType_FbxVector4, &a1, sipType_FbxVector4, &a2, &a3, sipType_FbxTime, &a4))
        {
            bool sipRes;

            sipRes = sipCpp->ComputeBoundingBoxMinMaxCenter(*a0,*a1,*a2,a3,*a4);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxScene, sipName_ComputeBoundingBoxMinMaxCenter, doc_FbxScene_ComputeBoundingBoxMinMaxCenter);

    return NULL;
}


PyDoc_STRVAR(doc_FbxScene_SyncShowPropertyForInstance, "SyncShowPropertyForInstance(self)");

extern "C" {static PyObject *meth_FbxScene_SyncShowPropertyForInstance(PyObject *, PyObject *);}
static PyObject *meth_FbxScene_SyncShowPropertyForInstance(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxScene *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxScene, &sipCpp))
        {
            sipCpp->SyncShowPropertyForInstance();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxScene, sipName_SyncShowPropertyForInstance, doc_FbxScene_SyncShowPropertyForInstance);

    return NULL;
}


PyDoc_STRVAR(doc_FbxScene_GlobalLightSettings, "GlobalLightSettings(self) -> FbxGlobalLightSettings");

extern "C" {static PyObject *meth_FbxScene_GlobalLightSettings(PyObject *, PyObject *);}
static PyObject *meth_FbxScene_GlobalLightSettings(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxScene *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxScene, &sipCpp))
        {
             ::FbxGlobalLightSettings*sipRes;

            sipRes = &sipCpp->GlobalLightSettings();

            return sipConvertFromType(sipRes,sipType_FbxGlobalLightSettings,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxScene, sipName_GlobalLightSettings, doc_FbxScene_GlobalLightSettings);

    return NULL;
}


PyDoc_STRVAR(doc_FbxScene_GlobalCameraSettings, "GlobalCameraSettings(self) -> FbxGlobalCameraSettings");

extern "C" {static PyObject *meth_FbxScene_GlobalCameraSettings(PyObject *, PyObject *);}
static PyObject *meth_FbxScene_GlobalCameraSettings(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxScene *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxScene, &sipCpp))
        {
             ::FbxGlobalCameraSettings*sipRes;

            sipRes = &sipCpp->GlobalCameraSettings();

            return sipConvertFromType(sipRes,sipType_FbxGlobalCameraSettings,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxScene, sipName_GlobalCameraSettings, doc_FbxScene_GlobalCameraSettings);

    return NULL;
}


extern "C" {static PyObject *slot_FbxScene___ne__(PyObject *,PyObject *);}
static PyObject *slot_FbxScene___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::FbxScene *sipCpp = reinterpret_cast< ::FbxScene *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_FbxScene));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const  ::FbxScene* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_FbxScene, &a0))
        {
            bool sipRes;

            sipRes = !sipCpp-> ::FbxScene::operator==(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_fbx, ne_slot, sipType_FbxScene, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_FbxScene___eq__(PyObject *,PyObject *);}
static PyObject *slot_FbxScene___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::FbxScene *sipCpp = reinterpret_cast< ::FbxScene *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_FbxScene));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const  ::FbxScene* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_FbxScene, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::FbxScene::operator==(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_fbx, eq_slot, sipType_FbxScene, sipSelf, sipArg);
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_FbxScene(void *, const sipTypeDef *);}
static void *cast_FbxScene(void *sipCppV, const sipTypeDef *targetType)
{
     ::FbxScene *sipCpp = reinterpret_cast< ::FbxScene *>(sipCppV);

    if (targetType == sipType_FbxDocument)
        return static_cast< ::FbxDocument *>(sipCpp);

    if (targetType == sipType_FbxCollection)
        return static_cast< ::FbxCollection *>(sipCpp);

    if (targetType == sipType_FbxObject)
        return static_cast< ::FbxObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_FbxScene(void *, int);}
static void release_FbxScene(void *, int)
{
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_FbxScene[] = {{129, 255, 1}};


/* Define this type's Python slots. */
static sipPySlotDef slots_FbxScene[] = {
    {(void *)slot_FbxScene___ne__, ne_slot},
    {(void *)slot_FbxScene___eq__, eq_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_FbxScene[] = {
    {SIP_MLNAME_CAST(sipName_AddGeometry), meth_FbxScene_AddGeometry, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxScene_AddGeometry)},
    {SIP_MLNAME_CAST(sipName_AddMaterial), meth_FbxScene_AddMaterial, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxScene_AddMaterial)},
    {SIP_MLNAME_CAST(sipName_AddNode), meth_FbxScene_AddNode, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxScene_AddNode)},
    {SIP_MLNAME_CAST(sipName_AddPose), meth_FbxScene_AddPose, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxScene_AddPose)},
    {SIP_MLNAME_CAST(sipName_AddTexture), meth_FbxScene_AddTexture, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxScene_AddTexture)},
    {SIP_MLNAME_CAST(sipName_AddVideo), meth_FbxScene_AddVideo, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxScene_AddVideo)},
    {SIP_MLNAME_CAST(sipName_Clear), meth_FbxScene_Clear, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxScene_Clear)},
    {SIP_MLNAME_CAST(sipName_ComputeBoundingBoxMinMaxCenter), meth_FbxScene_ComputeBoundingBoxMinMaxCenter, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxScene_ComputeBoundingBoxMinMaxCenter)},
    {SIP_MLNAME_CAST(sipName_Create), meth_FbxScene_Create, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxScene_Create)},
    {SIP_MLNAME_CAST(sipName_CreateCharacter), meth_FbxScene_CreateCharacter, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxScene_CreateCharacter)},
    {SIP_MLNAME_CAST(sipName_CreateCharacterPose), meth_FbxScene_CreateCharacterPose, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxScene_CreateCharacterPose)},
    {SIP_MLNAME_CAST(sipName_CreateControlSetPlug), meth_FbxScene_CreateControlSetPlug, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxScene_CreateControlSetPlug)},
    {SIP_MLNAME_CAST(sipName_DestroyCharacter), meth_FbxScene_DestroyCharacter, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxScene_DestroyCharacter)},
    {SIP_MLNAME_CAST(sipName_DestroyCharacterPose), meth_FbxScene_DestroyCharacterPose, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxScene_DestroyCharacterPose)},
    {SIP_MLNAME_CAST(sipName_DestroyControlSetPlug), meth_FbxScene_DestroyControlSetPlug, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxScene_DestroyControlSetPlug)},
    {SIP_MLNAME_CAST(sipName_FillMaterialArray), meth_FbxScene_FillMaterialArray, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxScene_FillMaterialArray)},
    {SIP_MLNAME_CAST(sipName_FillTextureArray), meth_FbxScene_FillTextureArray, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxScene_FillTextureArray)},
    {SIP_MLNAME_CAST(sipName_FindNodeByName), meth_FbxScene_FindNodeByName, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxScene_FindNodeByName)},
    {SIP_MLNAME_CAST(sipName_GetAnimationEvaluator), meth_FbxScene_GetAnimationEvaluator, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxScene_GetAnimationEvaluator)},
    {SIP_MLNAME_CAST(sipName_GetCharacter), meth_FbxScene_GetCharacter, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxScene_GetCharacter)},
    {SIP_MLNAME_CAST(sipName_GetCharacterCount), meth_FbxScene_GetCharacterCount, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxScene_GetCharacterCount)},
    {SIP_MLNAME_CAST(sipName_GetCharacterPose), meth_FbxScene_GetCharacterPose, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxScene_GetCharacterPose)},
    {SIP_MLNAME_CAST(sipName_GetCharacterPoseCount), meth_FbxScene_GetCharacterPoseCount, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxScene_GetCharacterPoseCount)},
    {SIP_MLNAME_CAST(sipName_GetClassId), meth_FbxScene_GetClassId, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxScene_GetClassId)},
    {SIP_MLNAME_CAST(sipName_GetControlSetPlugCount), meth_FbxScene_GetControlSetPlugCount, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxScene_GetControlSetPlugCount)},
    {SIP_MLNAME_CAST(sipName_GetCurrentAnimationStack), meth_FbxScene_GetCurrentAnimationStack, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxScene_GetCurrentAnimationStack)},
    {SIP_MLNAME_CAST(sipName_GetCurveOnSurfaceCount), meth_FbxScene_GetCurveOnSurfaceCount, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxScene_GetCurveOnSurfaceCount)},
    {SIP_MLNAME_CAST(sipName_GetGeometry), meth_FbxScene_GetGeometry, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxScene_GetGeometry)},
    {SIP_MLNAME_CAST(sipName_GetGeometryCount), meth_FbxScene_GetGeometryCount, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxScene_GetGeometryCount)},
    {SIP_MLNAME_CAST(sipName_GetGlobalSettings), meth_FbxScene_GetGlobalSettings, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxScene_GetGlobalSettings)},
    {SIP_MLNAME_CAST(sipName_GetMaterial), meth_FbxScene_GetMaterial, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxScene_GetMaterial)},
    {SIP_MLNAME_CAST(sipName_GetMaterialCount), meth_FbxScene_GetMaterialCount, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxScene_GetMaterialCount)},
    {SIP_MLNAME_CAST(sipName_GetNode), meth_FbxScene_GetNode, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxScene_GetNode)},
    {SIP_MLNAME_CAST(sipName_GetNodeCount), meth_FbxScene_GetNodeCount, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxScene_GetNodeCount)},
    {SIP_MLNAME_CAST(sipName_GetPose), meth_FbxScene_GetPose, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxScene_GetPose)},
    {SIP_MLNAME_CAST(sipName_GetPoseCount), meth_FbxScene_GetPoseCount, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxScene_GetPoseCount)},
    {SIP_MLNAME_CAST(sipName_GetRootNode), meth_FbxScene_GetRootNode, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxScene_GetRootNode)},
    {SIP_MLNAME_CAST(sipName_GetSceneInfo), meth_FbxScene_GetSceneInfo, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxScene_GetSceneInfo)},
    {SIP_MLNAME_CAST(sipName_GetTexture), meth_FbxScene_GetTexture, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxScene_GetTexture)},
    {SIP_MLNAME_CAST(sipName_GetTextureCount), meth_FbxScene_GetTextureCount, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxScene_GetTextureCount)},
    {SIP_MLNAME_CAST(sipName_GetVideo), meth_FbxScene_GetVideo, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxScene_GetVideo)},
    {SIP_MLNAME_CAST(sipName_GetVideoCount), meth_FbxScene_GetVideoCount, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxScene_GetVideoCount)},
    {SIP_MLNAME_CAST(sipName_GlobalCameraSettings), meth_FbxScene_GlobalCameraSettings, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxScene_GlobalCameraSettings)},
    {SIP_MLNAME_CAST(sipName_GlobalLightSettings), meth_FbxScene_GlobalLightSettings, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxScene_GlobalLightSettings)},
    {SIP_MLNAME_CAST(sipName_RemoveGeometry), meth_FbxScene_RemoveGeometry, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxScene_RemoveGeometry)},
    {SIP_MLNAME_CAST(sipName_RemoveMaterial), meth_FbxScene_RemoveMaterial, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxScene_RemoveMaterial)},
    {SIP_MLNAME_CAST(sipName_RemoveNode), meth_FbxScene_RemoveNode, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxScene_RemoveNode)},
    {SIP_MLNAME_CAST(sipName_RemovePose), meth_FbxScene_RemovePose, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxScene_RemovePose)},
    {SIP_MLNAME_CAST(sipName_RemoveTexture), meth_FbxScene_RemoveTexture, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxScene_RemoveTexture)},
    {SIP_MLNAME_CAST(sipName_RemoveVideo), meth_FbxScene_RemoveVideo, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxScene_RemoveVideo)},
    {SIP_MLNAME_CAST(sipName_SetAnimationEvaluator), meth_FbxScene_SetAnimationEvaluator, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxScene_SetAnimationEvaluator)},
    {SIP_MLNAME_CAST(sipName_SetCurrentAnimationStack), meth_FbxScene_SetCurrentAnimationStack, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxScene_SetCurrentAnimationStack)},
    {SIP_MLNAME_CAST(sipName_SetSceneInfo), meth_FbxScene_SetSceneInfo, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxScene_SetSceneInfo)},
    {SIP_MLNAME_CAST(sipName_SyncShowPropertyForInstance), meth_FbxScene_SyncShowPropertyForInstance, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxScene_SyncShowPropertyForInstance)}
};


extern "C" {static PyObject *varget_FbxScene_ClassId(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxScene_ClassId(void *, PyObject *, PyObject *)
{
     ::FbxClassId*sipVal;

    sipVal = & ::FbxScene::ClassId;

    return sipConvertFromType(sipVal, sipType_FbxClassId, NULL);
}


extern "C" {static int varset_FbxScene_ClassId(void *, PyObject *, PyObject *);}
static int varset_FbxScene_ClassId(void *, PyObject *sipPy, PyObject *)
{
     ::FbxClassId*sipVal;
    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxClassId *>(sipForceConvertToType(sipPy,sipType_FbxClassId,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

     ::FbxScene::ClassId = *sipVal;

    return 0;
}

sipVariableDef variables_FbxScene[] = {
    {ClassVariable, sipName_ClassId, (PyMethodDef *)varget_FbxScene_ClassId, (PyMethodDef *)varset_FbxScene_ClassId, NULL, NULL},
};


sipClassTypeDef sipTypeDef_fbx_FbxScene = {
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_FbxScene,
        {0},
        0
    },
    {
        sipNameNr_FbxScene,
        {0, 0, 1},
        54, methods_FbxScene,
        0, 0,
        1, variables_FbxScene,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    0,
    -1,
    -1,
    supers_FbxScene,
    slots_FbxScene,
    0,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    0,
    0,
    0,
    0,
    release_FbxScene,
    cast_FbxScene,
    0,
    0,
    0,
    0,
    0,
    0
};
