/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.3
 *
 * Copyright (C) 2009 Autodesk, Inc. and/or its licensors.
 * All Rights Reserved.
 * 
 * The coded instructions, statements, computer programs, and/or related material 
 * (collectively the "Data") in these files contain unpublished information 
 * proprietary to Autodesk, Inc. and/or its licensors, which is protected by 
 * Canada and United States of America federal copyright law and by international 
 * treaties. 
 * 
 * The Data may not be disclosed or distributed to third parties, in whole or in
 * part, without the prior written consent of Autodesk, Inc. ("Autodesk").
 * 
 * THE DATA IS PROVIDED "AS IS" AND WITHOUT WARRANTY.
 * ALL WARRANTIES ARE EXPRESSLY EXCLUDED AND DISCLAIMED. AUTODESK MAKES NO
 * WARRANTY OF ANY KIND WITH RESPECT TO THE DATA, EXPRESS, IMPLIED OR ARISING
 * BY CUSTOM OR TRADE USAGE, AND DISCLAIMS ANY IMPLIED WARRANTIES OF TITLE, 
 * NON-INFRINGEMENT, MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE OR USE. 
 * WITHOUT LIMITING THE FOREGOING, AUTODESK DOES NOT WARRANT THAT THE OPERATION
 * OF THE DATA WILL BE UNINTERRUPTED OR ERROR FREE. 
 * 
 * IN NO EVENT SHALL AUTODESK, ITS AFFILIATES, PARENT COMPANIES, LICENSORS
 * OR SUPPLIERS ("AUTODESK GROUP") BE LIABLE FOR ANY LOSSES, DAMAGES OR EXPENSES
 * OF ANY KIND (INCLUDING WITHOUT LIMITATION PUNITIVE OR MULTIPLE DAMAGES OR OTHER
 * SPECIAL, DIRECT, INDIRECT, EXEMPLARY, INCIDENTAL, LOSS OF PROFITS, REVENUE
 * OR DATA, COST OF COVER OR CONSEQUENTIAL LOSSES OR DAMAGES OF ANY KIND),
 * HOWEVER CAUSED, AND REGARDLESS OF THE THEORY OF LIABILITY, WHETHER DERIVED
 * FROM CONTRACT, TORT (INCLUDING, BUT NOT LIMITED TO, NEGLIGENCE), OR OTHERWISE,
 * ARISING OUT OF OR RELATING TO THE DATA OR ITS USE OR ANY OTHER PERFORMANCE,
 * WHETHER OR NOT AUTODESK HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH LOSS
 * OR DAMAGE. 
 */

#include "sipAPIfbx.h"




class sipFbxStatistics : public  ::FbxStatistics
{
public:
    sipFbxStatistics();
    sipFbxStatistics(const  ::FbxStatistics&);
    ~sipFbxStatistics();

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipFbxStatistics(const sipFbxStatistics &);
    sipFbxStatistics &operator = (const sipFbxStatistics &);
};

sipFbxStatistics::sipFbxStatistics():  ::FbxStatistics(), sipPySelf(0)
{
}

sipFbxStatistics::sipFbxStatistics(const  ::FbxStatistics& a0):  ::FbxStatistics(a0), sipPySelf(0)
{
}

sipFbxStatistics::~sipFbxStatistics()
{
    sipInstanceDestroyed(sipPySelf);
}


PyDoc_STRVAR(doc_FbxStatistics_Reset, "Reset(self)");

extern "C" {static PyObject *meth_FbxStatistics_Reset(PyObject *, PyObject *);}
static PyObject *meth_FbxStatistics_Reset(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxStatistics *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxStatistics, &sipCpp))
        {
            sipCpp->Reset();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxStatistics, sipName_Reset, doc_FbxStatistics_Reset);

    return NULL;
}


PyDoc_STRVAR(doc_FbxStatistics_GetNbItems, "GetNbItems(self) -> int");

extern "C" {static PyObject *meth_FbxStatistics_GetNbItems(PyObject *, PyObject *);}
static PyObject *meth_FbxStatistics_GetNbItems(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::FbxStatistics *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxStatistics, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->GetNbItems();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxStatistics, sipName_GetNbItems, doc_FbxStatistics_GetNbItems);

    return NULL;
}


PyDoc_STRVAR(doc_FbxStatistics_GetItemPair, "GetItemPair(self, int, FbxString) -> Tuple[bool, int]");

extern "C" {static PyObject *meth_FbxStatistics_GetItemPair(PyObject *, PyObject *);}
static PyObject *meth_FbxStatistics_GetItemPair(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
         ::FbxString* a1;
        int a1State = 0;
        int a2;
        const  ::FbxStatistics *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ1", &sipSelf, sipType_FbxStatistics, &sipCpp, &a0, sipType_FbxString, &a1, &a1State))
        {
            bool sipRes;

            sipRes = sipCpp->GetItemPair(a0,*a1,a2);
            sipReleaseType(a1,sipType_FbxString,a1State);

            return sipBuildResult(0,"(bi)",sipRes,a2);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxStatistics, sipName_GetItemPair, doc_FbxStatistics_GetItemPair);

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_FbxStatistics(void *, int);}
static void release_FbxStatistics(void *sipCppV, int sipState)
{
    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipFbxStatistics *>(sipCppV);
    else
        delete reinterpret_cast< ::FbxStatistics *>(sipCppV);
}


extern "C" {static void assign_FbxStatistics(void *, SIP_SSIZE_T, const void *);}
static void assign_FbxStatistics(void *sipDst, SIP_SSIZE_T sipDstIdx, const void *sipSrc)
{
    reinterpret_cast< ::FbxStatistics *>(sipDst)[sipDstIdx] = *reinterpret_cast<const  ::FbxStatistics *>(sipSrc);
}


extern "C" {static void *array_FbxStatistics(SIP_SSIZE_T);}
static void *array_FbxStatistics(SIP_SSIZE_T sipNrElem)
{
    return new  ::FbxStatistics[sipNrElem];
}


extern "C" {static void *copy_FbxStatistics(const void *, SIP_SSIZE_T);}
static void *copy_FbxStatistics(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::FbxStatistics(reinterpret_cast<const  ::FbxStatistics *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_FbxStatistics(sipSimpleWrapper *);}
static void dealloc_FbxStatistics(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipFbxStatistics *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_FbxStatistics(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_FbxStatistics(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_FbxStatistics(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipFbxStatistics *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            sipCpp = new sipFbxStatistics();

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const  ::FbxStatistics* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_FbxStatistics, &a0))
        {
            sipCpp = new sipFbxStatistics(*a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


static PyMethodDef methods_FbxStatistics[] = {
    {SIP_MLNAME_CAST(sipName_GetItemPair), meth_FbxStatistics_GetItemPair, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxStatistics_GetItemPair)},
    {SIP_MLNAME_CAST(sipName_GetNbItems), meth_FbxStatistics_GetNbItems, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxStatistics_GetNbItems)},
    {SIP_MLNAME_CAST(sipName_Reset), meth_FbxStatistics_Reset, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxStatistics_Reset)}
};

PyDoc_STRVAR(doc_FbxStatistics, "\1FbxStatistics()\n"
    "FbxStatistics(FbxStatistics)");


sipClassTypeDef sipTypeDef_fbx_FbxStatistics = {
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_FbxStatistics,
        {0},
        0
    },
    {
        sipNameNr_FbxStatistics,
        {0, 0, 1},
        3, methods_FbxStatistics,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_FbxStatistics,
    -1,
    -1,
    0,
    0,
    init_type_FbxStatistics,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_FbxStatistics,
    assign_FbxStatistics,
    array_FbxStatistics,
    copy_FbxStatistics,
    release_FbxStatistics,
    0,
    0,
    0,
    0,
    0,
    0,
    0
};
