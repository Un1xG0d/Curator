/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.3
 *
 * Copyright (C) 2009 Autodesk, Inc. and/or its licensors.
 * All Rights Reserved.
 * 
 * The coded instructions, statements, computer programs, and/or related material 
 * (collectively the "Data") in these files contain unpublished information 
 * proprietary to Autodesk, Inc. and/or its licensors, which is protected by 
 * Canada and United States of America federal copyright law and by international 
 * treaties. 
 * 
 * The Data may not be disclosed or distributed to third parties, in whole or in
 * part, without the prior written consent of Autodesk, Inc. ("Autodesk").
 * 
 * THE DATA IS PROVIDED "AS IS" AND WITHOUT WARRANTY.
 * ALL WARRANTIES ARE EXPRESSLY EXCLUDED AND DISCLAIMED. AUTODESK MAKES NO
 * WARRANTY OF ANY KIND WITH RESPECT TO THE DATA, EXPRESS, IMPLIED OR ARISING
 * BY CUSTOM OR TRADE USAGE, AND DISCLAIMS ANY IMPLIED WARRANTIES OF TITLE, 
 * NON-INFRINGEMENT, MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE OR USE. 
 * WITHOUT LIMITING THE FOREGOING, AUTODESK DOES NOT WARRANT THAT THE OPERATION
 * OF THE DATA WILL BE UNINTERRUPTED OR ERROR FREE. 
 * 
 * IN NO EVENT SHALL AUTODESK, ITS AFFILIATES, PARENT COMPANIES, LICENSORS
 * OR SUPPLIERS ("AUTODESK GROUP") BE LIABLE FOR ANY LOSSES, DAMAGES OR EXPENSES
 * OF ANY KIND (INCLUDING WITHOUT LIMITATION PUNITIVE OR MULTIPLE DAMAGES OR OTHER
 * SPECIAL, DIRECT, INDIRECT, EXEMPLARY, INCIDENTAL, LOSS OF PROFITS, REVENUE
 * OR DATA, COST OF COVER OR CONSEQUENTIAL LOSSES OR DAMAGES OF ANY KIND),
 * HOWEVER CAUSED, AND REGARDLESS OF THE THEORY OF LIABILITY, WHETHER DERIVED
 * FROM CONTRACT, TORT (INCLUDING, BUT NOT LIMITED TO, NEGLIGENCE), OR OTHERWISE,
 * ARISING OUT OF OR RELATING TO THE DATA OR ITS USE OR ANY OTHER PERFORMANCE,
 * WHETHER OR NOT AUTODESK HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH LOSS
 * OR DAMAGE. 
 */

#include "sipAPIfbx.h"




PyDoc_STRVAR(doc_FbxConstraintAim_Create, "Create(FbxManager, str) -> FbxConstraintAim\n"
    "Create(FbxObject, str) -> FbxConstraintAim");

extern "C" {static PyObject *meth_FbxConstraintAim_Create(PyObject *, PyObject *);}
static PyObject *meth_FbxConstraintAim_Create(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxManager* a0;
        const char* a1;
        PyObject *a1Keep;

        if (sipParseArgs(&sipParseErr, sipArgs, "J8A8", sipType_FbxManager, &a0, &a1Keep, &a1))
        {
             ::FbxConstraintAim*sipRes;

            sipRes =  ::FbxConstraintAim::Create(a0,a1);
            Py_DECREF(a1Keep);

            return sipConvertFromType(sipRes,sipType_FbxConstraintAim,NULL);
        }
    }

    {
         ::FbxObject* a0;
        const char* a1;
        PyObject *a1Keep;

        if (sipParseArgs(&sipParseErr, sipArgs, "J8A8", sipType_FbxObject, &a0, &a1Keep, &a1))
        {
             ::FbxConstraintAim*sipRes;

            sipRes =  ::FbxConstraintAim::Create(a0,a1);
            Py_DECREF(a1Keep);

            return sipConvertFromType(sipRes,sipType_FbxConstraintAim,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxConstraintAim, sipName_Create, doc_FbxConstraintAim_Create);

    return NULL;
}


PyDoc_STRVAR(doc_FbxConstraintAim_GetClassId, "GetClassId(self) -> FbxClassId");

extern "C" {static PyObject *meth_FbxConstraintAim_GetClassId(PyObject *, PyObject *);}
static PyObject *meth_FbxConstraintAim_GetClassId(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::FbxConstraintAim *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxConstraintAim, &sipCpp))
        {
             ::FbxClassId*sipRes;

            sipRes = new  ::FbxClassId((sipSelfWasArg ? sipCpp-> ::FbxConstraintAim::GetClassId() : sipCpp->GetClassId()));

            return sipConvertFromNewType(sipRes,sipType_FbxClassId,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxConstraintAim, sipName_GetClassId, doc_FbxConstraintAim_GetClassId);

    return NULL;
}


PyDoc_STRVAR(doc_FbxConstraintAim_AddConstraintSource, "AddConstraintSource(self, FbxObject, float = 100)");

extern "C" {static PyObject *meth_FbxConstraintAim_AddConstraintSource(PyObject *, PyObject *);}
static PyObject *meth_FbxConstraintAim_AddConstraintSource(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxObject* a0;
        double a1 = 100;
         ::FbxConstraintAim *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8|d", &sipSelf, sipType_FbxConstraintAim, &sipCpp, sipType_FbxObject, &a0, &a1))
        {
            sipCpp->AddConstraintSource(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxConstraintAim, sipName_AddConstraintSource, doc_FbxConstraintAim_AddConstraintSource);

    return NULL;
}


PyDoc_STRVAR(doc_FbxConstraintAim_GetConstraintSourceCount, "GetConstraintSourceCount(self) -> int");

extern "C" {static PyObject *meth_FbxConstraintAim_GetConstraintSourceCount(PyObject *, PyObject *);}
static PyObject *meth_FbxConstraintAim_GetConstraintSourceCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::FbxConstraintAim *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxConstraintAim, &sipCpp))
        {
            int sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::FbxConstraintAim::GetConstraintSourceCount() : sipCpp->GetConstraintSourceCount());

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxConstraintAim, sipName_GetConstraintSourceCount, doc_FbxConstraintAim_GetConstraintSourceCount);

    return NULL;
}


PyDoc_STRVAR(doc_FbxConstraintAim_GetConstraintSource, "GetConstraintSource(self, int) -> FbxObject");

extern "C" {static PyObject *meth_FbxConstraintAim_GetConstraintSource(PyObject *, PyObject *);}
static PyObject *meth_FbxConstraintAim_GetConstraintSource(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        const  ::FbxConstraintAim *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_FbxConstraintAim, &sipCpp, &a0))
        {
             ::FbxObject*sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::FbxConstraintAim::GetConstraintSource(a0) : sipCpp->GetConstraintSource(a0));

            return sipConvertFromType(sipRes,sipType_FbxObject,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxConstraintAim, sipName_GetConstraintSource, doc_FbxConstraintAim_GetConstraintSource);

    return NULL;
}


PyDoc_STRVAR(doc_FbxConstraintAim_SetConstrainedObject, "SetConstrainedObject(self, FbxObject)");

extern "C" {static PyObject *meth_FbxConstraintAim_SetConstrainedObject(PyObject *, PyObject *);}
static PyObject *meth_FbxConstraintAim_SetConstrainedObject(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxObject* a0;
         ::FbxConstraintAim *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_FbxConstraintAim, &sipCpp, sipType_FbxObject, &a0))
        {
            sipCpp->SetConstrainedObject(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxConstraintAim, sipName_SetConstrainedObject, doc_FbxConstraintAim_SetConstrainedObject);

    return NULL;
}


PyDoc_STRVAR(doc_FbxConstraintAim_GetConstrainedObject, "GetConstrainedObject(self) -> FbxObject");

extern "C" {static PyObject *meth_FbxConstraintAim_GetConstrainedObject(PyObject *, PyObject *);}
static PyObject *meth_FbxConstraintAim_GetConstrainedObject(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::FbxConstraintAim *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxConstraintAim, &sipCpp))
        {
             ::FbxObject*sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::FbxConstraintAim::GetConstrainedObject() : sipCpp->GetConstrainedObject());

            return sipConvertFromType(sipRes,sipType_FbxObject,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxConstraintAim, sipName_GetConstrainedObject, doc_FbxConstraintAim_GetConstrainedObject);

    return NULL;
}


PyDoc_STRVAR(doc_FbxConstraintAim_SetWorldUpObject, "SetWorldUpObject(self, FbxObject)");

extern "C" {static PyObject *meth_FbxConstraintAim_SetWorldUpObject(PyObject *, PyObject *);}
static PyObject *meth_FbxConstraintAim_SetWorldUpObject(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxObject* a0;
         ::FbxConstraintAim *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_FbxConstraintAim, &sipCpp, sipType_FbxObject, &a0))
        {
            sipCpp->SetWorldUpObject(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxConstraintAim, sipName_SetWorldUpObject, doc_FbxConstraintAim_SetWorldUpObject);

    return NULL;
}


PyDoc_STRVAR(doc_FbxConstraintAim_GetWorldUpObject, "GetWorldUpObject(self) -> FbxObject");

extern "C" {static PyObject *meth_FbxConstraintAim_GetWorldUpObject(PyObject *, PyObject *);}
static PyObject *meth_FbxConstraintAim_GetWorldUpObject(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::FbxConstraintAim *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxConstraintAim, &sipCpp))
        {
             ::FbxObject*sipRes;

            sipRes = sipCpp->GetWorldUpObject();

            return sipConvertFromType(sipRes,sipType_FbxObject,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxConstraintAim, sipName_GetWorldUpObject, doc_FbxConstraintAim_GetWorldUpObject);

    return NULL;
}


extern "C" {static PyObject *slot_FbxConstraintAim___ne__(PyObject *,PyObject *);}
static PyObject *slot_FbxConstraintAim___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::FbxConstraintAim *sipCpp = reinterpret_cast< ::FbxConstraintAim *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_FbxConstraintAim));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const  ::FbxConstraintAim* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_FbxConstraintAim, &a0))
        {
            bool sipRes;

            sipRes = !sipCpp-> ::FbxConstraintAim::operator==(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_fbx, ne_slot, sipType_FbxConstraintAim, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_FbxConstraintAim___eq__(PyObject *,PyObject *);}
static PyObject *slot_FbxConstraintAim___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::FbxConstraintAim *sipCpp = reinterpret_cast< ::FbxConstraintAim *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_FbxConstraintAim));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const  ::FbxConstraintAim* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_FbxConstraintAim, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::FbxConstraintAim::operator==(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_fbx, eq_slot, sipType_FbxConstraintAim, sipSelf, sipArg);
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_FbxConstraintAim(void *, const sipTypeDef *);}
static void *cast_FbxConstraintAim(void *sipCppV, const sipTypeDef *targetType)
{
     ::FbxConstraintAim *sipCpp = reinterpret_cast< ::FbxConstraintAim *>(sipCppV);

    if (targetType == sipType_FbxConstraint)
        return static_cast< ::FbxConstraint *>(sipCpp);

    if (targetType == sipType_FbxObject)
        return static_cast< ::FbxObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_FbxConstraintAim(void *, int);}
static void release_FbxConstraintAim(void *, int)
{
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_FbxConstraintAim[] = {{106, 255, 1}};


/* Define this type's Python slots. */
static sipPySlotDef slots_FbxConstraintAim[] = {
    {(void *)slot_FbxConstraintAim___ne__, ne_slot},
    {(void *)slot_FbxConstraintAim___eq__, eq_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_FbxConstraintAim[] = {
    {SIP_MLNAME_CAST(sipName_AddConstraintSource), meth_FbxConstraintAim_AddConstraintSource, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxConstraintAim_AddConstraintSource)},
    {SIP_MLNAME_CAST(sipName_Create), meth_FbxConstraintAim_Create, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxConstraintAim_Create)},
    {SIP_MLNAME_CAST(sipName_GetClassId), meth_FbxConstraintAim_GetClassId, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxConstraintAim_GetClassId)},
    {SIP_MLNAME_CAST(sipName_GetConstrainedObject), meth_FbxConstraintAim_GetConstrainedObject, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxConstraintAim_GetConstrainedObject)},
    {SIP_MLNAME_CAST(sipName_GetConstraintSource), meth_FbxConstraintAim_GetConstraintSource, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxConstraintAim_GetConstraintSource)},
    {SIP_MLNAME_CAST(sipName_GetConstraintSourceCount), meth_FbxConstraintAim_GetConstraintSourceCount, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxConstraintAim_GetConstraintSourceCount)},
    {SIP_MLNAME_CAST(sipName_GetWorldUpObject), meth_FbxConstraintAim_GetWorldUpObject, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxConstraintAim_GetWorldUpObject)},
    {SIP_MLNAME_CAST(sipName_SetConstrainedObject), meth_FbxConstraintAim_SetConstrainedObject, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxConstraintAim_SetConstrainedObject)},
    {SIP_MLNAME_CAST(sipName_SetWorldUpObject), meth_FbxConstraintAim_SetWorldUpObject, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxConstraintAim_SetWorldUpObject)}
};

static sipEnumMemberDef enummembers_FbxConstraintAim[] = {
    {sipName_eAimAtCount, static_cast<int>( ::FbxConstraintAim::eAimAtCount), 109},
    {sipName_eAimAtNone, static_cast<int>( ::FbxConstraintAim::eAimAtNone), 109},
    {sipName_eAimAtObjectRotationUp, static_cast<int>( ::FbxConstraintAim::eAimAtObjectRotationUp), 109},
    {sipName_eAimAtObjectUp, static_cast<int>( ::FbxConstraintAim::eAimAtObjectUp), 109},
    {sipName_eAimAtSceneUp, static_cast<int>( ::FbxConstraintAim::eAimAtSceneUp), 109},
    {sipName_eAimAtVector, static_cast<int>( ::FbxConstraintAim::eAimAtVector), 109},
};


extern "C" {static PyObject *varget_FbxConstraintAim_Active(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxConstraintAim_Active(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyBool1*sipVal;
     ::FbxConstraintAim *sipCpp = reinterpret_cast< ::FbxConstraintAim *>(sipSelf);

    sipVal = &sipCpp->Active;

    return sipConvertFromType(sipVal, sipType_FbxPropertyBool1, NULL);
}


extern "C" {static int varset_FbxConstraintAim_Active(void *, PyObject *, PyObject *);}
static int varset_FbxConstraintAim_Active(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyBool1*sipVal;
     ::FbxConstraintAim *sipCpp = reinterpret_cast< ::FbxConstraintAim *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyBool1 *>(sipForceConvertToType(sipPy,sipType_FbxPropertyBool1,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->Active = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxConstraintAim_AffectX(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxConstraintAim_AffectX(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyBool1*sipVal;
     ::FbxConstraintAim *sipCpp = reinterpret_cast< ::FbxConstraintAim *>(sipSelf);

    sipVal = &sipCpp->AffectX;

    return sipConvertFromType(sipVal, sipType_FbxPropertyBool1, NULL);
}


extern "C" {static int varset_FbxConstraintAim_AffectX(void *, PyObject *, PyObject *);}
static int varset_FbxConstraintAim_AffectX(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyBool1*sipVal;
     ::FbxConstraintAim *sipCpp = reinterpret_cast< ::FbxConstraintAim *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyBool1 *>(sipForceConvertToType(sipPy,sipType_FbxPropertyBool1,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->AffectX = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxConstraintAim_AffectY(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxConstraintAim_AffectY(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyBool1*sipVal;
     ::FbxConstraintAim *sipCpp = reinterpret_cast< ::FbxConstraintAim *>(sipSelf);

    sipVal = &sipCpp->AffectY;

    return sipConvertFromType(sipVal, sipType_FbxPropertyBool1, NULL);
}


extern "C" {static int varset_FbxConstraintAim_AffectY(void *, PyObject *, PyObject *);}
static int varset_FbxConstraintAim_AffectY(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyBool1*sipVal;
     ::FbxConstraintAim *sipCpp = reinterpret_cast< ::FbxConstraintAim *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyBool1 *>(sipForceConvertToType(sipPy,sipType_FbxPropertyBool1,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->AffectY = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxConstraintAim_AffectZ(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxConstraintAim_AffectZ(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyBool1*sipVal;
     ::FbxConstraintAim *sipCpp = reinterpret_cast< ::FbxConstraintAim *>(sipSelf);

    sipVal = &sipCpp->AffectZ;

    return sipConvertFromType(sipVal, sipType_FbxPropertyBool1, NULL);
}


extern "C" {static int varset_FbxConstraintAim_AffectZ(void *, PyObject *, PyObject *);}
static int varset_FbxConstraintAim_AffectZ(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyBool1*sipVal;
     ::FbxConstraintAim *sipCpp = reinterpret_cast< ::FbxConstraintAim *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyBool1 *>(sipForceConvertToType(sipPy,sipType_FbxPropertyBool1,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->AffectZ = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxConstraintAim_AimAtObjects(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxConstraintAim_AimAtObjects(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyFbxReference*sipVal;
     ::FbxConstraintAim *sipCpp = reinterpret_cast< ::FbxConstraintAim *>(sipSelf);

    sipVal = &sipCpp->AimAtObjects;

    return sipConvertFromType(sipVal, sipType_FbxPropertyFbxReference, NULL);
}


extern "C" {static int varset_FbxConstraintAim_AimAtObjects(void *, PyObject *, PyObject *);}
static int varset_FbxConstraintAim_AimAtObjects(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyFbxReference*sipVal;
     ::FbxConstraintAim *sipCpp = reinterpret_cast< ::FbxConstraintAim *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyFbxReference *>(sipForceConvertToType(sipPy,sipType_FbxPropertyFbxReference,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->AimAtObjects = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxConstraintAim_AimVector(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxConstraintAim_AimVector(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyDouble3*sipVal;
     ::FbxConstraintAim *sipCpp = reinterpret_cast< ::FbxConstraintAim *>(sipSelf);

    sipVal = &sipCpp->AimVector;

    return sipConvertFromType(sipVal, sipType_FbxPropertyDouble3, NULL);
}


extern "C" {static int varset_FbxConstraintAim_AimVector(void *, PyObject *, PyObject *);}
static int varset_FbxConstraintAim_AimVector(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyDouble3*sipVal;
     ::FbxConstraintAim *sipCpp = reinterpret_cast< ::FbxConstraintAim *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyDouble3 *>(sipForceConvertToType(sipPy,sipType_FbxPropertyDouble3,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->AimVector = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxConstraintAim_ClassId(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxConstraintAim_ClassId(void *, PyObject *, PyObject *)
{
     ::FbxClassId*sipVal;

    sipVal = & ::FbxConstraintAim::ClassId;

    return sipConvertFromType(sipVal, sipType_FbxClassId, NULL);
}


extern "C" {static int varset_FbxConstraintAim_ClassId(void *, PyObject *, PyObject *);}
static int varset_FbxConstraintAim_ClassId(void *, PyObject *sipPy, PyObject *)
{
     ::FbxClassId*sipVal;
    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxClassId *>(sipForceConvertToType(sipPy,sipType_FbxClassId,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

     ::FbxConstraintAim::ClassId = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxConstraintAim_ConstrainedObject(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxConstraintAim_ConstrainedObject(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyFbxReference*sipVal;
     ::FbxConstraintAim *sipCpp = reinterpret_cast< ::FbxConstraintAim *>(sipSelf);

    sipVal = &sipCpp->ConstrainedObject;

    return sipConvertFromType(sipVal, sipType_FbxPropertyFbxReference, NULL);
}


extern "C" {static int varset_FbxConstraintAim_ConstrainedObject(void *, PyObject *, PyObject *);}
static int varset_FbxConstraintAim_ConstrainedObject(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyFbxReference*sipVal;
     ::FbxConstraintAim *sipCpp = reinterpret_cast< ::FbxConstraintAim *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyFbxReference *>(sipForceConvertToType(sipPy,sipType_FbxPropertyFbxReference,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->ConstrainedObject = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxConstraintAim_Lock(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxConstraintAim_Lock(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyBool1*sipVal;
     ::FbxConstraintAim *sipCpp = reinterpret_cast< ::FbxConstraintAim *>(sipSelf);

    sipVal = &sipCpp->Lock;

    return sipConvertFromType(sipVal, sipType_FbxPropertyBool1, NULL);
}


extern "C" {static int varset_FbxConstraintAim_Lock(void *, PyObject *, PyObject *);}
static int varset_FbxConstraintAim_Lock(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyBool1*sipVal;
     ::FbxConstraintAim *sipCpp = reinterpret_cast< ::FbxConstraintAim *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyBool1 *>(sipForceConvertToType(sipPy,sipType_FbxPropertyBool1,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->Lock = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxConstraintAim_RotationOffset(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxConstraintAim_RotationOffset(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyDouble3*sipVal;
     ::FbxConstraintAim *sipCpp = reinterpret_cast< ::FbxConstraintAim *>(sipSelf);

    sipVal = &sipCpp->RotationOffset;

    return sipConvertFromType(sipVal, sipType_FbxPropertyDouble3, NULL);
}


extern "C" {static int varset_FbxConstraintAim_RotationOffset(void *, PyObject *, PyObject *);}
static int varset_FbxConstraintAim_RotationOffset(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyDouble3*sipVal;
     ::FbxConstraintAim *sipCpp = reinterpret_cast< ::FbxConstraintAim *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyDouble3 *>(sipForceConvertToType(sipPy,sipType_FbxPropertyDouble3,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->RotationOffset = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxConstraintAim_UpVector(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxConstraintAim_UpVector(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyDouble3*sipVal;
     ::FbxConstraintAim *sipCpp = reinterpret_cast< ::FbxConstraintAim *>(sipSelf);

    sipVal = &sipCpp->UpVector;

    return sipConvertFromType(sipVal, sipType_FbxPropertyDouble3, NULL);
}


extern "C" {static int varset_FbxConstraintAim_UpVector(void *, PyObject *, PyObject *);}
static int varset_FbxConstraintAim_UpVector(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyDouble3*sipVal;
     ::FbxConstraintAim *sipCpp = reinterpret_cast< ::FbxConstraintAim *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyDouble3 *>(sipForceConvertToType(sipPy,sipType_FbxPropertyDouble3,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->UpVector = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxConstraintAim_Weight(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxConstraintAim_Weight(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyDouble1*sipVal;
     ::FbxConstraintAim *sipCpp = reinterpret_cast< ::FbxConstraintAim *>(sipSelf);

    sipVal = &sipCpp->Weight;

    return sipConvertFromType(sipVal, sipType_FbxPropertyDouble1, NULL);
}


extern "C" {static int varset_FbxConstraintAim_Weight(void *, PyObject *, PyObject *);}
static int varset_FbxConstraintAim_Weight(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyDouble1*sipVal;
     ::FbxConstraintAim *sipCpp = reinterpret_cast< ::FbxConstraintAim *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyDouble1 *>(sipForceConvertToType(sipPy,sipType_FbxPropertyDouble1,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->Weight = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxConstraintAim_WorldUpObject(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxConstraintAim_WorldUpObject(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyFbxReference*sipVal;
     ::FbxConstraintAim *sipCpp = reinterpret_cast< ::FbxConstraintAim *>(sipSelf);

    sipVal = &sipCpp->WorldUpObject;

    return sipConvertFromType(sipVal, sipType_FbxPropertyFbxReference, NULL);
}


extern "C" {static int varset_FbxConstraintAim_WorldUpObject(void *, PyObject *, PyObject *);}
static int varset_FbxConstraintAim_WorldUpObject(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyFbxReference*sipVal;
     ::FbxConstraintAim *sipCpp = reinterpret_cast< ::FbxConstraintAim *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyFbxReference *>(sipForceConvertToType(sipPy,sipType_FbxPropertyFbxReference,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->WorldUpObject = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxConstraintAim_WorldUpType(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxConstraintAim_WorldUpType(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyEnum*sipVal;
     ::FbxConstraintAim *sipCpp = reinterpret_cast< ::FbxConstraintAim *>(sipSelf);

    sipVal = &sipCpp->WorldUpType;

    return sipConvertFromType(sipVal, sipType_FbxPropertyEnum, NULL);
}


extern "C" {static int varset_FbxConstraintAim_WorldUpType(void *, PyObject *, PyObject *);}
static int varset_FbxConstraintAim_WorldUpType(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyEnum*sipVal;
     ::FbxConstraintAim *sipCpp = reinterpret_cast< ::FbxConstraintAim *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyEnum *>(sipForceConvertToType(sipPy,sipType_FbxPropertyEnum,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->WorldUpType = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxConstraintAim_WorldUpVector(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxConstraintAim_WorldUpVector(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyDouble3*sipVal;
     ::FbxConstraintAim *sipCpp = reinterpret_cast< ::FbxConstraintAim *>(sipSelf);

    sipVal = &sipCpp->WorldUpVector;

    return sipConvertFromType(sipVal, sipType_FbxPropertyDouble3, NULL);
}


extern "C" {static int varset_FbxConstraintAim_WorldUpVector(void *, PyObject *, PyObject *);}
static int varset_FbxConstraintAim_WorldUpVector(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyDouble3*sipVal;
     ::FbxConstraintAim *sipCpp = reinterpret_cast< ::FbxConstraintAim *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyDouble3 *>(sipForceConvertToType(sipPy,sipType_FbxPropertyDouble3,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->WorldUpVector = *sipVal;

    return 0;
}

sipVariableDef variables_FbxConstraintAim[] = {
    {InstanceVariable, sipName_Active, (PyMethodDef *)varget_FbxConstraintAim_Active, (PyMethodDef *)varset_FbxConstraintAim_Active, NULL, NULL},
    {InstanceVariable, sipName_AffectX, (PyMethodDef *)varget_FbxConstraintAim_AffectX, (PyMethodDef *)varset_FbxConstraintAim_AffectX, NULL, NULL},
    {InstanceVariable, sipName_AffectY, (PyMethodDef *)varget_FbxConstraintAim_AffectY, (PyMethodDef *)varset_FbxConstraintAim_AffectY, NULL, NULL},
    {InstanceVariable, sipName_AffectZ, (PyMethodDef *)varget_FbxConstraintAim_AffectZ, (PyMethodDef *)varset_FbxConstraintAim_AffectZ, NULL, NULL},
    {InstanceVariable, sipName_AimAtObjects, (PyMethodDef *)varget_FbxConstraintAim_AimAtObjects, (PyMethodDef *)varset_FbxConstraintAim_AimAtObjects, NULL, NULL},
    {InstanceVariable, sipName_AimVector, (PyMethodDef *)varget_FbxConstraintAim_AimVector, (PyMethodDef *)varset_FbxConstraintAim_AimVector, NULL, NULL},
    {ClassVariable, sipName_ClassId, (PyMethodDef *)varget_FbxConstraintAim_ClassId, (PyMethodDef *)varset_FbxConstraintAim_ClassId, NULL, NULL},
    {InstanceVariable, sipName_ConstrainedObject, (PyMethodDef *)varget_FbxConstraintAim_ConstrainedObject, (PyMethodDef *)varset_FbxConstraintAim_ConstrainedObject, NULL, NULL},
    {InstanceVariable, sipName_Lock, (PyMethodDef *)varget_FbxConstraintAim_Lock, (PyMethodDef *)varset_FbxConstraintAim_Lock, NULL, NULL},
    {InstanceVariable, sipName_RotationOffset, (PyMethodDef *)varget_FbxConstraintAim_RotationOffset, (PyMethodDef *)varset_FbxConstraintAim_RotationOffset, NULL, NULL},
    {InstanceVariable, sipName_UpVector, (PyMethodDef *)varget_FbxConstraintAim_UpVector, (PyMethodDef *)varset_FbxConstraintAim_UpVector, NULL, NULL},
    {InstanceVariable, sipName_Weight, (PyMethodDef *)varget_FbxConstraintAim_Weight, (PyMethodDef *)varset_FbxConstraintAim_Weight, NULL, NULL},
    {InstanceVariable, sipName_WorldUpObject, (PyMethodDef *)varget_FbxConstraintAim_WorldUpObject, (PyMethodDef *)varset_FbxConstraintAim_WorldUpObject, NULL, NULL},
    {InstanceVariable, sipName_WorldUpType, (PyMethodDef *)varget_FbxConstraintAim_WorldUpType, (PyMethodDef *)varset_FbxConstraintAim_WorldUpType, NULL, NULL},
    {InstanceVariable, sipName_WorldUpVector, (PyMethodDef *)varget_FbxConstraintAim_WorldUpVector, (PyMethodDef *)varset_FbxConstraintAim_WorldUpVector, NULL, NULL},
};


sipClassTypeDef sipTypeDef_fbx_FbxConstraintAim = {
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_FbxConstraintAim,
        {0},
        0
    },
    {
        sipNameNr_FbxConstraintAim,
        {0, 0, 1},
        9, methods_FbxConstraintAim,
        6, enummembers_FbxConstraintAim,
        15, variables_FbxConstraintAim,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    0,
    -1,
    -1,
    supers_FbxConstraintAim,
    slots_FbxConstraintAim,
    0,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    0,
    0,
    0,
    0,
    release_FbxConstraintAim,
    cast_FbxConstraintAim,
    0,
    0,
    0,
    0,
    0,
    0
};
