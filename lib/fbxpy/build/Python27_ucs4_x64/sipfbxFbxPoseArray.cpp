/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.3
 *
 * Copyright (C) 2009 Autodesk, Inc. and/or its licensors.
 * All Rights Reserved.
 * 
 * The coded instructions, statements, computer programs, and/or related material 
 * (collectively the "Data") in these files contain unpublished information 
 * proprietary to Autodesk, Inc. and/or its licensors, which is protected by 
 * Canada and United States of America federal copyright law and by international 
 * treaties. 
 * 
 * The Data may not be disclosed or distributed to third parties, in whole or in
 * part, without the prior written consent of Autodesk, Inc. ("Autodesk").
 * 
 * THE DATA IS PROVIDED "AS IS" AND WITHOUT WARRANTY.
 * ALL WARRANTIES ARE EXPRESSLY EXCLUDED AND DISCLAIMED. AUTODESK MAKES NO
 * WARRANTY OF ANY KIND WITH RESPECT TO THE DATA, EXPRESS, IMPLIED OR ARISING
 * BY CUSTOM OR TRADE USAGE, AND DISCLAIMS ANY IMPLIED WARRANTIES OF TITLE, 
 * NON-INFRINGEMENT, MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE OR USE. 
 * WITHOUT LIMITING THE FOREGOING, AUTODESK DOES NOT WARRANT THAT THE OPERATION
 * OF THE DATA WILL BE UNINTERRUPTED OR ERROR FREE. 
 * 
 * IN NO EVENT SHALL AUTODESK, ITS AFFILIATES, PARENT COMPANIES, LICENSORS
 * OR SUPPLIERS ("AUTODESK GROUP") BE LIABLE FOR ANY LOSSES, DAMAGES OR EXPENSES
 * OF ANY KIND (INCLUDING WITHOUT LIMITATION PUNITIVE OR MULTIPLE DAMAGES OR OTHER
 * SPECIAL, DIRECT, INDIRECT, EXEMPLARY, INCIDENTAL, LOSS OF PROFITS, REVENUE
 * OR DATA, COST OF COVER OR CONSEQUENTIAL LOSSES OR DAMAGES OF ANY KIND),
 * HOWEVER CAUSED, AND REGARDLESS OF THE THEORY OF LIABILITY, WHETHER DERIVED
 * FROM CONTRACT, TORT (INCLUDING, BUT NOT LIMITED TO, NEGLIGENCE), OR OTHERWISE,
 * ARISING OUT OF OR RELATING TO THE DATA OR ITS USE OR ANY OTHER PERFORMANCE,
 * WHETHER OR NOT AUTODESK HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH LOSS
 * OR DAMAGE. 
 */

#include "sipAPIfbx.h"




PyDoc_STRVAR(doc_FbxPoseArray_GetCount, "GetCount(self) -> int");

extern "C" {static PyObject *meth_FbxPoseArray_GetCount(PyObject *, PyObject *);}
static PyObject *meth_FbxPoseArray_GetCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::FbxPoseArray *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxPoseArray, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->GetCount();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxPoseArray, sipName_GetCount, doc_FbxPoseArray_GetCount);

    return NULL;
}


PyDoc_STRVAR(doc_FbxPoseArray_InsertAt, "InsertAt(self, int, FbxPose) -> int");

extern "C" {static PyObject *meth_FbxPoseArray_InsertAt(PyObject *, PyObject *);}
static PyObject *meth_FbxPoseArray_InsertAt(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
         ::FbxPosePtr a1;
         ::FbxPoseArray *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ8", &sipSelf, sipType_FbxPoseArray, &sipCpp, &a0, sipType_FbxPose, &a1))
        {
            int sipRes;

            sipRes = sipCpp->InsertAt(a0,a1);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxPoseArray, sipName_InsertAt, doc_FbxPoseArray_InsertAt);

    return NULL;
}


PyDoc_STRVAR(doc_FbxPoseArray_Add, "Add(self, FbxPose) -> int");

extern "C" {static PyObject *meth_FbxPoseArray_Add(PyObject *, PyObject *);}
static PyObject *meth_FbxPoseArray_Add(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxPosePtr a0;
         ::FbxPoseArray *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_FbxPoseArray, &sipCpp, sipType_FbxPose, &a0))
        {
            int sipRes;

            sipRes = sipCpp->Add(a0);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxPoseArray, sipName_Add, doc_FbxPoseArray_Add);

    return NULL;
}


PyDoc_STRVAR(doc_FbxPoseArray_AddUnique, "AddUnique(self, FbxPose) -> int");

extern "C" {static PyObject *meth_FbxPoseArray_AddUnique(PyObject *, PyObject *);}
static PyObject *meth_FbxPoseArray_AddUnique(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxPosePtr a0;
         ::FbxPoseArray *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_FbxPoseArray, &sipCpp, sipType_FbxPose, &a0))
        {
            int sipRes;

            sipRes = sipCpp->AddUnique(a0);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxPoseArray, sipName_AddUnique, doc_FbxPoseArray_AddUnique);

    return NULL;
}


PyDoc_STRVAR(doc_FbxPoseArray_AddArray, "AddArray(self, FbxPoseArray)");

extern "C" {static PyObject *meth_FbxPoseArray_AddArray(PyObject *, PyObject *);}
static PyObject *meth_FbxPoseArray_AddArray(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxPoseArray* a0;
         ::FbxPoseArray *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_FbxPoseArray, &sipCpp, sipType_FbxPoseArray, &a0))
        {
            sipCpp->AddArray(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxPoseArray, sipName_AddArray, doc_FbxPoseArray_AddArray);

    return NULL;
}


PyDoc_STRVAR(doc_FbxPoseArray_AddArrayNoDuplicate, "AddArrayNoDuplicate(self, FbxPoseArray)");

extern "C" {static PyObject *meth_FbxPoseArray_AddArrayNoDuplicate(PyObject *, PyObject *);}
static PyObject *meth_FbxPoseArray_AddArrayNoDuplicate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxPoseArray* a0;
         ::FbxPoseArray *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_FbxPoseArray, &sipCpp, sipType_FbxPoseArray, &a0))
        {
            sipCpp->AddArrayNoDuplicate(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxPoseArray, sipName_AddArrayNoDuplicate, doc_FbxPoseArray_AddArrayNoDuplicate);

    return NULL;
}


PyDoc_STRVAR(doc_FbxPoseArray_SetAt, "SetAt(self, int, FbxPose)");

extern "C" {static PyObject *meth_FbxPoseArray_SetAt(PyObject *, PyObject *);}
static PyObject *meth_FbxPoseArray_SetAt(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
         ::FbxPosePtr a1;
         ::FbxPoseArray *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ8", &sipSelf, sipType_FbxPoseArray, &sipCpp, &a0, sipType_FbxPose, &a1))
        {
            sipCpp->SetAt(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxPoseArray, sipName_SetAt, doc_FbxPoseArray_SetAt);

    return NULL;
}


PyDoc_STRVAR(doc_FbxPoseArray_SetLast, "SetLast(self, FbxPose)");

extern "C" {static PyObject *meth_FbxPoseArray_SetLast(PyObject *, PyObject *);}
static PyObject *meth_FbxPoseArray_SetLast(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxPosePtr a0;
         ::FbxPoseArray *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_FbxPoseArray, &sipCpp, sipType_FbxPose, &a0))
        {
            sipCpp->SetLast(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxPoseArray, sipName_SetLast, doc_FbxPoseArray_SetLast);

    return NULL;
}


PyDoc_STRVAR(doc_FbxPoseArray_GetAt, "GetAt(self, int) -> FbxPose");

extern "C" {static PyObject *meth_FbxPoseArray_GetAt(PyObject *, PyObject *);}
static PyObject *meth_FbxPoseArray_GetAt(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const  ::FbxPoseArray *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_FbxPoseArray, &sipCpp, &a0))
        {
             ::FbxPosePtr sipRes;

            sipRes = sipCpp->GetAt(a0);

            return sipConvertFromType(sipRes,sipType_FbxPose,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxPoseArray, sipName_GetAt, doc_FbxPoseArray_GetAt);

    return NULL;
}


PyDoc_STRVAR(doc_FbxPoseArray_GetFirst, "GetFirst(self) -> FbxPose");

extern "C" {static PyObject *meth_FbxPoseArray_GetFirst(PyObject *, PyObject *);}
static PyObject *meth_FbxPoseArray_GetFirst(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::FbxPoseArray *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxPoseArray, &sipCpp))
        {
             ::FbxPosePtr sipRes;

            sipRes = sipCpp->GetFirst();

            return sipConvertFromType(sipRes,sipType_FbxPose,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxPoseArray, sipName_GetFirst, doc_FbxPoseArray_GetFirst);

    return NULL;
}


PyDoc_STRVAR(doc_FbxPoseArray_GetLast, "GetLast(self) -> FbxPose");

extern "C" {static PyObject *meth_FbxPoseArray_GetLast(PyObject *, PyObject *);}
static PyObject *meth_FbxPoseArray_GetLast(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::FbxPoseArray *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxPoseArray, &sipCpp))
        {
             ::FbxPosePtr sipRes;

            sipRes = sipCpp->GetLast();

            return sipConvertFromType(sipRes,sipType_FbxPose,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxPoseArray, sipName_GetLast, doc_FbxPoseArray_GetLast);

    return NULL;
}


PyDoc_STRVAR(doc_FbxPoseArray_RemoveAt, "RemoveAt(self, int) -> FbxPose");

extern "C" {static PyObject *meth_FbxPoseArray_RemoveAt(PyObject *, PyObject *);}
static PyObject *meth_FbxPoseArray_RemoveAt(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
         ::FbxPoseArray *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_FbxPoseArray, &sipCpp, &a0))
        {
             ::FbxPosePtr sipRes;

            sipRes = sipCpp->RemoveAt(a0);

            return sipConvertFromType(sipRes,sipType_FbxPose,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxPoseArray, sipName_RemoveAt, doc_FbxPoseArray_RemoveAt);

    return NULL;
}


PyDoc_STRVAR(doc_FbxPoseArray_RemoveLast, "RemoveLast(self) -> FbxPose");

extern "C" {static PyObject *meth_FbxPoseArray_RemoveLast(PyObject *, PyObject *);}
static PyObject *meth_FbxPoseArray_RemoveLast(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxPoseArray *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxPoseArray, &sipCpp))
        {
             ::FbxPosePtr sipRes;

            sipRes = sipCpp->RemoveLast();

            return sipConvertFromType(sipRes,sipType_FbxPose,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxPoseArray, sipName_RemoveLast, doc_FbxPoseArray_RemoveLast);

    return NULL;
}


PyDoc_STRVAR(doc_FbxPoseArray_RemoveIt, "RemoveIt(self, FbxPose) -> bool");

extern "C" {static PyObject *meth_FbxPoseArray_RemoveIt(PyObject *, PyObject *);}
static PyObject *meth_FbxPoseArray_RemoveIt(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxPosePtr a0;
         ::FbxPoseArray *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_FbxPoseArray, &sipCpp, sipType_FbxPose, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->RemoveIt(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxPoseArray, sipName_RemoveIt, doc_FbxPoseArray_RemoveIt);

    return NULL;
}


PyDoc_STRVAR(doc_FbxPoseArray_RemoveArray, "RemoveArray(self, FbxPoseArray)");

extern "C" {static PyObject *meth_FbxPoseArray_RemoveArray(PyObject *, PyObject *);}
static PyObject *meth_FbxPoseArray_RemoveArray(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxPoseArray* a0;
         ::FbxPoseArray *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_FbxPoseArray, &sipCpp, sipType_FbxPoseArray, &a0))
        {
            sipCpp->RemoveArray(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxPoseArray, sipName_RemoveArray, doc_FbxPoseArray_RemoveArray);

    return NULL;
}


PyDoc_STRVAR(doc_FbxPoseArray_Find, "Find(self, FbxPose) -> int");

extern "C" {static PyObject *meth_FbxPoseArray_Find(PyObject *, PyObject *);}
static PyObject *meth_FbxPoseArray_Find(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxPosePtr a0;
        const  ::FbxPoseArray *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_FbxPoseArray, &sipCpp, sipType_FbxPose, &a0))
        {
            int sipRes;

            sipRes = sipCpp->Find(a0);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxPoseArray, sipName_Find, doc_FbxPoseArray_Find);

    return NULL;
}


extern "C" {static PyObject *slot_FbxPoseArray___getitem__(PyObject *,PyObject *);}
static PyObject *slot_FbxPoseArray___getitem__(PyObject *sipSelf,PyObject *sipArg)
{
     ::FbxPoseArray *sipCpp = reinterpret_cast< ::FbxPoseArray *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_FbxPoseArray));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
             ::FbxPosePtr sipRes = 0;
            int sipIsErr = 0;

#line 33 "/var/www/html/lib/fbxpy/sip/fbxarray.sip"
        if (a0 < 0 || a0 >= sipCpp->GetCount())
        {
            PyErr_Format(PyExc_IndexError, "sequence index out of range");
            sipIsErr = 1;
        }
        else
        {
            fbxArrayElementCopy(&sipRes, (FbxPosePtr*)NULL, sipCpp, a0);
        }
#line 529 "/var/www/html/lib/fbxpy/build/Python27_ucs4_x64/sipfbxFbxPoseArray.cpp"

            if (sipIsErr)
                return 0;

            return sipConvertFromType(sipRes,sipType_FbxPose,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxPoseArray, sipName___getitem__, NULL);

    return 0;
}


/* Call the instance's destructor. */
extern "C" {static void release_FbxPoseArray(void *, int);}
static void release_FbxPoseArray(void *sipCppV, int)
{
    delete reinterpret_cast< ::FbxPoseArray *>(sipCppV);
}


extern "C" {static void assign_FbxPoseArray(void *, SIP_SSIZE_T, const void *);}
static void assign_FbxPoseArray(void *sipDst, SIP_SSIZE_T sipDstIdx, const void *sipSrc)
{
    reinterpret_cast< ::FbxPoseArray *>(sipDst)[sipDstIdx] = *reinterpret_cast<const  ::FbxPoseArray *>(sipSrc);
}


extern "C" {static void *array_FbxPoseArray(SIP_SSIZE_T);}
static void *array_FbxPoseArray(SIP_SSIZE_T sipNrElem)
{
    return new  ::FbxPoseArray[sipNrElem];
}


extern "C" {static void *copy_FbxPoseArray(const void *, SIP_SSIZE_T);}
static void *copy_FbxPoseArray(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::FbxPoseArray(reinterpret_cast<const  ::FbxPoseArray *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_FbxPoseArray(sipSimpleWrapper *);}
static void dealloc_FbxPoseArray(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_FbxPoseArray(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_FbxPoseArray(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_FbxPoseArray(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::FbxPoseArray *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            sipCpp = new  ::FbxPoseArray();

            return sipCpp;
        }
    }

    {
        const  ::FbxPoseArray* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_FbxPoseArray, &a0))
        {
            sipCpp = new  ::FbxPoseArray(*a0);

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_FbxPoseArray[] = {
    {(void *)slot_FbxPoseArray___getitem__, getitem_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_FbxPoseArray[] = {
    {SIP_MLNAME_CAST(sipName_Add), meth_FbxPoseArray_Add, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxPoseArray_Add)},
    {SIP_MLNAME_CAST(sipName_AddArray), meth_FbxPoseArray_AddArray, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxPoseArray_AddArray)},
    {SIP_MLNAME_CAST(sipName_AddArrayNoDuplicate), meth_FbxPoseArray_AddArrayNoDuplicate, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxPoseArray_AddArrayNoDuplicate)},
    {SIP_MLNAME_CAST(sipName_AddUnique), meth_FbxPoseArray_AddUnique, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxPoseArray_AddUnique)},
    {SIP_MLNAME_CAST(sipName_Find), meth_FbxPoseArray_Find, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxPoseArray_Find)},
    {SIP_MLNAME_CAST(sipName_GetAt), meth_FbxPoseArray_GetAt, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxPoseArray_GetAt)},
    {SIP_MLNAME_CAST(sipName_GetCount), meth_FbxPoseArray_GetCount, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxPoseArray_GetCount)},
    {SIP_MLNAME_CAST(sipName_GetFirst), meth_FbxPoseArray_GetFirst, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxPoseArray_GetFirst)},
    {SIP_MLNAME_CAST(sipName_GetLast), meth_FbxPoseArray_GetLast, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxPoseArray_GetLast)},
    {SIP_MLNAME_CAST(sipName_InsertAt), meth_FbxPoseArray_InsertAt, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxPoseArray_InsertAt)},
    {SIP_MLNAME_CAST(sipName_RemoveArray), meth_FbxPoseArray_RemoveArray, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxPoseArray_RemoveArray)},
    {SIP_MLNAME_CAST(sipName_RemoveAt), meth_FbxPoseArray_RemoveAt, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxPoseArray_RemoveAt)},
    {SIP_MLNAME_CAST(sipName_RemoveIt), meth_FbxPoseArray_RemoveIt, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxPoseArray_RemoveIt)},
    {SIP_MLNAME_CAST(sipName_RemoveLast), meth_FbxPoseArray_RemoveLast, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxPoseArray_RemoveLast)},
    {SIP_MLNAME_CAST(sipName_SetAt), meth_FbxPoseArray_SetAt, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxPoseArray_SetAt)},
    {SIP_MLNAME_CAST(sipName_SetLast), meth_FbxPoseArray_SetLast, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxPoseArray_SetLast)}
};

PyDoc_STRVAR(doc_FbxPoseArray, "\1FbxPoseArray()\n"
    "FbxPoseArray(FbxPoseArray)");


sipClassTypeDef sipTypeDef_fbx_FbxPoseArray = {
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_FbxPoseArray,
        {0},
        0
    },
    {
        sipNameNr_FbxPoseArray,
        {0, 0, 1},
        16, methods_FbxPoseArray,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_FbxPoseArray,
    -1,
    -1,
    0,
    slots_FbxPoseArray,
    init_type_FbxPoseArray,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_FbxPoseArray,
    assign_FbxPoseArray,
    array_FbxPoseArray,
    copy_FbxPoseArray,
    release_FbxPoseArray,
    0,
    0,
    0,
    0,
    0,
    0,
    0
};
