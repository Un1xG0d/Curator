/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.3
 *
 * Copyright (C) 2009 Autodesk, Inc. and/or its licensors.
 * All Rights Reserved.
 * 
 * The coded instructions, statements, computer programs, and/or related material 
 * (collectively the "Data") in these files contain unpublished information 
 * proprietary to Autodesk, Inc. and/or its licensors, which is protected by 
 * Canada and United States of America federal copyright law and by international 
 * treaties. 
 * 
 * The Data may not be disclosed or distributed to third parties, in whole or in
 * part, without the prior written consent of Autodesk, Inc. ("Autodesk").
 * 
 * THE DATA IS PROVIDED "AS IS" AND WITHOUT WARRANTY.
 * ALL WARRANTIES ARE EXPRESSLY EXCLUDED AND DISCLAIMED. AUTODESK MAKES NO
 * WARRANTY OF ANY KIND WITH RESPECT TO THE DATA, EXPRESS, IMPLIED OR ARISING
 * BY CUSTOM OR TRADE USAGE, AND DISCLAIMS ANY IMPLIED WARRANTIES OF TITLE, 
 * NON-INFRINGEMENT, MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE OR USE. 
 * WITHOUT LIMITING THE FOREGOING, AUTODESK DOES NOT WARRANT THAT THE OPERATION
 * OF THE DATA WILL BE UNINTERRUPTED OR ERROR FREE. 
 * 
 * IN NO EVENT SHALL AUTODESK, ITS AFFILIATES, PARENT COMPANIES, LICENSORS
 * OR SUPPLIERS ("AUTODESK GROUP") BE LIABLE FOR ANY LOSSES, DAMAGES OR EXPENSES
 * OF ANY KIND (INCLUDING WITHOUT LIMITATION PUNITIVE OR MULTIPLE DAMAGES OR OTHER
 * SPECIAL, DIRECT, INDIRECT, EXEMPLARY, INCIDENTAL, LOSS OF PROFITS, REVENUE
 * OR DATA, COST OF COVER OR CONSEQUENTIAL LOSSES OR DAMAGES OF ANY KIND),
 * HOWEVER CAUSED, AND REGARDLESS OF THE THEORY OF LIABILITY, WHETHER DERIVED
 * FROM CONTRACT, TORT (INCLUDING, BUT NOT LIMITED TO, NEGLIGENCE), OR OTHERWISE,
 * ARISING OUT OF OR RELATING TO THE DATA OR ITS USE OR ANY OTHER PERFORMANCE,
 * WHETHER OR NOT AUTODESK HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH LOSS
 * OR DAMAGE. 
 */

#include "sipAPIfbx.h"




PyDoc_STRVAR(doc_FbxConstraintParent_Create, "Create(FbxManager, str) -> FbxConstraintParent\n"
    "Create(FbxObject, str) -> FbxConstraintParent");

extern "C" {static PyObject *meth_FbxConstraintParent_Create(PyObject *, PyObject *);}
static PyObject *meth_FbxConstraintParent_Create(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxManager* a0;
        const char* a1;
        PyObject *a1Keep;

        if (sipParseArgs(&sipParseErr, sipArgs, "J8A8", sipType_FbxManager, &a0, &a1Keep, &a1))
        {
             ::FbxConstraintParent*sipRes;

            sipRes =  ::FbxConstraintParent::Create(a0,a1);
            Py_DECREF(a1Keep);

            return sipConvertFromType(sipRes,sipType_FbxConstraintParent,NULL);
        }
    }

    {
         ::FbxObject* a0;
        const char* a1;
        PyObject *a1Keep;

        if (sipParseArgs(&sipParseErr, sipArgs, "J8A8", sipType_FbxObject, &a0, &a1Keep, &a1))
        {
             ::FbxConstraintParent*sipRes;

            sipRes =  ::FbxConstraintParent::Create(a0,a1);
            Py_DECREF(a1Keep);

            return sipConvertFromType(sipRes,sipType_FbxConstraintParent,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxConstraintParent, sipName_Create, doc_FbxConstraintParent_Create);

    return NULL;
}


PyDoc_STRVAR(doc_FbxConstraintParent_GetClassId, "GetClassId(self) -> FbxClassId");

extern "C" {static PyObject *meth_FbxConstraintParent_GetClassId(PyObject *, PyObject *);}
static PyObject *meth_FbxConstraintParent_GetClassId(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::FbxConstraintParent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxConstraintParent, &sipCpp))
        {
             ::FbxClassId*sipRes;

            sipRes = new  ::FbxClassId((sipSelfWasArg ? sipCpp-> ::FbxConstraintParent::GetClassId() : sipCpp->GetClassId()));

            return sipConvertFromNewType(sipRes,sipType_FbxClassId,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxConstraintParent, sipName_GetClassId, doc_FbxConstraintParent_GetClassId);

    return NULL;
}


PyDoc_STRVAR(doc_FbxConstraintParent_SetTranslationOffset, "SetTranslationOffset(self, FbxObject, FbxVector4)");

extern "C" {static PyObject *meth_FbxConstraintParent_SetTranslationOffset(PyObject *, PyObject *);}
static PyObject *meth_FbxConstraintParent_SetTranslationOffset(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxObject* a0;
         ::FbxVector4* a1;
         ::FbxConstraintParent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8J9", &sipSelf, sipType_FbxConstraintParent, &sipCpp, sipType_FbxObject, &a0, sipType_FbxVector4, &a1))
        {
            sipCpp->SetTranslationOffset(a0,*a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxConstraintParent, sipName_SetTranslationOffset, doc_FbxConstraintParent_SetTranslationOffset);

    return NULL;
}


PyDoc_STRVAR(doc_FbxConstraintParent_GetTranslationOffset, "GetTranslationOffset(self, FbxObject) -> FbxVector4");

extern "C" {static PyObject *meth_FbxConstraintParent_GetTranslationOffset(PyObject *, PyObject *);}
static PyObject *meth_FbxConstraintParent_GetTranslationOffset(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::FbxObject* a0;
        const  ::FbxConstraintParent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_FbxConstraintParent, &sipCpp, sipType_FbxObject, &a0))
        {
             ::FbxVector4*sipRes;

            sipRes = new  ::FbxVector4(sipCpp->GetTranslationOffset(a0));

            return sipConvertFromNewType(sipRes,sipType_FbxVector4,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxConstraintParent, sipName_GetTranslationOffset, doc_FbxConstraintParent_GetTranslationOffset);

    return NULL;
}


PyDoc_STRVAR(doc_FbxConstraintParent_SetRotationOffset, "SetRotationOffset(self, FbxObject, FbxVector4)");

extern "C" {static PyObject *meth_FbxConstraintParent_SetRotationOffset(PyObject *, PyObject *);}
static PyObject *meth_FbxConstraintParent_SetRotationOffset(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::FbxObject* a0;
         ::FbxVector4* a1;
         ::FbxConstraintParent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8J9", &sipSelf, sipType_FbxConstraintParent, &sipCpp, sipType_FbxObject, &a0, sipType_FbxVector4, &a1))
        {
            (sipSelfWasArg ? sipCpp-> ::FbxConstraintParent::SetRotationOffset(a0,*a1) : sipCpp->SetRotationOffset(a0,*a1));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxConstraintParent, sipName_SetRotationOffset, doc_FbxConstraintParent_SetRotationOffset);

    return NULL;
}


PyDoc_STRVAR(doc_FbxConstraintParent_GetRotationOffset, "GetRotationOffset(self, FbxObject) -> FbxVector4");

extern "C" {static PyObject *meth_FbxConstraintParent_GetRotationOffset(PyObject *, PyObject *);}
static PyObject *meth_FbxConstraintParent_GetRotationOffset(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::FbxObject* a0;
        const  ::FbxConstraintParent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_FbxConstraintParent, &sipCpp, sipType_FbxObject, &a0))
        {
             ::FbxVector4*sipRes;

            sipRes = new  ::FbxVector4(sipCpp->GetRotationOffset(a0));

            return sipConvertFromNewType(sipRes,sipType_FbxVector4,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxConstraintParent, sipName_GetRotationOffset, doc_FbxConstraintParent_GetRotationOffset);

    return NULL;
}


PyDoc_STRVAR(doc_FbxConstraintParent_AddConstraintSource, "AddConstraintSource(self, FbxObject, float = 100)");

extern "C" {static PyObject *meth_FbxConstraintParent_AddConstraintSource(PyObject *, PyObject *);}
static PyObject *meth_FbxConstraintParent_AddConstraintSource(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxObject* a0;
        double a1 = 100;
         ::FbxConstraintParent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8|d", &sipSelf, sipType_FbxConstraintParent, &sipCpp, sipType_FbxObject, &a0, &a1))
        {
            sipCpp->AddConstraintSource(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxConstraintParent, sipName_AddConstraintSource, doc_FbxConstraintParent_AddConstraintSource);

    return NULL;
}


PyDoc_STRVAR(doc_FbxConstraintParent_GetConstraintSourceCount, "GetConstraintSourceCount(self) -> int");

extern "C" {static PyObject *meth_FbxConstraintParent_GetConstraintSourceCount(PyObject *, PyObject *);}
static PyObject *meth_FbxConstraintParent_GetConstraintSourceCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::FbxConstraintParent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxConstraintParent, &sipCpp))
        {
            int sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::FbxConstraintParent::GetConstraintSourceCount() : sipCpp->GetConstraintSourceCount());

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxConstraintParent, sipName_GetConstraintSourceCount, doc_FbxConstraintParent_GetConstraintSourceCount);

    return NULL;
}


PyDoc_STRVAR(doc_FbxConstraintParent_GetConstraintSource, "GetConstraintSource(self, int) -> FbxObject");

extern "C" {static PyObject *meth_FbxConstraintParent_GetConstraintSource(PyObject *, PyObject *);}
static PyObject *meth_FbxConstraintParent_GetConstraintSource(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        const  ::FbxConstraintParent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_FbxConstraintParent, &sipCpp, &a0))
        {
             ::FbxObject*sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::FbxConstraintParent::GetConstraintSource(a0) : sipCpp->GetConstraintSource(a0));

            return sipConvertFromType(sipRes,sipType_FbxObject,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxConstraintParent, sipName_GetConstraintSource, doc_FbxConstraintParent_GetConstraintSource);

    return NULL;
}


PyDoc_STRVAR(doc_FbxConstraintParent_SetConstrainedObject, "SetConstrainedObject(self, FbxObject)");

extern "C" {static PyObject *meth_FbxConstraintParent_SetConstrainedObject(PyObject *, PyObject *);}
static PyObject *meth_FbxConstraintParent_SetConstrainedObject(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxObject* a0;
         ::FbxConstraintParent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_FbxConstraintParent, &sipCpp, sipType_FbxObject, &a0))
        {
            sipCpp->SetConstrainedObject(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxConstraintParent, sipName_SetConstrainedObject, doc_FbxConstraintParent_SetConstrainedObject);

    return NULL;
}


PyDoc_STRVAR(doc_FbxConstraintParent_GetConstrainedObject, "GetConstrainedObject(self) -> FbxObject");

extern "C" {static PyObject *meth_FbxConstraintParent_GetConstrainedObject(PyObject *, PyObject *);}
static PyObject *meth_FbxConstraintParent_GetConstrainedObject(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::FbxConstraintParent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxConstraintParent, &sipCpp))
        {
             ::FbxObject*sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::FbxConstraintParent::GetConstrainedObject() : sipCpp->GetConstrainedObject());

            return sipConvertFromType(sipRes,sipType_FbxObject,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxConstraintParent, sipName_GetConstrainedObject, doc_FbxConstraintParent_GetConstrainedObject);

    return NULL;
}


extern "C" {static PyObject *slot_FbxConstraintParent___ne__(PyObject *,PyObject *);}
static PyObject *slot_FbxConstraintParent___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::FbxConstraintParent *sipCpp = reinterpret_cast< ::FbxConstraintParent *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_FbxConstraintParent));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const  ::FbxConstraintParent* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_FbxConstraintParent, &a0))
        {
            bool sipRes;

            sipRes = !sipCpp-> ::FbxConstraintParent::operator==(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_fbx, ne_slot, sipType_FbxConstraintParent, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_FbxConstraintParent___eq__(PyObject *,PyObject *);}
static PyObject *slot_FbxConstraintParent___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::FbxConstraintParent *sipCpp = reinterpret_cast< ::FbxConstraintParent *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_FbxConstraintParent));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const  ::FbxConstraintParent* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_FbxConstraintParent, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::FbxConstraintParent::operator==(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_fbx, eq_slot, sipType_FbxConstraintParent, sipSelf, sipArg);
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_FbxConstraintParent(void *, const sipTypeDef *);}
static void *cast_FbxConstraintParent(void *sipCppV, const sipTypeDef *targetType)
{
     ::FbxConstraintParent *sipCpp = reinterpret_cast< ::FbxConstraintParent *>(sipCppV);

    if (targetType == sipType_FbxConstraint)
        return static_cast< ::FbxConstraint *>(sipCpp);

    if (targetType == sipType_FbxObject)
        return static_cast< ::FbxObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_FbxConstraintParent(void *, int);}
static void release_FbxConstraintParent(void *, int)
{
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_FbxConstraintParent[] = {{106, 255, 1}};


/* Define this type's Python slots. */
static sipPySlotDef slots_FbxConstraintParent[] = {
    {(void *)slot_FbxConstraintParent___ne__, ne_slot},
    {(void *)slot_FbxConstraintParent___eq__, eq_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_FbxConstraintParent[] = {
    {SIP_MLNAME_CAST(sipName_AddConstraintSource), meth_FbxConstraintParent_AddConstraintSource, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxConstraintParent_AddConstraintSource)},
    {SIP_MLNAME_CAST(sipName_Create), meth_FbxConstraintParent_Create, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxConstraintParent_Create)},
    {SIP_MLNAME_CAST(sipName_GetClassId), meth_FbxConstraintParent_GetClassId, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxConstraintParent_GetClassId)},
    {SIP_MLNAME_CAST(sipName_GetConstrainedObject), meth_FbxConstraintParent_GetConstrainedObject, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxConstraintParent_GetConstrainedObject)},
    {SIP_MLNAME_CAST(sipName_GetConstraintSource), meth_FbxConstraintParent_GetConstraintSource, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxConstraintParent_GetConstraintSource)},
    {SIP_MLNAME_CAST(sipName_GetConstraintSourceCount), meth_FbxConstraintParent_GetConstraintSourceCount, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxConstraintParent_GetConstraintSourceCount)},
    {SIP_MLNAME_CAST(sipName_GetRotationOffset), meth_FbxConstraintParent_GetRotationOffset, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxConstraintParent_GetRotationOffset)},
    {SIP_MLNAME_CAST(sipName_GetTranslationOffset), meth_FbxConstraintParent_GetTranslationOffset, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxConstraintParent_GetTranslationOffset)},
    {SIP_MLNAME_CAST(sipName_SetConstrainedObject), meth_FbxConstraintParent_SetConstrainedObject, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxConstraintParent_SetConstrainedObject)},
    {SIP_MLNAME_CAST(sipName_SetRotationOffset), meth_FbxConstraintParent_SetRotationOffset, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxConstraintParent_SetRotationOffset)},
    {SIP_MLNAME_CAST(sipName_SetTranslationOffset), meth_FbxConstraintParent_SetTranslationOffset, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxConstraintParent_SetTranslationOffset)}
};


extern "C" {static PyObject *varget_FbxConstraintParent_Active(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxConstraintParent_Active(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyBool1*sipVal;
     ::FbxConstraintParent *sipCpp = reinterpret_cast< ::FbxConstraintParent *>(sipSelf);

    sipVal = &sipCpp->Active;

    return sipConvertFromType(sipVal, sipType_FbxPropertyBool1, NULL);
}


extern "C" {static int varset_FbxConstraintParent_Active(void *, PyObject *, PyObject *);}
static int varset_FbxConstraintParent_Active(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyBool1*sipVal;
     ::FbxConstraintParent *sipCpp = reinterpret_cast< ::FbxConstraintParent *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyBool1 *>(sipForceConvertToType(sipPy,sipType_FbxPropertyBool1,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->Active = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxConstraintParent_AffectRotationX(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxConstraintParent_AffectRotationX(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyBool1*sipVal;
     ::FbxConstraintParent *sipCpp = reinterpret_cast< ::FbxConstraintParent *>(sipSelf);

    sipVal = &sipCpp->AffectRotationX;

    return sipConvertFromType(sipVal, sipType_FbxPropertyBool1, NULL);
}


extern "C" {static int varset_FbxConstraintParent_AffectRotationX(void *, PyObject *, PyObject *);}
static int varset_FbxConstraintParent_AffectRotationX(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyBool1*sipVal;
     ::FbxConstraintParent *sipCpp = reinterpret_cast< ::FbxConstraintParent *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyBool1 *>(sipForceConvertToType(sipPy,sipType_FbxPropertyBool1,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->AffectRotationX = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxConstraintParent_AffectRotationY(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxConstraintParent_AffectRotationY(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyBool1*sipVal;
     ::FbxConstraintParent *sipCpp = reinterpret_cast< ::FbxConstraintParent *>(sipSelf);

    sipVal = &sipCpp->AffectRotationY;

    return sipConvertFromType(sipVal, sipType_FbxPropertyBool1, NULL);
}


extern "C" {static int varset_FbxConstraintParent_AffectRotationY(void *, PyObject *, PyObject *);}
static int varset_FbxConstraintParent_AffectRotationY(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyBool1*sipVal;
     ::FbxConstraintParent *sipCpp = reinterpret_cast< ::FbxConstraintParent *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyBool1 *>(sipForceConvertToType(sipPy,sipType_FbxPropertyBool1,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->AffectRotationY = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxConstraintParent_AffectRotationZ(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxConstraintParent_AffectRotationZ(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyBool1*sipVal;
     ::FbxConstraintParent *sipCpp = reinterpret_cast< ::FbxConstraintParent *>(sipSelf);

    sipVal = &sipCpp->AffectRotationZ;

    return sipConvertFromType(sipVal, sipType_FbxPropertyBool1, NULL);
}


extern "C" {static int varset_FbxConstraintParent_AffectRotationZ(void *, PyObject *, PyObject *);}
static int varset_FbxConstraintParent_AffectRotationZ(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyBool1*sipVal;
     ::FbxConstraintParent *sipCpp = reinterpret_cast< ::FbxConstraintParent *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyBool1 *>(sipForceConvertToType(sipPy,sipType_FbxPropertyBool1,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->AffectRotationZ = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxConstraintParent_AffectScalingX(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxConstraintParent_AffectScalingX(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyBool1*sipVal;
     ::FbxConstraintParent *sipCpp = reinterpret_cast< ::FbxConstraintParent *>(sipSelf);

    sipVal = &sipCpp->AffectScalingX;

    return sipConvertFromType(sipVal, sipType_FbxPropertyBool1, NULL);
}


extern "C" {static int varset_FbxConstraintParent_AffectScalingX(void *, PyObject *, PyObject *);}
static int varset_FbxConstraintParent_AffectScalingX(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyBool1*sipVal;
     ::FbxConstraintParent *sipCpp = reinterpret_cast< ::FbxConstraintParent *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyBool1 *>(sipForceConvertToType(sipPy,sipType_FbxPropertyBool1,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->AffectScalingX = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxConstraintParent_AffectScalingY(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxConstraintParent_AffectScalingY(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyBool1*sipVal;
     ::FbxConstraintParent *sipCpp = reinterpret_cast< ::FbxConstraintParent *>(sipSelf);

    sipVal = &sipCpp->AffectScalingY;

    return sipConvertFromType(sipVal, sipType_FbxPropertyBool1, NULL);
}


extern "C" {static int varset_FbxConstraintParent_AffectScalingY(void *, PyObject *, PyObject *);}
static int varset_FbxConstraintParent_AffectScalingY(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyBool1*sipVal;
     ::FbxConstraintParent *sipCpp = reinterpret_cast< ::FbxConstraintParent *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyBool1 *>(sipForceConvertToType(sipPy,sipType_FbxPropertyBool1,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->AffectScalingY = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxConstraintParent_AffectScalingZ(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxConstraintParent_AffectScalingZ(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyBool1*sipVal;
     ::FbxConstraintParent *sipCpp = reinterpret_cast< ::FbxConstraintParent *>(sipSelf);

    sipVal = &sipCpp->AffectScalingZ;

    return sipConvertFromType(sipVal, sipType_FbxPropertyBool1, NULL);
}


extern "C" {static int varset_FbxConstraintParent_AffectScalingZ(void *, PyObject *, PyObject *);}
static int varset_FbxConstraintParent_AffectScalingZ(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyBool1*sipVal;
     ::FbxConstraintParent *sipCpp = reinterpret_cast< ::FbxConstraintParent *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyBool1 *>(sipForceConvertToType(sipPy,sipType_FbxPropertyBool1,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->AffectScalingZ = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxConstraintParent_AffectTranslationX(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxConstraintParent_AffectTranslationX(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyBool1*sipVal;
     ::FbxConstraintParent *sipCpp = reinterpret_cast< ::FbxConstraintParent *>(sipSelf);

    sipVal = &sipCpp->AffectTranslationX;

    return sipConvertFromType(sipVal, sipType_FbxPropertyBool1, NULL);
}


extern "C" {static int varset_FbxConstraintParent_AffectTranslationX(void *, PyObject *, PyObject *);}
static int varset_FbxConstraintParent_AffectTranslationX(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyBool1*sipVal;
     ::FbxConstraintParent *sipCpp = reinterpret_cast< ::FbxConstraintParent *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyBool1 *>(sipForceConvertToType(sipPy,sipType_FbxPropertyBool1,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->AffectTranslationX = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxConstraintParent_AffectTranslationY(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxConstraintParent_AffectTranslationY(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyBool1*sipVal;
     ::FbxConstraintParent *sipCpp = reinterpret_cast< ::FbxConstraintParent *>(sipSelf);

    sipVal = &sipCpp->AffectTranslationY;

    return sipConvertFromType(sipVal, sipType_FbxPropertyBool1, NULL);
}


extern "C" {static int varset_FbxConstraintParent_AffectTranslationY(void *, PyObject *, PyObject *);}
static int varset_FbxConstraintParent_AffectTranslationY(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyBool1*sipVal;
     ::FbxConstraintParent *sipCpp = reinterpret_cast< ::FbxConstraintParent *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyBool1 *>(sipForceConvertToType(sipPy,sipType_FbxPropertyBool1,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->AffectTranslationY = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxConstraintParent_AffectTranslationZ(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxConstraintParent_AffectTranslationZ(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyBool1*sipVal;
     ::FbxConstraintParent *sipCpp = reinterpret_cast< ::FbxConstraintParent *>(sipSelf);

    sipVal = &sipCpp->AffectTranslationZ;

    return sipConvertFromType(sipVal, sipType_FbxPropertyBool1, NULL);
}


extern "C" {static int varset_FbxConstraintParent_AffectTranslationZ(void *, PyObject *, PyObject *);}
static int varset_FbxConstraintParent_AffectTranslationZ(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyBool1*sipVal;
     ::FbxConstraintParent *sipCpp = reinterpret_cast< ::FbxConstraintParent *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyBool1 *>(sipForceConvertToType(sipPy,sipType_FbxPropertyBool1,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->AffectTranslationZ = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxConstraintParent_ClassId(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxConstraintParent_ClassId(void *, PyObject *, PyObject *)
{
     ::FbxClassId*sipVal;

    sipVal = & ::FbxConstraintParent::ClassId;

    return sipConvertFromType(sipVal, sipType_FbxClassId, NULL);
}


extern "C" {static int varset_FbxConstraintParent_ClassId(void *, PyObject *, PyObject *);}
static int varset_FbxConstraintParent_ClassId(void *, PyObject *sipPy, PyObject *)
{
     ::FbxClassId*sipVal;
    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxClassId *>(sipForceConvertToType(sipPy,sipType_FbxClassId,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

     ::FbxConstraintParent::ClassId = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxConstraintParent_ConstrainedObject(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxConstraintParent_ConstrainedObject(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyFbxReference*sipVal;
     ::FbxConstraintParent *sipCpp = reinterpret_cast< ::FbxConstraintParent *>(sipSelf);

    sipVal = &sipCpp->ConstrainedObject;

    return sipConvertFromType(sipVal, sipType_FbxPropertyFbxReference, NULL);
}


extern "C" {static int varset_FbxConstraintParent_ConstrainedObject(void *, PyObject *, PyObject *);}
static int varset_FbxConstraintParent_ConstrainedObject(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyFbxReference*sipVal;
     ::FbxConstraintParent *sipCpp = reinterpret_cast< ::FbxConstraintParent *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyFbxReference *>(sipForceConvertToType(sipPy,sipType_FbxPropertyFbxReference,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->ConstrainedObject = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxConstraintParent_ConstraintSources(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxConstraintParent_ConstraintSources(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyFbxReference*sipVal;
     ::FbxConstraintParent *sipCpp = reinterpret_cast< ::FbxConstraintParent *>(sipSelf);

    sipVal = &sipCpp->ConstraintSources;

    return sipConvertFromType(sipVal, sipType_FbxPropertyFbxReference, NULL);
}


extern "C" {static int varset_FbxConstraintParent_ConstraintSources(void *, PyObject *, PyObject *);}
static int varset_FbxConstraintParent_ConstraintSources(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyFbxReference*sipVal;
     ::FbxConstraintParent *sipCpp = reinterpret_cast< ::FbxConstraintParent *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyFbxReference *>(sipForceConvertToType(sipPy,sipType_FbxPropertyFbxReference,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->ConstraintSources = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxConstraintParent_Lock(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxConstraintParent_Lock(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyBool1*sipVal;
     ::FbxConstraintParent *sipCpp = reinterpret_cast< ::FbxConstraintParent *>(sipSelf);

    sipVal = &sipCpp->Lock;

    return sipConvertFromType(sipVal, sipType_FbxPropertyBool1, NULL);
}


extern "C" {static int varset_FbxConstraintParent_Lock(void *, PyObject *, PyObject *);}
static int varset_FbxConstraintParent_Lock(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyBool1*sipVal;
     ::FbxConstraintParent *sipCpp = reinterpret_cast< ::FbxConstraintParent *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyBool1 *>(sipForceConvertToType(sipPy,sipType_FbxPropertyBool1,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->Lock = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxConstraintParent_Weight(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxConstraintParent_Weight(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyDouble1*sipVal;
     ::FbxConstraintParent *sipCpp = reinterpret_cast< ::FbxConstraintParent *>(sipSelf);

    sipVal = &sipCpp->Weight;

    return sipConvertFromType(sipVal, sipType_FbxPropertyDouble1, NULL);
}


extern "C" {static int varset_FbxConstraintParent_Weight(void *, PyObject *, PyObject *);}
static int varset_FbxConstraintParent_Weight(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyDouble1*sipVal;
     ::FbxConstraintParent *sipCpp = reinterpret_cast< ::FbxConstraintParent *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyDouble1 *>(sipForceConvertToType(sipPy,sipType_FbxPropertyDouble1,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->Weight = *sipVal;

    return 0;
}

sipVariableDef variables_FbxConstraintParent[] = {
    {InstanceVariable, sipName_Active, (PyMethodDef *)varget_FbxConstraintParent_Active, (PyMethodDef *)varset_FbxConstraintParent_Active, NULL, NULL},
    {InstanceVariable, sipName_AffectRotationX, (PyMethodDef *)varget_FbxConstraintParent_AffectRotationX, (PyMethodDef *)varset_FbxConstraintParent_AffectRotationX, NULL, NULL},
    {InstanceVariable, sipName_AffectRotationY, (PyMethodDef *)varget_FbxConstraintParent_AffectRotationY, (PyMethodDef *)varset_FbxConstraintParent_AffectRotationY, NULL, NULL},
    {InstanceVariable, sipName_AffectRotationZ, (PyMethodDef *)varget_FbxConstraintParent_AffectRotationZ, (PyMethodDef *)varset_FbxConstraintParent_AffectRotationZ, NULL, NULL},
    {InstanceVariable, sipName_AffectScalingX, (PyMethodDef *)varget_FbxConstraintParent_AffectScalingX, (PyMethodDef *)varset_FbxConstraintParent_AffectScalingX, NULL, NULL},
    {InstanceVariable, sipName_AffectScalingY, (PyMethodDef *)varget_FbxConstraintParent_AffectScalingY, (PyMethodDef *)varset_FbxConstraintParent_AffectScalingY, NULL, NULL},
    {InstanceVariable, sipName_AffectScalingZ, (PyMethodDef *)varget_FbxConstraintParent_AffectScalingZ, (PyMethodDef *)varset_FbxConstraintParent_AffectScalingZ, NULL, NULL},
    {InstanceVariable, sipName_AffectTranslationX, (PyMethodDef *)varget_FbxConstraintParent_AffectTranslationX, (PyMethodDef *)varset_FbxConstraintParent_AffectTranslationX, NULL, NULL},
    {InstanceVariable, sipName_AffectTranslationY, (PyMethodDef *)varget_FbxConstraintParent_AffectTranslationY, (PyMethodDef *)varset_FbxConstraintParent_AffectTranslationY, NULL, NULL},
    {InstanceVariable, sipName_AffectTranslationZ, (PyMethodDef *)varget_FbxConstraintParent_AffectTranslationZ, (PyMethodDef *)varset_FbxConstraintParent_AffectTranslationZ, NULL, NULL},
    {ClassVariable, sipName_ClassId, (PyMethodDef *)varget_FbxConstraintParent_ClassId, (PyMethodDef *)varset_FbxConstraintParent_ClassId, NULL, NULL},
    {InstanceVariable, sipName_ConstrainedObject, (PyMethodDef *)varget_FbxConstraintParent_ConstrainedObject, (PyMethodDef *)varset_FbxConstraintParent_ConstrainedObject, NULL, NULL},
    {InstanceVariable, sipName_ConstraintSources, (PyMethodDef *)varget_FbxConstraintParent_ConstraintSources, (PyMethodDef *)varset_FbxConstraintParent_ConstraintSources, NULL, NULL},
    {InstanceVariable, sipName_Lock, (PyMethodDef *)varget_FbxConstraintParent_Lock, (PyMethodDef *)varset_FbxConstraintParent_Lock, NULL, NULL},
    {InstanceVariable, sipName_Weight, (PyMethodDef *)varget_FbxConstraintParent_Weight, (PyMethodDef *)varset_FbxConstraintParent_Weight, NULL, NULL},
};


sipClassTypeDef sipTypeDef_fbx_FbxConstraintParent = {
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_FbxConstraintParent,
        {0},
        0
    },
    {
        sipNameNr_FbxConstraintParent,
        {0, 0, 1},
        11, methods_FbxConstraintParent,
        0, 0,
        15, variables_FbxConstraintParent,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    0,
    -1,
    -1,
    supers_FbxConstraintParent,
    slots_FbxConstraintParent,
    0,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    0,
    0,
    0,
    0,
    release_FbxConstraintParent,
    cast_FbxConstraintParent,
    0,
    0,
    0,
    0,
    0,
    0
};
