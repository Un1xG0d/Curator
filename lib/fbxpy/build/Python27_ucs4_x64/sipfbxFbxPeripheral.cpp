/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.3
 *
 * Copyright (C) 2009 Autodesk, Inc. and/or its licensors.
 * All Rights Reserved.
 * 
 * The coded instructions, statements, computer programs, and/or related material 
 * (collectively the "Data") in these files contain unpublished information 
 * proprietary to Autodesk, Inc. and/or its licensors, which is protected by 
 * Canada and United States of America federal copyright law and by international 
 * treaties. 
 * 
 * The Data may not be disclosed or distributed to third parties, in whole or in
 * part, without the prior written consent of Autodesk, Inc. ("Autodesk").
 * 
 * THE DATA IS PROVIDED "AS IS" AND WITHOUT WARRANTY.
 * ALL WARRANTIES ARE EXPRESSLY EXCLUDED AND DISCLAIMED. AUTODESK MAKES NO
 * WARRANTY OF ANY KIND WITH RESPECT TO THE DATA, EXPRESS, IMPLIED OR ARISING
 * BY CUSTOM OR TRADE USAGE, AND DISCLAIMS ANY IMPLIED WARRANTIES OF TITLE, 
 * NON-INFRINGEMENT, MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE OR USE. 
 * WITHOUT LIMITING THE FOREGOING, AUTODESK DOES NOT WARRANT THAT THE OPERATION
 * OF THE DATA WILL BE UNINTERRUPTED OR ERROR FREE. 
 * 
 * IN NO EVENT SHALL AUTODESK, ITS AFFILIATES, PARENT COMPANIES, LICENSORS
 * OR SUPPLIERS ("AUTODESK GROUP") BE LIABLE FOR ANY LOSSES, DAMAGES OR EXPENSES
 * OF ANY KIND (INCLUDING WITHOUT LIMITATION PUNITIVE OR MULTIPLE DAMAGES OR OTHER
 * SPECIAL, DIRECT, INDIRECT, EXEMPLARY, INCIDENTAL, LOSS OF PROFITS, REVENUE
 * OR DATA, COST OF COVER OR CONSEQUENTIAL LOSSES OR DAMAGES OF ANY KIND),
 * HOWEVER CAUSED, AND REGARDLESS OF THE THEORY OF LIABILITY, WHETHER DERIVED
 * FROM CONTRACT, TORT (INCLUDING, BUT NOT LIMITED TO, NEGLIGENCE), OR OTHERWISE,
 * ARISING OUT OF OR RELATING TO THE DATA OR ITS USE OR ANY OTHER PERFORMANCE,
 * WHETHER OR NOT AUTODESK HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH LOSS
 * OR DAMAGE. 
 */

#include "sipAPIfbx.h"




class sipFbxPeripheral : public  ::FbxPeripheral
{
public:
    sipFbxPeripheral();
    sipFbxPeripheral(const  ::FbxPeripheral&);
    virtual ~sipFbxPeripheral();

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void UninitializeConnectionsOf( ::FbxObject*);
    void InitializeConnectionsOf( ::FbxObject*);
    bool CanLoadContentOf( ::FbxObject*);
    bool CanUnloadContentOf( ::FbxObject*);
    bool LoadContentOf( ::FbxObject*);
    bool UnloadContentOf( ::FbxObject*);
    void Reset();

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipFbxPeripheral(const sipFbxPeripheral &);
    sipFbxPeripheral &operator = (const sipFbxPeripheral &);

    char sipPyMethods[7];
};

sipFbxPeripheral::sipFbxPeripheral():  ::FbxPeripheral(), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipFbxPeripheral::sipFbxPeripheral(const  ::FbxPeripheral& a0):  ::FbxPeripheral(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipFbxPeripheral::~sipFbxPeripheral()
{
    sipInstanceDestroyed(sipPySelf);
}

void sipFbxPeripheral::UninitializeConnectionsOf( ::FbxObject*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,sipName_FbxPeripheral,sipName_UninitializeConnectionsOf);

    if (!sipMeth)
        return;

    extern void sipVH_fbx_11(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::FbxObject*);

    sipVH_fbx_11(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipFbxPeripheral::InitializeConnectionsOf( ::FbxObject*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,sipName_FbxPeripheral,sipName_InitializeConnectionsOf);

    if (!sipMeth)
        return;

    extern void sipVH_fbx_11(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::FbxObject*);

    sipVH_fbx_11(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipFbxPeripheral::CanLoadContentOf( ::FbxObject*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,sipName_FbxPeripheral,sipName_CanLoadContentOf);

    if (!sipMeth)
        return 0;

    extern bool sipVH_fbx_10(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::FbxObject*);

    return sipVH_fbx_10(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipFbxPeripheral::CanUnloadContentOf( ::FbxObject*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,sipName_FbxPeripheral,sipName_CanUnloadContentOf);

    if (!sipMeth)
        return 0;

    extern bool sipVH_fbx_10(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::FbxObject*);

    return sipVH_fbx_10(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipFbxPeripheral::LoadContentOf( ::FbxObject*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,sipName_FbxPeripheral,sipName_LoadContentOf);

    if (!sipMeth)
        return 0;

    extern bool sipVH_fbx_10(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::FbxObject*);

    return sipVH_fbx_10(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipFbxPeripheral::UnloadContentOf( ::FbxObject*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,sipName_FbxPeripheral,sipName_UnloadContentOf);

    if (!sipMeth)
        return 0;

    extern bool sipVH_fbx_10(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::FbxObject*);

    return sipVH_fbx_10(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipFbxPeripheral::Reset()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,sipName_FbxPeripheral,sipName_Reset);

    if (!sipMeth)
        return;

    extern void sipVH_fbx_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH_fbx_0(sipGILState, 0, sipPySelf, sipMeth);
}


PyDoc_STRVAR(doc_FbxPeripheral_Reset, "Reset(self)");

extern "C" {static PyObject *meth_FbxPeripheral_Reset(PyObject *, PyObject *);}
static PyObject *meth_FbxPeripheral_Reset(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
         ::FbxPeripheral *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxPeripheral, &sipCpp))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_FbxPeripheral, sipName_Reset);
                return NULL;
            }

            sipCpp->Reset();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxPeripheral, sipName_Reset, doc_FbxPeripheral_Reset);

    return NULL;
}


PyDoc_STRVAR(doc_FbxPeripheral_UnloadContentOf, "UnloadContentOf(self, FbxObject) -> bool");

extern "C" {static PyObject *meth_FbxPeripheral_UnloadContentOf(PyObject *, PyObject *);}
static PyObject *meth_FbxPeripheral_UnloadContentOf(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
         ::FbxObject* a0;
         ::FbxPeripheral *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_FbxPeripheral, &sipCpp, sipType_FbxObject, &a0))
        {
            bool sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_FbxPeripheral, sipName_UnloadContentOf);
                return NULL;
            }

            sipRes = sipCpp->UnloadContentOf(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxPeripheral, sipName_UnloadContentOf, doc_FbxPeripheral_UnloadContentOf);

    return NULL;
}


PyDoc_STRVAR(doc_FbxPeripheral_LoadContentOf, "LoadContentOf(self, FbxObject) -> bool");

extern "C" {static PyObject *meth_FbxPeripheral_LoadContentOf(PyObject *, PyObject *);}
static PyObject *meth_FbxPeripheral_LoadContentOf(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
         ::FbxObject* a0;
         ::FbxPeripheral *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_FbxPeripheral, &sipCpp, sipType_FbxObject, &a0))
        {
            bool sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_FbxPeripheral, sipName_LoadContentOf);
                return NULL;
            }

            sipRes = sipCpp->LoadContentOf(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxPeripheral, sipName_LoadContentOf, doc_FbxPeripheral_LoadContentOf);

    return NULL;
}


PyDoc_STRVAR(doc_FbxPeripheral_CanUnloadContentOf, "CanUnloadContentOf(self, FbxObject) -> bool");

extern "C" {static PyObject *meth_FbxPeripheral_CanUnloadContentOf(PyObject *, PyObject *);}
static PyObject *meth_FbxPeripheral_CanUnloadContentOf(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
         ::FbxObject* a0;
         ::FbxPeripheral *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_FbxPeripheral, &sipCpp, sipType_FbxObject, &a0))
        {
            bool sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_FbxPeripheral, sipName_CanUnloadContentOf);
                return NULL;
            }

            sipRes = sipCpp->CanUnloadContentOf(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxPeripheral, sipName_CanUnloadContentOf, doc_FbxPeripheral_CanUnloadContentOf);

    return NULL;
}


PyDoc_STRVAR(doc_FbxPeripheral_CanLoadContentOf, "CanLoadContentOf(self, FbxObject) -> bool");

extern "C" {static PyObject *meth_FbxPeripheral_CanLoadContentOf(PyObject *, PyObject *);}
static PyObject *meth_FbxPeripheral_CanLoadContentOf(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
         ::FbxObject* a0;
         ::FbxPeripheral *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_FbxPeripheral, &sipCpp, sipType_FbxObject, &a0))
        {
            bool sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_FbxPeripheral, sipName_CanLoadContentOf);
                return NULL;
            }

            sipRes = sipCpp->CanLoadContentOf(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxPeripheral, sipName_CanLoadContentOf, doc_FbxPeripheral_CanLoadContentOf);

    return NULL;
}


PyDoc_STRVAR(doc_FbxPeripheral_InitializeConnectionsOf, "InitializeConnectionsOf(self, FbxObject)");

extern "C" {static PyObject *meth_FbxPeripheral_InitializeConnectionsOf(PyObject *, PyObject *);}
static PyObject *meth_FbxPeripheral_InitializeConnectionsOf(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
         ::FbxObject* a0;
         ::FbxPeripheral *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_FbxPeripheral, &sipCpp, sipType_FbxObject, &a0))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_FbxPeripheral, sipName_InitializeConnectionsOf);
                return NULL;
            }

            sipCpp->InitializeConnectionsOf(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxPeripheral, sipName_InitializeConnectionsOf, doc_FbxPeripheral_InitializeConnectionsOf);

    return NULL;
}


PyDoc_STRVAR(doc_FbxPeripheral_UninitializeConnectionsOf, "UninitializeConnectionsOf(self, FbxObject)");

extern "C" {static PyObject *meth_FbxPeripheral_UninitializeConnectionsOf(PyObject *, PyObject *);}
static PyObject *meth_FbxPeripheral_UninitializeConnectionsOf(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
         ::FbxObject* a0;
         ::FbxPeripheral *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_FbxPeripheral, &sipCpp, sipType_FbxObject, &a0))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_FbxPeripheral, sipName_UninitializeConnectionsOf);
                return NULL;
            }

            sipCpp->UninitializeConnectionsOf(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxPeripheral, sipName_UninitializeConnectionsOf, doc_FbxPeripheral_UninitializeConnectionsOf);

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_FbxPeripheral(void *, int);}
static void release_FbxPeripheral(void *sipCppV, int sipState)
{
    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipFbxPeripheral *>(sipCppV);
    else
        delete reinterpret_cast< ::FbxPeripheral *>(sipCppV);
}


extern "C" {static void dealloc_FbxPeripheral(sipSimpleWrapper *);}
static void dealloc_FbxPeripheral(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipFbxPeripheral *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_FbxPeripheral(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_FbxPeripheral(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_FbxPeripheral(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipFbxPeripheral *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            sipCpp = new sipFbxPeripheral();

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const  ::FbxPeripheral* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_FbxPeripheral, &a0))
        {
            sipCpp = new sipFbxPeripheral(*a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


static PyMethodDef methods_FbxPeripheral[] = {
    {SIP_MLNAME_CAST(sipName_CanLoadContentOf), meth_FbxPeripheral_CanLoadContentOf, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxPeripheral_CanLoadContentOf)},
    {SIP_MLNAME_CAST(sipName_CanUnloadContentOf), meth_FbxPeripheral_CanUnloadContentOf, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxPeripheral_CanUnloadContentOf)},
    {SIP_MLNAME_CAST(sipName_InitializeConnectionsOf), meth_FbxPeripheral_InitializeConnectionsOf, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxPeripheral_InitializeConnectionsOf)},
    {SIP_MLNAME_CAST(sipName_LoadContentOf), meth_FbxPeripheral_LoadContentOf, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxPeripheral_LoadContentOf)},
    {SIP_MLNAME_CAST(sipName_Reset), meth_FbxPeripheral_Reset, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxPeripheral_Reset)},
    {SIP_MLNAME_CAST(sipName_UninitializeConnectionsOf), meth_FbxPeripheral_UninitializeConnectionsOf, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxPeripheral_UninitializeConnectionsOf)},
    {SIP_MLNAME_CAST(sipName_UnloadContentOf), meth_FbxPeripheral_UnloadContentOf, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxPeripheral_UnloadContentOf)}
};

PyDoc_STRVAR(doc_FbxPeripheral, "\1FbxPeripheral()\n"
    "FbxPeripheral(FbxPeripheral)");


sipClassTypeDef sipTypeDef_fbx_FbxPeripheral = {
    {
        -1,
        0,
        0,
        SIP_TYPE_ABSTRACT|SIP_TYPE_CLASS,
        sipNameNr_FbxPeripheral,
        {0},
        0
    },
    {
        sipNameNr_FbxPeripheral,
        {0, 0, 1},
        7, methods_FbxPeripheral,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_FbxPeripheral,
    -1,
    -1,
    0,
    0,
    init_type_FbxPeripheral,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_FbxPeripheral,
    0,
    0,
    0,
    release_FbxPeripheral,
    0,
    0,
    0,
    0,
    0,
    0,
    0
};
