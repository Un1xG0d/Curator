/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.3
 *
 * Copyright (C) 2009 Autodesk, Inc. and/or its licensors.
 * All Rights Reserved.
 * 
 * The coded instructions, statements, computer programs, and/or related material 
 * (collectively the "Data") in these files contain unpublished information 
 * proprietary to Autodesk, Inc. and/or its licensors, which is protected by 
 * Canada and United States of America federal copyright law and by international 
 * treaties. 
 * 
 * The Data may not be disclosed or distributed to third parties, in whole or in
 * part, without the prior written consent of Autodesk, Inc. ("Autodesk").
 * 
 * THE DATA IS PROVIDED "AS IS" AND WITHOUT WARRANTY.
 * ALL WARRANTIES ARE EXPRESSLY EXCLUDED AND DISCLAIMED. AUTODESK MAKES NO
 * WARRANTY OF ANY KIND WITH RESPECT TO THE DATA, EXPRESS, IMPLIED OR ARISING
 * BY CUSTOM OR TRADE USAGE, AND DISCLAIMS ANY IMPLIED WARRANTIES OF TITLE, 
 * NON-INFRINGEMENT, MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE OR USE. 
 * WITHOUT LIMITING THE FOREGOING, AUTODESK DOES NOT WARRANT THAT THE OPERATION
 * OF THE DATA WILL BE UNINTERRUPTED OR ERROR FREE. 
 * 
 * IN NO EVENT SHALL AUTODESK, ITS AFFILIATES, PARENT COMPANIES, LICENSORS
 * OR SUPPLIERS ("AUTODESK GROUP") BE LIABLE FOR ANY LOSSES, DAMAGES OR EXPENSES
 * OF ANY KIND (INCLUDING WITHOUT LIMITATION PUNITIVE OR MULTIPLE DAMAGES OR OTHER
 * SPECIAL, DIRECT, INDIRECT, EXEMPLARY, INCIDENTAL, LOSS OF PROFITS, REVENUE
 * OR DATA, COST OF COVER OR CONSEQUENTIAL LOSSES OR DAMAGES OF ANY KIND),
 * HOWEVER CAUSED, AND REGARDLESS OF THE THEORY OF LIABILITY, WHETHER DERIVED
 * FROM CONTRACT, TORT (INCLUDING, BUT NOT LIMITED TO, NEGLIGENCE), OR OTHERWISE,
 * ARISING OUT OF OR RELATING TO THE DATA OR ITS USE OR ANY OTHER PERFORMANCE,
 * WHETHER OR NOT AUTODESK HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH LOSS
 * OR DAMAGE. 
 */

#include "sipAPIfbx.h"




PyDoc_STRVAR(doc_FbxBlendShape_Create, "Create(FbxManager, str) -> FbxBlendShape\n"
    "Create(FbxObject, str) -> FbxBlendShape");

extern "C" {static PyObject *meth_FbxBlendShape_Create(PyObject *, PyObject *);}
static PyObject *meth_FbxBlendShape_Create(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxManager* a0;
        const char* a1;
        PyObject *a1Keep;

        if (sipParseArgs(&sipParseErr, sipArgs, "J8A8", sipType_FbxManager, &a0, &a1Keep, &a1))
        {
             ::FbxBlendShape*sipRes;

            sipRes =  ::FbxBlendShape::Create(a0,a1);
            Py_DECREF(a1Keep);

            return sipConvertFromType(sipRes,sipType_FbxBlendShape,NULL);
        }
    }

    {
         ::FbxObject* a0;
        const char* a1;
        PyObject *a1Keep;

        if (sipParseArgs(&sipParseErr, sipArgs, "J8A8", sipType_FbxObject, &a0, &a1Keep, &a1))
        {
             ::FbxBlendShape*sipRes;

            sipRes =  ::FbxBlendShape::Create(a0,a1);
            Py_DECREF(a1Keep);

            return sipConvertFromType(sipRes,sipType_FbxBlendShape,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxBlendShape, sipName_Create, doc_FbxBlendShape_Create);

    return NULL;
}


PyDoc_STRVAR(doc_FbxBlendShape_GetClassId, "GetClassId(self) -> FbxClassId");

extern "C" {static PyObject *meth_FbxBlendShape_GetClassId(PyObject *, PyObject *);}
static PyObject *meth_FbxBlendShape_GetClassId(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::FbxBlendShape *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxBlendShape, &sipCpp))
        {
             ::FbxClassId*sipRes;

            sipRes = new  ::FbxClassId((sipSelfWasArg ? sipCpp-> ::FbxBlendShape::GetClassId() : sipCpp->GetClassId()));

            return sipConvertFromNewType(sipRes,sipType_FbxClassId,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxBlendShape, sipName_GetClassId, doc_FbxBlendShape_GetClassId);

    return NULL;
}


PyDoc_STRVAR(doc_FbxBlendShape_SetGeometry, "SetGeometry(self, FbxGeometry) -> bool");

extern "C" {static PyObject *meth_FbxBlendShape_SetGeometry(PyObject *, PyObject *);}
static PyObject *meth_FbxBlendShape_SetGeometry(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxGeometry* a0;
         ::FbxBlendShape *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_FbxBlendShape, &sipCpp, sipType_FbxGeometry, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->SetGeometry(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxBlendShape, sipName_SetGeometry, doc_FbxBlendShape_SetGeometry);

    return NULL;
}


PyDoc_STRVAR(doc_FbxBlendShape_GetGeometry, "GetGeometry(self) -> FbxGeometry");

extern "C" {static PyObject *meth_FbxBlendShape_GetGeometry(PyObject *, PyObject *);}
static PyObject *meth_FbxBlendShape_GetGeometry(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxBlendShape *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxBlendShape, &sipCpp))
        {
             ::FbxGeometry*sipRes;

            sipRes = sipCpp->GetGeometry();

            return sipConvertFromType(sipRes,sipType_FbxGeometry,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxBlendShape, sipName_GetGeometry, doc_FbxBlendShape_GetGeometry);

    return NULL;
}


PyDoc_STRVAR(doc_FbxBlendShape_AddBlendShapeChannel, "AddBlendShapeChannel(self, FbxBlendShapeChannel) -> bool");

extern "C" {static PyObject *meth_FbxBlendShape_AddBlendShapeChannel(PyObject *, PyObject *);}
static PyObject *meth_FbxBlendShape_AddBlendShapeChannel(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxBlendShapeChannel* a0;
         ::FbxBlendShape *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_FbxBlendShape, &sipCpp, sipType_FbxBlendShapeChannel, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->AddBlendShapeChannel(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxBlendShape, sipName_AddBlendShapeChannel, doc_FbxBlendShape_AddBlendShapeChannel);

    return NULL;
}


PyDoc_STRVAR(doc_FbxBlendShape_RemoveBlendShapeChannel, "RemoveBlendShapeChannel(self, FbxBlendShapeChannel) -> FbxBlendShapeChannel");

extern "C" {static PyObject *meth_FbxBlendShape_RemoveBlendShapeChannel(PyObject *, PyObject *);}
static PyObject *meth_FbxBlendShape_RemoveBlendShapeChannel(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxBlendShapeChannel* a0;
         ::FbxBlendShape *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_FbxBlendShape, &sipCpp, sipType_FbxBlendShapeChannel, &a0))
        {
             ::FbxBlendShapeChannel*sipRes;

            sipRes = sipCpp->RemoveBlendShapeChannel(a0);

            return sipConvertFromType(sipRes,sipType_FbxBlendShapeChannel,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxBlendShape, sipName_RemoveBlendShapeChannel, doc_FbxBlendShape_RemoveBlendShapeChannel);

    return NULL;
}


PyDoc_STRVAR(doc_FbxBlendShape_GetBlendShapeChannelCount, "GetBlendShapeChannelCount(self) -> int");

extern "C" {static PyObject *meth_FbxBlendShape_GetBlendShapeChannelCount(PyObject *, PyObject *);}
static PyObject *meth_FbxBlendShape_GetBlendShapeChannelCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::FbxBlendShape *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxBlendShape, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->GetBlendShapeChannelCount();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxBlendShape, sipName_GetBlendShapeChannelCount, doc_FbxBlendShape_GetBlendShapeChannelCount);

    return NULL;
}


PyDoc_STRVAR(doc_FbxBlendShape_GetBlendShapeChannel, "GetBlendShapeChannel(self, int) -> FbxBlendShapeChannel");

extern "C" {static PyObject *meth_FbxBlendShape_GetBlendShapeChannel(PyObject *, PyObject *);}
static PyObject *meth_FbxBlendShape_GetBlendShapeChannel(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
         ::FbxBlendShape *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_FbxBlendShape, &sipCpp, &a0))
        {
             ::FbxBlendShapeChannel*sipRes;

            sipRes = sipCpp->GetBlendShapeChannel(a0);

            return sipConvertFromType(sipRes,sipType_FbxBlendShapeChannel,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxBlendShape, sipName_GetBlendShapeChannel, doc_FbxBlendShape_GetBlendShapeChannel);

    return NULL;
}


PyDoc_STRVAR(doc_FbxBlendShape_GetDeformerType, "GetDeformerType(self) -> FbxDeformer.EDeformerType");

extern "C" {static PyObject *meth_FbxBlendShape_GetDeformerType(PyObject *, PyObject *);}
static PyObject *meth_FbxBlendShape_GetDeformerType(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::FbxBlendShape *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxBlendShape, &sipCpp))
        {
             ::FbxDeformer::EDeformerType sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::FbxBlendShape::GetDeformerType() : sipCpp->GetDeformerType());

            return sipConvertFromEnum(sipRes,sipType_FbxDeformer_EDeformerType);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxBlendShape, sipName_GetDeformerType, doc_FbxBlendShape_GetDeformerType);

    return NULL;
}


PyDoc_STRVAR(doc_FbxBlendShape_Reset, "Reset(self)");

extern "C" {static PyObject *meth_FbxBlendShape_Reset(PyObject *, PyObject *);}
static PyObject *meth_FbxBlendShape_Reset(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxBlendShape *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxBlendShape, &sipCpp))
        {
            sipCpp->Reset();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxBlendShape, sipName_Reset, doc_FbxBlendShape_Reset);

    return NULL;
}


extern "C" {static PyObject *slot_FbxBlendShape___ne__(PyObject *,PyObject *);}
static PyObject *slot_FbxBlendShape___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::FbxBlendShape *sipCpp = reinterpret_cast< ::FbxBlendShape *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_FbxBlendShape));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const  ::FbxShape* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_FbxShape, &a0))
        {
            bool sipRes;

            sipRes = !sipCpp-> ::FbxBlendShape::operator==(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_fbx, ne_slot, sipType_FbxBlendShape, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_FbxBlendShape___eq__(PyObject *,PyObject *);}
static PyObject *slot_FbxBlendShape___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::FbxBlendShape *sipCpp = reinterpret_cast< ::FbxBlendShape *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_FbxBlendShape));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const  ::FbxShape* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_FbxShape, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::FbxBlendShape::operator==(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_fbx, eq_slot, sipType_FbxBlendShape, sipSelf, sipArg);
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_FbxBlendShape(void *, const sipTypeDef *);}
static void *cast_FbxBlendShape(void *sipCppV, const sipTypeDef *targetType)
{
     ::FbxBlendShape *sipCpp = reinterpret_cast< ::FbxBlendShape *>(sipCppV);

    if (targetType == sipType_FbxDeformer)
        return static_cast< ::FbxDeformer *>(sipCpp);

    if (targetType == sipType_FbxObject)
        return static_cast< ::FbxObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_FbxBlendShape(void *, int);}
static void release_FbxBlendShape(void *, int)
{
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_FbxBlendShape[] = {{125, 255, 1}};


/* Define this type's Python slots. */
static sipPySlotDef slots_FbxBlendShape[] = {
    {(void *)slot_FbxBlendShape___ne__, ne_slot},
    {(void *)slot_FbxBlendShape___eq__, eq_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_FbxBlendShape[] = {
    {SIP_MLNAME_CAST(sipName_AddBlendShapeChannel), meth_FbxBlendShape_AddBlendShapeChannel, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxBlendShape_AddBlendShapeChannel)},
    {SIP_MLNAME_CAST(sipName_Create), meth_FbxBlendShape_Create, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxBlendShape_Create)},
    {SIP_MLNAME_CAST(sipName_GetBlendShapeChannel), meth_FbxBlendShape_GetBlendShapeChannel, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxBlendShape_GetBlendShapeChannel)},
    {SIP_MLNAME_CAST(sipName_GetBlendShapeChannelCount), meth_FbxBlendShape_GetBlendShapeChannelCount, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxBlendShape_GetBlendShapeChannelCount)},
    {SIP_MLNAME_CAST(sipName_GetClassId), meth_FbxBlendShape_GetClassId, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxBlendShape_GetClassId)},
    {SIP_MLNAME_CAST(sipName_GetDeformerType), meth_FbxBlendShape_GetDeformerType, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxBlendShape_GetDeformerType)},
    {SIP_MLNAME_CAST(sipName_GetGeometry), meth_FbxBlendShape_GetGeometry, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxBlendShape_GetGeometry)},
    {SIP_MLNAME_CAST(sipName_RemoveBlendShapeChannel), meth_FbxBlendShape_RemoveBlendShapeChannel, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxBlendShape_RemoveBlendShapeChannel)},
    {SIP_MLNAME_CAST(sipName_Reset), meth_FbxBlendShape_Reset, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxBlendShape_Reset)},
    {SIP_MLNAME_CAST(sipName_SetGeometry), meth_FbxBlendShape_SetGeometry, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxBlendShape_SetGeometry)}
};


extern "C" {static PyObject *varget_FbxBlendShape_ClassId(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxBlendShape_ClassId(void *, PyObject *, PyObject *)
{
     ::FbxClassId*sipVal;

    sipVal = & ::FbxBlendShape::ClassId;

    return sipConvertFromType(sipVal, sipType_FbxClassId, NULL);
}


extern "C" {static int varset_FbxBlendShape_ClassId(void *, PyObject *, PyObject *);}
static int varset_FbxBlendShape_ClassId(void *, PyObject *sipPy, PyObject *)
{
     ::FbxClassId*sipVal;
    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxClassId *>(sipForceConvertToType(sipPy,sipType_FbxClassId,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

     ::FbxBlendShape::ClassId = *sipVal;

    return 0;
}

sipVariableDef variables_FbxBlendShape[] = {
    {ClassVariable, sipName_ClassId, (PyMethodDef *)varget_FbxBlendShape_ClassId, (PyMethodDef *)varset_FbxBlendShape_ClassId, NULL, NULL},
};


sipClassTypeDef sipTypeDef_fbx_FbxBlendShape = {
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_FbxBlendShape,
        {0},
        0
    },
    {
        sipNameNr_FbxBlendShape,
        {0, 0, 1},
        10, methods_FbxBlendShape,
        0, 0,
        1, variables_FbxBlendShape,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    0,
    -1,
    -1,
    supers_FbxBlendShape,
    slots_FbxBlendShape,
    0,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    0,
    0,
    0,
    0,
    release_FbxBlendShape,
    cast_FbxBlendShape,
    0,
    0,
    0,
    0,
    0,
    0
};
