/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.3
 *
 * Copyright (C) 2009 Autodesk, Inc. and/or its licensors.
 * All Rights Reserved.
 * 
 * The coded instructions, statements, computer programs, and/or related material 
 * (collectively the "Data") in these files contain unpublished information 
 * proprietary to Autodesk, Inc. and/or its licensors, which is protected by 
 * Canada and United States of America federal copyright law and by international 
 * treaties. 
 * 
 * The Data may not be disclosed or distributed to third parties, in whole or in
 * part, without the prior written consent of Autodesk, Inc. ("Autodesk").
 * 
 * THE DATA IS PROVIDED "AS IS" AND WITHOUT WARRANTY.
 * ALL WARRANTIES ARE EXPRESSLY EXCLUDED AND DISCLAIMED. AUTODESK MAKES NO
 * WARRANTY OF ANY KIND WITH RESPECT TO THE DATA, EXPRESS, IMPLIED OR ARISING
 * BY CUSTOM OR TRADE USAGE, AND DISCLAIMS ANY IMPLIED WARRANTIES OF TITLE, 
 * NON-INFRINGEMENT, MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE OR USE. 
 * WITHOUT LIMITING THE FOREGOING, AUTODESK DOES NOT WARRANT THAT THE OPERATION
 * OF THE DATA WILL BE UNINTERRUPTED OR ERROR FREE. 
 * 
 * IN NO EVENT SHALL AUTODESK, ITS AFFILIATES, PARENT COMPANIES, LICENSORS
 * OR SUPPLIERS ("AUTODESK GROUP") BE LIABLE FOR ANY LOSSES, DAMAGES OR EXPENSES
 * OF ANY KIND (INCLUDING WITHOUT LIMITATION PUNITIVE OR MULTIPLE DAMAGES OR OTHER
 * SPECIAL, DIRECT, INDIRECT, EXEMPLARY, INCIDENTAL, LOSS OF PROFITS, REVENUE
 * OR DATA, COST OF COVER OR CONSEQUENTIAL LOSSES OR DAMAGES OF ANY KIND),
 * HOWEVER CAUSED, AND REGARDLESS OF THE THEORY OF LIABILITY, WHETHER DERIVED
 * FROM CONTRACT, TORT (INCLUDING, BUT NOT LIMITED TO, NEGLIGENCE), OR OTHERWISE,
 * ARISING OUT OF OR RELATING TO THE DATA OR ITS USE OR ANY OTHER PERFORMANCE,
 * WHETHER OR NOT AUTODESK HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH LOSS
 * OR DAMAGE. 
 */

#include "sipAPIfbx.h"




PyDoc_STRVAR(doc_FbxBlob_Assign, "Assign(self, sip.voidptr, int)");

extern "C" {static PyObject *meth_FbxBlob_Assign(PyObject *, PyObject *);}
static PyObject *meth_FbxBlob_Assign(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const void* a0;
        int a1;
         ::FbxBlob *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bvi", &sipSelf, sipType_FbxBlob, &sipCpp, &a0, &a1))
        {
            sipCpp->Assign(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxBlob, sipName_Assign, doc_FbxBlob_Assign);

    return NULL;
}


PyDoc_STRVAR(doc_FbxBlob_Access, "Access(self) -> sip.voidptr");

extern "C" {static PyObject *meth_FbxBlob_Access(PyObject *, PyObject *);}
static PyObject *meth_FbxBlob_Access(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::FbxBlob *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxBlob, &sipCpp))
        {
            const void*sipRes;

            sipRes = sipCpp->Access();

            return sipConvertFromConstVoidPtr(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxBlob, sipName_Access, doc_FbxBlob_Access);

    return NULL;
}


PyDoc_STRVAR(doc_FbxBlob_Size, "Size(self) -> int");

extern "C" {static PyObject *meth_FbxBlob_Size(PyObject *, PyObject *);}
static PyObject *meth_FbxBlob_Size(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxBlob *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxBlob, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->Size();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxBlob, sipName_Size, doc_FbxBlob_Size);

    return NULL;
}


PyDoc_STRVAR(doc_FbxBlob_Clear, "Clear(self)");

extern "C" {static PyObject *meth_FbxBlob_Clear(PyObject *, PyObject *);}
static PyObject *meth_FbxBlob_Clear(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxBlob *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxBlob, &sipCpp))
        {
            sipCpp->Clear();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxBlob, sipName_Clear, doc_FbxBlob_Clear);

    return NULL;
}


extern "C" {static PyObject *slot_FbxBlob___ne__(PyObject *,PyObject *);}
static PyObject *slot_FbxBlob___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::FbxBlob *sipCpp = reinterpret_cast< ::FbxBlob *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_FbxBlob));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const  ::FbxBlob* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_FbxBlob, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::FbxBlob::operator!=(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_fbx, ne_slot, sipType_FbxBlob, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_FbxBlob___eq__(PyObject *,PyObject *);}
static PyObject *slot_FbxBlob___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::FbxBlob *sipCpp = reinterpret_cast< ::FbxBlob *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_FbxBlob));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const  ::FbxBlob* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_FbxBlob, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::FbxBlob::operator==(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_fbx, eq_slot, sipType_FbxBlob, sipSelf, sipArg);
}


/* Call the instance's destructor. */
extern "C" {static void release_FbxBlob(void *, int);}
static void release_FbxBlob(void *sipCppV, int)
{
    delete reinterpret_cast< ::FbxBlob *>(sipCppV);
}


extern "C" {static void assign_FbxBlob(void *, SIP_SSIZE_T, const void *);}
static void assign_FbxBlob(void *sipDst, SIP_SSIZE_T sipDstIdx, const void *sipSrc)
{
    reinterpret_cast< ::FbxBlob *>(sipDst)[sipDstIdx] = *reinterpret_cast<const  ::FbxBlob *>(sipSrc);
}


extern "C" {static void *array_FbxBlob(SIP_SSIZE_T);}
static void *array_FbxBlob(SIP_SSIZE_T sipNrElem)
{
    return new  ::FbxBlob[sipNrElem];
}


extern "C" {static void *copy_FbxBlob(const void *, SIP_SSIZE_T);}
static void *copy_FbxBlob(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::FbxBlob(reinterpret_cast<const  ::FbxBlob *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_FbxBlob(sipSimpleWrapper *);}
static void dealloc_FbxBlob(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_FbxBlob(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_FbxBlob(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_FbxBlob(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::FbxBlob *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            sipCpp = new  ::FbxBlob();

            return sipCpp;
        }
    }

    {
        int a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "i", &a0))
        {
            sipCpp = new  ::FbxBlob(a0);

            return sipCpp;
        }
    }

    {
        const  ::FbxBlob* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_FbxBlob, &a0))
        {
            sipCpp = new  ::FbxBlob(*a0);

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_FbxBlob[] = {
    {(void *)slot_FbxBlob___ne__, ne_slot},
    {(void *)slot_FbxBlob___eq__, eq_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_FbxBlob[] = {
    {SIP_MLNAME_CAST(sipName_Access), meth_FbxBlob_Access, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxBlob_Access)},
    {SIP_MLNAME_CAST(sipName_Assign), meth_FbxBlob_Assign, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxBlob_Assign)},
    {SIP_MLNAME_CAST(sipName_Clear), meth_FbxBlob_Clear, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxBlob_Clear)},
    {SIP_MLNAME_CAST(sipName_Size), meth_FbxBlob_Size, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxBlob_Size)}
};

PyDoc_STRVAR(doc_FbxBlob, "\1FbxBlob()\n"
    "FbxBlob(int)\n"
    "FbxBlob(FbxBlob)");


sipClassTypeDef sipTypeDef_fbx_FbxBlob = {
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_FbxBlob,
        {0},
        0
    },
    {
        sipNameNr_FbxBlob,
        {0, 0, 1},
        4, methods_FbxBlob,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_FbxBlob,
    -1,
    -1,
    0,
    slots_FbxBlob,
    init_type_FbxBlob,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_FbxBlob,
    assign_FbxBlob,
    array_FbxBlob,
    copy_FbxBlob,
    release_FbxBlob,
    0,
    0,
    0,
    0,
    0,
    0,
    0
};
