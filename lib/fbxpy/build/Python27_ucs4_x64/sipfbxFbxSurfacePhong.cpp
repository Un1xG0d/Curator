/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.3
 *
 * Copyright (C) 2009 Autodesk, Inc. and/or its licensors.
 * All Rights Reserved.
 * 
 * The coded instructions, statements, computer programs, and/or related material 
 * (collectively the "Data") in these files contain unpublished information 
 * proprietary to Autodesk, Inc. and/or its licensors, which is protected by 
 * Canada and United States of America federal copyright law and by international 
 * treaties. 
 * 
 * The Data may not be disclosed or distributed to third parties, in whole or in
 * part, without the prior written consent of Autodesk, Inc. ("Autodesk").
 * 
 * THE DATA IS PROVIDED "AS IS" AND WITHOUT WARRANTY.
 * ALL WARRANTIES ARE EXPRESSLY EXCLUDED AND DISCLAIMED. AUTODESK MAKES NO
 * WARRANTY OF ANY KIND WITH RESPECT TO THE DATA, EXPRESS, IMPLIED OR ARISING
 * BY CUSTOM OR TRADE USAGE, AND DISCLAIMS ANY IMPLIED WARRANTIES OF TITLE, 
 * NON-INFRINGEMENT, MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE OR USE. 
 * WITHOUT LIMITING THE FOREGOING, AUTODESK DOES NOT WARRANT THAT THE OPERATION
 * OF THE DATA WILL BE UNINTERRUPTED OR ERROR FREE. 
 * 
 * IN NO EVENT SHALL AUTODESK, ITS AFFILIATES, PARENT COMPANIES, LICENSORS
 * OR SUPPLIERS ("AUTODESK GROUP") BE LIABLE FOR ANY LOSSES, DAMAGES OR EXPENSES
 * OF ANY KIND (INCLUDING WITHOUT LIMITATION PUNITIVE OR MULTIPLE DAMAGES OR OTHER
 * SPECIAL, DIRECT, INDIRECT, EXEMPLARY, INCIDENTAL, LOSS OF PROFITS, REVENUE
 * OR DATA, COST OF COVER OR CONSEQUENTIAL LOSSES OR DAMAGES OF ANY KIND),
 * HOWEVER CAUSED, AND REGARDLESS OF THE THEORY OF LIABILITY, WHETHER DERIVED
 * FROM CONTRACT, TORT (INCLUDING, BUT NOT LIMITED TO, NEGLIGENCE), OR OTHERWISE,
 * ARISING OUT OF OR RELATING TO THE DATA OR ITS USE OR ANY OTHER PERFORMANCE,
 * WHETHER OR NOT AUTODESK HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH LOSS
 * OR DAMAGE. 
 */

#include "sipAPIfbx.h"




PyDoc_STRVAR(doc_FbxSurfacePhong_Create, "Create(FbxManager, str) -> FbxSurfacePhong\n"
    "Create(FbxObject, str) -> FbxSurfacePhong");

extern "C" {static PyObject *meth_FbxSurfacePhong_Create(PyObject *, PyObject *);}
static PyObject *meth_FbxSurfacePhong_Create(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxManager* a0;
        const char* a1;
        PyObject *a1Keep;

        if (sipParseArgs(&sipParseErr, sipArgs, "J8A8", sipType_FbxManager, &a0, &a1Keep, &a1))
        {
             ::FbxSurfacePhong*sipRes;

            sipRes =  ::FbxSurfacePhong::Create(a0,a1);
            Py_DECREF(a1Keep);

            return sipConvertFromType(sipRes,sipType_FbxSurfacePhong,NULL);
        }
    }

    {
         ::FbxObject* a0;
        const char* a1;
        PyObject *a1Keep;

        if (sipParseArgs(&sipParseErr, sipArgs, "J8A8", sipType_FbxObject, &a0, &a1Keep, &a1))
        {
             ::FbxSurfacePhong*sipRes;

            sipRes =  ::FbxSurfacePhong::Create(a0,a1);
            Py_DECREF(a1Keep);

            return sipConvertFromType(sipRes,sipType_FbxSurfacePhong,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxSurfacePhong, sipName_Create, doc_FbxSurfacePhong_Create);

    return NULL;
}


PyDoc_STRVAR(doc_FbxSurfacePhong_GetClassId, "GetClassId(self) -> FbxClassId");

extern "C" {static PyObject *meth_FbxSurfacePhong_GetClassId(PyObject *, PyObject *);}
static PyObject *meth_FbxSurfacePhong_GetClassId(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::FbxSurfacePhong *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxSurfacePhong, &sipCpp))
        {
             ::FbxClassId*sipRes;

            sipRes = new  ::FbxClassId((sipSelfWasArg ? sipCpp-> ::FbxSurfacePhong::GetClassId() : sipCpp->GetClassId()));

            return sipConvertFromNewType(sipRes,sipType_FbxClassId,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxSurfacePhong, sipName_GetClassId, doc_FbxSurfacePhong_GetClassId);

    return NULL;
}


extern "C" {static PyObject *slot_FbxSurfacePhong___ne__(PyObject *,PyObject *);}
static PyObject *slot_FbxSurfacePhong___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::FbxSurfacePhong *sipCpp = reinterpret_cast< ::FbxSurfacePhong *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_FbxSurfacePhong));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const  ::FbxSurfacePhong* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_FbxSurfacePhong, &a0))
        {
            bool sipRes;

            sipRes = !sipCpp-> ::FbxSurfacePhong::operator==(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_fbx, ne_slot, sipType_FbxSurfacePhong, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_FbxSurfacePhong___eq__(PyObject *,PyObject *);}
static PyObject *slot_FbxSurfacePhong___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::FbxSurfacePhong *sipCpp = reinterpret_cast< ::FbxSurfacePhong *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_FbxSurfacePhong));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const  ::FbxSurfacePhong* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_FbxSurfacePhong, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::FbxSurfacePhong::operator==(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_fbx, eq_slot, sipType_FbxSurfacePhong, sipSelf, sipArg);
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_FbxSurfacePhong(void *, const sipTypeDef *);}
static void *cast_FbxSurfacePhong(void *sipCppV, const sipTypeDef *targetType)
{
     ::FbxSurfacePhong *sipCpp = reinterpret_cast< ::FbxSurfacePhong *>(sipCppV);

    if (targetType == sipType_FbxSurfaceLambert)
        return static_cast< ::FbxSurfaceLambert *>(sipCpp);

    if (targetType == sipType_FbxSurfaceMaterial)
        return static_cast< ::FbxSurfaceMaterial *>(sipCpp);

    if (targetType == sipType_FbxObject)
        return static_cast< ::FbxObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_FbxSurfacePhong(void *, int);}
static void release_FbxSurfacePhong(void *, int)
{
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_FbxSurfacePhong[] = {{350, 255, 1}};


/* Define this type's Python slots. */
static sipPySlotDef slots_FbxSurfacePhong[] = {
    {(void *)slot_FbxSurfacePhong___ne__, ne_slot},
    {(void *)slot_FbxSurfacePhong___eq__, eq_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_FbxSurfacePhong[] = {
    {SIP_MLNAME_CAST(sipName_Create), meth_FbxSurfacePhong_Create, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxSurfacePhong_Create)},
    {SIP_MLNAME_CAST(sipName_GetClassId), meth_FbxSurfacePhong_GetClassId, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxSurfacePhong_GetClassId)}
};


extern "C" {static PyObject *varget_FbxSurfacePhong_ClassId(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxSurfacePhong_ClassId(void *, PyObject *, PyObject *)
{
     ::FbxClassId*sipVal;

    sipVal = & ::FbxSurfacePhong::ClassId;

    return sipConvertFromType(sipVal, sipType_FbxClassId, NULL);
}


extern "C" {static int varset_FbxSurfacePhong_ClassId(void *, PyObject *, PyObject *);}
static int varset_FbxSurfacePhong_ClassId(void *, PyObject *sipPy, PyObject *)
{
     ::FbxClassId*sipVal;
    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxClassId *>(sipForceConvertToType(sipPy,sipType_FbxClassId,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

     ::FbxSurfacePhong::ClassId = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxSurfacePhong_Reflection(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxSurfacePhong_Reflection(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyDouble3*sipVal;
     ::FbxSurfacePhong *sipCpp = reinterpret_cast< ::FbxSurfacePhong *>(sipSelf);

    sipVal = &sipCpp->Reflection;

    return sipConvertFromType(sipVal, sipType_FbxPropertyDouble3, NULL);
}


extern "C" {static int varset_FbxSurfacePhong_Reflection(void *, PyObject *, PyObject *);}
static int varset_FbxSurfacePhong_Reflection(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyDouble3*sipVal;
     ::FbxSurfacePhong *sipCpp = reinterpret_cast< ::FbxSurfacePhong *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyDouble3 *>(sipForceConvertToType(sipPy,sipType_FbxPropertyDouble3,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->Reflection = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxSurfacePhong_ReflectionFactor(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxSurfacePhong_ReflectionFactor(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyDouble1*sipVal;
     ::FbxSurfacePhong *sipCpp = reinterpret_cast< ::FbxSurfacePhong *>(sipSelf);

    sipVal = &sipCpp->ReflectionFactor;

    return sipConvertFromType(sipVal, sipType_FbxPropertyDouble1, NULL);
}


extern "C" {static int varset_FbxSurfacePhong_ReflectionFactor(void *, PyObject *, PyObject *);}
static int varset_FbxSurfacePhong_ReflectionFactor(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyDouble1*sipVal;
     ::FbxSurfacePhong *sipCpp = reinterpret_cast< ::FbxSurfacePhong *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyDouble1 *>(sipForceConvertToType(sipPy,sipType_FbxPropertyDouble1,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->ReflectionFactor = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxSurfacePhong_Shininess(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxSurfacePhong_Shininess(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyDouble1*sipVal;
     ::FbxSurfacePhong *sipCpp = reinterpret_cast< ::FbxSurfacePhong *>(sipSelf);

    sipVal = &sipCpp->Shininess;

    return sipConvertFromType(sipVal, sipType_FbxPropertyDouble1, NULL);
}


extern "C" {static int varset_FbxSurfacePhong_Shininess(void *, PyObject *, PyObject *);}
static int varset_FbxSurfacePhong_Shininess(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyDouble1*sipVal;
     ::FbxSurfacePhong *sipCpp = reinterpret_cast< ::FbxSurfacePhong *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyDouble1 *>(sipForceConvertToType(sipPy,sipType_FbxPropertyDouble1,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->Shininess = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxSurfacePhong_Specular(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxSurfacePhong_Specular(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyDouble3*sipVal;
     ::FbxSurfacePhong *sipCpp = reinterpret_cast< ::FbxSurfacePhong *>(sipSelf);

    sipVal = &sipCpp->Specular;

    return sipConvertFromType(sipVal, sipType_FbxPropertyDouble3, NULL);
}


extern "C" {static int varset_FbxSurfacePhong_Specular(void *, PyObject *, PyObject *);}
static int varset_FbxSurfacePhong_Specular(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyDouble3*sipVal;
     ::FbxSurfacePhong *sipCpp = reinterpret_cast< ::FbxSurfacePhong *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyDouble3 *>(sipForceConvertToType(sipPy,sipType_FbxPropertyDouble3,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->Specular = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxSurfacePhong_SpecularFactor(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxSurfacePhong_SpecularFactor(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyDouble1*sipVal;
     ::FbxSurfacePhong *sipCpp = reinterpret_cast< ::FbxSurfacePhong *>(sipSelf);

    sipVal = &sipCpp->SpecularFactor;

    return sipConvertFromType(sipVal, sipType_FbxPropertyDouble1, NULL);
}


extern "C" {static int varset_FbxSurfacePhong_SpecularFactor(void *, PyObject *, PyObject *);}
static int varset_FbxSurfacePhong_SpecularFactor(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyDouble1*sipVal;
     ::FbxSurfacePhong *sipCpp = reinterpret_cast< ::FbxSurfacePhong *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyDouble1 *>(sipForceConvertToType(sipPy,sipType_FbxPropertyDouble1,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->SpecularFactor = *sipVal;

    return 0;
}

sipVariableDef variables_FbxSurfacePhong[] = {
    {ClassVariable, sipName_ClassId, (PyMethodDef *)varget_FbxSurfacePhong_ClassId, (PyMethodDef *)varset_FbxSurfacePhong_ClassId, NULL, NULL},
    {InstanceVariable, sipName_Reflection, (PyMethodDef *)varget_FbxSurfacePhong_Reflection, (PyMethodDef *)varset_FbxSurfacePhong_Reflection, NULL, NULL},
    {InstanceVariable, sipName_ReflectionFactor, (PyMethodDef *)varget_FbxSurfacePhong_ReflectionFactor, (PyMethodDef *)varset_FbxSurfacePhong_ReflectionFactor, NULL, NULL},
    {InstanceVariable, sipName_Shininess, (PyMethodDef *)varget_FbxSurfacePhong_Shininess, (PyMethodDef *)varset_FbxSurfacePhong_Shininess, NULL, NULL},
    {InstanceVariable, sipName_Specular, (PyMethodDef *)varget_FbxSurfacePhong_Specular, (PyMethodDef *)varset_FbxSurfacePhong_Specular, NULL, NULL},
    {InstanceVariable, sipName_SpecularFactor, (PyMethodDef *)varget_FbxSurfacePhong_SpecularFactor, (PyMethodDef *)varset_FbxSurfacePhong_SpecularFactor, NULL, NULL},
};


sipClassTypeDef sipTypeDef_fbx_FbxSurfacePhong = {
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_FbxSurfacePhong,
        {0},
        0
    },
    {
        sipNameNr_FbxSurfacePhong,
        {0, 0, 1},
        2, methods_FbxSurfacePhong,
        0, 0,
        6, variables_FbxSurfacePhong,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    0,
    -1,
    -1,
    supers_FbxSurfacePhong,
    slots_FbxSurfacePhong,
    0,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    0,
    0,
    0,
    0,
    release_FbxSurfacePhong,
    cast_FbxSurfacePhong,
    0,
    0,
    0,
    0,
    0,
    0
};
