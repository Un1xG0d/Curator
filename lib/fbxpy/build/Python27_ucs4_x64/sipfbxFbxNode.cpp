/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.3
 *
 * Copyright (C) 2009 Autodesk, Inc. and/or its licensors.
 * All Rights Reserved.
 * 
 * The coded instructions, statements, computer programs, and/or related material 
 * (collectively the "Data") in these files contain unpublished information 
 * proprietary to Autodesk, Inc. and/or its licensors, which is protected by 
 * Canada and United States of America federal copyright law and by international 
 * treaties. 
 * 
 * The Data may not be disclosed or distributed to third parties, in whole or in
 * part, without the prior written consent of Autodesk, Inc. ("Autodesk").
 * 
 * THE DATA IS PROVIDED "AS IS" AND WITHOUT WARRANTY.
 * ALL WARRANTIES ARE EXPRESSLY EXCLUDED AND DISCLAIMED. AUTODESK MAKES NO
 * WARRANTY OF ANY KIND WITH RESPECT TO THE DATA, EXPRESS, IMPLIED OR ARISING
 * BY CUSTOM OR TRADE USAGE, AND DISCLAIMS ANY IMPLIED WARRANTIES OF TITLE, 
 * NON-INFRINGEMENT, MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE OR USE. 
 * WITHOUT LIMITING THE FOREGOING, AUTODESK DOES NOT WARRANT THAT THE OPERATION
 * OF THE DATA WILL BE UNINTERRUPTED OR ERROR FREE. 
 * 
 * IN NO EVENT SHALL AUTODESK, ITS AFFILIATES, PARENT COMPANIES, LICENSORS
 * OR SUPPLIERS ("AUTODESK GROUP") BE LIABLE FOR ANY LOSSES, DAMAGES OR EXPENSES
 * OF ANY KIND (INCLUDING WITHOUT LIMITATION PUNITIVE OR MULTIPLE DAMAGES OR OTHER
 * SPECIAL, DIRECT, INDIRECT, EXEMPLARY, INCIDENTAL, LOSS OF PROFITS, REVENUE
 * OR DATA, COST OF COVER OR CONSEQUENTIAL LOSSES OR DAMAGES OF ANY KIND),
 * HOWEVER CAUSED, AND REGARDLESS OF THE THEORY OF LIABILITY, WHETHER DERIVED
 * FROM CONTRACT, TORT (INCLUDING, BUT NOT LIMITED TO, NEGLIGENCE), OR OTHERWISE,
 * ARISING OUT OF OR RELATING TO THE DATA OR ITS USE OR ANY OTHER PERFORMANCE,
 * WHETHER OR NOT AUTODESK HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH LOSS
 * OR DAMAGE. 
 */

#include "sipAPIfbx.h"


#line 4 "/var/www/html/lib/fbxpy/sip/fbxstatus.sip"
#include <fbxsdk.h>
#line 44 "/var/www/html/lib/fbxpy/build/Python27_ucs4_x64/sipfbxFbxNode.cpp"


PyDoc_STRVAR(doc_FbxNode_Create, "Create(FbxManager, str) -> FbxNode\n"
    "Create(FbxObject, str) -> FbxNode");

extern "C" {static PyObject *meth_FbxNode_Create(PyObject *, PyObject *);}
static PyObject *meth_FbxNode_Create(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxManager* a0;
        const char* a1;
        PyObject *a1Keep;

        if (sipParseArgs(&sipParseErr, sipArgs, "J8A8", sipType_FbxManager, &a0, &a1Keep, &a1))
        {
             ::FbxNode*sipRes;

            sipRes =  ::FbxNode::Create(a0,a1);
            Py_DECREF(a1Keep);

            return sipConvertFromType(sipRes,sipType_FbxNode,NULL);
        }
    }

    {
         ::FbxObject* a0;
        const char* a1;
        PyObject *a1Keep;

        if (sipParseArgs(&sipParseErr, sipArgs, "J8A8", sipType_FbxObject, &a0, &a1Keep, &a1))
        {
             ::FbxNode*sipRes;

            sipRes =  ::FbxNode::Create(a0,a1);
            Py_DECREF(a1Keep);

            return sipConvertFromType(sipRes,sipType_FbxNode,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxNode, sipName_Create, doc_FbxNode_Create);

    return NULL;
}


PyDoc_STRVAR(doc_FbxNode_GetClassId, "GetClassId(self) -> FbxClassId");

extern "C" {static PyObject *meth_FbxNode_GetClassId(PyObject *, PyObject *);}
static PyObject *meth_FbxNode_GetClassId(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::FbxNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxNode, &sipCpp))
        {
             ::FbxClassId*sipRes;

            sipRes = new  ::FbxClassId((sipSelfWasArg ? sipCpp-> ::FbxNode::GetClassId() : sipCpp->GetClassId()));

            return sipConvertFromNewType(sipRes,sipType_FbxClassId,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxNode, sipName_GetClassId, doc_FbxNode_GetClassId);

    return NULL;
}


PyDoc_STRVAR(doc_FbxNode_GetParent, "GetParent(self) -> FbxNode");

extern "C" {static PyObject *meth_FbxNode_GetParent(PyObject *, PyObject *);}
static PyObject *meth_FbxNode_GetParent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxNode, &sipCpp))
        {
             ::FbxNode*sipRes;

            sipRes = sipCpp->GetParent();

            return sipConvertFromType(sipRes,sipType_FbxNode,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxNode, sipName_GetParent, doc_FbxNode_GetParent);

    return NULL;
}


PyDoc_STRVAR(doc_FbxNode_AddChild, "AddChild(self, FbxNode) -> bool");

extern "C" {static PyObject *meth_FbxNode_AddChild(PyObject *, PyObject *);}
static PyObject *meth_FbxNode_AddChild(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxNode* a0;
         ::FbxNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_FbxNode, &sipCpp, sipType_FbxNode, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->AddChild(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxNode, sipName_AddChild, doc_FbxNode_AddChild);

    return NULL;
}


PyDoc_STRVAR(doc_FbxNode_RemoveChild, "RemoveChild(self, FbxNode) -> FbxNode");

extern "C" {static PyObject *meth_FbxNode_RemoveChild(PyObject *, PyObject *);}
static PyObject *meth_FbxNode_RemoveChild(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxNode* a0;
         ::FbxNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_FbxNode, &sipCpp, sipType_FbxNode, &a0))
        {
             ::FbxNode*sipRes;

            sipRes = sipCpp->RemoveChild(a0);

            return sipConvertFromType(sipRes,sipType_FbxNode,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxNode, sipName_RemoveChild, doc_FbxNode_RemoveChild);

    return NULL;
}


PyDoc_STRVAR(doc_FbxNode_GetChildCount, "GetChildCount(self, bool = False) -> int");

extern "C" {static PyObject *meth_FbxNode_GetChildCount(PyObject *, PyObject *);}
static PyObject *meth_FbxNode_GetChildCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0 = 0;
        const  ::FbxNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B|b", &sipSelf, sipType_FbxNode, &sipCpp, &a0))
        {
            int sipRes;

            sipRes = sipCpp->GetChildCount(a0);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxNode, sipName_GetChildCount, doc_FbxNode_GetChildCount);

    return NULL;
}


PyDoc_STRVAR(doc_FbxNode_GetChild, "GetChild(self, int) -> FbxNode");

extern "C" {static PyObject *meth_FbxNode_GetChild(PyObject *, PyObject *);}
static PyObject *meth_FbxNode_GetChild(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
         ::FbxNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_FbxNode, &sipCpp, &a0))
        {
             ::FbxNode*sipRes;

            sipRes = sipCpp->GetChild(a0);

            return sipConvertFromType(sipRes,sipType_FbxNode,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxNode, sipName_GetChild, doc_FbxNode_GetChild);

    return NULL;
}


PyDoc_STRVAR(doc_FbxNode_FindChild, "FindChild(self, str, bool = True, bool = False) -> FbxNode");

extern "C" {static PyObject *meth_FbxNode_FindChild(PyObject *, PyObject *);}
static PyObject *meth_FbxNode_FindChild(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const char* a0;
        PyObject *a0Keep;
        bool a1 = 1;
        bool a2 = 0;
         ::FbxNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BA8|bb", &sipSelf, sipType_FbxNode, &sipCpp, &a0Keep, &a0, &a1, &a2))
        {
             ::FbxNode*sipRes;

            sipRes = sipCpp->FindChild(a0,a1,a2);
            Py_DECREF(a0Keep);

            return sipConvertFromType(sipRes,sipType_FbxNode,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxNode, sipName_FindChild, doc_FbxNode_FindChild);

    return NULL;
}


PyDoc_STRVAR(doc_FbxNode_SetTarget, "SetTarget(self, FbxNode)");

extern "C" {static PyObject *meth_FbxNode_SetTarget(PyObject *, PyObject *);}
static PyObject *meth_FbxNode_SetTarget(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxNode* a0;
         ::FbxNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_FbxNode, &sipCpp, sipType_FbxNode, &a0))
        {
            sipCpp->SetTarget(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxNode, sipName_SetTarget, doc_FbxNode_SetTarget);

    return NULL;
}


PyDoc_STRVAR(doc_FbxNode_GetTarget, "GetTarget(self) -> FbxNode");

extern "C" {static PyObject *meth_FbxNode_GetTarget(PyObject *, PyObject *);}
static PyObject *meth_FbxNode_GetTarget(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::FbxNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxNode, &sipCpp))
        {
             ::FbxNode*sipRes;

            sipRes = sipCpp->GetTarget();

            return sipConvertFromType(sipRes,sipType_FbxNode,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxNode, sipName_GetTarget, doc_FbxNode_GetTarget);

    return NULL;
}


PyDoc_STRVAR(doc_FbxNode_SetPostTargetRotation, "SetPostTargetRotation(self, FbxVector4)");

extern "C" {static PyObject *meth_FbxNode_SetPostTargetRotation(PyObject *, PyObject *);}
static PyObject *meth_FbxNode_SetPostTargetRotation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxVector4* a0;
         ::FbxNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_FbxNode, &sipCpp, sipType_FbxVector4, &a0))
        {
            sipCpp->SetPostTargetRotation(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxNode, sipName_SetPostTargetRotation, doc_FbxNode_SetPostTargetRotation);

    return NULL;
}


PyDoc_STRVAR(doc_FbxNode_GetPostTargetRotation, "GetPostTargetRotation(self) -> FbxVector4");

extern "C" {static PyObject *meth_FbxNode_GetPostTargetRotation(PyObject *, PyObject *);}
static PyObject *meth_FbxNode_GetPostTargetRotation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::FbxNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxNode, &sipCpp))
        {
             ::FbxVector4*sipRes;

            sipRes = new  ::FbxVector4(sipCpp->GetPostTargetRotation());

            return sipConvertFromNewType(sipRes,sipType_FbxVector4,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxNode, sipName_GetPostTargetRotation, doc_FbxNode_GetPostTargetRotation);

    return NULL;
}


PyDoc_STRVAR(doc_FbxNode_SetTargetUp, "SetTargetUp(self, FbxNode)");

extern "C" {static PyObject *meth_FbxNode_SetTargetUp(PyObject *, PyObject *);}
static PyObject *meth_FbxNode_SetTargetUp(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxNode* a0;
         ::FbxNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_FbxNode, &sipCpp, sipType_FbxNode, &a0))
        {
            sipCpp->SetTargetUp(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxNode, sipName_SetTargetUp, doc_FbxNode_SetTargetUp);

    return NULL;
}


PyDoc_STRVAR(doc_FbxNode_GetTargetUp, "GetTargetUp(self) -> FbxNode");

extern "C" {static PyObject *meth_FbxNode_GetTargetUp(PyObject *, PyObject *);}
static PyObject *meth_FbxNode_GetTargetUp(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::FbxNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxNode, &sipCpp))
        {
             ::FbxNode*sipRes;

            sipRes = sipCpp->GetTargetUp();

            return sipConvertFromType(sipRes,sipType_FbxNode,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxNode, sipName_GetTargetUp, doc_FbxNode_GetTargetUp);

    return NULL;
}


PyDoc_STRVAR(doc_FbxNode_SetTargetUpVector, "SetTargetUpVector(self, FbxVector4)");

extern "C" {static PyObject *meth_FbxNode_SetTargetUpVector(PyObject *, PyObject *);}
static PyObject *meth_FbxNode_SetTargetUpVector(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxVector4* a0;
         ::FbxNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_FbxNode, &sipCpp, sipType_FbxVector4, &a0))
        {
            sipCpp->SetTargetUpVector(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxNode, sipName_SetTargetUpVector, doc_FbxNode_SetTargetUpVector);

    return NULL;
}


PyDoc_STRVAR(doc_FbxNode_GetTargetUpVector, "GetTargetUpVector(self) -> FbxVector4");

extern "C" {static PyObject *meth_FbxNode_GetTargetUpVector(PyObject *, PyObject *);}
static PyObject *meth_FbxNode_GetTargetUpVector(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::FbxNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxNode, &sipCpp))
        {
             ::FbxVector4*sipRes;

            sipRes = new  ::FbxVector4(sipCpp->GetTargetUpVector());

            return sipConvertFromNewType(sipRes,sipType_FbxVector4,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxNode, sipName_GetTargetUpVector, doc_FbxNode_GetTargetUpVector);

    return NULL;
}


PyDoc_STRVAR(doc_FbxNode_SetVisibility, "SetVisibility(self, bool)");

extern "C" {static PyObject *meth_FbxNode_SetVisibility(PyObject *, PyObject *);}
static PyObject *meth_FbxNode_SetVisibility(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
         ::FbxNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_FbxNode, &sipCpp, &a0))
        {
            sipCpp->SetVisibility(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxNode, sipName_SetVisibility, doc_FbxNode_SetVisibility);

    return NULL;
}


PyDoc_STRVAR(doc_FbxNode_GetVisibility, "GetVisibility(self) -> bool");

extern "C" {static PyObject *meth_FbxNode_GetVisibility(PyObject *, PyObject *);}
static PyObject *meth_FbxNode_GetVisibility(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::FbxNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxNode, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->GetVisibility();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxNode, sipName_GetVisibility, doc_FbxNode_GetVisibility);

    return NULL;
}


PyDoc_STRVAR(doc_FbxNode_SetShadingMode, "SetShadingMode(self, FbxNode.EShadingMode)");

extern "C" {static PyObject *meth_FbxNode_SetShadingMode(PyObject *, PyObject *);}
static PyObject *meth_FbxNode_SetShadingMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxNode::EShadingMode a0;
         ::FbxNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_FbxNode, &sipCpp, sipType_FbxNode_EShadingMode, &a0))
        {
            sipCpp->SetShadingMode(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxNode, sipName_SetShadingMode, doc_FbxNode_SetShadingMode);

    return NULL;
}


PyDoc_STRVAR(doc_FbxNode_GetShadingMode, "GetShadingMode(self) -> FbxNode.EShadingMode");

extern "C" {static PyObject *meth_FbxNode_GetShadingMode(PyObject *, PyObject *);}
static PyObject *meth_FbxNode_GetShadingMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::FbxNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxNode, &sipCpp))
        {
             ::FbxNode::EShadingMode sipRes;

            sipRes = sipCpp->GetShadingMode();

            return sipConvertFromEnum(sipRes,sipType_FbxNode_EShadingMode);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxNode, sipName_GetShadingMode, doc_FbxNode_GetShadingMode);

    return NULL;
}


PyDoc_STRVAR(doc_FbxNode_SetNodeAttribute, "SetNodeAttribute(self, FbxNodeAttribute) -> FbxNodeAttribute");

extern "C" {static PyObject *meth_FbxNode_SetNodeAttribute(PyObject *, PyObject *);}
static PyObject *meth_FbxNode_SetNodeAttribute(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxNodeAttribute* a0;
         ::FbxNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_FbxNode, &sipCpp, sipType_FbxNodeAttribute, &a0))
        {
             ::FbxNodeAttribute*sipRes;

            sipRes = sipCpp->SetNodeAttribute(a0);

            return sipConvertFromType(sipRes,sipType_FbxNodeAttribute,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxNode, sipName_SetNodeAttribute, doc_FbxNode_SetNodeAttribute);

    return NULL;
}


PyDoc_STRVAR(doc_FbxNode_GetNodeAttribute, "GetNodeAttribute(self) -> FbxNodeAttribute");

extern "C" {static PyObject *meth_FbxNode_GetNodeAttribute(PyObject *, PyObject *);}
static PyObject *meth_FbxNode_GetNodeAttribute(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxNode, &sipCpp))
        {
             ::FbxNodeAttribute*sipRes;

            sipRes = sipCpp->GetNodeAttribute();

            return sipConvertFromType(sipRes,sipType_FbxNodeAttribute,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxNode, sipName_GetNodeAttribute, doc_FbxNode_GetNodeAttribute);

    return NULL;
}


PyDoc_STRVAR(doc_FbxNode_GetNodeAttributeCount, "GetNodeAttributeCount(self) -> int");

extern "C" {static PyObject *meth_FbxNode_GetNodeAttributeCount(PyObject *, PyObject *);}
static PyObject *meth_FbxNode_GetNodeAttributeCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::FbxNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxNode, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->GetNodeAttributeCount();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxNode, sipName_GetNodeAttributeCount, doc_FbxNode_GetNodeAttributeCount);

    return NULL;
}


PyDoc_STRVAR(doc_FbxNode_GetDefaultNodeAttributeIndex, "GetDefaultNodeAttributeIndex(self) -> int");

extern "C" {static PyObject *meth_FbxNode_GetDefaultNodeAttributeIndex(PyObject *, PyObject *);}
static PyObject *meth_FbxNode_GetDefaultNodeAttributeIndex(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::FbxNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxNode, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->GetDefaultNodeAttributeIndex();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxNode, sipName_GetDefaultNodeAttributeIndex, doc_FbxNode_GetDefaultNodeAttributeIndex);

    return NULL;
}


PyDoc_STRVAR(doc_FbxNode_SetDefaultNodeAttributeIndex, "SetDefaultNodeAttributeIndex(self, int, FbxStatus = None) -> bool");

extern "C" {static PyObject *meth_FbxNode_SetDefaultNodeAttributeIndex(PyObject *, PyObject *);}
static PyObject *meth_FbxNode_SetDefaultNodeAttributeIndex(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
         ::FbxStatus* a1 = 0;
         ::FbxNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi|J8", &sipSelf, sipType_FbxNode, &sipCpp, &a0, sipType_FbxStatus, &a1))
        {
            bool sipRes;

            sipRes = sipCpp->SetDefaultNodeAttributeIndex(a0,a1);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxNode, sipName_SetDefaultNodeAttributeIndex, doc_FbxNode_SetDefaultNodeAttributeIndex);

    return NULL;
}


PyDoc_STRVAR(doc_FbxNode_GetNodeAttributeByIndex, "GetNodeAttributeByIndex(self, int) -> FbxNodeAttribute");

extern "C" {static PyObject *meth_FbxNode_GetNodeAttributeByIndex(PyObject *, PyObject *);}
static PyObject *meth_FbxNode_GetNodeAttributeByIndex(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
         ::FbxNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_FbxNode, &sipCpp, &a0))
        {
             ::FbxNodeAttribute*sipRes;

            sipRes = sipCpp->GetNodeAttributeByIndex(a0);

            return sipConvertFromType(sipRes,sipType_FbxNodeAttribute,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxNode, sipName_GetNodeAttributeByIndex, doc_FbxNode_GetNodeAttributeByIndex);

    return NULL;
}


PyDoc_STRVAR(doc_FbxNode_GetNodeAttributeIndex, "GetNodeAttributeIndex(self, FbxNodeAttribute, FbxStatus = None) -> int");

extern "C" {static PyObject *meth_FbxNode_GetNodeAttributeIndex(PyObject *, PyObject *);}
static PyObject *meth_FbxNode_GetNodeAttributeIndex(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxNodeAttribute* a0;
         ::FbxStatus* a1 = 0;
        const  ::FbxNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8|J8", &sipSelf, sipType_FbxNode, &sipCpp, sipType_FbxNodeAttribute, &a0, sipType_FbxStatus, &a1))
        {
            int sipRes;

            sipRes = sipCpp->GetNodeAttributeIndex(a0,a1);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxNode, sipName_GetNodeAttributeIndex, doc_FbxNode_GetNodeAttributeIndex);

    return NULL;
}


PyDoc_STRVAR(doc_FbxNode_AddNodeAttribute, "AddNodeAttribute(self, FbxNodeAttribute, FbxStatus = None) -> bool");

extern "C" {static PyObject *meth_FbxNode_AddNodeAttribute(PyObject *, PyObject *);}
static PyObject *meth_FbxNode_AddNodeAttribute(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxNodeAttribute* a0;
         ::FbxStatus* a1 = 0;
         ::FbxNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8|J8", &sipSelf, sipType_FbxNode, &sipCpp, sipType_FbxNodeAttribute, &a0, sipType_FbxStatus, &a1))
        {
            bool sipRes;

            sipRes = sipCpp->AddNodeAttribute(a0,a1);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxNode, sipName_AddNodeAttribute, doc_FbxNode_AddNodeAttribute);

    return NULL;
}


PyDoc_STRVAR(doc_FbxNode_RemoveNodeAttribute, "RemoveNodeAttribute(self, FbxNodeAttribute) -> FbxNodeAttribute");

extern "C" {static PyObject *meth_FbxNode_RemoveNodeAttribute(PyObject *, PyObject *);}
static PyObject *meth_FbxNode_RemoveNodeAttribute(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxNodeAttribute* a0;
         ::FbxNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_FbxNode, &sipCpp, sipType_FbxNodeAttribute, &a0))
        {
             ::FbxNodeAttribute*sipRes;

            sipRes = sipCpp->RemoveNodeAttribute(a0);

            return sipConvertFromType(sipRes,sipType_FbxNodeAttribute,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxNode, sipName_RemoveNodeAttribute, doc_FbxNode_RemoveNodeAttribute);

    return NULL;
}


PyDoc_STRVAR(doc_FbxNode_RemoveNodeAttributeByIndex, "RemoveNodeAttributeByIndex(self, int) -> FbxNodeAttribute");

extern "C" {static PyObject *meth_FbxNode_RemoveNodeAttributeByIndex(PyObject *, PyObject *);}
static PyObject *meth_FbxNode_RemoveNodeAttributeByIndex(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
         ::FbxNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_FbxNode, &sipCpp, &a0))
        {
             ::FbxNodeAttribute*sipRes;

            sipRes = sipCpp->RemoveNodeAttributeByIndex(a0);

            return sipConvertFromType(sipRes,sipType_FbxNodeAttribute,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxNode, sipName_RemoveNodeAttributeByIndex, doc_FbxNode_RemoveNodeAttributeByIndex);

    return NULL;
}


PyDoc_STRVAR(doc_FbxNode_GetLodGroup, "GetLodGroup(self) -> FbxLODGroup");

extern "C" {static PyObject *meth_FbxNode_GetLodGroup(PyObject *, PyObject *);}
static PyObject *meth_FbxNode_GetLodGroup(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxNode, &sipCpp))
        {
             ::FbxLODGroup*sipRes;

            sipRes = sipCpp->GetLodGroup();

            return sipConvertFromType(sipRes,sipType_FbxLODGroup,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxNode, sipName_GetLodGroup, doc_FbxNode_GetLodGroup);

    return NULL;
}


PyDoc_STRVAR(doc_FbxNode_GetNull, "GetNull(self) -> FbxNull");

extern "C" {static PyObject *meth_FbxNode_GetNull(PyObject *, PyObject *);}
static PyObject *meth_FbxNode_GetNull(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxNode, &sipCpp))
        {
             ::FbxNull*sipRes;

            sipRes = sipCpp->GetNull();

            return sipConvertFromType(sipRes,sipType_FbxNull,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxNode, sipName_GetNull, doc_FbxNode_GetNull);

    return NULL;
}


PyDoc_STRVAR(doc_FbxNode_GetMarker, "GetMarker(self) -> FbxMarker");

extern "C" {static PyObject *meth_FbxNode_GetMarker(PyObject *, PyObject *);}
static PyObject *meth_FbxNode_GetMarker(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxNode, &sipCpp))
        {
             ::FbxMarker*sipRes;

            sipRes = sipCpp->GetMarker();

            return sipConvertFromType(sipRes,sipType_FbxMarker,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxNode, sipName_GetMarker, doc_FbxNode_GetMarker);

    return NULL;
}


PyDoc_STRVAR(doc_FbxNode_GetSkeleton, "GetSkeleton(self) -> FbxSkeleton");

extern "C" {static PyObject *meth_FbxNode_GetSkeleton(PyObject *, PyObject *);}
static PyObject *meth_FbxNode_GetSkeleton(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxNode, &sipCpp))
        {
             ::FbxSkeleton*sipRes;

            sipRes = sipCpp->GetSkeleton();

            return sipConvertFromType(sipRes,sipType_FbxSkeleton,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxNode, sipName_GetSkeleton, doc_FbxNode_GetSkeleton);

    return NULL;
}


PyDoc_STRVAR(doc_FbxNode_GetGeometry, "GetGeometry(self) -> FbxGeometry");

extern "C" {static PyObject *meth_FbxNode_GetGeometry(PyObject *, PyObject *);}
static PyObject *meth_FbxNode_GetGeometry(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxNode, &sipCpp))
        {
             ::FbxGeometry*sipRes;

            sipRes = sipCpp->GetGeometry();

            return sipConvertFromType(sipRes,sipType_FbxGeometry,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxNode, sipName_GetGeometry, doc_FbxNode_GetGeometry);

    return NULL;
}


PyDoc_STRVAR(doc_FbxNode_GetMesh, "GetMesh(self) -> FbxMesh");

extern "C" {static PyObject *meth_FbxNode_GetMesh(PyObject *, PyObject *);}
static PyObject *meth_FbxNode_GetMesh(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxNode, &sipCpp))
        {
             ::FbxMesh*sipRes;

            sipRes = sipCpp->GetMesh();

            return sipConvertFromType(sipRes,sipType_FbxMesh,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxNode, sipName_GetMesh, doc_FbxNode_GetMesh);

    return NULL;
}


PyDoc_STRVAR(doc_FbxNode_GetNurbs, "GetNurbs(self) -> FbxNurbs");

extern "C" {static PyObject *meth_FbxNode_GetNurbs(PyObject *, PyObject *);}
static PyObject *meth_FbxNode_GetNurbs(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxNode, &sipCpp))
        {
             ::FbxNurbs*sipRes;

            sipRes = sipCpp->GetNurbs();

            return sipConvertFromType(sipRes,sipType_FbxNurbs,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxNode, sipName_GetNurbs, doc_FbxNode_GetNurbs);

    return NULL;
}


PyDoc_STRVAR(doc_FbxNode_GetNurbsSurface, "GetNurbsSurface(self) -> FbxNurbsSurface");

extern "C" {static PyObject *meth_FbxNode_GetNurbsSurface(PyObject *, PyObject *);}
static PyObject *meth_FbxNode_GetNurbsSurface(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxNode, &sipCpp))
        {
             ::FbxNurbsSurface*sipRes;

            sipRes = sipCpp->GetNurbsSurface();

            return sipConvertFromType(sipRes,sipType_FbxNurbsSurface,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxNode, sipName_GetNurbsSurface, doc_FbxNode_GetNurbsSurface);

    return NULL;
}


PyDoc_STRVAR(doc_FbxNode_GetNurbsCurve, "GetNurbsCurve(self) -> FbxNurbsCurve");

extern "C" {static PyObject *meth_FbxNode_GetNurbsCurve(PyObject *, PyObject *);}
static PyObject *meth_FbxNode_GetNurbsCurve(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxNode, &sipCpp))
        {
             ::FbxNurbsCurve*sipRes;

            sipRes = sipCpp->GetNurbsCurve();

            return sipConvertFromType(sipRes,sipType_FbxNurbsCurve,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxNode, sipName_GetNurbsCurve, doc_FbxNode_GetNurbsCurve);

    return NULL;
}


PyDoc_STRVAR(doc_FbxNode_GetTrimNurbsSurface, "GetTrimNurbsSurface(self) -> FbxTrimNurbsSurface");

extern "C" {static PyObject *meth_FbxNode_GetTrimNurbsSurface(PyObject *, PyObject *);}
static PyObject *meth_FbxNode_GetTrimNurbsSurface(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxNode, &sipCpp))
        {
             ::FbxTrimNurbsSurface*sipRes;

            sipRes = sipCpp->GetTrimNurbsSurface();

            return sipConvertFromType(sipRes,sipType_FbxTrimNurbsSurface,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxNode, sipName_GetTrimNurbsSurface, doc_FbxNode_GetTrimNurbsSurface);

    return NULL;
}


PyDoc_STRVAR(doc_FbxNode_GetPatch, "GetPatch(self) -> FbxPatch");

extern "C" {static PyObject *meth_FbxNode_GetPatch(PyObject *, PyObject *);}
static PyObject *meth_FbxNode_GetPatch(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxNode, &sipCpp))
        {
             ::FbxPatch*sipRes;

            sipRes = sipCpp->GetPatch();

            return sipConvertFromType(sipRes,sipType_FbxPatch,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxNode, sipName_GetPatch, doc_FbxNode_GetPatch);

    return NULL;
}


PyDoc_STRVAR(doc_FbxNode_GetCamera, "GetCamera(self) -> FbxCamera");

extern "C" {static PyObject *meth_FbxNode_GetCamera(PyObject *, PyObject *);}
static PyObject *meth_FbxNode_GetCamera(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxNode, &sipCpp))
        {
             ::FbxCamera*sipRes;

            sipRes = sipCpp->GetCamera();

            return sipConvertFromType(sipRes,sipType_FbxCamera,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxNode, sipName_GetCamera, doc_FbxNode_GetCamera);

    return NULL;
}


PyDoc_STRVAR(doc_FbxNode_GetCameraSwitcher, "GetCameraSwitcher(self) -> FbxCameraSwitcher");

extern "C" {static PyObject *meth_FbxNode_GetCameraSwitcher(PyObject *, PyObject *);}
static PyObject *meth_FbxNode_GetCameraSwitcher(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxNode, &sipCpp))
        {
             ::FbxCameraSwitcher*sipRes;

            sipRes = sipCpp->GetCameraSwitcher();

            return sipConvertFromType(sipRes,sipType_FbxCameraSwitcher,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxNode, sipName_GetCameraSwitcher, doc_FbxNode_GetCameraSwitcher);

    return NULL;
}


PyDoc_STRVAR(doc_FbxNode_GetLight, "GetLight(self) -> FbxLight");

extern "C" {static PyObject *meth_FbxNode_GetLight(PyObject *, PyObject *);}
static PyObject *meth_FbxNode_GetLight(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxNode, &sipCpp))
        {
             ::FbxLight*sipRes;

            sipRes = sipCpp->GetLight();

            return sipConvertFromType(sipRes,sipType_FbxLight,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxNode, sipName_GetLight, doc_FbxNode_GetLight);

    return NULL;
}


PyDoc_STRVAR(doc_FbxNode_SetTransformationInheritType, "SetTransformationInheritType(self, FbxTransform.EInheritType)");

extern "C" {static PyObject *meth_FbxNode_SetTransformationInheritType(PyObject *, PyObject *);}
static PyObject *meth_FbxNode_SetTransformationInheritType(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxTransform::EInheritType a0;
         ::FbxNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_FbxNode, &sipCpp, sipType_FbxTransform_EInheritType, &a0))
        {
            sipCpp->SetTransformationInheritType(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxNode, sipName_SetTransformationInheritType, doc_FbxNode_SetTransformationInheritType);

    return NULL;
}


PyDoc_STRVAR(doc_FbxNode_GetTransformationInheritType, "GetTransformationInheritType(self) -> FbxTransform.EInheritType");

extern "C" {static PyObject *meth_FbxNode_GetTransformationInheritType(PyObject *, PyObject *);}
static PyObject *meth_FbxNode_GetTransformationInheritType(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxTransform::EInheritType a0;
         ::FbxNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxNode, &sipCpp))
        {
            sipCpp->GetTransformationInheritType(a0);

            return sipConvertFromEnum(a0,sipType_FbxTransform_EInheritType);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxNode, sipName_GetTransformationInheritType, doc_FbxNode_GetTransformationInheritType);

    return NULL;
}


PyDoc_STRVAR(doc_FbxNode_SetPivotState, "SetPivotState(self, FbxNode.EPivotSet, FbxNode.EPivotState)");

extern "C" {static PyObject *meth_FbxNode_SetPivotState(PyObject *, PyObject *);}
static PyObject *meth_FbxNode_SetPivotState(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxNode::EPivotSet a0;
         ::FbxNode::EPivotState a1;
         ::FbxNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BEE", &sipSelf, sipType_FbxNode, &sipCpp, sipType_FbxNode_EPivotSet, &a0, sipType_FbxNode_EPivotState, &a1))
        {
            sipCpp->SetPivotState(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxNode, sipName_SetPivotState, doc_FbxNode_SetPivotState);

    return NULL;
}


PyDoc_STRVAR(doc_FbxNode_GetPivotState, "GetPivotState(self, FbxNode.EPivotSet) -> FbxNode.EPivotState");

extern "C" {static PyObject *meth_FbxNode_GetPivotState(PyObject *, PyObject *);}
static PyObject *meth_FbxNode_GetPivotState(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxNode::EPivotSet a0;
         ::FbxNode::EPivotState a1;
         ::FbxNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_FbxNode, &sipCpp, sipType_FbxNode_EPivotSet, &a0))
        {
            sipCpp->GetPivotState(a0,a1);

            return sipConvertFromEnum(a1,sipType_FbxNode_EPivotState);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxNode, sipName_GetPivotState, doc_FbxNode_GetPivotState);

    return NULL;
}


PyDoc_STRVAR(doc_FbxNode_SetRotationOrder, "SetRotationOrder(self, FbxNode.EPivotSet, EFbxRotationOrder)");

extern "C" {static PyObject *meth_FbxNode_SetRotationOrder(PyObject *, PyObject *);}
static PyObject *meth_FbxNode_SetRotationOrder(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxNode::EPivotSet a0;
         ::EFbxRotationOrder a1;
         ::FbxNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BEE", &sipSelf, sipType_FbxNode, &sipCpp, sipType_FbxNode_EPivotSet, &a0, sipType_EFbxRotationOrder, &a1))
        {
            sipCpp->SetRotationOrder(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxNode, sipName_SetRotationOrder, doc_FbxNode_SetRotationOrder);

    return NULL;
}


PyDoc_STRVAR(doc_FbxNode_GetRotationOrder, "GetRotationOrder(self, FbxNode.EPivotSet) -> EFbxRotationOrder");

extern "C" {static PyObject *meth_FbxNode_GetRotationOrder(PyObject *, PyObject *);}
static PyObject *meth_FbxNode_GetRotationOrder(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxNode::EPivotSet a0;
         ::EFbxRotationOrder a1;
         ::FbxNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_FbxNode, &sipCpp, sipType_FbxNode_EPivotSet, &a0))
        {
            sipCpp->GetRotationOrder(a0,a1);

            return sipConvertFromEnum(a1,sipType_EFbxRotationOrder);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxNode, sipName_GetRotationOrder, doc_FbxNode_GetRotationOrder);

    return NULL;
}


PyDoc_STRVAR(doc_FbxNode_SetUseRotationSpaceForLimitOnly, "SetUseRotationSpaceForLimitOnly(self, FbxNode.EPivotSet, bool)");

extern "C" {static PyObject *meth_FbxNode_SetUseRotationSpaceForLimitOnly(PyObject *, PyObject *);}
static PyObject *meth_FbxNode_SetUseRotationSpaceForLimitOnly(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxNode::EPivotSet a0;
        bool a1;
         ::FbxNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BEb", &sipSelf, sipType_FbxNode, &sipCpp, sipType_FbxNode_EPivotSet, &a0, &a1))
        {
            sipCpp->SetUseRotationSpaceForLimitOnly(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxNode, sipName_SetUseRotationSpaceForLimitOnly, doc_FbxNode_SetUseRotationSpaceForLimitOnly);

    return NULL;
}


PyDoc_STRVAR(doc_FbxNode_GetUseRotationSpaceForLimitOnly, "GetUseRotationSpaceForLimitOnly(self, FbxNode.EPivotSet) -> bool");

extern "C" {static PyObject *meth_FbxNode_GetUseRotationSpaceForLimitOnly(PyObject *, PyObject *);}
static PyObject *meth_FbxNode_GetUseRotationSpaceForLimitOnly(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxNode::EPivotSet a0;
         ::FbxNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_FbxNode, &sipCpp, sipType_FbxNode_EPivotSet, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->GetUseRotationSpaceForLimitOnly(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxNode, sipName_GetUseRotationSpaceForLimitOnly, doc_FbxNode_GetUseRotationSpaceForLimitOnly);

    return NULL;
}


PyDoc_STRVAR(doc_FbxNode_SetRotationActive, "SetRotationActive(self, bool)");

extern "C" {static PyObject *meth_FbxNode_SetRotationActive(PyObject *, PyObject *);}
static PyObject *meth_FbxNode_SetRotationActive(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
         ::FbxNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_FbxNode, &sipCpp, &a0))
        {
            sipCpp->SetRotationActive(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxNode, sipName_SetRotationActive, doc_FbxNode_SetRotationActive);

    return NULL;
}


PyDoc_STRVAR(doc_FbxNode_GetRotationActive, "GetRotationActive(self) -> bool");

extern "C" {static PyObject *meth_FbxNode_GetRotationActive(PyObject *, PyObject *);}
static PyObject *meth_FbxNode_GetRotationActive(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::FbxNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxNode, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->GetRotationActive();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxNode, sipName_GetRotationActive, doc_FbxNode_GetRotationActive);

    return NULL;
}


PyDoc_STRVAR(doc_FbxNode_SetQuaternionInterpolation, "SetQuaternionInterpolation(self, FbxNode.EPivotSet, EFbxQuatInterpMode)");

extern "C" {static PyObject *meth_FbxNode_SetQuaternionInterpolation(PyObject *, PyObject *);}
static PyObject *meth_FbxNode_SetQuaternionInterpolation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxNode::EPivotSet a0;
         ::EFbxQuatInterpMode a1;
         ::FbxNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BEE", &sipSelf, sipType_FbxNode, &sipCpp, sipType_FbxNode_EPivotSet, &a0, sipType_EFbxQuatInterpMode, &a1))
        {
            sipCpp->SetQuaternionInterpolation(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxNode, sipName_SetQuaternionInterpolation, doc_FbxNode_SetQuaternionInterpolation);

    return NULL;
}


PyDoc_STRVAR(doc_FbxNode_GetQuaternionInterpolation, "GetQuaternionInterpolation(self, FbxNode.EPivotSet) -> EFbxQuatInterpMode");

extern "C" {static PyObject *meth_FbxNode_GetQuaternionInterpolation(PyObject *, PyObject *);}
static PyObject *meth_FbxNode_GetQuaternionInterpolation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxNode::EPivotSet a0;
        const  ::FbxNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_FbxNode, &sipCpp, sipType_FbxNode_EPivotSet, &a0))
        {
             ::EFbxQuatInterpMode sipRes;

            sipRes = sipCpp->GetQuaternionInterpolation(a0);

            return sipConvertFromEnum(sipRes,sipType_EFbxQuatInterpMode);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxNode, sipName_GetQuaternionInterpolation, doc_FbxNode_GetQuaternionInterpolation);

    return NULL;
}


PyDoc_STRVAR(doc_FbxNode_SetRotationStiffness, "SetRotationStiffness(self, FbxVector4)");

extern "C" {static PyObject *meth_FbxNode_SetRotationStiffness(PyObject *, PyObject *);}
static PyObject *meth_FbxNode_SetRotationStiffness(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxVector4* a0;
         ::FbxNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_FbxNode, &sipCpp, sipType_FbxVector4, &a0))
        {
            sipCpp->SetRotationStiffness(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxNode, sipName_SetRotationStiffness, doc_FbxNode_SetRotationStiffness);

    return NULL;
}


PyDoc_STRVAR(doc_FbxNode_GetRotationStiffness, "GetRotationStiffness(self) -> FbxVector4");

extern "C" {static PyObject *meth_FbxNode_GetRotationStiffness(PyObject *, PyObject *);}
static PyObject *meth_FbxNode_GetRotationStiffness(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxNode, &sipCpp))
        {
             ::FbxVector4*sipRes;

            sipRes = new  ::FbxVector4(sipCpp->GetRotationStiffness());

            return sipConvertFromNewType(sipRes,sipType_FbxVector4,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxNode, sipName_GetRotationStiffness, doc_FbxNode_GetRotationStiffness);

    return NULL;
}


PyDoc_STRVAR(doc_FbxNode_SetMinDampRange, "SetMinDampRange(self, FbxVector4)");

extern "C" {static PyObject *meth_FbxNode_SetMinDampRange(PyObject *, PyObject *);}
static PyObject *meth_FbxNode_SetMinDampRange(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxVector4* a0;
         ::FbxNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_FbxNode, &sipCpp, sipType_FbxVector4, &a0))
        {
            sipCpp->SetMinDampRange(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxNode, sipName_SetMinDampRange, doc_FbxNode_SetMinDampRange);

    return NULL;
}


PyDoc_STRVAR(doc_FbxNode_GetMinDampRange, "GetMinDampRange(self) -> FbxVector4");

extern "C" {static PyObject *meth_FbxNode_GetMinDampRange(PyObject *, PyObject *);}
static PyObject *meth_FbxNode_GetMinDampRange(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxNode, &sipCpp))
        {
             ::FbxVector4*sipRes;

            sipRes = new  ::FbxVector4(sipCpp->GetMinDampRange());

            return sipConvertFromNewType(sipRes,sipType_FbxVector4,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxNode, sipName_GetMinDampRange, doc_FbxNode_GetMinDampRange);

    return NULL;
}


PyDoc_STRVAR(doc_FbxNode_SetMaxDampRange, "SetMaxDampRange(self, FbxVector4)");

extern "C" {static PyObject *meth_FbxNode_SetMaxDampRange(PyObject *, PyObject *);}
static PyObject *meth_FbxNode_SetMaxDampRange(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxVector4* a0;
         ::FbxNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_FbxNode, &sipCpp, sipType_FbxVector4, &a0))
        {
            sipCpp->SetMaxDampRange(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxNode, sipName_SetMaxDampRange, doc_FbxNode_SetMaxDampRange);

    return NULL;
}


PyDoc_STRVAR(doc_FbxNode_GetMaxDampRange, "GetMaxDampRange(self) -> FbxVector4");

extern "C" {static PyObject *meth_FbxNode_GetMaxDampRange(PyObject *, PyObject *);}
static PyObject *meth_FbxNode_GetMaxDampRange(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxNode, &sipCpp))
        {
             ::FbxVector4*sipRes;

            sipRes = new  ::FbxVector4(sipCpp->GetMaxDampRange());

            return sipConvertFromNewType(sipRes,sipType_FbxVector4,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxNode, sipName_GetMaxDampRange, doc_FbxNode_GetMaxDampRange);

    return NULL;
}


PyDoc_STRVAR(doc_FbxNode_SetMinDampStrength, "SetMinDampStrength(self, FbxVector4)");

extern "C" {static PyObject *meth_FbxNode_SetMinDampStrength(PyObject *, PyObject *);}
static PyObject *meth_FbxNode_SetMinDampStrength(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxVector4* a0;
         ::FbxNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_FbxNode, &sipCpp, sipType_FbxVector4, &a0))
        {
            sipCpp->SetMinDampStrength(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxNode, sipName_SetMinDampStrength, doc_FbxNode_SetMinDampStrength);

    return NULL;
}


PyDoc_STRVAR(doc_FbxNode_GetMinDampStrength, "GetMinDampStrength(self) -> FbxVector4");

extern "C" {static PyObject *meth_FbxNode_GetMinDampStrength(PyObject *, PyObject *);}
static PyObject *meth_FbxNode_GetMinDampStrength(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxNode, &sipCpp))
        {
             ::FbxVector4*sipRes;

            sipRes = new  ::FbxVector4(sipCpp->GetMinDampStrength());

            return sipConvertFromNewType(sipRes,sipType_FbxVector4,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxNode, sipName_GetMinDampStrength, doc_FbxNode_GetMinDampStrength);

    return NULL;
}


PyDoc_STRVAR(doc_FbxNode_SetMaxDampStrength, "SetMaxDampStrength(self, FbxVector4)");

extern "C" {static PyObject *meth_FbxNode_SetMaxDampStrength(PyObject *, PyObject *);}
static PyObject *meth_FbxNode_SetMaxDampStrength(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxVector4* a0;
         ::FbxNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_FbxNode, &sipCpp, sipType_FbxVector4, &a0))
        {
            sipCpp->SetMaxDampStrength(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxNode, sipName_SetMaxDampStrength, doc_FbxNode_SetMaxDampStrength);

    return NULL;
}


PyDoc_STRVAR(doc_FbxNode_GetMaxDampStrength, "GetMaxDampStrength(self) -> FbxVector4");

extern "C" {static PyObject *meth_FbxNode_GetMaxDampStrength(PyObject *, PyObject *);}
static PyObject *meth_FbxNode_GetMaxDampStrength(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxNode, &sipCpp))
        {
             ::FbxVector4*sipRes;

            sipRes = new  ::FbxVector4(sipCpp->GetMaxDampStrength());

            return sipConvertFromNewType(sipRes,sipType_FbxVector4,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxNode, sipName_GetMaxDampStrength, doc_FbxNode_GetMaxDampStrength);

    return NULL;
}


PyDoc_STRVAR(doc_FbxNode_SetPreferedAngle, "SetPreferedAngle(self, FbxVector4)");

extern "C" {static PyObject *meth_FbxNode_SetPreferedAngle(PyObject *, PyObject *);}
static PyObject *meth_FbxNode_SetPreferedAngle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxVector4* a0;
         ::FbxNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_FbxNode, &sipCpp, sipType_FbxVector4, &a0))
        {
            sipCpp->SetPreferedAngle(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxNode, sipName_SetPreferedAngle, doc_FbxNode_SetPreferedAngle);

    return NULL;
}


PyDoc_STRVAR(doc_FbxNode_GetPreferedAngle, "GetPreferedAngle(self) -> FbxVector4");

extern "C" {static PyObject *meth_FbxNode_GetPreferedAngle(PyObject *, PyObject *);}
static PyObject *meth_FbxNode_GetPreferedAngle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxNode, &sipCpp))
        {
             ::FbxVector4*sipRes;

            sipRes = new  ::FbxVector4(sipCpp->GetPreferedAngle());

            return sipConvertFromNewType(sipRes,sipType_FbxVector4,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxNode, sipName_GetPreferedAngle, doc_FbxNode_GetPreferedAngle);

    return NULL;
}


PyDoc_STRVAR(doc_FbxNode_SetRotationOffset, "SetRotationOffset(self, FbxNode.EPivotSet, FbxVector4)");

extern "C" {static PyObject *meth_FbxNode_SetRotationOffset(PyObject *, PyObject *);}
static PyObject *meth_FbxNode_SetRotationOffset(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxNode::EPivotSet a0;
         ::FbxVector4* a1;
         ::FbxNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BEJ9", &sipSelf, sipType_FbxNode, &sipCpp, sipType_FbxNode_EPivotSet, &a0, sipType_FbxVector4, &a1))
        {
            sipCpp->SetRotationOffset(a0,*a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxNode, sipName_SetRotationOffset, doc_FbxNode_SetRotationOffset);

    return NULL;
}


PyDoc_STRVAR(doc_FbxNode_GetRotationOffset, "GetRotationOffset(self, FbxNode.EPivotSet) -> FbxVector4");

extern "C" {static PyObject *meth_FbxNode_GetRotationOffset(PyObject *, PyObject *);}
static PyObject *meth_FbxNode_GetRotationOffset(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxNode::EPivotSet a0;
        const  ::FbxNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_FbxNode, &sipCpp, sipType_FbxNode_EPivotSet, &a0))
        {
             ::FbxVector4*sipRes;

            sipRes = new  ::FbxVector4(sipCpp->GetRotationOffset(a0));

            return sipConvertFromNewType(sipRes,sipType_FbxVector4,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxNode, sipName_GetRotationOffset, doc_FbxNode_GetRotationOffset);

    return NULL;
}


PyDoc_STRVAR(doc_FbxNode_SetRotationPivot, "SetRotationPivot(self, FbxNode.EPivotSet, FbxVector4)");

extern "C" {static PyObject *meth_FbxNode_SetRotationPivot(PyObject *, PyObject *);}
static PyObject *meth_FbxNode_SetRotationPivot(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxNode::EPivotSet a0;
         ::FbxVector4* a1;
         ::FbxNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BEJ9", &sipSelf, sipType_FbxNode, &sipCpp, sipType_FbxNode_EPivotSet, &a0, sipType_FbxVector4, &a1))
        {
            sipCpp->SetRotationPivot(a0,*a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxNode, sipName_SetRotationPivot, doc_FbxNode_SetRotationPivot);

    return NULL;
}


PyDoc_STRVAR(doc_FbxNode_GetRotationPivot, "GetRotationPivot(self, FbxNode.EPivotSet) -> FbxVector4");

extern "C" {static PyObject *meth_FbxNode_GetRotationPivot(PyObject *, PyObject *);}
static PyObject *meth_FbxNode_GetRotationPivot(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxNode::EPivotSet a0;
        const  ::FbxNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_FbxNode, &sipCpp, sipType_FbxNode_EPivotSet, &a0))
        {
             ::FbxVector4*sipRes;

            sipRes = new  ::FbxVector4(sipCpp->GetRotationPivot(a0));

            return sipConvertFromNewType(sipRes,sipType_FbxVector4,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxNode, sipName_GetRotationPivot, doc_FbxNode_GetRotationPivot);

    return NULL;
}


PyDoc_STRVAR(doc_FbxNode_SetPreRotation, "SetPreRotation(self, FbxNode.EPivotSet, FbxVector4)");

extern "C" {static PyObject *meth_FbxNode_SetPreRotation(PyObject *, PyObject *);}
static PyObject *meth_FbxNode_SetPreRotation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxNode::EPivotSet a0;
         ::FbxVector4* a1;
         ::FbxNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BEJ9", &sipSelf, sipType_FbxNode, &sipCpp, sipType_FbxNode_EPivotSet, &a0, sipType_FbxVector4, &a1))
        {
            sipCpp->SetPreRotation(a0,*a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxNode, sipName_SetPreRotation, doc_FbxNode_SetPreRotation);

    return NULL;
}


PyDoc_STRVAR(doc_FbxNode_GetPreRotation, "GetPreRotation(self, FbxNode.EPivotSet) -> FbxVector4");

extern "C" {static PyObject *meth_FbxNode_GetPreRotation(PyObject *, PyObject *);}
static PyObject *meth_FbxNode_GetPreRotation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxNode::EPivotSet a0;
        const  ::FbxNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_FbxNode, &sipCpp, sipType_FbxNode_EPivotSet, &a0))
        {
             ::FbxVector4*sipRes;

            sipRes = new  ::FbxVector4(sipCpp->GetPreRotation(a0));

            return sipConvertFromNewType(sipRes,sipType_FbxVector4,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxNode, sipName_GetPreRotation, doc_FbxNode_GetPreRotation);

    return NULL;
}


PyDoc_STRVAR(doc_FbxNode_SetPostRotation, "SetPostRotation(self, FbxNode.EPivotSet, FbxVector4)");

extern "C" {static PyObject *meth_FbxNode_SetPostRotation(PyObject *, PyObject *);}
static PyObject *meth_FbxNode_SetPostRotation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxNode::EPivotSet a0;
         ::FbxVector4* a1;
         ::FbxNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BEJ9", &sipSelf, sipType_FbxNode, &sipCpp, sipType_FbxNode_EPivotSet, &a0, sipType_FbxVector4, &a1))
        {
            sipCpp->SetPostRotation(a0,*a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxNode, sipName_SetPostRotation, doc_FbxNode_SetPostRotation);

    return NULL;
}


PyDoc_STRVAR(doc_FbxNode_GetPostRotation, "GetPostRotation(self, FbxNode.EPivotSet) -> FbxVector4");

extern "C" {static PyObject *meth_FbxNode_GetPostRotation(PyObject *, PyObject *);}
static PyObject *meth_FbxNode_GetPostRotation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxNode::EPivotSet a0;
        const  ::FbxNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_FbxNode, &sipCpp, sipType_FbxNode_EPivotSet, &a0))
        {
             ::FbxVector4*sipRes;

            sipRes = new  ::FbxVector4(sipCpp->GetPostRotation(a0));

            return sipConvertFromNewType(sipRes,sipType_FbxVector4,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxNode, sipName_GetPostRotation, doc_FbxNode_GetPostRotation);

    return NULL;
}


PyDoc_STRVAR(doc_FbxNode_SetScalingOffset, "SetScalingOffset(self, FbxNode.EPivotSet, FbxVector4)");

extern "C" {static PyObject *meth_FbxNode_SetScalingOffset(PyObject *, PyObject *);}
static PyObject *meth_FbxNode_SetScalingOffset(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxNode::EPivotSet a0;
         ::FbxVector4* a1;
         ::FbxNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BEJ9", &sipSelf, sipType_FbxNode, &sipCpp, sipType_FbxNode_EPivotSet, &a0, sipType_FbxVector4, &a1))
        {
            sipCpp->SetScalingOffset(a0,*a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxNode, sipName_SetScalingOffset, doc_FbxNode_SetScalingOffset);

    return NULL;
}


PyDoc_STRVAR(doc_FbxNode_GetScalingOffset, "GetScalingOffset(self, FbxNode.EPivotSet) -> FbxVector4");

extern "C" {static PyObject *meth_FbxNode_GetScalingOffset(PyObject *, PyObject *);}
static PyObject *meth_FbxNode_GetScalingOffset(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxNode::EPivotSet a0;
        const  ::FbxNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_FbxNode, &sipCpp, sipType_FbxNode_EPivotSet, &a0))
        {
             ::FbxVector4*sipRes;

            sipRes = new  ::FbxVector4(sipCpp->GetScalingOffset(a0));

            return sipConvertFromNewType(sipRes,sipType_FbxVector4,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxNode, sipName_GetScalingOffset, doc_FbxNode_GetScalingOffset);

    return NULL;
}


PyDoc_STRVAR(doc_FbxNode_SetScalingPivot, "SetScalingPivot(self, FbxNode.EPivotSet, FbxVector4)");

extern "C" {static PyObject *meth_FbxNode_SetScalingPivot(PyObject *, PyObject *);}
static PyObject *meth_FbxNode_SetScalingPivot(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxNode::EPivotSet a0;
         ::FbxVector4* a1;
         ::FbxNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BEJ9", &sipSelf, sipType_FbxNode, &sipCpp, sipType_FbxNode_EPivotSet, &a0, sipType_FbxVector4, &a1))
        {
            sipCpp->SetScalingPivot(a0,*a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxNode, sipName_SetScalingPivot, doc_FbxNode_SetScalingPivot);

    return NULL;
}


PyDoc_STRVAR(doc_FbxNode_GetScalingPivot, "GetScalingPivot(self, FbxNode.EPivotSet) -> FbxVector4");

extern "C" {static PyObject *meth_FbxNode_GetScalingPivot(PyObject *, PyObject *);}
static PyObject *meth_FbxNode_GetScalingPivot(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxNode::EPivotSet a0;
        const  ::FbxNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_FbxNode, &sipCpp, sipType_FbxNode_EPivotSet, &a0))
        {
             ::FbxVector4*sipRes;

            sipRes = new  ::FbxVector4(sipCpp->GetScalingPivot(a0));

            return sipConvertFromNewType(sipRes,sipType_FbxVector4,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxNode, sipName_GetScalingPivot, doc_FbxNode_GetScalingPivot);

    return NULL;
}


PyDoc_STRVAR(doc_FbxNode_SetGeometricTranslation, "SetGeometricTranslation(self, FbxNode.EPivotSet, FbxVector4)");

extern "C" {static PyObject *meth_FbxNode_SetGeometricTranslation(PyObject *, PyObject *);}
static PyObject *meth_FbxNode_SetGeometricTranslation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxNode::EPivotSet a0;
         ::FbxVector4* a1;
         ::FbxNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BEJ9", &sipSelf, sipType_FbxNode, &sipCpp, sipType_FbxNode_EPivotSet, &a0, sipType_FbxVector4, &a1))
        {
            sipCpp->SetGeometricTranslation(a0,*a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxNode, sipName_SetGeometricTranslation, doc_FbxNode_SetGeometricTranslation);

    return NULL;
}


PyDoc_STRVAR(doc_FbxNode_GetGeometricTranslation, "GetGeometricTranslation(self, FbxNode.EPivotSet) -> FbxVector4");

extern "C" {static PyObject *meth_FbxNode_GetGeometricTranslation(PyObject *, PyObject *);}
static PyObject *meth_FbxNode_GetGeometricTranslation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxNode::EPivotSet a0;
        const  ::FbxNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_FbxNode, &sipCpp, sipType_FbxNode_EPivotSet, &a0))
        {
             ::FbxVector4*sipRes;

            sipRes = new  ::FbxVector4(sipCpp->GetGeometricTranslation(a0));

            return sipConvertFromNewType(sipRes,sipType_FbxVector4,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxNode, sipName_GetGeometricTranslation, doc_FbxNode_GetGeometricTranslation);

    return NULL;
}


PyDoc_STRVAR(doc_FbxNode_SetGeometricRotation, "SetGeometricRotation(self, FbxNode.EPivotSet, FbxVector4)");

extern "C" {static PyObject *meth_FbxNode_SetGeometricRotation(PyObject *, PyObject *);}
static PyObject *meth_FbxNode_SetGeometricRotation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxNode::EPivotSet a0;
         ::FbxVector4* a1;
         ::FbxNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BEJ9", &sipSelf, sipType_FbxNode, &sipCpp, sipType_FbxNode_EPivotSet, &a0, sipType_FbxVector4, &a1))
        {
            sipCpp->SetGeometricRotation(a0,*a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxNode, sipName_SetGeometricRotation, doc_FbxNode_SetGeometricRotation);

    return NULL;
}


PyDoc_STRVAR(doc_FbxNode_GetGeometricRotation, "GetGeometricRotation(self, FbxNode.EPivotSet) -> FbxVector4");

extern "C" {static PyObject *meth_FbxNode_GetGeometricRotation(PyObject *, PyObject *);}
static PyObject *meth_FbxNode_GetGeometricRotation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxNode::EPivotSet a0;
         ::FbxNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_FbxNode, &sipCpp, sipType_FbxNode_EPivotSet, &a0))
        {
             ::FbxVector4*sipRes;

            sipRes = new  ::FbxVector4(sipCpp->GetGeometricRotation(a0));

            return sipConvertFromNewType(sipRes,sipType_FbxVector4,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxNode, sipName_GetGeometricRotation, doc_FbxNode_GetGeometricRotation);

    return NULL;
}


PyDoc_STRVAR(doc_FbxNode_SetGeometricScaling, "SetGeometricScaling(self, FbxNode.EPivotSet, FbxVector4)");

extern "C" {static PyObject *meth_FbxNode_SetGeometricScaling(PyObject *, PyObject *);}
static PyObject *meth_FbxNode_SetGeometricScaling(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxNode::EPivotSet a0;
         ::FbxVector4* a1;
         ::FbxNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BEJ9", &sipSelf, sipType_FbxNode, &sipCpp, sipType_FbxNode_EPivotSet, &a0, sipType_FbxVector4, &a1))
        {
            sipCpp->SetGeometricScaling(a0,*a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxNode, sipName_SetGeometricScaling, doc_FbxNode_SetGeometricScaling);

    return NULL;
}


PyDoc_STRVAR(doc_FbxNode_GetGeometricScaling, "GetGeometricScaling(self, FbxNode.EPivotSet) -> FbxVector4");

extern "C" {static PyObject *meth_FbxNode_GetGeometricScaling(PyObject *, PyObject *);}
static PyObject *meth_FbxNode_GetGeometricScaling(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxNode::EPivotSet a0;
         ::FbxNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_FbxNode, &sipCpp, sipType_FbxNode_EPivotSet, &a0))
        {
             ::FbxVector4*sipRes;

            sipRes = new  ::FbxVector4(sipCpp->GetGeometricScaling(a0));

            return sipConvertFromNewType(sipRes,sipType_FbxVector4,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxNode, sipName_GetGeometricScaling, doc_FbxNode_GetGeometricScaling);

    return NULL;
}


PyDoc_STRVAR(doc_FbxNode_ResetPivotSet, "ResetPivotSet(self, FbxNode.EPivotSet)");

extern "C" {static PyObject *meth_FbxNode_ResetPivotSet(PyObject *, PyObject *);}
static PyObject *meth_FbxNode_ResetPivotSet(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxNode::EPivotSet a0;
         ::FbxNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_FbxNode, &sipCpp, sipType_FbxNode_EPivotSet, &a0))
        {
            sipCpp->ResetPivotSet(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxNode, sipName_ResetPivotSet, doc_FbxNode_ResetPivotSet);

    return NULL;
}


PyDoc_STRVAR(doc_FbxNode_ConvertPivotAnimationRecursive, "ConvertPivotAnimationRecursive(self, FbxAnimStack, FbxNode.EPivotSet, float, bool = True)");

extern "C" {static PyObject *meth_FbxNode_ConvertPivotAnimationRecursive(PyObject *, PyObject *);}
static PyObject *meth_FbxNode_ConvertPivotAnimationRecursive(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxAnimStack* a0;
         ::FbxNode::EPivotSet a1;
        double a2;
        bool a3 = 1;
         ::FbxNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8Ed|b", &sipSelf, sipType_FbxNode, &sipCpp, sipType_FbxAnimStack, &a0, sipType_FbxNode_EPivotSet, &a1, &a2, &a3))
        {
            sipCpp->ConvertPivotAnimationRecursive(a0,a1,a2,a3);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxNode, sipName_ConvertPivotAnimationRecursive, doc_FbxNode_ConvertPivotAnimationRecursive);

    return NULL;
}


PyDoc_STRVAR(doc_FbxNode_EvaluateGlobalTransform, "EvaluateGlobalTransform(self, FbxTime = FBXSDK_TIME_INFINITE, FbxNode.EPivotSet = FbxNode.eSourcePivot, bool = False, bool = False) -> FbxAMatrix");

extern "C" {static PyObject *meth_FbxNode_EvaluateGlobalTransform(PyObject *, PyObject *);}
static PyObject *meth_FbxNode_EvaluateGlobalTransform(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxTime a0def = FBXSDK_TIME_INFINITE;
         ::FbxTime* a0 = &a0def;
         ::FbxNode::EPivotSet a1 = FbxNode::eSourcePivot;
        bool a2 = 0;
        bool a3 = 0;
         ::FbxNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B|J9Ebb", &sipSelf, sipType_FbxNode, &sipCpp, sipType_FbxTime, &a0, sipType_FbxNode_EPivotSet, &a1, &a2, &a3))
        {
             ::FbxAMatrix*sipRes;

            sipRes = &sipCpp->EvaluateGlobalTransform(*a0,a1,a2,a3);

            return sipConvertFromType(sipRes,sipType_FbxAMatrix,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxNode, sipName_EvaluateGlobalTransform, doc_FbxNode_EvaluateGlobalTransform);

    return NULL;
}


PyDoc_STRVAR(doc_FbxNode_EvaluateLocalTransform, "EvaluateLocalTransform(self, FbxTime = FBXSDK_TIME_INFINITE, FbxNode.EPivotSet = FbxNode.eSourcePivot, bool = False, bool = False) -> FbxAMatrix");

extern "C" {static PyObject *meth_FbxNode_EvaluateLocalTransform(PyObject *, PyObject *);}
static PyObject *meth_FbxNode_EvaluateLocalTransform(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxTime a0def = FBXSDK_TIME_INFINITE;
         ::FbxTime* a0 = &a0def;
         ::FbxNode::EPivotSet a1 = FbxNode::eSourcePivot;
        bool a2 = 0;
        bool a3 = 0;
         ::FbxNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B|J9Ebb", &sipSelf, sipType_FbxNode, &sipCpp, sipType_FbxTime, &a0, sipType_FbxNode_EPivotSet, &a1, &a2, &a3))
        {
             ::FbxAMatrix*sipRes;

            sipRes = &sipCpp->EvaluateLocalTransform(*a0,a1,a2,a3);

            return sipConvertFromType(sipRes,sipType_FbxAMatrix,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxNode, sipName_EvaluateLocalTransform, doc_FbxNode_EvaluateLocalTransform);

    return NULL;
}


PyDoc_STRVAR(doc_FbxNode_EvaluateLocalTranslation, "EvaluateLocalTranslation(self, FbxTime = FBXSDK_TIME_INFINITE, FbxNode.EPivotSet = FbxNode.eSourcePivot, bool = False, bool = False) -> FbxVector4");

extern "C" {static PyObject *meth_FbxNode_EvaluateLocalTranslation(PyObject *, PyObject *);}
static PyObject *meth_FbxNode_EvaluateLocalTranslation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxTime a0def = FBXSDK_TIME_INFINITE;
         ::FbxTime* a0 = &a0def;
         ::FbxNode::EPivotSet a1 = FbxNode::eSourcePivot;
        bool a2 = 0;
        bool a3 = 0;
         ::FbxNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B|J9Ebb", &sipSelf, sipType_FbxNode, &sipCpp, sipType_FbxTime, &a0, sipType_FbxNode_EPivotSet, &a1, &a2, &a3))
        {
             ::FbxVector4*sipRes;

            sipRes = &sipCpp->EvaluateLocalTranslation(*a0,a1,a2,a3);

            return sipConvertFromType(sipRes,sipType_FbxVector4,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxNode, sipName_EvaluateLocalTranslation, doc_FbxNode_EvaluateLocalTranslation);

    return NULL;
}


PyDoc_STRVAR(doc_FbxNode_EvaluateLocalRotation, "EvaluateLocalRotation(self, FbxTime = FBXSDK_TIME_INFINITE, FbxNode.EPivotSet = FbxNode.eSourcePivot, bool = False, bool = False) -> FbxVector4");

extern "C" {static PyObject *meth_FbxNode_EvaluateLocalRotation(PyObject *, PyObject *);}
static PyObject *meth_FbxNode_EvaluateLocalRotation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxTime a0def = FBXSDK_TIME_INFINITE;
         ::FbxTime* a0 = &a0def;
         ::FbxNode::EPivotSet a1 = FbxNode::eSourcePivot;
        bool a2 = 0;
        bool a3 = 0;
         ::FbxNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B|J9Ebb", &sipSelf, sipType_FbxNode, &sipCpp, sipType_FbxTime, &a0, sipType_FbxNode_EPivotSet, &a1, &a2, &a3))
        {
             ::FbxVector4*sipRes;

            sipRes = &sipCpp->EvaluateLocalRotation(*a0,a1,a2,a3);

            return sipConvertFromType(sipRes,sipType_FbxVector4,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxNode, sipName_EvaluateLocalRotation, doc_FbxNode_EvaluateLocalRotation);

    return NULL;
}


PyDoc_STRVAR(doc_FbxNode_EvaluateLocalScaling, "EvaluateLocalScaling(self, FbxTime = FBXSDK_TIME_INFINITE, FbxNode.EPivotSet = FbxNode.eSourcePivot, bool = False, bool = False) -> FbxVector4");

extern "C" {static PyObject *meth_FbxNode_EvaluateLocalScaling(PyObject *, PyObject *);}
static PyObject *meth_FbxNode_EvaluateLocalScaling(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxTime a0def = FBXSDK_TIME_INFINITE;
         ::FbxTime* a0 = &a0def;
         ::FbxNode::EPivotSet a1 = FbxNode::eSourcePivot;
        bool a2 = 0;
        bool a3 = 0;
         ::FbxNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B|J9Ebb", &sipSelf, sipType_FbxNode, &sipCpp, sipType_FbxTime, &a0, sipType_FbxNode_EPivotSet, &a1, &a2, &a3))
        {
             ::FbxVector4*sipRes;

            sipRes = &sipCpp->EvaluateLocalScaling(*a0,a1,a2,a3);

            return sipConvertFromType(sipRes,sipType_FbxVector4,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxNode, sipName_EvaluateLocalScaling, doc_FbxNode_EvaluateLocalScaling);

    return NULL;
}


PyDoc_STRVAR(doc_FbxNode_EvaluateGlobalBoundingBoxMinMaxCenter, "EvaluateGlobalBoundingBoxMinMaxCenter(self, FbxVector4, FbxVector4, FbxVector4, FbxTime = FBXSDK_TIME_INFINITE) -> bool");

extern "C" {static PyObject *meth_FbxNode_EvaluateGlobalBoundingBoxMinMaxCenter(PyObject *, PyObject *);}
static PyObject *meth_FbxNode_EvaluateGlobalBoundingBoxMinMaxCenter(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxVector4* a0;
         ::FbxVector4* a1;
         ::FbxVector4* a2;
        const  ::FbxTime& a3def = FBXSDK_TIME_INFINITE;
        const  ::FbxTime* a3 = &a3def;
         ::FbxNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9J9J9|J9", &sipSelf, sipType_FbxNode, &sipCpp, sipType_FbxVector4, &a0, sipType_FbxVector4, &a1, sipType_FbxVector4, &a2, sipType_FbxTime, &a3))
        {
            bool sipRes;

            sipRes = sipCpp->EvaluateGlobalBoundingBoxMinMaxCenter(*a0,*a1,*a2,*a3);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxNode, sipName_EvaluateGlobalBoundingBoxMinMaxCenter, doc_FbxNode_EvaluateGlobalBoundingBoxMinMaxCenter);

    return NULL;
}


PyDoc_STRVAR(doc_FbxNode_GetCharacterLinkCount, "GetCharacterLinkCount(self) -> int");

extern "C" {static PyObject *meth_FbxNode_GetCharacterLinkCount(PyObject *, PyObject *);}
static PyObject *meth_FbxNode_GetCharacterLinkCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxNode, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->GetCharacterLinkCount();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxNode, sipName_GetCharacterLinkCount, doc_FbxNode_GetCharacterLinkCount);

    return NULL;
}


PyDoc_STRVAR(doc_FbxNode_GetCharacterLink, "GetCharacterLink(self, int) -> Tuple[bool, FbxCharacter, int, int, int]");

extern "C" {static PyObject *meth_FbxNode_GetCharacterLink(PyObject *, PyObject *);}
static PyObject *meth_FbxNode_GetCharacterLink(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
         ::FbxCharacter* a1;
        int a2;
        int a3;
        int a4;
         ::FbxNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_FbxNode, &sipCpp, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->GetCharacterLink(a0,&a1,&a2,&a3,&a4);

            return sipBuildResult(0,"(bDiii)",sipRes,a1,sipType_FbxCharacter,NULL,a2,a3,a4);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxNode, sipName_GetCharacterLink, doc_FbxNode_GetCharacterLink);

    return NULL;
}


PyDoc_STRVAR(doc_FbxNode_FindCharacterLink, "FindCharacterLink(self, FbxCharacter, int, int, int) -> int");

extern "C" {static PyObject *meth_FbxNode_FindCharacterLink(PyObject *, PyObject *);}
static PyObject *meth_FbxNode_FindCharacterLink(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxCharacter* a0;
        int a1;
        int a2;
        int a3;
         ::FbxNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8iii", &sipSelf, sipType_FbxNode, &sipCpp, sipType_FbxCharacter, &a0, &a1, &a2, &a3))
        {
            int sipRes;

            sipRes = sipCpp->FindCharacterLink(a0,a1,a2,a3);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxNode, sipName_FindCharacterLink, doc_FbxNode_FindCharacterLink);

    return NULL;
}


PyDoc_STRVAR(doc_FbxNode_GetAnimationInterval, "GetAnimationInterval(self, FbxTimeSpan, FbxAnimStack = None, int = 0) -> bool");

extern "C" {static PyObject *meth_FbxNode_GetAnimationInterval(PyObject *, PyObject *);}
static PyObject *meth_FbxNode_GetAnimationInterval(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::FbxTimeSpan* a0;
         ::FbxAnimStack* a1 = 0;
        int a2 = 0;
         ::FbxNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9|J8i", &sipSelf, sipType_FbxNode, &sipCpp, sipType_FbxTimeSpan, &a0, sipType_FbxAnimStack, &a1, &a2))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::FbxNode::GetAnimationInterval(*a0,a1,a2) : sipCpp->GetAnimationInterval(*a0,a1,a2));

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxNode, sipName_GetAnimationInterval, doc_FbxNode_GetAnimationInterval);

    return NULL;
}


PyDoc_STRVAR(doc_FbxNode_AddMaterial, "AddMaterial(self, FbxSurfaceMaterial) -> int");

extern "C" {static PyObject *meth_FbxNode_AddMaterial(PyObject *, PyObject *);}
static PyObject *meth_FbxNode_AddMaterial(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxSurfaceMaterial* a0;
         ::FbxNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_FbxNode, &sipCpp, sipType_FbxSurfaceMaterial, &a0))
        {
            int sipRes;

            sipRes = sipCpp->AddMaterial(a0);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxNode, sipName_AddMaterial, doc_FbxNode_AddMaterial);

    return NULL;
}


PyDoc_STRVAR(doc_FbxNode_RemoveMaterial, "RemoveMaterial(self, FbxSurfaceMaterial) -> bool");

extern "C" {static PyObject *meth_FbxNode_RemoveMaterial(PyObject *, PyObject *);}
static PyObject *meth_FbxNode_RemoveMaterial(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxSurfaceMaterial* a0;
         ::FbxNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_FbxNode, &sipCpp, sipType_FbxSurfaceMaterial, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->RemoveMaterial(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxNode, sipName_RemoveMaterial, doc_FbxNode_RemoveMaterial);

    return NULL;
}


PyDoc_STRVAR(doc_FbxNode_GetMaterialCount, "GetMaterialCount(self) -> int");

extern "C" {static PyObject *meth_FbxNode_GetMaterialCount(PyObject *, PyObject *);}
static PyObject *meth_FbxNode_GetMaterialCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::FbxNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxNode, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->GetMaterialCount();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxNode, sipName_GetMaterialCount, doc_FbxNode_GetMaterialCount);

    return NULL;
}


PyDoc_STRVAR(doc_FbxNode_GetMaterial, "GetMaterial(self, int) -> FbxSurfaceMaterial");

extern "C" {static PyObject *meth_FbxNode_GetMaterial(PyObject *, PyObject *);}
static PyObject *meth_FbxNode_GetMaterial(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const  ::FbxNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_FbxNode, &sipCpp, &a0))
        {
             ::FbxSurfaceMaterial*sipRes;

            sipRes = sipCpp->GetMaterial(a0);

            return sipConvertFromType(sipRes,sipType_FbxSurfaceMaterial,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxNode, sipName_GetMaterial, doc_FbxNode_GetMaterial);

    return NULL;
}


PyDoc_STRVAR(doc_FbxNode_RemoveAllMaterials, "RemoveAllMaterials(self)");

extern "C" {static PyObject *meth_FbxNode_RemoveAllMaterials(PyObject *, PyObject *);}
static PyObject *meth_FbxNode_RemoveAllMaterials(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxNode, &sipCpp))
        {
            sipCpp->RemoveAllMaterials();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxNode, sipName_RemoveAllMaterials, doc_FbxNode_RemoveAllMaterials);

    return NULL;
}


PyDoc_STRVAR(doc_FbxNode_GetMaterialIndex, "GetMaterialIndex(self, str) -> int");

extern "C" {static PyObject *meth_FbxNode_GetMaterialIndex(PyObject *, PyObject *);}
static PyObject *meth_FbxNode_GetMaterialIndex(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const char* a0;
        PyObject *a0Keep;
        const  ::FbxNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BA8", &sipSelf, sipType_FbxNode, &sipCpp, &a0Keep, &a0))
        {
            int sipRes;

            sipRes = sipCpp->GetMaterialIndex(a0);
            Py_DECREF(a0Keep);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxNode, sipName_GetMaterialIndex, doc_FbxNode_GetMaterialIndex);

    return NULL;
}


extern "C" {static PyObject *slot_FbxNode___ne__(PyObject *,PyObject *);}
static PyObject *slot_FbxNode___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::FbxNode *sipCpp = reinterpret_cast< ::FbxNode *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_FbxNode));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const  ::FbxNode* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_FbxNode, &a0))
        {
            bool sipRes;

            sipRes = !sipCpp-> ::FbxNode::operator==(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_fbx, ne_slot, sipType_FbxNode, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_FbxNode___eq__(PyObject *,PyObject *);}
static PyObject *slot_FbxNode___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::FbxNode *sipCpp = reinterpret_cast< ::FbxNode *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_FbxNode));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const  ::FbxNode* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_FbxNode, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::FbxNode::operator==(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_fbx, eq_slot, sipType_FbxNode, sipSelf, sipArg);
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_FbxNode(void *, const sipTypeDef *);}
static void *cast_FbxNode(void *sipCppV, const sipTypeDef *targetType)
{
     ::FbxNode *sipCpp = reinterpret_cast< ::FbxNode *>(sipCppV);

    if (targetType == sipType_FbxObject)
        return static_cast< ::FbxObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_FbxNode(void *, int);}
static void release_FbxNode(void *, int)
{
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_FbxNode[] = {{244, 255, 1}};


/* Define this type's Python slots. */
static sipPySlotDef slots_FbxNode[] = {
    {(void *)slot_FbxNode___ne__, ne_slot},
    {(void *)slot_FbxNode___eq__, eq_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_FbxNode[] = {
    {SIP_MLNAME_CAST(sipName_AddChild), meth_FbxNode_AddChild, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxNode_AddChild)},
    {SIP_MLNAME_CAST(sipName_AddMaterial), meth_FbxNode_AddMaterial, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxNode_AddMaterial)},
    {SIP_MLNAME_CAST(sipName_AddNodeAttribute), meth_FbxNode_AddNodeAttribute, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxNode_AddNodeAttribute)},
    {SIP_MLNAME_CAST(sipName_ConvertPivotAnimationRecursive), meth_FbxNode_ConvertPivotAnimationRecursive, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxNode_ConvertPivotAnimationRecursive)},
    {SIP_MLNAME_CAST(sipName_Create), meth_FbxNode_Create, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxNode_Create)},
    {SIP_MLNAME_CAST(sipName_EvaluateGlobalBoundingBoxMinMaxCenter), meth_FbxNode_EvaluateGlobalBoundingBoxMinMaxCenter, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxNode_EvaluateGlobalBoundingBoxMinMaxCenter)},
    {SIP_MLNAME_CAST(sipName_EvaluateGlobalTransform), meth_FbxNode_EvaluateGlobalTransform, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxNode_EvaluateGlobalTransform)},
    {SIP_MLNAME_CAST(sipName_EvaluateLocalRotation), meth_FbxNode_EvaluateLocalRotation, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxNode_EvaluateLocalRotation)},
    {SIP_MLNAME_CAST(sipName_EvaluateLocalScaling), meth_FbxNode_EvaluateLocalScaling, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxNode_EvaluateLocalScaling)},
    {SIP_MLNAME_CAST(sipName_EvaluateLocalTransform), meth_FbxNode_EvaluateLocalTransform, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxNode_EvaluateLocalTransform)},
    {SIP_MLNAME_CAST(sipName_EvaluateLocalTranslation), meth_FbxNode_EvaluateLocalTranslation, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxNode_EvaluateLocalTranslation)},
    {SIP_MLNAME_CAST(sipName_FindCharacterLink), meth_FbxNode_FindCharacterLink, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxNode_FindCharacterLink)},
    {SIP_MLNAME_CAST(sipName_FindChild), meth_FbxNode_FindChild, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxNode_FindChild)},
    {SIP_MLNAME_CAST(sipName_GetAnimationInterval), meth_FbxNode_GetAnimationInterval, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxNode_GetAnimationInterval)},
    {SIP_MLNAME_CAST(sipName_GetCamera), meth_FbxNode_GetCamera, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxNode_GetCamera)},
    {SIP_MLNAME_CAST(sipName_GetCameraSwitcher), meth_FbxNode_GetCameraSwitcher, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxNode_GetCameraSwitcher)},
    {SIP_MLNAME_CAST(sipName_GetCharacterLink), meth_FbxNode_GetCharacterLink, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxNode_GetCharacterLink)},
    {SIP_MLNAME_CAST(sipName_GetCharacterLinkCount), meth_FbxNode_GetCharacterLinkCount, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxNode_GetCharacterLinkCount)},
    {SIP_MLNAME_CAST(sipName_GetChild), meth_FbxNode_GetChild, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxNode_GetChild)},
    {SIP_MLNAME_CAST(sipName_GetChildCount), meth_FbxNode_GetChildCount, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxNode_GetChildCount)},
    {SIP_MLNAME_CAST(sipName_GetClassId), meth_FbxNode_GetClassId, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxNode_GetClassId)},
    {SIP_MLNAME_CAST(sipName_GetDefaultNodeAttributeIndex), meth_FbxNode_GetDefaultNodeAttributeIndex, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxNode_GetDefaultNodeAttributeIndex)},
    {SIP_MLNAME_CAST(sipName_GetGeometricRotation), meth_FbxNode_GetGeometricRotation, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxNode_GetGeometricRotation)},
    {SIP_MLNAME_CAST(sipName_GetGeometricScaling), meth_FbxNode_GetGeometricScaling, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxNode_GetGeometricScaling)},
    {SIP_MLNAME_CAST(sipName_GetGeometricTranslation), meth_FbxNode_GetGeometricTranslation, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxNode_GetGeometricTranslation)},
    {SIP_MLNAME_CAST(sipName_GetGeometry), meth_FbxNode_GetGeometry, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxNode_GetGeometry)},
    {SIP_MLNAME_CAST(sipName_GetLight), meth_FbxNode_GetLight, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxNode_GetLight)},
    {SIP_MLNAME_CAST(sipName_GetLodGroup), meth_FbxNode_GetLodGroup, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxNode_GetLodGroup)},
    {SIP_MLNAME_CAST(sipName_GetMarker), meth_FbxNode_GetMarker, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxNode_GetMarker)},
    {SIP_MLNAME_CAST(sipName_GetMaterial), meth_FbxNode_GetMaterial, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxNode_GetMaterial)},
    {SIP_MLNAME_CAST(sipName_GetMaterialCount), meth_FbxNode_GetMaterialCount, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxNode_GetMaterialCount)},
    {SIP_MLNAME_CAST(sipName_GetMaterialIndex), meth_FbxNode_GetMaterialIndex, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxNode_GetMaterialIndex)},
    {SIP_MLNAME_CAST(sipName_GetMaxDampRange), meth_FbxNode_GetMaxDampRange, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxNode_GetMaxDampRange)},
    {SIP_MLNAME_CAST(sipName_GetMaxDampStrength), meth_FbxNode_GetMaxDampStrength, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxNode_GetMaxDampStrength)},
    {SIP_MLNAME_CAST(sipName_GetMesh), meth_FbxNode_GetMesh, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxNode_GetMesh)},
    {SIP_MLNAME_CAST(sipName_GetMinDampRange), meth_FbxNode_GetMinDampRange, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxNode_GetMinDampRange)},
    {SIP_MLNAME_CAST(sipName_GetMinDampStrength), meth_FbxNode_GetMinDampStrength, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxNode_GetMinDampStrength)},
    {SIP_MLNAME_CAST(sipName_GetNodeAttribute), meth_FbxNode_GetNodeAttribute, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxNode_GetNodeAttribute)},
    {SIP_MLNAME_CAST(sipName_GetNodeAttributeByIndex), meth_FbxNode_GetNodeAttributeByIndex, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxNode_GetNodeAttributeByIndex)},
    {SIP_MLNAME_CAST(sipName_GetNodeAttributeCount), meth_FbxNode_GetNodeAttributeCount, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxNode_GetNodeAttributeCount)},
    {SIP_MLNAME_CAST(sipName_GetNodeAttributeIndex), meth_FbxNode_GetNodeAttributeIndex, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxNode_GetNodeAttributeIndex)},
    {SIP_MLNAME_CAST(sipName_GetNull), meth_FbxNode_GetNull, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxNode_GetNull)},
    {SIP_MLNAME_CAST(sipName_GetNurbs), meth_FbxNode_GetNurbs, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxNode_GetNurbs)},
    {SIP_MLNAME_CAST(sipName_GetNurbsCurve), meth_FbxNode_GetNurbsCurve, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxNode_GetNurbsCurve)},
    {SIP_MLNAME_CAST(sipName_GetNurbsSurface), meth_FbxNode_GetNurbsSurface, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxNode_GetNurbsSurface)},
    {SIP_MLNAME_CAST(sipName_GetParent), meth_FbxNode_GetParent, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxNode_GetParent)},
    {SIP_MLNAME_CAST(sipName_GetPatch), meth_FbxNode_GetPatch, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxNode_GetPatch)},
    {SIP_MLNAME_CAST(sipName_GetPivotState), meth_FbxNode_GetPivotState, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxNode_GetPivotState)},
    {SIP_MLNAME_CAST(sipName_GetPostRotation), meth_FbxNode_GetPostRotation, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxNode_GetPostRotation)},
    {SIP_MLNAME_CAST(sipName_GetPostTargetRotation), meth_FbxNode_GetPostTargetRotation, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxNode_GetPostTargetRotation)},
    {SIP_MLNAME_CAST(sipName_GetPreRotation), meth_FbxNode_GetPreRotation, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxNode_GetPreRotation)},
    {SIP_MLNAME_CAST(sipName_GetPreferedAngle), meth_FbxNode_GetPreferedAngle, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxNode_GetPreferedAngle)},
    {SIP_MLNAME_CAST(sipName_GetQuaternionInterpolation), meth_FbxNode_GetQuaternionInterpolation, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxNode_GetQuaternionInterpolation)},
    {SIP_MLNAME_CAST(sipName_GetRotationActive), meth_FbxNode_GetRotationActive, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxNode_GetRotationActive)},
    {SIP_MLNAME_CAST(sipName_GetRotationOffset), meth_FbxNode_GetRotationOffset, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxNode_GetRotationOffset)},
    {SIP_MLNAME_CAST(sipName_GetRotationOrder), meth_FbxNode_GetRotationOrder, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxNode_GetRotationOrder)},
    {SIP_MLNAME_CAST(sipName_GetRotationPivot), meth_FbxNode_GetRotationPivot, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxNode_GetRotationPivot)},
    {SIP_MLNAME_CAST(sipName_GetRotationStiffness), meth_FbxNode_GetRotationStiffness, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxNode_GetRotationStiffness)},
    {SIP_MLNAME_CAST(sipName_GetScalingOffset), meth_FbxNode_GetScalingOffset, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxNode_GetScalingOffset)},
    {SIP_MLNAME_CAST(sipName_GetScalingPivot), meth_FbxNode_GetScalingPivot, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxNode_GetScalingPivot)},
    {SIP_MLNAME_CAST(sipName_GetShadingMode), meth_FbxNode_GetShadingMode, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxNode_GetShadingMode)},
    {SIP_MLNAME_CAST(sipName_GetSkeleton), meth_FbxNode_GetSkeleton, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxNode_GetSkeleton)},
    {SIP_MLNAME_CAST(sipName_GetTarget), meth_FbxNode_GetTarget, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxNode_GetTarget)},
    {SIP_MLNAME_CAST(sipName_GetTargetUp), meth_FbxNode_GetTargetUp, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxNode_GetTargetUp)},
    {SIP_MLNAME_CAST(sipName_GetTargetUpVector), meth_FbxNode_GetTargetUpVector, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxNode_GetTargetUpVector)},
    {SIP_MLNAME_CAST(sipName_GetTransformationInheritType), meth_FbxNode_GetTransformationInheritType, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxNode_GetTransformationInheritType)},
    {SIP_MLNAME_CAST(sipName_GetTrimNurbsSurface), meth_FbxNode_GetTrimNurbsSurface, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxNode_GetTrimNurbsSurface)},
    {SIP_MLNAME_CAST(sipName_GetUseRotationSpaceForLimitOnly), meth_FbxNode_GetUseRotationSpaceForLimitOnly, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxNode_GetUseRotationSpaceForLimitOnly)},
    {SIP_MLNAME_CAST(sipName_GetVisibility), meth_FbxNode_GetVisibility, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxNode_GetVisibility)},
    {SIP_MLNAME_CAST(sipName_RemoveAllMaterials), meth_FbxNode_RemoveAllMaterials, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxNode_RemoveAllMaterials)},
    {SIP_MLNAME_CAST(sipName_RemoveChild), meth_FbxNode_RemoveChild, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxNode_RemoveChild)},
    {SIP_MLNAME_CAST(sipName_RemoveMaterial), meth_FbxNode_RemoveMaterial, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxNode_RemoveMaterial)},
    {SIP_MLNAME_CAST(sipName_RemoveNodeAttribute), meth_FbxNode_RemoveNodeAttribute, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxNode_RemoveNodeAttribute)},
    {SIP_MLNAME_CAST(sipName_RemoveNodeAttributeByIndex), meth_FbxNode_RemoveNodeAttributeByIndex, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxNode_RemoveNodeAttributeByIndex)},
    {SIP_MLNAME_CAST(sipName_ResetPivotSet), meth_FbxNode_ResetPivotSet, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxNode_ResetPivotSet)},
    {SIP_MLNAME_CAST(sipName_SetDefaultNodeAttributeIndex), meth_FbxNode_SetDefaultNodeAttributeIndex, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxNode_SetDefaultNodeAttributeIndex)},
    {SIP_MLNAME_CAST(sipName_SetGeometricRotation), meth_FbxNode_SetGeometricRotation, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxNode_SetGeometricRotation)},
    {SIP_MLNAME_CAST(sipName_SetGeometricScaling), meth_FbxNode_SetGeometricScaling, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxNode_SetGeometricScaling)},
    {SIP_MLNAME_CAST(sipName_SetGeometricTranslation), meth_FbxNode_SetGeometricTranslation, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxNode_SetGeometricTranslation)},
    {SIP_MLNAME_CAST(sipName_SetMaxDampRange), meth_FbxNode_SetMaxDampRange, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxNode_SetMaxDampRange)},
    {SIP_MLNAME_CAST(sipName_SetMaxDampStrength), meth_FbxNode_SetMaxDampStrength, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxNode_SetMaxDampStrength)},
    {SIP_MLNAME_CAST(sipName_SetMinDampRange), meth_FbxNode_SetMinDampRange, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxNode_SetMinDampRange)},
    {SIP_MLNAME_CAST(sipName_SetMinDampStrength), meth_FbxNode_SetMinDampStrength, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxNode_SetMinDampStrength)},
    {SIP_MLNAME_CAST(sipName_SetNodeAttribute), meth_FbxNode_SetNodeAttribute, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxNode_SetNodeAttribute)},
    {SIP_MLNAME_CAST(sipName_SetPivotState), meth_FbxNode_SetPivotState, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxNode_SetPivotState)},
    {SIP_MLNAME_CAST(sipName_SetPostRotation), meth_FbxNode_SetPostRotation, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxNode_SetPostRotation)},
    {SIP_MLNAME_CAST(sipName_SetPostTargetRotation), meth_FbxNode_SetPostTargetRotation, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxNode_SetPostTargetRotation)},
    {SIP_MLNAME_CAST(sipName_SetPreRotation), meth_FbxNode_SetPreRotation, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxNode_SetPreRotation)},
    {SIP_MLNAME_CAST(sipName_SetPreferedAngle), meth_FbxNode_SetPreferedAngle, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxNode_SetPreferedAngle)},
    {SIP_MLNAME_CAST(sipName_SetQuaternionInterpolation), meth_FbxNode_SetQuaternionInterpolation, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxNode_SetQuaternionInterpolation)},
    {SIP_MLNAME_CAST(sipName_SetRotationActive), meth_FbxNode_SetRotationActive, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxNode_SetRotationActive)},
    {SIP_MLNAME_CAST(sipName_SetRotationOffset), meth_FbxNode_SetRotationOffset, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxNode_SetRotationOffset)},
    {SIP_MLNAME_CAST(sipName_SetRotationOrder), meth_FbxNode_SetRotationOrder, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxNode_SetRotationOrder)},
    {SIP_MLNAME_CAST(sipName_SetRotationPivot), meth_FbxNode_SetRotationPivot, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxNode_SetRotationPivot)},
    {SIP_MLNAME_CAST(sipName_SetRotationStiffness), meth_FbxNode_SetRotationStiffness, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxNode_SetRotationStiffness)},
    {SIP_MLNAME_CAST(sipName_SetScalingOffset), meth_FbxNode_SetScalingOffset, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxNode_SetScalingOffset)},
    {SIP_MLNAME_CAST(sipName_SetScalingPivot), meth_FbxNode_SetScalingPivot, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxNode_SetScalingPivot)},
    {SIP_MLNAME_CAST(sipName_SetShadingMode), meth_FbxNode_SetShadingMode, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxNode_SetShadingMode)},
    {SIP_MLNAME_CAST(sipName_SetTarget), meth_FbxNode_SetTarget, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxNode_SetTarget)},
    {SIP_MLNAME_CAST(sipName_SetTargetUp), meth_FbxNode_SetTargetUp, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxNode_SetTargetUp)},
    {SIP_MLNAME_CAST(sipName_SetTargetUpVector), meth_FbxNode_SetTargetUpVector, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxNode_SetTargetUpVector)},
    {SIP_MLNAME_CAST(sipName_SetTransformationInheritType), meth_FbxNode_SetTransformationInheritType, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxNode_SetTransformationInheritType)},
    {SIP_MLNAME_CAST(sipName_SetUseRotationSpaceForLimitOnly), meth_FbxNode_SetUseRotationSpaceForLimitOnly, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxNode_SetUseRotationSpaceForLimitOnly)},
    {SIP_MLNAME_CAST(sipName_SetVisibility), meth_FbxNode_SetVisibility, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxNode_SetVisibility)}
};

static sipEnumMemberDef enummembers_FbxNode[] = {
    {sipName_eDestinationPivot, static_cast<int>( ::FbxNode::eDestinationPivot), 229},
    {sipName_eFlatShading, static_cast<int>( ::FbxNode::eFlatShading), 231},
    {sipName_eFullShading, static_cast<int>( ::FbxNode::eFullShading), 231},
    {sipName_eHardShading, static_cast<int>( ::FbxNode::eHardShading), 231},
    {sipName_eLightShading, static_cast<int>( ::FbxNode::eLightShading), 231},
    {sipName_ePivotActive, static_cast<int>( ::FbxNode::ePivotActive), 230},
    {sipName_ePivotReference, static_cast<int>( ::FbxNode::ePivotReference), 230},
    {sipName_eSourcePivot, static_cast<int>( ::FbxNode::eSourcePivot), 229},
    {sipName_eTextureShading, static_cast<int>( ::FbxNode::eTextureShading), 231},
    {sipName_eWireFrame, static_cast<int>( ::FbxNode::eWireFrame), 231},
};


extern "C" {static PyObject *varget_FbxNode_AxisLen(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxNode_AxisLen(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyDouble1*sipVal;
     ::FbxNode *sipCpp = reinterpret_cast< ::FbxNode *>(sipSelf);

    sipVal = &sipCpp->AxisLen;

    return sipConvertFromType(sipVal, sipType_FbxPropertyDouble1, NULL);
}


extern "C" {static int varset_FbxNode_AxisLen(void *, PyObject *, PyObject *);}
static int varset_FbxNode_AxisLen(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyDouble1*sipVal;
     ::FbxNode *sipCpp = reinterpret_cast< ::FbxNode *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyDouble1 *>(sipForceConvertToType(sipPy,sipType_FbxPropertyDouble1,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->AxisLen = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxNode_ClassId(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxNode_ClassId(void *, PyObject *, PyObject *)
{
     ::FbxClassId*sipVal;

    sipVal = & ::FbxNode::ClassId;

    return sipConvertFromType(sipVal, sipType_FbxClassId, NULL);
}


extern "C" {static int varset_FbxNode_ClassId(void *, PyObject *, PyObject *);}
static int varset_FbxNode_ClassId(void *, PyObject *sipPy, PyObject *)
{
     ::FbxClassId*sipVal;
    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxClassId *>(sipForceConvertToType(sipPy,sipType_FbxClassId,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

     ::FbxNode::ClassId = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxNode_DefaultAttributeIndex(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxNode_DefaultAttributeIndex(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyInteger1*sipVal;
     ::FbxNode *sipCpp = reinterpret_cast< ::FbxNode *>(sipSelf);

    sipVal = &sipCpp->DefaultAttributeIndex;

    return sipConvertFromType(sipVal, sipType_FbxPropertyInteger1, NULL);
}


extern "C" {static int varset_FbxNode_DefaultAttributeIndex(void *, PyObject *, PyObject *);}
static int varset_FbxNode_DefaultAttributeIndex(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyInteger1*sipVal;
     ::FbxNode *sipCpp = reinterpret_cast< ::FbxNode *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyInteger1 *>(sipForceConvertToType(sipPy,sipType_FbxPropertyInteger1,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->DefaultAttributeIndex = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxNode_Freeze(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxNode_Freeze(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyBool1*sipVal;
     ::FbxNode *sipCpp = reinterpret_cast< ::FbxNode *>(sipSelf);

    sipVal = &sipCpp->Freeze;

    return sipConvertFromType(sipVal, sipType_FbxPropertyBool1, NULL);
}


extern "C" {static int varset_FbxNode_Freeze(void *, PyObject *, PyObject *);}
static int varset_FbxNode_Freeze(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyBool1*sipVal;
     ::FbxNode *sipCpp = reinterpret_cast< ::FbxNode *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyBool1 *>(sipForceConvertToType(sipPy,sipType_FbxPropertyBool1,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->Freeze = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxNode_GeometricRotation(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxNode_GeometricRotation(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyDouble3*sipVal;
     ::FbxNode *sipCpp = reinterpret_cast< ::FbxNode *>(sipSelf);

    sipVal = &sipCpp->GeometricRotation;

    return sipConvertFromType(sipVal, sipType_FbxPropertyDouble3, NULL);
}


extern "C" {static int varset_FbxNode_GeometricRotation(void *, PyObject *, PyObject *);}
static int varset_FbxNode_GeometricRotation(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyDouble3*sipVal;
     ::FbxNode *sipCpp = reinterpret_cast< ::FbxNode *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyDouble3 *>(sipForceConvertToType(sipPy,sipType_FbxPropertyDouble3,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->GeometricRotation = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxNode_GeometricScaling(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxNode_GeometricScaling(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyDouble3*sipVal;
     ::FbxNode *sipCpp = reinterpret_cast< ::FbxNode *>(sipSelf);

    sipVal = &sipCpp->GeometricScaling;

    return sipConvertFromType(sipVal, sipType_FbxPropertyDouble3, NULL);
}


extern "C" {static int varset_FbxNode_GeometricScaling(void *, PyObject *, PyObject *);}
static int varset_FbxNode_GeometricScaling(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyDouble3*sipVal;
     ::FbxNode *sipCpp = reinterpret_cast< ::FbxNode *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyDouble3 *>(sipForceConvertToType(sipPy,sipType_FbxPropertyDouble3,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->GeometricScaling = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxNode_GeometricTranslation(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxNode_GeometricTranslation(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyDouble3*sipVal;
     ::FbxNode *sipCpp = reinterpret_cast< ::FbxNode *>(sipSelf);

    sipVal = &sipCpp->GeometricTranslation;

    return sipConvertFromType(sipVal, sipType_FbxPropertyDouble3, NULL);
}


extern "C" {static int varset_FbxNode_GeometricTranslation(void *, PyObject *, PyObject *);}
static int varset_FbxNode_GeometricTranslation(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyDouble3*sipVal;
     ::FbxNode *sipCpp = reinterpret_cast< ::FbxNode *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyDouble3 *>(sipForceConvertToType(sipPy,sipType_FbxPropertyDouble3,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->GeometricTranslation = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxNode_InheritType(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxNode_InheritType(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyFbxTransformEInheritType*sipVal;
     ::FbxNode *sipCpp = reinterpret_cast< ::FbxNode *>(sipSelf);

    sipVal = &sipCpp->InheritType;

    return sipConvertFromType(sipVal, sipType_FbxPropertyFbxTransformEInheritType, NULL);
}


extern "C" {static int varset_FbxNode_InheritType(void *, PyObject *, PyObject *);}
static int varset_FbxNode_InheritType(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyFbxTransformEInheritType*sipVal;
     ::FbxNode *sipCpp = reinterpret_cast< ::FbxNode *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyFbxTransformEInheritType *>(sipForceConvertToType(sipPy,sipType_FbxPropertyFbxTransformEInheritType,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->InheritType = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxNode_LODBox(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxNode_LODBox(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyBool1*sipVal;
     ::FbxNode *sipCpp = reinterpret_cast< ::FbxNode *>(sipSelf);

    sipVal = &sipCpp->LODBox;

    return sipConvertFromType(sipVal, sipType_FbxPropertyBool1, NULL);
}


extern "C" {static int varset_FbxNode_LODBox(void *, PyObject *, PyObject *);}
static int varset_FbxNode_LODBox(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyBool1*sipVal;
     ::FbxNode *sipCpp = reinterpret_cast< ::FbxNode *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyBool1 *>(sipForceConvertToType(sipPy,sipType_FbxPropertyBool1,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->LODBox = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxNode_LclRotation(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxNode_LclRotation(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyDouble3*sipVal;
     ::FbxNode *sipCpp = reinterpret_cast< ::FbxNode *>(sipSelf);

    sipVal = &sipCpp->LclRotation;

    return sipConvertFromType(sipVal, sipType_FbxPropertyDouble3, NULL);
}


extern "C" {static int varset_FbxNode_LclRotation(void *, PyObject *, PyObject *);}
static int varset_FbxNode_LclRotation(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyDouble3*sipVal;
     ::FbxNode *sipCpp = reinterpret_cast< ::FbxNode *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyDouble3 *>(sipForceConvertToType(sipPy,sipType_FbxPropertyDouble3,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->LclRotation = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxNode_LclScaling(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxNode_LclScaling(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyDouble3*sipVal;
     ::FbxNode *sipCpp = reinterpret_cast< ::FbxNode *>(sipSelf);

    sipVal = &sipCpp->LclScaling;

    return sipConvertFromType(sipVal, sipType_FbxPropertyDouble3, NULL);
}


extern "C" {static int varset_FbxNode_LclScaling(void *, PyObject *, PyObject *);}
static int varset_FbxNode_LclScaling(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyDouble3*sipVal;
     ::FbxNode *sipCpp = reinterpret_cast< ::FbxNode *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyDouble3 *>(sipForceConvertToType(sipPy,sipType_FbxPropertyDouble3,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->LclScaling = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxNode_LclTranslation(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxNode_LclTranslation(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyDouble3*sipVal;
     ::FbxNode *sipCpp = reinterpret_cast< ::FbxNode *>(sipSelf);

    sipVal = &sipCpp->LclTranslation;

    return sipConvertFromType(sipVal, sipType_FbxPropertyDouble3, NULL);
}


extern "C" {static int varset_FbxNode_LclTranslation(void *, PyObject *, PyObject *);}
static int varset_FbxNode_LclTranslation(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyDouble3*sipVal;
     ::FbxNode *sipCpp = reinterpret_cast< ::FbxNode *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyDouble3 *>(sipForceConvertToType(sipPy,sipType_FbxPropertyDouble3,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->LclTranslation = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxNode_LookAtProperty(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxNode_LookAtProperty(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyFbxReference*sipVal;
     ::FbxNode *sipCpp = reinterpret_cast< ::FbxNode *>(sipSelf);

    sipVal = &sipCpp->LookAtProperty;

    return sipConvertFromType(sipVal, sipType_FbxPropertyFbxReference, NULL);
}


extern "C" {static int varset_FbxNode_LookAtProperty(void *, PyObject *, PyObject *);}
static int varset_FbxNode_LookAtProperty(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyFbxReference*sipVal;
     ::FbxNode *sipCpp = reinterpret_cast< ::FbxNode *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyFbxReference *>(sipForceConvertToType(sipPy,sipType_FbxPropertyFbxReference,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->LookAtProperty = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxNode_MaxDampRangeX(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxNode_MaxDampRangeX(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyDouble1*sipVal;
     ::FbxNode *sipCpp = reinterpret_cast< ::FbxNode *>(sipSelf);

    sipVal = &sipCpp->MaxDampRangeX;

    return sipConvertFromType(sipVal, sipType_FbxPropertyDouble1, NULL);
}


extern "C" {static int varset_FbxNode_MaxDampRangeX(void *, PyObject *, PyObject *);}
static int varset_FbxNode_MaxDampRangeX(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyDouble1*sipVal;
     ::FbxNode *sipCpp = reinterpret_cast< ::FbxNode *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyDouble1 *>(sipForceConvertToType(sipPy,sipType_FbxPropertyDouble1,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->MaxDampRangeX = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxNode_MaxDampRangeY(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxNode_MaxDampRangeY(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyDouble1*sipVal;
     ::FbxNode *sipCpp = reinterpret_cast< ::FbxNode *>(sipSelf);

    sipVal = &sipCpp->MaxDampRangeY;

    return sipConvertFromType(sipVal, sipType_FbxPropertyDouble1, NULL);
}


extern "C" {static int varset_FbxNode_MaxDampRangeY(void *, PyObject *, PyObject *);}
static int varset_FbxNode_MaxDampRangeY(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyDouble1*sipVal;
     ::FbxNode *sipCpp = reinterpret_cast< ::FbxNode *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyDouble1 *>(sipForceConvertToType(sipPy,sipType_FbxPropertyDouble1,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->MaxDampRangeY = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxNode_MaxDampRangeZ(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxNode_MaxDampRangeZ(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyDouble1*sipVal;
     ::FbxNode *sipCpp = reinterpret_cast< ::FbxNode *>(sipSelf);

    sipVal = &sipCpp->MaxDampRangeZ;

    return sipConvertFromType(sipVal, sipType_FbxPropertyDouble1, NULL);
}


extern "C" {static int varset_FbxNode_MaxDampRangeZ(void *, PyObject *, PyObject *);}
static int varset_FbxNode_MaxDampRangeZ(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyDouble1*sipVal;
     ::FbxNode *sipCpp = reinterpret_cast< ::FbxNode *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyDouble1 *>(sipForceConvertToType(sipPy,sipType_FbxPropertyDouble1,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->MaxDampRangeZ = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxNode_MaxDampStrengthX(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxNode_MaxDampStrengthX(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyDouble1*sipVal;
     ::FbxNode *sipCpp = reinterpret_cast< ::FbxNode *>(sipSelf);

    sipVal = &sipCpp->MaxDampStrengthX;

    return sipConvertFromType(sipVal, sipType_FbxPropertyDouble1, NULL);
}


extern "C" {static int varset_FbxNode_MaxDampStrengthX(void *, PyObject *, PyObject *);}
static int varset_FbxNode_MaxDampStrengthX(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyDouble1*sipVal;
     ::FbxNode *sipCpp = reinterpret_cast< ::FbxNode *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyDouble1 *>(sipForceConvertToType(sipPy,sipType_FbxPropertyDouble1,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->MaxDampStrengthX = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxNode_MaxDampStrengthY(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxNode_MaxDampStrengthY(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyDouble1*sipVal;
     ::FbxNode *sipCpp = reinterpret_cast< ::FbxNode *>(sipSelf);

    sipVal = &sipCpp->MaxDampStrengthY;

    return sipConvertFromType(sipVal, sipType_FbxPropertyDouble1, NULL);
}


extern "C" {static int varset_FbxNode_MaxDampStrengthY(void *, PyObject *, PyObject *);}
static int varset_FbxNode_MaxDampStrengthY(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyDouble1*sipVal;
     ::FbxNode *sipCpp = reinterpret_cast< ::FbxNode *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyDouble1 *>(sipForceConvertToType(sipPy,sipType_FbxPropertyDouble1,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->MaxDampStrengthY = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxNode_MaxDampStrengthZ(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxNode_MaxDampStrengthZ(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyDouble1*sipVal;
     ::FbxNode *sipCpp = reinterpret_cast< ::FbxNode *>(sipSelf);

    sipVal = &sipCpp->MaxDampStrengthZ;

    return sipConvertFromType(sipVal, sipType_FbxPropertyDouble1, NULL);
}


extern "C" {static int varset_FbxNode_MaxDampStrengthZ(void *, PyObject *, PyObject *);}
static int varset_FbxNode_MaxDampStrengthZ(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyDouble1*sipVal;
     ::FbxNode *sipCpp = reinterpret_cast< ::FbxNode *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyDouble1 *>(sipForceConvertToType(sipPy,sipType_FbxPropertyDouble1,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->MaxDampStrengthZ = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxNode_MinDampRangeX(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxNode_MinDampRangeX(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyDouble1*sipVal;
     ::FbxNode *sipCpp = reinterpret_cast< ::FbxNode *>(sipSelf);

    sipVal = &sipCpp->MinDampRangeX;

    return sipConvertFromType(sipVal, sipType_FbxPropertyDouble1, NULL);
}


extern "C" {static int varset_FbxNode_MinDampRangeX(void *, PyObject *, PyObject *);}
static int varset_FbxNode_MinDampRangeX(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyDouble1*sipVal;
     ::FbxNode *sipCpp = reinterpret_cast< ::FbxNode *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyDouble1 *>(sipForceConvertToType(sipPy,sipType_FbxPropertyDouble1,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->MinDampRangeX = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxNode_MinDampRangeY(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxNode_MinDampRangeY(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyDouble1*sipVal;
     ::FbxNode *sipCpp = reinterpret_cast< ::FbxNode *>(sipSelf);

    sipVal = &sipCpp->MinDampRangeY;

    return sipConvertFromType(sipVal, sipType_FbxPropertyDouble1, NULL);
}


extern "C" {static int varset_FbxNode_MinDampRangeY(void *, PyObject *, PyObject *);}
static int varset_FbxNode_MinDampRangeY(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyDouble1*sipVal;
     ::FbxNode *sipCpp = reinterpret_cast< ::FbxNode *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyDouble1 *>(sipForceConvertToType(sipPy,sipType_FbxPropertyDouble1,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->MinDampRangeY = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxNode_MinDampRangeZ(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxNode_MinDampRangeZ(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyDouble1*sipVal;
     ::FbxNode *sipCpp = reinterpret_cast< ::FbxNode *>(sipSelf);

    sipVal = &sipCpp->MinDampRangeZ;

    return sipConvertFromType(sipVal, sipType_FbxPropertyDouble1, NULL);
}


extern "C" {static int varset_FbxNode_MinDampRangeZ(void *, PyObject *, PyObject *);}
static int varset_FbxNode_MinDampRangeZ(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyDouble1*sipVal;
     ::FbxNode *sipCpp = reinterpret_cast< ::FbxNode *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyDouble1 *>(sipForceConvertToType(sipPy,sipType_FbxPropertyDouble1,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->MinDampRangeZ = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxNode_MinDampStrengthX(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxNode_MinDampStrengthX(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyDouble1*sipVal;
     ::FbxNode *sipCpp = reinterpret_cast< ::FbxNode *>(sipSelf);

    sipVal = &sipCpp->MinDampStrengthX;

    return sipConvertFromType(sipVal, sipType_FbxPropertyDouble1, NULL);
}


extern "C" {static int varset_FbxNode_MinDampStrengthX(void *, PyObject *, PyObject *);}
static int varset_FbxNode_MinDampStrengthX(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyDouble1*sipVal;
     ::FbxNode *sipCpp = reinterpret_cast< ::FbxNode *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyDouble1 *>(sipForceConvertToType(sipPy,sipType_FbxPropertyDouble1,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->MinDampStrengthX = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxNode_MinDampStrengthY(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxNode_MinDampStrengthY(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyDouble1*sipVal;
     ::FbxNode *sipCpp = reinterpret_cast< ::FbxNode *>(sipSelf);

    sipVal = &sipCpp->MinDampStrengthY;

    return sipConvertFromType(sipVal, sipType_FbxPropertyDouble1, NULL);
}


extern "C" {static int varset_FbxNode_MinDampStrengthY(void *, PyObject *, PyObject *);}
static int varset_FbxNode_MinDampStrengthY(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyDouble1*sipVal;
     ::FbxNode *sipCpp = reinterpret_cast< ::FbxNode *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyDouble1 *>(sipForceConvertToType(sipPy,sipType_FbxPropertyDouble1,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->MinDampStrengthY = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxNode_MinDampStrengthZ(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxNode_MinDampStrengthZ(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyDouble1*sipVal;
     ::FbxNode *sipCpp = reinterpret_cast< ::FbxNode *>(sipSelf);

    sipVal = &sipCpp->MinDampStrengthZ;

    return sipConvertFromType(sipVal, sipType_FbxPropertyDouble1, NULL);
}


extern "C" {static int varset_FbxNode_MinDampStrengthZ(void *, PyObject *, PyObject *);}
static int varset_FbxNode_MinDampStrengthZ(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyDouble1*sipVal;
     ::FbxNode *sipCpp = reinterpret_cast< ::FbxNode *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyDouble1 *>(sipForceConvertToType(sipPy,sipType_FbxPropertyDouble1,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->MinDampStrengthZ = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxNode_NegativePercentShapeSupport(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxNode_NegativePercentShapeSupport(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyBool1*sipVal;
     ::FbxNode *sipCpp = reinterpret_cast< ::FbxNode *>(sipSelf);

    sipVal = &sipCpp->NegativePercentShapeSupport;

    return sipConvertFromType(sipVal, sipType_FbxPropertyBool1, NULL);
}


extern "C" {static int varset_FbxNode_NegativePercentShapeSupport(void *, PyObject *, PyObject *);}
static int varset_FbxNode_NegativePercentShapeSupport(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyBool1*sipVal;
     ::FbxNode *sipCpp = reinterpret_cast< ::FbxNode *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyBool1 *>(sipForceConvertToType(sipPy,sipType_FbxPropertyBool1,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->NegativePercentShapeSupport = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxNode_PostRotation(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxNode_PostRotation(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyDouble3*sipVal;
     ::FbxNode *sipCpp = reinterpret_cast< ::FbxNode *>(sipSelf);

    sipVal = &sipCpp->PostRotation;

    return sipConvertFromType(sipVal, sipType_FbxPropertyDouble3, NULL);
}


extern "C" {static int varset_FbxNode_PostRotation(void *, PyObject *, PyObject *);}
static int varset_FbxNode_PostRotation(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyDouble3*sipVal;
     ::FbxNode *sipCpp = reinterpret_cast< ::FbxNode *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyDouble3 *>(sipForceConvertToType(sipPy,sipType_FbxPropertyDouble3,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->PostRotation = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxNode_PreRotation(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxNode_PreRotation(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyDouble3*sipVal;
     ::FbxNode *sipCpp = reinterpret_cast< ::FbxNode *>(sipSelf);

    sipVal = &sipCpp->PreRotation;

    return sipConvertFromType(sipVal, sipType_FbxPropertyDouble3, NULL);
}


extern "C" {static int varset_FbxNode_PreRotation(void *, PyObject *, PyObject *);}
static int varset_FbxNode_PreRotation(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyDouble3*sipVal;
     ::FbxNode *sipCpp = reinterpret_cast< ::FbxNode *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyDouble3 *>(sipForceConvertToType(sipPy,sipType_FbxPropertyDouble3,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->PreRotation = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxNode_PreferedAngleX(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxNode_PreferedAngleX(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyDouble1*sipVal;
     ::FbxNode *sipCpp = reinterpret_cast< ::FbxNode *>(sipSelf);

    sipVal = &sipCpp->PreferedAngleX;

    return sipConvertFromType(sipVal, sipType_FbxPropertyDouble1, NULL);
}


extern "C" {static int varset_FbxNode_PreferedAngleX(void *, PyObject *, PyObject *);}
static int varset_FbxNode_PreferedAngleX(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyDouble1*sipVal;
     ::FbxNode *sipCpp = reinterpret_cast< ::FbxNode *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyDouble1 *>(sipForceConvertToType(sipPy,sipType_FbxPropertyDouble1,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->PreferedAngleX = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxNode_PreferedAngleY(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxNode_PreferedAngleY(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyDouble1*sipVal;
     ::FbxNode *sipCpp = reinterpret_cast< ::FbxNode *>(sipSelf);

    sipVal = &sipCpp->PreferedAngleY;

    return sipConvertFromType(sipVal, sipType_FbxPropertyDouble1, NULL);
}


extern "C" {static int varset_FbxNode_PreferedAngleY(void *, PyObject *, PyObject *);}
static int varset_FbxNode_PreferedAngleY(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyDouble1*sipVal;
     ::FbxNode *sipCpp = reinterpret_cast< ::FbxNode *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyDouble1 *>(sipForceConvertToType(sipPy,sipType_FbxPropertyDouble1,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->PreferedAngleY = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxNode_PreferedAngleZ(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxNode_PreferedAngleZ(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyDouble1*sipVal;
     ::FbxNode *sipCpp = reinterpret_cast< ::FbxNode *>(sipSelf);

    sipVal = &sipCpp->PreferedAngleZ;

    return sipConvertFromType(sipVal, sipType_FbxPropertyDouble1, NULL);
}


extern "C" {static int varset_FbxNode_PreferedAngleZ(void *, PyObject *, PyObject *);}
static int varset_FbxNode_PreferedAngleZ(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyDouble1*sipVal;
     ::FbxNode *sipCpp = reinterpret_cast< ::FbxNode *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyDouble1 *>(sipForceConvertToType(sipPy,sipType_FbxPropertyDouble1,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->PreferedAngleZ = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxNode_QuaternionInterpolate(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxNode_QuaternionInterpolate(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyEFbxQuatInterpMode*sipVal;
     ::FbxNode *sipCpp = reinterpret_cast< ::FbxNode *>(sipSelf);

    sipVal = &sipCpp->QuaternionInterpolate;

    return sipConvertFromType(sipVal, sipType_FbxPropertyEFbxQuatInterpMode, NULL);
}


extern "C" {static int varset_FbxNode_QuaternionInterpolate(void *, PyObject *, PyObject *);}
static int varset_FbxNode_QuaternionInterpolate(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyEFbxQuatInterpMode*sipVal;
     ::FbxNode *sipCpp = reinterpret_cast< ::FbxNode *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyEFbxQuatInterpMode *>(sipForceConvertToType(sipPy,sipType_FbxPropertyEFbxQuatInterpMode,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->QuaternionInterpolate = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxNode_RotationActive(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxNode_RotationActive(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyBool1*sipVal;
     ::FbxNode *sipCpp = reinterpret_cast< ::FbxNode *>(sipSelf);

    sipVal = &sipCpp->RotationActive;

    return sipConvertFromType(sipVal, sipType_FbxPropertyBool1, NULL);
}


extern "C" {static int varset_FbxNode_RotationActive(void *, PyObject *, PyObject *);}
static int varset_FbxNode_RotationActive(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyBool1*sipVal;
     ::FbxNode *sipCpp = reinterpret_cast< ::FbxNode *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyBool1 *>(sipForceConvertToType(sipPy,sipType_FbxPropertyBool1,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->RotationActive = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxNode_RotationMax(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxNode_RotationMax(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyDouble3*sipVal;
     ::FbxNode *sipCpp = reinterpret_cast< ::FbxNode *>(sipSelf);

    sipVal = &sipCpp->RotationMax;

    return sipConvertFromType(sipVal, sipType_FbxPropertyDouble3, NULL);
}


extern "C" {static int varset_FbxNode_RotationMax(void *, PyObject *, PyObject *);}
static int varset_FbxNode_RotationMax(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyDouble3*sipVal;
     ::FbxNode *sipCpp = reinterpret_cast< ::FbxNode *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyDouble3 *>(sipForceConvertToType(sipPy,sipType_FbxPropertyDouble3,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->RotationMax = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxNode_RotationMaxX(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxNode_RotationMaxX(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyBool1*sipVal;
     ::FbxNode *sipCpp = reinterpret_cast< ::FbxNode *>(sipSelf);

    sipVal = &sipCpp->RotationMaxX;

    return sipConvertFromType(sipVal, sipType_FbxPropertyBool1, NULL);
}


extern "C" {static int varset_FbxNode_RotationMaxX(void *, PyObject *, PyObject *);}
static int varset_FbxNode_RotationMaxX(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyBool1*sipVal;
     ::FbxNode *sipCpp = reinterpret_cast< ::FbxNode *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyBool1 *>(sipForceConvertToType(sipPy,sipType_FbxPropertyBool1,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->RotationMaxX = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxNode_RotationMaxY(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxNode_RotationMaxY(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyBool1*sipVal;
     ::FbxNode *sipCpp = reinterpret_cast< ::FbxNode *>(sipSelf);

    sipVal = &sipCpp->RotationMaxY;

    return sipConvertFromType(sipVal, sipType_FbxPropertyBool1, NULL);
}


extern "C" {static int varset_FbxNode_RotationMaxY(void *, PyObject *, PyObject *);}
static int varset_FbxNode_RotationMaxY(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyBool1*sipVal;
     ::FbxNode *sipCpp = reinterpret_cast< ::FbxNode *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyBool1 *>(sipForceConvertToType(sipPy,sipType_FbxPropertyBool1,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->RotationMaxY = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxNode_RotationMaxZ(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxNode_RotationMaxZ(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyBool1*sipVal;
     ::FbxNode *sipCpp = reinterpret_cast< ::FbxNode *>(sipSelf);

    sipVal = &sipCpp->RotationMaxZ;

    return sipConvertFromType(sipVal, sipType_FbxPropertyBool1, NULL);
}


extern "C" {static int varset_FbxNode_RotationMaxZ(void *, PyObject *, PyObject *);}
static int varset_FbxNode_RotationMaxZ(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyBool1*sipVal;
     ::FbxNode *sipCpp = reinterpret_cast< ::FbxNode *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyBool1 *>(sipForceConvertToType(sipPy,sipType_FbxPropertyBool1,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->RotationMaxZ = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxNode_RotationMin(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxNode_RotationMin(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyDouble3*sipVal;
     ::FbxNode *sipCpp = reinterpret_cast< ::FbxNode *>(sipSelf);

    sipVal = &sipCpp->RotationMin;

    return sipConvertFromType(sipVal, sipType_FbxPropertyDouble3, NULL);
}


extern "C" {static int varset_FbxNode_RotationMin(void *, PyObject *, PyObject *);}
static int varset_FbxNode_RotationMin(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyDouble3*sipVal;
     ::FbxNode *sipCpp = reinterpret_cast< ::FbxNode *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyDouble3 *>(sipForceConvertToType(sipPy,sipType_FbxPropertyDouble3,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->RotationMin = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxNode_RotationMinX(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxNode_RotationMinX(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyBool1*sipVal;
     ::FbxNode *sipCpp = reinterpret_cast< ::FbxNode *>(sipSelf);

    sipVal = &sipCpp->RotationMinX;

    return sipConvertFromType(sipVal, sipType_FbxPropertyBool1, NULL);
}


extern "C" {static int varset_FbxNode_RotationMinX(void *, PyObject *, PyObject *);}
static int varset_FbxNode_RotationMinX(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyBool1*sipVal;
     ::FbxNode *sipCpp = reinterpret_cast< ::FbxNode *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyBool1 *>(sipForceConvertToType(sipPy,sipType_FbxPropertyBool1,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->RotationMinX = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxNode_RotationMinY(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxNode_RotationMinY(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyBool1*sipVal;
     ::FbxNode *sipCpp = reinterpret_cast< ::FbxNode *>(sipSelf);

    sipVal = &sipCpp->RotationMinY;

    return sipConvertFromType(sipVal, sipType_FbxPropertyBool1, NULL);
}


extern "C" {static int varset_FbxNode_RotationMinY(void *, PyObject *, PyObject *);}
static int varset_FbxNode_RotationMinY(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyBool1*sipVal;
     ::FbxNode *sipCpp = reinterpret_cast< ::FbxNode *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyBool1 *>(sipForceConvertToType(sipPy,sipType_FbxPropertyBool1,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->RotationMinY = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxNode_RotationMinZ(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxNode_RotationMinZ(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyBool1*sipVal;
     ::FbxNode *sipCpp = reinterpret_cast< ::FbxNode *>(sipSelf);

    sipVal = &sipCpp->RotationMinZ;

    return sipConvertFromType(sipVal, sipType_FbxPropertyBool1, NULL);
}


extern "C" {static int varset_FbxNode_RotationMinZ(void *, PyObject *, PyObject *);}
static int varset_FbxNode_RotationMinZ(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyBool1*sipVal;
     ::FbxNode *sipCpp = reinterpret_cast< ::FbxNode *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyBool1 *>(sipForceConvertToType(sipPy,sipType_FbxPropertyBool1,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->RotationMinZ = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxNode_RotationOffset(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxNode_RotationOffset(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyDouble3*sipVal;
     ::FbxNode *sipCpp = reinterpret_cast< ::FbxNode *>(sipSelf);

    sipVal = &sipCpp->RotationOffset;

    return sipConvertFromType(sipVal, sipType_FbxPropertyDouble3, NULL);
}


extern "C" {static int varset_FbxNode_RotationOffset(void *, PyObject *, PyObject *);}
static int varset_FbxNode_RotationOffset(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyDouble3*sipVal;
     ::FbxNode *sipCpp = reinterpret_cast< ::FbxNode *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyDouble3 *>(sipForceConvertToType(sipPy,sipType_FbxPropertyDouble3,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->RotationOffset = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxNode_RotationOrder(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxNode_RotationOrder(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyEFbxRotationOrder*sipVal;
     ::FbxNode *sipCpp = reinterpret_cast< ::FbxNode *>(sipSelf);

    sipVal = &sipCpp->RotationOrder;

    return sipConvertFromType(sipVal, sipType_FbxPropertyEFbxRotationOrder, NULL);
}


extern "C" {static int varset_FbxNode_RotationOrder(void *, PyObject *, PyObject *);}
static int varset_FbxNode_RotationOrder(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyEFbxRotationOrder*sipVal;
     ::FbxNode *sipCpp = reinterpret_cast< ::FbxNode *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyEFbxRotationOrder *>(sipForceConvertToType(sipPy,sipType_FbxPropertyEFbxRotationOrder,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->RotationOrder = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxNode_RotationPivot(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxNode_RotationPivot(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyDouble3*sipVal;
     ::FbxNode *sipCpp = reinterpret_cast< ::FbxNode *>(sipSelf);

    sipVal = &sipCpp->RotationPivot;

    return sipConvertFromType(sipVal, sipType_FbxPropertyDouble3, NULL);
}


extern "C" {static int varset_FbxNode_RotationPivot(void *, PyObject *, PyObject *);}
static int varset_FbxNode_RotationPivot(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyDouble3*sipVal;
     ::FbxNode *sipCpp = reinterpret_cast< ::FbxNode *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyDouble3 *>(sipForceConvertToType(sipPy,sipType_FbxPropertyDouble3,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->RotationPivot = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxNode_RotationSpaceForLimitOnly(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxNode_RotationSpaceForLimitOnly(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyBool1*sipVal;
     ::FbxNode *sipCpp = reinterpret_cast< ::FbxNode *>(sipSelf);

    sipVal = &sipCpp->RotationSpaceForLimitOnly;

    return sipConvertFromType(sipVal, sipType_FbxPropertyBool1, NULL);
}


extern "C" {static int varset_FbxNode_RotationSpaceForLimitOnly(void *, PyObject *, PyObject *);}
static int varset_FbxNode_RotationSpaceForLimitOnly(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyBool1*sipVal;
     ::FbxNode *sipCpp = reinterpret_cast< ::FbxNode *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyBool1 *>(sipForceConvertToType(sipPy,sipType_FbxPropertyBool1,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->RotationSpaceForLimitOnly = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxNode_RotationStiffnessX(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxNode_RotationStiffnessX(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyDouble1*sipVal;
     ::FbxNode *sipCpp = reinterpret_cast< ::FbxNode *>(sipSelf);

    sipVal = &sipCpp->RotationStiffnessX;

    return sipConvertFromType(sipVal, sipType_FbxPropertyDouble1, NULL);
}


extern "C" {static int varset_FbxNode_RotationStiffnessX(void *, PyObject *, PyObject *);}
static int varset_FbxNode_RotationStiffnessX(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyDouble1*sipVal;
     ::FbxNode *sipCpp = reinterpret_cast< ::FbxNode *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyDouble1 *>(sipForceConvertToType(sipPy,sipType_FbxPropertyDouble1,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->RotationStiffnessX = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxNode_RotationStiffnessY(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxNode_RotationStiffnessY(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyDouble1*sipVal;
     ::FbxNode *sipCpp = reinterpret_cast< ::FbxNode *>(sipSelf);

    sipVal = &sipCpp->RotationStiffnessY;

    return sipConvertFromType(sipVal, sipType_FbxPropertyDouble1, NULL);
}


extern "C" {static int varset_FbxNode_RotationStiffnessY(void *, PyObject *, PyObject *);}
static int varset_FbxNode_RotationStiffnessY(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyDouble1*sipVal;
     ::FbxNode *sipCpp = reinterpret_cast< ::FbxNode *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyDouble1 *>(sipForceConvertToType(sipPy,sipType_FbxPropertyDouble1,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->RotationStiffnessY = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxNode_RotationStiffnessZ(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxNode_RotationStiffnessZ(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyDouble1*sipVal;
     ::FbxNode *sipCpp = reinterpret_cast< ::FbxNode *>(sipSelf);

    sipVal = &sipCpp->RotationStiffnessZ;

    return sipConvertFromType(sipVal, sipType_FbxPropertyDouble1, NULL);
}


extern "C" {static int varset_FbxNode_RotationStiffnessZ(void *, PyObject *, PyObject *);}
static int varset_FbxNode_RotationStiffnessZ(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyDouble1*sipVal;
     ::FbxNode *sipCpp = reinterpret_cast< ::FbxNode *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyDouble1 *>(sipForceConvertToType(sipPy,sipType_FbxPropertyDouble1,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->RotationStiffnessZ = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxNode_ScalingActive(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxNode_ScalingActive(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyBool1*sipVal;
     ::FbxNode *sipCpp = reinterpret_cast< ::FbxNode *>(sipSelf);

    sipVal = &sipCpp->ScalingActive;

    return sipConvertFromType(sipVal, sipType_FbxPropertyBool1, NULL);
}


extern "C" {static int varset_FbxNode_ScalingActive(void *, PyObject *, PyObject *);}
static int varset_FbxNode_ScalingActive(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyBool1*sipVal;
     ::FbxNode *sipCpp = reinterpret_cast< ::FbxNode *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyBool1 *>(sipForceConvertToType(sipPy,sipType_FbxPropertyBool1,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->ScalingActive = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxNode_ScalingMax(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxNode_ScalingMax(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyDouble3*sipVal;
     ::FbxNode *sipCpp = reinterpret_cast< ::FbxNode *>(sipSelf);

    sipVal = &sipCpp->ScalingMax;

    return sipConvertFromType(sipVal, sipType_FbxPropertyDouble3, NULL);
}


extern "C" {static int varset_FbxNode_ScalingMax(void *, PyObject *, PyObject *);}
static int varset_FbxNode_ScalingMax(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyDouble3*sipVal;
     ::FbxNode *sipCpp = reinterpret_cast< ::FbxNode *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyDouble3 *>(sipForceConvertToType(sipPy,sipType_FbxPropertyDouble3,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->ScalingMax = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxNode_ScalingMaxX(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxNode_ScalingMaxX(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyBool1*sipVal;
     ::FbxNode *sipCpp = reinterpret_cast< ::FbxNode *>(sipSelf);

    sipVal = &sipCpp->ScalingMaxX;

    return sipConvertFromType(sipVal, sipType_FbxPropertyBool1, NULL);
}


extern "C" {static int varset_FbxNode_ScalingMaxX(void *, PyObject *, PyObject *);}
static int varset_FbxNode_ScalingMaxX(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyBool1*sipVal;
     ::FbxNode *sipCpp = reinterpret_cast< ::FbxNode *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyBool1 *>(sipForceConvertToType(sipPy,sipType_FbxPropertyBool1,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->ScalingMaxX = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxNode_ScalingMaxY(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxNode_ScalingMaxY(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyBool1*sipVal;
     ::FbxNode *sipCpp = reinterpret_cast< ::FbxNode *>(sipSelf);

    sipVal = &sipCpp->ScalingMaxY;

    return sipConvertFromType(sipVal, sipType_FbxPropertyBool1, NULL);
}


extern "C" {static int varset_FbxNode_ScalingMaxY(void *, PyObject *, PyObject *);}
static int varset_FbxNode_ScalingMaxY(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyBool1*sipVal;
     ::FbxNode *sipCpp = reinterpret_cast< ::FbxNode *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyBool1 *>(sipForceConvertToType(sipPy,sipType_FbxPropertyBool1,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->ScalingMaxY = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxNode_ScalingMaxZ(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxNode_ScalingMaxZ(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyBool1*sipVal;
     ::FbxNode *sipCpp = reinterpret_cast< ::FbxNode *>(sipSelf);

    sipVal = &sipCpp->ScalingMaxZ;

    return sipConvertFromType(sipVal, sipType_FbxPropertyBool1, NULL);
}


extern "C" {static int varset_FbxNode_ScalingMaxZ(void *, PyObject *, PyObject *);}
static int varset_FbxNode_ScalingMaxZ(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyBool1*sipVal;
     ::FbxNode *sipCpp = reinterpret_cast< ::FbxNode *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyBool1 *>(sipForceConvertToType(sipPy,sipType_FbxPropertyBool1,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->ScalingMaxZ = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxNode_ScalingMin(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxNode_ScalingMin(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyDouble3*sipVal;
     ::FbxNode *sipCpp = reinterpret_cast< ::FbxNode *>(sipSelf);

    sipVal = &sipCpp->ScalingMin;

    return sipConvertFromType(sipVal, sipType_FbxPropertyDouble3, NULL);
}


extern "C" {static int varset_FbxNode_ScalingMin(void *, PyObject *, PyObject *);}
static int varset_FbxNode_ScalingMin(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyDouble3*sipVal;
     ::FbxNode *sipCpp = reinterpret_cast< ::FbxNode *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyDouble3 *>(sipForceConvertToType(sipPy,sipType_FbxPropertyDouble3,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->ScalingMin = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxNode_ScalingMinX(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxNode_ScalingMinX(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyBool1*sipVal;
     ::FbxNode *sipCpp = reinterpret_cast< ::FbxNode *>(sipSelf);

    sipVal = &sipCpp->ScalingMinX;

    return sipConvertFromType(sipVal, sipType_FbxPropertyBool1, NULL);
}


extern "C" {static int varset_FbxNode_ScalingMinX(void *, PyObject *, PyObject *);}
static int varset_FbxNode_ScalingMinX(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyBool1*sipVal;
     ::FbxNode *sipCpp = reinterpret_cast< ::FbxNode *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyBool1 *>(sipForceConvertToType(sipPy,sipType_FbxPropertyBool1,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->ScalingMinX = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxNode_ScalingMinY(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxNode_ScalingMinY(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyBool1*sipVal;
     ::FbxNode *sipCpp = reinterpret_cast< ::FbxNode *>(sipSelf);

    sipVal = &sipCpp->ScalingMinY;

    return sipConvertFromType(sipVal, sipType_FbxPropertyBool1, NULL);
}


extern "C" {static int varset_FbxNode_ScalingMinY(void *, PyObject *, PyObject *);}
static int varset_FbxNode_ScalingMinY(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyBool1*sipVal;
     ::FbxNode *sipCpp = reinterpret_cast< ::FbxNode *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyBool1 *>(sipForceConvertToType(sipPy,sipType_FbxPropertyBool1,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->ScalingMinY = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxNode_ScalingMinZ(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxNode_ScalingMinZ(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyBool1*sipVal;
     ::FbxNode *sipCpp = reinterpret_cast< ::FbxNode *>(sipSelf);

    sipVal = &sipCpp->ScalingMinZ;

    return sipConvertFromType(sipVal, sipType_FbxPropertyBool1, NULL);
}


extern "C" {static int varset_FbxNode_ScalingMinZ(void *, PyObject *, PyObject *);}
static int varset_FbxNode_ScalingMinZ(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyBool1*sipVal;
     ::FbxNode *sipCpp = reinterpret_cast< ::FbxNode *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyBool1 *>(sipForceConvertToType(sipPy,sipType_FbxPropertyBool1,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->ScalingMinZ = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxNode_ScalingOffset(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxNode_ScalingOffset(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyDouble3*sipVal;
     ::FbxNode *sipCpp = reinterpret_cast< ::FbxNode *>(sipSelf);

    sipVal = &sipCpp->ScalingOffset;

    return sipConvertFromType(sipVal, sipType_FbxPropertyDouble3, NULL);
}


extern "C" {static int varset_FbxNode_ScalingOffset(void *, PyObject *, PyObject *);}
static int varset_FbxNode_ScalingOffset(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyDouble3*sipVal;
     ::FbxNode *sipCpp = reinterpret_cast< ::FbxNode *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyDouble3 *>(sipForceConvertToType(sipPy,sipType_FbxPropertyDouble3,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->ScalingOffset = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxNode_ScalingPivot(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxNode_ScalingPivot(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyDouble3*sipVal;
     ::FbxNode *sipCpp = reinterpret_cast< ::FbxNode *>(sipSelf);

    sipVal = &sipCpp->ScalingPivot;

    return sipConvertFromType(sipVal, sipType_FbxPropertyDouble3, NULL);
}


extern "C" {static int varset_FbxNode_ScalingPivot(void *, PyObject *, PyObject *);}
static int varset_FbxNode_ScalingPivot(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyDouble3*sipVal;
     ::FbxNode *sipCpp = reinterpret_cast< ::FbxNode *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyDouble3 *>(sipForceConvertToType(sipPy,sipType_FbxPropertyDouble3,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->ScalingPivot = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxNode_Show(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxNode_Show(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyBool1*sipVal;
     ::FbxNode *sipCpp = reinterpret_cast< ::FbxNode *>(sipSelf);

    sipVal = &sipCpp->Show;

    return sipConvertFromType(sipVal, sipType_FbxPropertyBool1, NULL);
}


extern "C" {static int varset_FbxNode_Show(void *, PyObject *, PyObject *);}
static int varset_FbxNode_Show(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyBool1*sipVal;
     ::FbxNode *sipCpp = reinterpret_cast< ::FbxNode *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyBool1 *>(sipForceConvertToType(sipPy,sipType_FbxPropertyBool1,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->Show = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxNode_TranslationActive(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxNode_TranslationActive(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyBool1*sipVal;
     ::FbxNode *sipCpp = reinterpret_cast< ::FbxNode *>(sipSelf);

    sipVal = &sipCpp->TranslationActive;

    return sipConvertFromType(sipVal, sipType_FbxPropertyBool1, NULL);
}


extern "C" {static int varset_FbxNode_TranslationActive(void *, PyObject *, PyObject *);}
static int varset_FbxNode_TranslationActive(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyBool1*sipVal;
     ::FbxNode *sipCpp = reinterpret_cast< ::FbxNode *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyBool1 *>(sipForceConvertToType(sipPy,sipType_FbxPropertyBool1,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->TranslationActive = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxNode_TranslationMax(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxNode_TranslationMax(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyDouble3*sipVal;
     ::FbxNode *sipCpp = reinterpret_cast< ::FbxNode *>(sipSelf);

    sipVal = &sipCpp->TranslationMax;

    return sipConvertFromType(sipVal, sipType_FbxPropertyDouble3, NULL);
}


extern "C" {static int varset_FbxNode_TranslationMax(void *, PyObject *, PyObject *);}
static int varset_FbxNode_TranslationMax(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyDouble3*sipVal;
     ::FbxNode *sipCpp = reinterpret_cast< ::FbxNode *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyDouble3 *>(sipForceConvertToType(sipPy,sipType_FbxPropertyDouble3,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->TranslationMax = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxNode_TranslationMaxX(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxNode_TranslationMaxX(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyBool1*sipVal;
     ::FbxNode *sipCpp = reinterpret_cast< ::FbxNode *>(sipSelf);

    sipVal = &sipCpp->TranslationMaxX;

    return sipConvertFromType(sipVal, sipType_FbxPropertyBool1, NULL);
}


extern "C" {static int varset_FbxNode_TranslationMaxX(void *, PyObject *, PyObject *);}
static int varset_FbxNode_TranslationMaxX(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyBool1*sipVal;
     ::FbxNode *sipCpp = reinterpret_cast< ::FbxNode *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyBool1 *>(sipForceConvertToType(sipPy,sipType_FbxPropertyBool1,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->TranslationMaxX = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxNode_TranslationMaxY(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxNode_TranslationMaxY(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyBool1*sipVal;
     ::FbxNode *sipCpp = reinterpret_cast< ::FbxNode *>(sipSelf);

    sipVal = &sipCpp->TranslationMaxY;

    return sipConvertFromType(sipVal, sipType_FbxPropertyBool1, NULL);
}


extern "C" {static int varset_FbxNode_TranslationMaxY(void *, PyObject *, PyObject *);}
static int varset_FbxNode_TranslationMaxY(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyBool1*sipVal;
     ::FbxNode *sipCpp = reinterpret_cast< ::FbxNode *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyBool1 *>(sipForceConvertToType(sipPy,sipType_FbxPropertyBool1,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->TranslationMaxY = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxNode_TranslationMaxZ(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxNode_TranslationMaxZ(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyBool1*sipVal;
     ::FbxNode *sipCpp = reinterpret_cast< ::FbxNode *>(sipSelf);

    sipVal = &sipCpp->TranslationMaxZ;

    return sipConvertFromType(sipVal, sipType_FbxPropertyBool1, NULL);
}


extern "C" {static int varset_FbxNode_TranslationMaxZ(void *, PyObject *, PyObject *);}
static int varset_FbxNode_TranslationMaxZ(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyBool1*sipVal;
     ::FbxNode *sipCpp = reinterpret_cast< ::FbxNode *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyBool1 *>(sipForceConvertToType(sipPy,sipType_FbxPropertyBool1,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->TranslationMaxZ = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxNode_TranslationMin(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxNode_TranslationMin(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyDouble3*sipVal;
     ::FbxNode *sipCpp = reinterpret_cast< ::FbxNode *>(sipSelf);

    sipVal = &sipCpp->TranslationMin;

    return sipConvertFromType(sipVal, sipType_FbxPropertyDouble3, NULL);
}


extern "C" {static int varset_FbxNode_TranslationMin(void *, PyObject *, PyObject *);}
static int varset_FbxNode_TranslationMin(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyDouble3*sipVal;
     ::FbxNode *sipCpp = reinterpret_cast< ::FbxNode *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyDouble3 *>(sipForceConvertToType(sipPy,sipType_FbxPropertyDouble3,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->TranslationMin = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxNode_TranslationMinX(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxNode_TranslationMinX(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyBool1*sipVal;
     ::FbxNode *sipCpp = reinterpret_cast< ::FbxNode *>(sipSelf);

    sipVal = &sipCpp->TranslationMinX;

    return sipConvertFromType(sipVal, sipType_FbxPropertyBool1, NULL);
}


extern "C" {static int varset_FbxNode_TranslationMinX(void *, PyObject *, PyObject *);}
static int varset_FbxNode_TranslationMinX(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyBool1*sipVal;
     ::FbxNode *sipCpp = reinterpret_cast< ::FbxNode *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyBool1 *>(sipForceConvertToType(sipPy,sipType_FbxPropertyBool1,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->TranslationMinX = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxNode_TranslationMinY(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxNode_TranslationMinY(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyBool1*sipVal;
     ::FbxNode *sipCpp = reinterpret_cast< ::FbxNode *>(sipSelf);

    sipVal = &sipCpp->TranslationMinY;

    return sipConvertFromType(sipVal, sipType_FbxPropertyBool1, NULL);
}


extern "C" {static int varset_FbxNode_TranslationMinY(void *, PyObject *, PyObject *);}
static int varset_FbxNode_TranslationMinY(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyBool1*sipVal;
     ::FbxNode *sipCpp = reinterpret_cast< ::FbxNode *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyBool1 *>(sipForceConvertToType(sipPy,sipType_FbxPropertyBool1,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->TranslationMinY = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxNode_TranslationMinZ(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxNode_TranslationMinZ(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyBool1*sipVal;
     ::FbxNode *sipCpp = reinterpret_cast< ::FbxNode *>(sipSelf);

    sipVal = &sipCpp->TranslationMinZ;

    return sipConvertFromType(sipVal, sipType_FbxPropertyBool1, NULL);
}


extern "C" {static int varset_FbxNode_TranslationMinZ(void *, PyObject *, PyObject *);}
static int varset_FbxNode_TranslationMinZ(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyBool1*sipVal;
     ::FbxNode *sipCpp = reinterpret_cast< ::FbxNode *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyBool1 *>(sipForceConvertToType(sipPy,sipType_FbxPropertyBool1,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->TranslationMinZ = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxNode_UpVectorProperty(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxNode_UpVectorProperty(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyFbxReference*sipVal;
     ::FbxNode *sipCpp = reinterpret_cast< ::FbxNode *>(sipSelf);

    sipVal = &sipCpp->UpVectorProperty;

    return sipConvertFromType(sipVal, sipType_FbxPropertyFbxReference, NULL);
}


extern "C" {static int varset_FbxNode_UpVectorProperty(void *, PyObject *, PyObject *);}
static int varset_FbxNode_UpVectorProperty(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyFbxReference*sipVal;
     ::FbxNode *sipCpp = reinterpret_cast< ::FbxNode *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyFbxReference *>(sipForceConvertToType(sipPy,sipType_FbxPropertyFbxReference,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->UpVectorProperty = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxNode_Visibility(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxNode_Visibility(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyDouble1*sipVal;
     ::FbxNode *sipCpp = reinterpret_cast< ::FbxNode *>(sipSelf);

    sipVal = &sipCpp->Visibility;

    return sipConvertFromType(sipVal, sipType_FbxPropertyDouble1, NULL);
}


extern "C" {static int varset_FbxNode_Visibility(void *, PyObject *, PyObject *);}
static int varset_FbxNode_Visibility(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyDouble1*sipVal;
     ::FbxNode *sipCpp = reinterpret_cast< ::FbxNode *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyDouble1 *>(sipForceConvertToType(sipPy,sipType_FbxPropertyDouble1,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->Visibility = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxNode_VisibilityInheritance(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxNode_VisibilityInheritance(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyBool1*sipVal;
     ::FbxNode *sipCpp = reinterpret_cast< ::FbxNode *>(sipSelf);

    sipVal = &sipCpp->VisibilityInheritance;

    return sipConvertFromType(sipVal, sipType_FbxPropertyBool1, NULL);
}


extern "C" {static int varset_FbxNode_VisibilityInheritance(void *, PyObject *, PyObject *);}
static int varset_FbxNode_VisibilityInheritance(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyBool1*sipVal;
     ::FbxNode *sipCpp = reinterpret_cast< ::FbxNode *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyBool1 *>(sipForceConvertToType(sipPy,sipType_FbxPropertyBool1,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->VisibilityInheritance = *sipVal;

    return 0;
}

sipVariableDef variables_FbxNode[] = {
    {InstanceVariable, sipName_AxisLen, (PyMethodDef *)varget_FbxNode_AxisLen, (PyMethodDef *)varset_FbxNode_AxisLen, NULL, NULL},
    {ClassVariable, sipName_ClassId, (PyMethodDef *)varget_FbxNode_ClassId, (PyMethodDef *)varset_FbxNode_ClassId, NULL, NULL},
    {InstanceVariable, sipName_DefaultAttributeIndex, (PyMethodDef *)varget_FbxNode_DefaultAttributeIndex, (PyMethodDef *)varset_FbxNode_DefaultAttributeIndex, NULL, NULL},
    {InstanceVariable, sipName_Freeze, (PyMethodDef *)varget_FbxNode_Freeze, (PyMethodDef *)varset_FbxNode_Freeze, NULL, NULL},
    {InstanceVariable, sipName_GeometricRotation, (PyMethodDef *)varget_FbxNode_GeometricRotation, (PyMethodDef *)varset_FbxNode_GeometricRotation, NULL, NULL},
    {InstanceVariable, sipName_GeometricScaling, (PyMethodDef *)varget_FbxNode_GeometricScaling, (PyMethodDef *)varset_FbxNode_GeometricScaling, NULL, NULL},
    {InstanceVariable, sipName_GeometricTranslation, (PyMethodDef *)varget_FbxNode_GeometricTranslation, (PyMethodDef *)varset_FbxNode_GeometricTranslation, NULL, NULL},
    {InstanceVariable, sipName_InheritType, (PyMethodDef *)varget_FbxNode_InheritType, (PyMethodDef *)varset_FbxNode_InheritType, NULL, NULL},
    {InstanceVariable, sipName_LODBox, (PyMethodDef *)varget_FbxNode_LODBox, (PyMethodDef *)varset_FbxNode_LODBox, NULL, NULL},
    {InstanceVariable, sipName_LclRotation, (PyMethodDef *)varget_FbxNode_LclRotation, (PyMethodDef *)varset_FbxNode_LclRotation, NULL, NULL},
    {InstanceVariable, sipName_LclScaling, (PyMethodDef *)varget_FbxNode_LclScaling, (PyMethodDef *)varset_FbxNode_LclScaling, NULL, NULL},
    {InstanceVariable, sipName_LclTranslation, (PyMethodDef *)varget_FbxNode_LclTranslation, (PyMethodDef *)varset_FbxNode_LclTranslation, NULL, NULL},
    {InstanceVariable, sipName_LookAtProperty, (PyMethodDef *)varget_FbxNode_LookAtProperty, (PyMethodDef *)varset_FbxNode_LookAtProperty, NULL, NULL},
    {InstanceVariable, sipName_MaxDampRangeX, (PyMethodDef *)varget_FbxNode_MaxDampRangeX, (PyMethodDef *)varset_FbxNode_MaxDampRangeX, NULL, NULL},
    {InstanceVariable, sipName_MaxDampRangeY, (PyMethodDef *)varget_FbxNode_MaxDampRangeY, (PyMethodDef *)varset_FbxNode_MaxDampRangeY, NULL, NULL},
    {InstanceVariable, sipName_MaxDampRangeZ, (PyMethodDef *)varget_FbxNode_MaxDampRangeZ, (PyMethodDef *)varset_FbxNode_MaxDampRangeZ, NULL, NULL},
    {InstanceVariable, sipName_MaxDampStrengthX, (PyMethodDef *)varget_FbxNode_MaxDampStrengthX, (PyMethodDef *)varset_FbxNode_MaxDampStrengthX, NULL, NULL},
    {InstanceVariable, sipName_MaxDampStrengthY, (PyMethodDef *)varget_FbxNode_MaxDampStrengthY, (PyMethodDef *)varset_FbxNode_MaxDampStrengthY, NULL, NULL},
    {InstanceVariable, sipName_MaxDampStrengthZ, (PyMethodDef *)varget_FbxNode_MaxDampStrengthZ, (PyMethodDef *)varset_FbxNode_MaxDampStrengthZ, NULL, NULL},
    {InstanceVariable, sipName_MinDampRangeX, (PyMethodDef *)varget_FbxNode_MinDampRangeX, (PyMethodDef *)varset_FbxNode_MinDampRangeX, NULL, NULL},
    {InstanceVariable, sipName_MinDampRangeY, (PyMethodDef *)varget_FbxNode_MinDampRangeY, (PyMethodDef *)varset_FbxNode_MinDampRangeY, NULL, NULL},
    {InstanceVariable, sipName_MinDampRangeZ, (PyMethodDef *)varget_FbxNode_MinDampRangeZ, (PyMethodDef *)varset_FbxNode_MinDampRangeZ, NULL, NULL},
    {InstanceVariable, sipName_MinDampStrengthX, (PyMethodDef *)varget_FbxNode_MinDampStrengthX, (PyMethodDef *)varset_FbxNode_MinDampStrengthX, NULL, NULL},
    {InstanceVariable, sipName_MinDampStrengthY, (PyMethodDef *)varget_FbxNode_MinDampStrengthY, (PyMethodDef *)varset_FbxNode_MinDampStrengthY, NULL, NULL},
    {InstanceVariable, sipName_MinDampStrengthZ, (PyMethodDef *)varget_FbxNode_MinDampStrengthZ, (PyMethodDef *)varset_FbxNode_MinDampStrengthZ, NULL, NULL},
    {InstanceVariable, sipName_NegativePercentShapeSupport, (PyMethodDef *)varget_FbxNode_NegativePercentShapeSupport, (PyMethodDef *)varset_FbxNode_NegativePercentShapeSupport, NULL, NULL},
    {InstanceVariable, sipName_PostRotation, (PyMethodDef *)varget_FbxNode_PostRotation, (PyMethodDef *)varset_FbxNode_PostRotation, NULL, NULL},
    {InstanceVariable, sipName_PreRotation, (PyMethodDef *)varget_FbxNode_PreRotation, (PyMethodDef *)varset_FbxNode_PreRotation, NULL, NULL},
    {InstanceVariable, sipName_PreferedAngleX, (PyMethodDef *)varget_FbxNode_PreferedAngleX, (PyMethodDef *)varset_FbxNode_PreferedAngleX, NULL, NULL},
    {InstanceVariable, sipName_PreferedAngleY, (PyMethodDef *)varget_FbxNode_PreferedAngleY, (PyMethodDef *)varset_FbxNode_PreferedAngleY, NULL, NULL},
    {InstanceVariable, sipName_PreferedAngleZ, (PyMethodDef *)varget_FbxNode_PreferedAngleZ, (PyMethodDef *)varset_FbxNode_PreferedAngleZ, NULL, NULL},
    {InstanceVariable, sipName_QuaternionInterpolate, (PyMethodDef *)varget_FbxNode_QuaternionInterpolate, (PyMethodDef *)varset_FbxNode_QuaternionInterpolate, NULL, NULL},
    {InstanceVariable, sipName_RotationActive, (PyMethodDef *)varget_FbxNode_RotationActive, (PyMethodDef *)varset_FbxNode_RotationActive, NULL, NULL},
    {InstanceVariable, sipName_RotationMax, (PyMethodDef *)varget_FbxNode_RotationMax, (PyMethodDef *)varset_FbxNode_RotationMax, NULL, NULL},
    {InstanceVariable, sipName_RotationMaxX, (PyMethodDef *)varget_FbxNode_RotationMaxX, (PyMethodDef *)varset_FbxNode_RotationMaxX, NULL, NULL},
    {InstanceVariable, sipName_RotationMaxY, (PyMethodDef *)varget_FbxNode_RotationMaxY, (PyMethodDef *)varset_FbxNode_RotationMaxY, NULL, NULL},
    {InstanceVariable, sipName_RotationMaxZ, (PyMethodDef *)varget_FbxNode_RotationMaxZ, (PyMethodDef *)varset_FbxNode_RotationMaxZ, NULL, NULL},
    {InstanceVariable, sipName_RotationMin, (PyMethodDef *)varget_FbxNode_RotationMin, (PyMethodDef *)varset_FbxNode_RotationMin, NULL, NULL},
    {InstanceVariable, sipName_RotationMinX, (PyMethodDef *)varget_FbxNode_RotationMinX, (PyMethodDef *)varset_FbxNode_RotationMinX, NULL, NULL},
    {InstanceVariable, sipName_RotationMinY, (PyMethodDef *)varget_FbxNode_RotationMinY, (PyMethodDef *)varset_FbxNode_RotationMinY, NULL, NULL},
    {InstanceVariable, sipName_RotationMinZ, (PyMethodDef *)varget_FbxNode_RotationMinZ, (PyMethodDef *)varset_FbxNode_RotationMinZ, NULL, NULL},
    {InstanceVariable, sipName_RotationOffset, (PyMethodDef *)varget_FbxNode_RotationOffset, (PyMethodDef *)varset_FbxNode_RotationOffset, NULL, NULL},
    {InstanceVariable, sipName_RotationOrder, (PyMethodDef *)varget_FbxNode_RotationOrder, (PyMethodDef *)varset_FbxNode_RotationOrder, NULL, NULL},
    {InstanceVariable, sipName_RotationPivot, (PyMethodDef *)varget_FbxNode_RotationPivot, (PyMethodDef *)varset_FbxNode_RotationPivot, NULL, NULL},
    {InstanceVariable, sipName_RotationSpaceForLimitOnly, (PyMethodDef *)varget_FbxNode_RotationSpaceForLimitOnly, (PyMethodDef *)varset_FbxNode_RotationSpaceForLimitOnly, NULL, NULL},
    {InstanceVariable, sipName_RotationStiffnessX, (PyMethodDef *)varget_FbxNode_RotationStiffnessX, (PyMethodDef *)varset_FbxNode_RotationStiffnessX, NULL, NULL},
    {InstanceVariable, sipName_RotationStiffnessY, (PyMethodDef *)varget_FbxNode_RotationStiffnessY, (PyMethodDef *)varset_FbxNode_RotationStiffnessY, NULL, NULL},
    {InstanceVariable, sipName_RotationStiffnessZ, (PyMethodDef *)varget_FbxNode_RotationStiffnessZ, (PyMethodDef *)varset_FbxNode_RotationStiffnessZ, NULL, NULL},
    {InstanceVariable, sipName_ScalingActive, (PyMethodDef *)varget_FbxNode_ScalingActive, (PyMethodDef *)varset_FbxNode_ScalingActive, NULL, NULL},
    {InstanceVariable, sipName_ScalingMax, (PyMethodDef *)varget_FbxNode_ScalingMax, (PyMethodDef *)varset_FbxNode_ScalingMax, NULL, NULL},
    {InstanceVariable, sipName_ScalingMaxX, (PyMethodDef *)varget_FbxNode_ScalingMaxX, (PyMethodDef *)varset_FbxNode_ScalingMaxX, NULL, NULL},
    {InstanceVariable, sipName_ScalingMaxY, (PyMethodDef *)varget_FbxNode_ScalingMaxY, (PyMethodDef *)varset_FbxNode_ScalingMaxY, NULL, NULL},
    {InstanceVariable, sipName_ScalingMaxZ, (PyMethodDef *)varget_FbxNode_ScalingMaxZ, (PyMethodDef *)varset_FbxNode_ScalingMaxZ, NULL, NULL},
    {InstanceVariable, sipName_ScalingMin, (PyMethodDef *)varget_FbxNode_ScalingMin, (PyMethodDef *)varset_FbxNode_ScalingMin, NULL, NULL},
    {InstanceVariable, sipName_ScalingMinX, (PyMethodDef *)varget_FbxNode_ScalingMinX, (PyMethodDef *)varset_FbxNode_ScalingMinX, NULL, NULL},
    {InstanceVariable, sipName_ScalingMinY, (PyMethodDef *)varget_FbxNode_ScalingMinY, (PyMethodDef *)varset_FbxNode_ScalingMinY, NULL, NULL},
    {InstanceVariable, sipName_ScalingMinZ, (PyMethodDef *)varget_FbxNode_ScalingMinZ, (PyMethodDef *)varset_FbxNode_ScalingMinZ, NULL, NULL},
    {InstanceVariable, sipName_ScalingOffset, (PyMethodDef *)varget_FbxNode_ScalingOffset, (PyMethodDef *)varset_FbxNode_ScalingOffset, NULL, NULL},
    {InstanceVariable, sipName_ScalingPivot, (PyMethodDef *)varget_FbxNode_ScalingPivot, (PyMethodDef *)varset_FbxNode_ScalingPivot, NULL, NULL},
    {InstanceVariable, sipName_Show, (PyMethodDef *)varget_FbxNode_Show, (PyMethodDef *)varset_FbxNode_Show, NULL, NULL},
    {InstanceVariable, sipName_TranslationActive, (PyMethodDef *)varget_FbxNode_TranslationActive, (PyMethodDef *)varset_FbxNode_TranslationActive, NULL, NULL},
    {InstanceVariable, sipName_TranslationMax, (PyMethodDef *)varget_FbxNode_TranslationMax, (PyMethodDef *)varset_FbxNode_TranslationMax, NULL, NULL},
    {InstanceVariable, sipName_TranslationMaxX, (PyMethodDef *)varget_FbxNode_TranslationMaxX, (PyMethodDef *)varset_FbxNode_TranslationMaxX, NULL, NULL},
    {InstanceVariable, sipName_TranslationMaxY, (PyMethodDef *)varget_FbxNode_TranslationMaxY, (PyMethodDef *)varset_FbxNode_TranslationMaxY, NULL, NULL},
    {InstanceVariable, sipName_TranslationMaxZ, (PyMethodDef *)varget_FbxNode_TranslationMaxZ, (PyMethodDef *)varset_FbxNode_TranslationMaxZ, NULL, NULL},
    {InstanceVariable, sipName_TranslationMin, (PyMethodDef *)varget_FbxNode_TranslationMin, (PyMethodDef *)varset_FbxNode_TranslationMin, NULL, NULL},
    {InstanceVariable, sipName_TranslationMinX, (PyMethodDef *)varget_FbxNode_TranslationMinX, (PyMethodDef *)varset_FbxNode_TranslationMinX, NULL, NULL},
    {InstanceVariable, sipName_TranslationMinY, (PyMethodDef *)varget_FbxNode_TranslationMinY, (PyMethodDef *)varset_FbxNode_TranslationMinY, NULL, NULL},
    {InstanceVariable, sipName_TranslationMinZ, (PyMethodDef *)varget_FbxNode_TranslationMinZ, (PyMethodDef *)varset_FbxNode_TranslationMinZ, NULL, NULL},
    {InstanceVariable, sipName_UpVectorProperty, (PyMethodDef *)varget_FbxNode_UpVectorProperty, (PyMethodDef *)varset_FbxNode_UpVectorProperty, NULL, NULL},
    {InstanceVariable, sipName_Visibility, (PyMethodDef *)varget_FbxNode_Visibility, (PyMethodDef *)varset_FbxNode_Visibility, NULL, NULL},
    {InstanceVariable, sipName_VisibilityInheritance, (PyMethodDef *)varget_FbxNode_VisibilityInheritance, (PyMethodDef *)varset_FbxNode_VisibilityInheritance, NULL, NULL},
};


sipClassTypeDef sipTypeDef_fbx_FbxNode = {
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_FbxNode,
        {0},
        0
    },
    {
        sipNameNr_FbxNode,
        {0, 0, 1},
        104, methods_FbxNode,
        10, enummembers_FbxNode,
        72, variables_FbxNode,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    0,
    -1,
    -1,
    supers_FbxNode,
    slots_FbxNode,
    0,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    0,
    0,
    0,
    0,
    release_FbxNode,
    cast_FbxNode,
    0,
    0,
    0,
    0,
    0,
    0
};
