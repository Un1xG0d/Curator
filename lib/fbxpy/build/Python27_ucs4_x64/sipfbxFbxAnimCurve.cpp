/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.3
 *
 * Copyright (C) 2009 Autodesk, Inc. and/or its licensors.
 * All Rights Reserved.
 * 
 * The coded instructions, statements, computer programs, and/or related material 
 * (collectively the "Data") in these files contain unpublished information 
 * proprietary to Autodesk, Inc. and/or its licensors, which is protected by 
 * Canada and United States of America federal copyright law and by international 
 * treaties. 
 * 
 * The Data may not be disclosed or distributed to third parties, in whole or in
 * part, without the prior written consent of Autodesk, Inc. ("Autodesk").
 * 
 * THE DATA IS PROVIDED "AS IS" AND WITHOUT WARRANTY.
 * ALL WARRANTIES ARE EXPRESSLY EXCLUDED AND DISCLAIMED. AUTODESK MAKES NO
 * WARRANTY OF ANY KIND WITH RESPECT TO THE DATA, EXPRESS, IMPLIED OR ARISING
 * BY CUSTOM OR TRADE USAGE, AND DISCLAIMS ANY IMPLIED WARRANTIES OF TITLE, 
 * NON-INFRINGEMENT, MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE OR USE. 
 * WITHOUT LIMITING THE FOREGOING, AUTODESK DOES NOT WARRANT THAT THE OPERATION
 * OF THE DATA WILL BE UNINTERRUPTED OR ERROR FREE. 
 * 
 * IN NO EVENT SHALL AUTODESK, ITS AFFILIATES, PARENT COMPANIES, LICENSORS
 * OR SUPPLIERS ("AUTODESK GROUP") BE LIABLE FOR ANY LOSSES, DAMAGES OR EXPENSES
 * OF ANY KIND (INCLUDING WITHOUT LIMITATION PUNITIVE OR MULTIPLE DAMAGES OR OTHER
 * SPECIAL, DIRECT, INDIRECT, EXEMPLARY, INCIDENTAL, LOSS OF PROFITS, REVENUE
 * OR DATA, COST OF COVER OR CONSEQUENTIAL LOSSES OR DAMAGES OF ANY KIND),
 * HOWEVER CAUSED, AND REGARDLESS OF THE THEORY OF LIABILITY, WHETHER DERIVED
 * FROM CONTRACT, TORT (INCLUDING, BUT NOT LIMITED TO, NEGLIGENCE), OR OTHERWISE,
 * ARISING OUT OF OR RELATING TO THE DATA OR ITS USE OR ANY OTHER PERFORMANCE,
 * WHETHER OR NOT AUTODESK HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH LOSS
 * OR DAMAGE. 
 */

#include "sipAPIfbx.h"




PyDoc_STRVAR(doc_FbxAnimCurve_Create, "Create(FbxManager, str) -> FbxAnimCurve\n"
    "Create(FbxScene, str) -> FbxAnimCurve");

extern "C" {static PyObject *meth_FbxAnimCurve_Create(PyObject *, PyObject *);}
static PyObject *meth_FbxAnimCurve_Create(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxManager* a0;
        const char* a1;
        PyObject *a1Keep;

        if (sipParseArgs(&sipParseErr, sipArgs, "J8A8", sipType_FbxManager, &a0, &a1Keep, &a1))
        {
             ::FbxAnimCurve*sipRes;

            sipRes =  ::FbxAnimCurve::Create(a0,a1);
            Py_DECREF(a1Keep);

            return sipConvertFromType(sipRes,sipType_FbxAnimCurve,NULL);
        }
    }

    {
         ::FbxScene* a0;
        const char* a1;
        PyObject *a1Keep;

        if (sipParseArgs(&sipParseErr, sipArgs, "J8A8", sipType_FbxScene, &a0, &a1Keep, &a1))
        {
             ::FbxAnimCurve*sipRes;

            sipRes =  ::FbxAnimCurve::Create(a0,a1);
            Py_DECREF(a1Keep);

            return sipConvertFromType(sipRes,sipType_FbxAnimCurve,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxAnimCurve, sipName_Create, doc_FbxAnimCurve_Create);

    return NULL;
}


PyDoc_STRVAR(doc_FbxAnimCurve_GetClassId, "GetClassId(self) -> FbxClassId");

extern "C" {static PyObject *meth_FbxAnimCurve_GetClassId(PyObject *, PyObject *);}
static PyObject *meth_FbxAnimCurve_GetClassId(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::FbxAnimCurve *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxAnimCurve, &sipCpp))
        {
             ::FbxClassId*sipRes;

            sipRes = new  ::FbxClassId((sipSelfWasArg ? sipCpp-> ::FbxAnimCurve::GetClassId() : sipCpp->GetClassId()));

            return sipConvertFromNewType(sipRes,sipType_FbxClassId,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxAnimCurve, sipName_GetClassId, doc_FbxAnimCurve_GetClassId);

    return NULL;
}


PyDoc_STRVAR(doc_FbxAnimCurve_ResizeKeyBuffer, "ResizeKeyBuffer(self, int)");

extern "C" {static PyObject *meth_FbxAnimCurve_ResizeKeyBuffer(PyObject *, PyObject *);}
static PyObject *meth_FbxAnimCurve_ResizeKeyBuffer(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        int a0;
         ::FbxAnimCurve *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_FbxAnimCurve, &sipCpp, &a0))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_FbxAnimCurve, sipName_ResizeKeyBuffer);
                return NULL;
            }

            sipCpp->ResizeKeyBuffer(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxAnimCurve, sipName_ResizeKeyBuffer, doc_FbxAnimCurve_ResizeKeyBuffer);

    return NULL;
}


PyDoc_STRVAR(doc_FbxAnimCurve_KeyModifyBegin, "KeyModifyBegin(self)");

extern "C" {static PyObject *meth_FbxAnimCurve_KeyModifyBegin(PyObject *, PyObject *);}
static PyObject *meth_FbxAnimCurve_KeyModifyBegin(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
         ::FbxAnimCurve *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxAnimCurve, &sipCpp))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_FbxAnimCurve, sipName_KeyModifyBegin);
                return NULL;
            }

            sipCpp->KeyModifyBegin();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxAnimCurve, sipName_KeyModifyBegin, doc_FbxAnimCurve_KeyModifyBegin);

    return NULL;
}


PyDoc_STRVAR(doc_FbxAnimCurve_KeyModifyEnd, "KeyModifyEnd(self)");

extern "C" {static PyObject *meth_FbxAnimCurve_KeyModifyEnd(PyObject *, PyObject *);}
static PyObject *meth_FbxAnimCurve_KeyModifyEnd(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
         ::FbxAnimCurve *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxAnimCurve, &sipCpp))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_FbxAnimCurve, sipName_KeyModifyEnd);
                return NULL;
            }

            sipCpp->KeyModifyEnd();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxAnimCurve, sipName_KeyModifyEnd, doc_FbxAnimCurve_KeyModifyEnd);

    return NULL;
}


PyDoc_STRVAR(doc_FbxAnimCurve_KeyClear, "KeyClear(self)");

extern "C" {static PyObject *meth_FbxAnimCurve_KeyClear(PyObject *, PyObject *);}
static PyObject *meth_FbxAnimCurve_KeyClear(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
         ::FbxAnimCurve *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxAnimCurve, &sipCpp))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_FbxAnimCurve, sipName_KeyClear);
                return NULL;
            }

            sipCpp->KeyClear();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxAnimCurve, sipName_KeyClear, doc_FbxAnimCurve_KeyClear);

    return NULL;
}


PyDoc_STRVAR(doc_FbxAnimCurve_KeyGetCount, "KeyGetCount(self) -> int");

extern "C" {static PyObject *meth_FbxAnimCurve_KeyGetCount(PyObject *, PyObject *);}
static PyObject *meth_FbxAnimCurve_KeyGetCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        const  ::FbxAnimCurve *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxAnimCurve, &sipCpp))
        {
            int sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_FbxAnimCurve, sipName_KeyGetCount);
                return NULL;
            }

            sipRes = sipCpp->KeyGetCount();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxAnimCurve, sipName_KeyGetCount, doc_FbxAnimCurve_KeyGetCount);

    return NULL;
}


PyDoc_STRVAR(doc_FbxAnimCurve_KeyAdd, "KeyAdd(self, FbxTime, FbxAnimCurveKeyBase) -> Tuple[int, int]\n"
    "KeyAdd(self, FbxTime) -> Tuple[int, int]");

extern "C" {static PyObject *meth_FbxAnimCurve_KeyAdd(PyObject *, PyObject *);}
static PyObject *meth_FbxAnimCurve_KeyAdd(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
         ::FbxTime* a0;
         ::FbxAnimCurveKeyBase* a1;
        int a2;
         ::FbxAnimCurve *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9J9", &sipSelf, sipType_FbxAnimCurve, &sipCpp, sipType_FbxTime, &a0, sipType_FbxAnimCurveKeyBase, &a1))
        {
            int sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_FbxAnimCurve, sipName_KeyAdd);
                return NULL;
            }

            sipRes = sipCpp->KeyAdd(*a0,*a1,&a2);

            return sipBuildResult(0,"(ii)",sipRes,a2);
        }
    }

    {
         ::FbxTime* a0;
        int a1;
         ::FbxAnimCurve *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_FbxAnimCurve, &sipCpp, sipType_FbxTime, &a0))
        {
            int sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_FbxAnimCurve, sipName_KeyAdd);
                return NULL;
            }

            sipRes = sipCpp->KeyAdd(*a0,&a1);

            return sipBuildResult(0,"(ii)",sipRes,a1);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxAnimCurve, sipName_KeyAdd, doc_FbxAnimCurve_KeyAdd);

    return NULL;
}


PyDoc_STRVAR(doc_FbxAnimCurve_KeySet, "KeySet(self, int, FbxAnimCurveKeyBase) -> bool\n"
    "KeySet(self, int, FbxTime, float, FbxAnimCurveDef.EInterpolationType = FbxAnimCurveDef.eInterpolationCubic, FbxAnimCurveDef.ETangentMode = FbxAnimCurveDef.eTangentAuto, float = 0, float = 0, FbxAnimCurveDef.EWeightedMode = FbxAnimCurveDef.eWeightedNone, float = FbxAnimCurveDef.sDEFAULT_WEIGHT, float = FbxAnimCurveDef.sDEFAULT_WEIGHT, float = FbxAnimCurveDef.sDEFAULT_VELOCITY, float = FbxAnimCurveDef.sDEFAULT_VELOCITY)");

extern "C" {static PyObject *meth_FbxAnimCurve_KeySet(PyObject *, PyObject *);}
static PyObject *meth_FbxAnimCurve_KeySet(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        int a0;
         ::FbxAnimCurveKeyBase* a1;
         ::FbxAnimCurve *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ9", &sipSelf, sipType_FbxAnimCurve, &sipCpp, &a0, sipType_FbxAnimCurveKeyBase, &a1))
        {
            bool sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_FbxAnimCurve, sipName_KeySet);
                return NULL;
            }

            sipRes = sipCpp->KeySet(a0,*a1);

            return PyBool_FromLong(sipRes);
        }
    }

    {
        int a0;
         ::FbxTime* a1;
        float a2;
         ::FbxAnimCurveDef::EInterpolationType a3 = FbxAnimCurveDef::eInterpolationCubic;
         ::FbxAnimCurveDef::ETangentMode a4 = FbxAnimCurveDef::eTangentAuto;
        float a5 = 0;
        float a6 = 0;
         ::FbxAnimCurveDef::EWeightedMode a7 = FbxAnimCurveDef::eWeightedNone;
        float a8 = FbxAnimCurveDef::sDEFAULT_WEIGHT;
        float a9 = FbxAnimCurveDef::sDEFAULT_WEIGHT;
        float a10 = FbxAnimCurveDef::sDEFAULT_VELOCITY;
        float a11 = FbxAnimCurveDef::sDEFAULT_VELOCITY;
         ::FbxAnimCurve *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ9f|EEffEffff", &sipSelf, sipType_FbxAnimCurve, &sipCpp, &a0, sipType_FbxTime, &a1, &a2, sipType_FbxAnimCurveDef_EInterpolationType, &a3, sipType_FbxAnimCurveDef_ETangentMode, &a4, &a5, &a6, sipType_FbxAnimCurveDef_EWeightedMode, &a7, &a8, &a9, &a10, &a11))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_FbxAnimCurve, sipName_KeySet);
                return NULL;
            }

            sipCpp->KeySet(a0,*a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxAnimCurve, sipName_KeySet, doc_FbxAnimCurve_KeySet);

    return NULL;
}


PyDoc_STRVAR(doc_FbxAnimCurve_KeyRemove, "KeyRemove(self, int) -> bool\n"
    "KeyRemove(self, int, int) -> bool");

extern "C" {static PyObject *meth_FbxAnimCurve_KeyRemove(PyObject *, PyObject *);}
static PyObject *meth_FbxAnimCurve_KeyRemove(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        int a0;
         ::FbxAnimCurve *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_FbxAnimCurve, &sipCpp, &a0))
        {
            bool sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_FbxAnimCurve, sipName_KeyRemove);
                return NULL;
            }

            sipRes = sipCpp->KeyRemove(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    {
        int a0;
        int a1;
         ::FbxAnimCurve *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bii", &sipSelf, sipType_FbxAnimCurve, &sipCpp, &a0, &a1))
        {
            bool sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_FbxAnimCurve, sipName_KeyRemove);
                return NULL;
            }

            sipRes = sipCpp->KeyRemove(a0,a1);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxAnimCurve, sipName_KeyRemove, doc_FbxAnimCurve_KeyRemove);

    return NULL;
}


PyDoc_STRVAR(doc_FbxAnimCurve_KeyInsert, "KeyInsert(self, FbxTime) -> Tuple[int, int]");

extern "C" {static PyObject *meth_FbxAnimCurve_KeyInsert(PyObject *, PyObject *);}
static PyObject *meth_FbxAnimCurve_KeyInsert(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
         ::FbxTime* a0;
        int a1;
         ::FbxAnimCurve *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_FbxAnimCurve, &sipCpp, sipType_FbxTime, &a0))
        {
            int sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_FbxAnimCurve, sipName_KeyInsert);
                return NULL;
            }

            sipRes = sipCpp->KeyInsert(*a0,&a1);

            return sipBuildResult(0,"(ii)",sipRes,a1);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxAnimCurve, sipName_KeyInsert, doc_FbxAnimCurve_KeyInsert);

    return NULL;
}


PyDoc_STRVAR(doc_FbxAnimCurve_KeyFind, "KeyFind(self, FbxTime) -> Tuple[float, int]");

extern "C" {static PyObject *meth_FbxAnimCurve_KeyFind(PyObject *, PyObject *);}
static PyObject *meth_FbxAnimCurve_KeyFind(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
         ::FbxTime* a0;
        int a1;
         ::FbxAnimCurve *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_FbxAnimCurve, &sipCpp, sipType_FbxTime, &a0))
        {
            double sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_FbxAnimCurve, sipName_KeyFind);
                return NULL;
            }

            sipRes = sipCpp->KeyFind(*a0,&a1);

            return sipBuildResult(0,"(di)",sipRes,a1);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxAnimCurve, sipName_KeyFind, doc_FbxAnimCurve_KeyFind);

    return NULL;
}


PyDoc_STRVAR(doc_FbxAnimCurve_KeyScaleValue, "KeyScaleValue(self, float) -> bool");

extern "C" {static PyObject *meth_FbxAnimCurve_KeyScaleValue(PyObject *, PyObject *);}
static PyObject *meth_FbxAnimCurve_KeyScaleValue(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        float a0;
         ::FbxAnimCurve *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bf", &sipSelf, sipType_FbxAnimCurve, &sipCpp, &a0))
        {
            bool sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_FbxAnimCurve, sipName_KeyScaleValue);
                return NULL;
            }

            sipRes = sipCpp->KeyScaleValue(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxAnimCurve, sipName_KeyScaleValue, doc_FbxAnimCurve_KeyScaleValue);

    return NULL;
}


PyDoc_STRVAR(doc_FbxAnimCurve_KeyScaleValueAndTangent, "KeyScaleValueAndTangent(self, float) -> bool");

extern "C" {static PyObject *meth_FbxAnimCurve_KeyScaleValueAndTangent(PyObject *, PyObject *);}
static PyObject *meth_FbxAnimCurve_KeyScaleValueAndTangent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        float a0;
         ::FbxAnimCurve *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bf", &sipSelf, sipType_FbxAnimCurve, &sipCpp, &a0))
        {
            bool sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_FbxAnimCurve, sipName_KeyScaleValueAndTangent);
                return NULL;
            }

            sipRes = sipCpp->KeyScaleValueAndTangent(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxAnimCurve, sipName_KeyScaleValueAndTangent, doc_FbxAnimCurve_KeyScaleValueAndTangent);

    return NULL;
}


PyDoc_STRVAR(doc_FbxAnimCurve_KeySetTCB, "KeySetTCB(self, int, FbxTime, float, float = 0, float = 0, float = 0)");

extern "C" {static PyObject *meth_FbxAnimCurve_KeySetTCB(PyObject *, PyObject *);}
static PyObject *meth_FbxAnimCurve_KeySetTCB(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        int a0;
         ::FbxTime* a1;
        float a2;
        float a3 = 0;
        float a4 = 0;
        float a5 = 0;
         ::FbxAnimCurve *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ9f|fff", &sipSelf, sipType_FbxAnimCurve, &sipCpp, &a0, sipType_FbxTime, &a1, &a2, &a3, &a4, &a5))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_FbxAnimCurve, sipName_KeySetTCB);
                return NULL;
            }

            sipCpp->KeySetTCB(a0,*a1,a2,a3,a4,a5);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxAnimCurve, sipName_KeySetTCB, doc_FbxAnimCurve_KeySetTCB);

    return NULL;
}


PyDoc_STRVAR(doc_FbxAnimCurve_KeyGetInterpolation, "KeyGetInterpolation(self, int) -> FbxAnimCurveDef.EInterpolationType");

extern "C" {static PyObject *meth_FbxAnimCurve_KeyGetInterpolation(PyObject *, PyObject *);}
static PyObject *meth_FbxAnimCurve_KeyGetInterpolation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        int a0;
        const  ::FbxAnimCurve *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_FbxAnimCurve, &sipCpp, &a0))
        {
             ::FbxAnimCurveDef::EInterpolationType sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_FbxAnimCurve, sipName_KeyGetInterpolation);
                return NULL;
            }

            sipRes = sipCpp->KeyGetInterpolation(a0);

            return sipConvertFromEnum(sipRes,sipType_FbxAnimCurveDef_EInterpolationType);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxAnimCurve, sipName_KeyGetInterpolation, doc_FbxAnimCurve_KeyGetInterpolation);

    return NULL;
}


PyDoc_STRVAR(doc_FbxAnimCurve_KeySetInterpolation, "KeySetInterpolation(self, int, FbxAnimCurveDef.EInterpolationType)");

extern "C" {static PyObject *meth_FbxAnimCurve_KeySetInterpolation(PyObject *, PyObject *);}
static PyObject *meth_FbxAnimCurve_KeySetInterpolation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        int a0;
         ::FbxAnimCurveDef::EInterpolationType a1;
         ::FbxAnimCurve *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiE", &sipSelf, sipType_FbxAnimCurve, &sipCpp, &a0, sipType_FbxAnimCurveDef_EInterpolationType, &a1))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_FbxAnimCurve, sipName_KeySetInterpolation);
                return NULL;
            }

            sipCpp->KeySetInterpolation(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxAnimCurve, sipName_KeySetInterpolation, doc_FbxAnimCurve_KeySetInterpolation);

    return NULL;
}


PyDoc_STRVAR(doc_FbxAnimCurve_KeyGetConstantMode, "KeyGetConstantMode(self, int) -> FbxAnimCurveDef.EConstantMode");

extern "C" {static PyObject *meth_FbxAnimCurve_KeyGetConstantMode(PyObject *, PyObject *);}
static PyObject *meth_FbxAnimCurve_KeyGetConstantMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        int a0;
        const  ::FbxAnimCurve *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_FbxAnimCurve, &sipCpp, &a0))
        {
             ::FbxAnimCurveDef::EConstantMode sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_FbxAnimCurve, sipName_KeyGetConstantMode);
                return NULL;
            }

            sipRes = sipCpp->KeyGetConstantMode(a0);

            return sipConvertFromEnum(sipRes,sipType_FbxAnimCurveDef_EConstantMode);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxAnimCurve, sipName_KeyGetConstantMode, doc_FbxAnimCurve_KeyGetConstantMode);

    return NULL;
}


PyDoc_STRVAR(doc_FbxAnimCurve_KeyGetTangentMode, "KeyGetTangentMode(self, int, bool = False) -> FbxAnimCurveDef.ETangentMode");

extern "C" {static PyObject *meth_FbxAnimCurve_KeyGetTangentMode(PyObject *, PyObject *);}
static PyObject *meth_FbxAnimCurve_KeyGetTangentMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        int a0;
        bool a1 = 0;
        const  ::FbxAnimCurve *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi|b", &sipSelf, sipType_FbxAnimCurve, &sipCpp, &a0, &a1))
        {
             ::FbxAnimCurveDef::ETangentMode sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_FbxAnimCurve, sipName_KeyGetTangentMode);
                return NULL;
            }

            sipRes = sipCpp->KeyGetTangentMode(a0,a1);

            return sipConvertFromEnum(sipRes,sipType_FbxAnimCurveDef_ETangentMode);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxAnimCurve, sipName_KeyGetTangentMode, doc_FbxAnimCurve_KeyGetTangentMode);

    return NULL;
}


PyDoc_STRVAR(doc_FbxAnimCurve_KeySetConstantMode, "KeySetConstantMode(self, int, FbxAnimCurveDef.EConstantMode)");

extern "C" {static PyObject *meth_FbxAnimCurve_KeySetConstantMode(PyObject *, PyObject *);}
static PyObject *meth_FbxAnimCurve_KeySetConstantMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        int a0;
         ::FbxAnimCurveDef::EConstantMode a1;
         ::FbxAnimCurve *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiE", &sipSelf, sipType_FbxAnimCurve, &sipCpp, &a0, sipType_FbxAnimCurveDef_EConstantMode, &a1))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_FbxAnimCurve, sipName_KeySetConstantMode);
                return NULL;
            }

            sipCpp->KeySetConstantMode(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxAnimCurve, sipName_KeySetConstantMode, doc_FbxAnimCurve_KeySetConstantMode);

    return NULL;
}


PyDoc_STRVAR(doc_FbxAnimCurve_KeySetTangentMode, "KeySetTangentMode(self, int, FbxAnimCurveDef.ETangentMode)");

extern "C" {static PyObject *meth_FbxAnimCurve_KeySetTangentMode(PyObject *, PyObject *);}
static PyObject *meth_FbxAnimCurve_KeySetTangentMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        int a0;
         ::FbxAnimCurveDef::ETangentMode a1;
         ::FbxAnimCurve *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiE", &sipSelf, sipType_FbxAnimCurve, &sipCpp, &a0, sipType_FbxAnimCurveDef_ETangentMode, &a1))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_FbxAnimCurve, sipName_KeySetTangentMode);
                return NULL;
            }

            sipCpp->KeySetTangentMode(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxAnimCurve, sipName_KeySetTangentMode, doc_FbxAnimCurve_KeySetTangentMode);

    return NULL;
}


PyDoc_STRVAR(doc_FbxAnimCurve_KeyGet, "KeyGet(self, int) -> FbxAnimCurveKey");

extern "C" {static PyObject *meth_FbxAnimCurve_KeyGet(PyObject *, PyObject *);}
static PyObject *meth_FbxAnimCurve_KeyGet(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        int a0;
        const  ::FbxAnimCurve *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_FbxAnimCurve, &sipCpp, &a0))
        {
             ::FbxAnimCurveKey*sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_FbxAnimCurve, sipName_KeyGet);
                return NULL;
            }

            sipRes = new  ::FbxAnimCurveKey(sipCpp->KeyGet(a0));

            return sipConvertFromNewType(sipRes,sipType_FbxAnimCurveKey,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxAnimCurve, sipName_KeyGet, doc_FbxAnimCurve_KeyGet);

    return NULL;
}


PyDoc_STRVAR(doc_FbxAnimCurve_KeyGetValue, "KeyGetValue(self, int) -> float");

extern "C" {static PyObject *meth_FbxAnimCurve_KeyGetValue(PyObject *, PyObject *);}
static PyObject *meth_FbxAnimCurve_KeyGetValue(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        int a0;
        const  ::FbxAnimCurve *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_FbxAnimCurve, &sipCpp, &a0))
        {
            float sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_FbxAnimCurve, sipName_KeyGetValue);
                return NULL;
            }

            sipRes = sipCpp->KeyGetValue(a0);

            return PyFloat_FromDouble((double)sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxAnimCurve, sipName_KeyGetValue, doc_FbxAnimCurve_KeyGetValue);

    return NULL;
}


PyDoc_STRVAR(doc_FbxAnimCurve_KeySetValue, "KeySetValue(self, int, float)");

extern "C" {static PyObject *meth_FbxAnimCurve_KeySetValue(PyObject *, PyObject *);}
static PyObject *meth_FbxAnimCurve_KeySetValue(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        int a0;
        float a1;
         ::FbxAnimCurve *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bif", &sipSelf, sipType_FbxAnimCurve, &sipCpp, &a0, &a1))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_FbxAnimCurve, sipName_KeySetValue);
                return NULL;
            }

            sipCpp->KeySetValue(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxAnimCurve, sipName_KeySetValue, doc_FbxAnimCurve_KeySetValue);

    return NULL;
}


PyDoc_STRVAR(doc_FbxAnimCurve_KeyIncValue, "KeyIncValue(self, int, float)");

extern "C" {static PyObject *meth_FbxAnimCurve_KeyIncValue(PyObject *, PyObject *);}
static PyObject *meth_FbxAnimCurve_KeyIncValue(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        int a0;
        float a1;
         ::FbxAnimCurve *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bif", &sipSelf, sipType_FbxAnimCurve, &sipCpp, &a0, &a1))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_FbxAnimCurve, sipName_KeyIncValue);
                return NULL;
            }

            sipCpp->KeyIncValue(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxAnimCurve, sipName_KeyIncValue, doc_FbxAnimCurve_KeyIncValue);

    return NULL;
}


PyDoc_STRVAR(doc_FbxAnimCurve_KeyMultValue, "KeyMultValue(self, int, float)");

extern "C" {static PyObject *meth_FbxAnimCurve_KeyMultValue(PyObject *, PyObject *);}
static PyObject *meth_FbxAnimCurve_KeyMultValue(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        int a0;
        float a1;
         ::FbxAnimCurve *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bif", &sipSelf, sipType_FbxAnimCurve, &sipCpp, &a0, &a1))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_FbxAnimCurve, sipName_KeyMultValue);
                return NULL;
            }

            sipCpp->KeyMultValue(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxAnimCurve, sipName_KeyMultValue, doc_FbxAnimCurve_KeyMultValue);

    return NULL;
}


PyDoc_STRVAR(doc_FbxAnimCurve_KeyMultTangent, "KeyMultTangent(self, int, float)");

extern "C" {static PyObject *meth_FbxAnimCurve_KeyMultTangent(PyObject *, PyObject *);}
static PyObject *meth_FbxAnimCurve_KeyMultTangent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        int a0;
        float a1;
         ::FbxAnimCurve *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bif", &sipSelf, sipType_FbxAnimCurve, &sipCpp, &a0, &a1))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_FbxAnimCurve, sipName_KeyMultTangent);
                return NULL;
            }

            sipCpp->KeyMultTangent(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxAnimCurve, sipName_KeyMultTangent, doc_FbxAnimCurve_KeyMultTangent);

    return NULL;
}


PyDoc_STRVAR(doc_FbxAnimCurve_KeyGetTime, "KeyGetTime(self, int) -> FbxTime");

extern "C" {static PyObject *meth_FbxAnimCurve_KeyGetTime(PyObject *, PyObject *);}
static PyObject *meth_FbxAnimCurve_KeyGetTime(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        int a0;
        const  ::FbxAnimCurve *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_FbxAnimCurve, &sipCpp, &a0))
        {
             ::FbxTime*sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_FbxAnimCurve, sipName_KeyGetTime);
                return NULL;
            }

            sipRes = new  ::FbxTime(sipCpp->KeyGetTime(a0));

            return sipConvertFromNewType(sipRes,sipType_FbxTime,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxAnimCurve, sipName_KeyGetTime, doc_FbxAnimCurve_KeyGetTime);

    return NULL;
}


PyDoc_STRVAR(doc_FbxAnimCurve_KeySetTime, "KeySetTime(self, int, FbxTime)");

extern "C" {static PyObject *meth_FbxAnimCurve_KeySetTime(PyObject *, PyObject *);}
static PyObject *meth_FbxAnimCurve_KeySetTime(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        int a0;
         ::FbxTime* a1;
         ::FbxAnimCurve *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ9", &sipSelf, sipType_FbxAnimCurve, &sipCpp, &a0, sipType_FbxTime, &a1))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_FbxAnimCurve, sipName_KeySetTime);
                return NULL;
            }

            sipCpp->KeySetTime(a0,*a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxAnimCurve, sipName_KeySetTime, doc_FbxAnimCurve_KeySetTime);

    return NULL;
}


PyDoc_STRVAR(doc_FbxAnimCurve_KeySetBreak, "KeySetBreak(self, int, bool)");

extern "C" {static PyObject *meth_FbxAnimCurve_KeySetBreak(PyObject *, PyObject *);}
static PyObject *meth_FbxAnimCurve_KeySetBreak(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        int a0;
        bool a1;
         ::FbxAnimCurve *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bib", &sipSelf, sipType_FbxAnimCurve, &sipCpp, &a0, &a1))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_FbxAnimCurve, sipName_KeySetBreak);
                return NULL;
            }

            sipCpp->KeySetBreak(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxAnimCurve, sipName_KeySetBreak, doc_FbxAnimCurve_KeySetBreak);

    return NULL;
}


PyDoc_STRVAR(doc_FbxAnimCurve_KeyGetBreak, "KeyGetBreak(self, int) -> bool");

extern "C" {static PyObject *meth_FbxAnimCurve_KeyGetBreak(PyObject *, PyObject *);}
static PyObject *meth_FbxAnimCurve_KeyGetBreak(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        int a0;
        const  ::FbxAnimCurve *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_FbxAnimCurve, &sipCpp, &a0))
        {
            bool sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_FbxAnimCurve, sipName_KeyGetBreak);
                return NULL;
            }

            sipRes = sipCpp->KeyGetBreak(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxAnimCurve, sipName_KeyGetBreak, doc_FbxAnimCurve_KeyGetBreak);

    return NULL;
}


PyDoc_STRVAR(doc_FbxAnimCurve_KeyGetLeftDerivative, "KeyGetLeftDerivative(self, int) -> float");

extern "C" {static PyObject *meth_FbxAnimCurve_KeyGetLeftDerivative(PyObject *, PyObject *);}
static PyObject *meth_FbxAnimCurve_KeyGetLeftDerivative(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        int a0;
         ::FbxAnimCurve *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_FbxAnimCurve, &sipCpp, &a0))
        {
            float sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_FbxAnimCurve, sipName_KeyGetLeftDerivative);
                return NULL;
            }

            sipRes = sipCpp->KeyGetLeftDerivative(a0);

            return PyFloat_FromDouble((double)sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxAnimCurve, sipName_KeyGetLeftDerivative, doc_FbxAnimCurve_KeyGetLeftDerivative);

    return NULL;
}


PyDoc_STRVAR(doc_FbxAnimCurve_KeySetLeftDerivative, "KeySetLeftDerivative(self, int, float)");

extern "C" {static PyObject *meth_FbxAnimCurve_KeySetLeftDerivative(PyObject *, PyObject *);}
static PyObject *meth_FbxAnimCurve_KeySetLeftDerivative(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        int a0;
        float a1;
         ::FbxAnimCurve *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bif", &sipSelf, sipType_FbxAnimCurve, &sipCpp, &a0, &a1))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_FbxAnimCurve, sipName_KeySetLeftDerivative);
                return NULL;
            }

            sipCpp->KeySetLeftDerivative(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxAnimCurve, sipName_KeySetLeftDerivative, doc_FbxAnimCurve_KeySetLeftDerivative);

    return NULL;
}


PyDoc_STRVAR(doc_FbxAnimCurve_KeyGetLeftAuto, "KeyGetLeftAuto(self, int, bool = False) -> float");

extern "C" {static PyObject *meth_FbxAnimCurve_KeyGetLeftAuto(PyObject *, PyObject *);}
static PyObject *meth_FbxAnimCurve_KeyGetLeftAuto(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        int a0;
        bool a1 = 0;
         ::FbxAnimCurve *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi|b", &sipSelf, sipType_FbxAnimCurve, &sipCpp, &a0, &a1))
        {
            float sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_FbxAnimCurve, sipName_KeyGetLeftAuto);
                return NULL;
            }

            sipRes = sipCpp->KeyGetLeftAuto(a0,a1);

            return PyFloat_FromDouble((double)sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxAnimCurve, sipName_KeyGetLeftAuto, doc_FbxAnimCurve_KeyGetLeftAuto);

    return NULL;
}


PyDoc_STRVAR(doc_FbxAnimCurve_KeyGetLeftDerivativeInfo, "KeyGetLeftDerivativeInfo(self, int) -> FbxAnimCurveTangentInfo");

extern "C" {static PyObject *meth_FbxAnimCurve_KeyGetLeftDerivativeInfo(PyObject *, PyObject *);}
static PyObject *meth_FbxAnimCurve_KeyGetLeftDerivativeInfo(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        int a0;
         ::FbxAnimCurve *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_FbxAnimCurve, &sipCpp, &a0))
        {
             ::FbxAnimCurveTangentInfo*sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_FbxAnimCurve, sipName_KeyGetLeftDerivativeInfo);
                return NULL;
            }

            sipRes = new  ::FbxAnimCurveTangentInfo(sipCpp->KeyGetLeftDerivativeInfo(a0));

            return sipConvertFromNewType(sipRes,sipType_FbxAnimCurveTangentInfo,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxAnimCurve, sipName_KeyGetLeftDerivativeInfo, doc_FbxAnimCurve_KeyGetLeftDerivativeInfo);

    return NULL;
}


PyDoc_STRVAR(doc_FbxAnimCurve_KeySetLeftDerivativeInfo, "KeySetLeftDerivativeInfo(self, int, FbxAnimCurveTangentInfo, bool = False)");

extern "C" {static PyObject *meth_FbxAnimCurve_KeySetLeftDerivativeInfo(PyObject *, PyObject *);}
static PyObject *meth_FbxAnimCurve_KeySetLeftDerivativeInfo(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        int a0;
         ::FbxAnimCurveTangentInfo* a1;
        bool a2 = 0;
         ::FbxAnimCurve *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ9|b", &sipSelf, sipType_FbxAnimCurve, &sipCpp, &a0, sipType_FbxAnimCurveTangentInfo, &a1, &a2))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_FbxAnimCurve, sipName_KeySetLeftDerivativeInfo);
                return NULL;
            }

            sipCpp->KeySetLeftDerivativeInfo(a0,*a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxAnimCurve, sipName_KeySetLeftDerivativeInfo, doc_FbxAnimCurve_KeySetLeftDerivativeInfo);

    return NULL;
}


PyDoc_STRVAR(doc_FbxAnimCurve_KeyGetRightDerivative, "KeyGetRightDerivative(self, int) -> float");

extern "C" {static PyObject *meth_FbxAnimCurve_KeyGetRightDerivative(PyObject *, PyObject *);}
static PyObject *meth_FbxAnimCurve_KeyGetRightDerivative(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        int a0;
         ::FbxAnimCurve *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_FbxAnimCurve, &sipCpp, &a0))
        {
            float sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_FbxAnimCurve, sipName_KeyGetRightDerivative);
                return NULL;
            }

            sipRes = sipCpp->KeyGetRightDerivative(a0);

            return PyFloat_FromDouble((double)sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxAnimCurve, sipName_KeyGetRightDerivative, doc_FbxAnimCurve_KeyGetRightDerivative);

    return NULL;
}


PyDoc_STRVAR(doc_FbxAnimCurve_KeySetRightDerivative, "KeySetRightDerivative(self, int, float)");

extern "C" {static PyObject *meth_FbxAnimCurve_KeySetRightDerivative(PyObject *, PyObject *);}
static PyObject *meth_FbxAnimCurve_KeySetRightDerivative(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        int a0;
        float a1;
         ::FbxAnimCurve *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bif", &sipSelf, sipType_FbxAnimCurve, &sipCpp, &a0, &a1))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_FbxAnimCurve, sipName_KeySetRightDerivative);
                return NULL;
            }

            sipCpp->KeySetRightDerivative(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxAnimCurve, sipName_KeySetRightDerivative, doc_FbxAnimCurve_KeySetRightDerivative);

    return NULL;
}


PyDoc_STRVAR(doc_FbxAnimCurve_KeyGetRightAuto, "KeyGetRightAuto(self, int, bool = False) -> float");

extern "C" {static PyObject *meth_FbxAnimCurve_KeyGetRightAuto(PyObject *, PyObject *);}
static PyObject *meth_FbxAnimCurve_KeyGetRightAuto(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        int a0;
        bool a1 = 0;
         ::FbxAnimCurve *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi|b", &sipSelf, sipType_FbxAnimCurve, &sipCpp, &a0, &a1))
        {
            float sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_FbxAnimCurve, sipName_KeyGetRightAuto);
                return NULL;
            }

            sipRes = sipCpp->KeyGetRightAuto(a0,a1);

            return PyFloat_FromDouble((double)sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxAnimCurve, sipName_KeyGetRightAuto, doc_FbxAnimCurve_KeyGetRightAuto);

    return NULL;
}


PyDoc_STRVAR(doc_FbxAnimCurve_KeyGetRightDerivativeInfo, "KeyGetRightDerivativeInfo(self, int) -> FbxAnimCurveTangentInfo");

extern "C" {static PyObject *meth_FbxAnimCurve_KeyGetRightDerivativeInfo(PyObject *, PyObject *);}
static PyObject *meth_FbxAnimCurve_KeyGetRightDerivativeInfo(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        int a0;
         ::FbxAnimCurve *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_FbxAnimCurve, &sipCpp, &a0))
        {
             ::FbxAnimCurveTangentInfo*sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_FbxAnimCurve, sipName_KeyGetRightDerivativeInfo);
                return NULL;
            }

            sipRes = new  ::FbxAnimCurveTangentInfo(sipCpp->KeyGetRightDerivativeInfo(a0));

            return sipConvertFromNewType(sipRes,sipType_FbxAnimCurveTangentInfo,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxAnimCurve, sipName_KeyGetRightDerivativeInfo, doc_FbxAnimCurve_KeyGetRightDerivativeInfo);

    return NULL;
}


PyDoc_STRVAR(doc_FbxAnimCurve_KeySetRightDerivativeInfo, "KeySetRightDerivativeInfo(self, int, FbxAnimCurveTangentInfo, bool = False)");

extern "C" {static PyObject *meth_FbxAnimCurve_KeySetRightDerivativeInfo(PyObject *, PyObject *);}
static PyObject *meth_FbxAnimCurve_KeySetRightDerivativeInfo(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        int a0;
         ::FbxAnimCurveTangentInfo* a1;
        bool a2 = 0;
         ::FbxAnimCurve *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ9|b", &sipSelf, sipType_FbxAnimCurve, &sipCpp, &a0, sipType_FbxAnimCurveTangentInfo, &a1, &a2))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_FbxAnimCurve, sipName_KeySetRightDerivativeInfo);
                return NULL;
            }

            sipCpp->KeySetRightDerivativeInfo(a0,*a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxAnimCurve, sipName_KeySetRightDerivativeInfo, doc_FbxAnimCurve_KeySetRightDerivativeInfo);

    return NULL;
}


PyDoc_STRVAR(doc_FbxAnimCurve_KeyIsLeftTangentWeighted, "KeyIsLeftTangentWeighted(self, int) -> bool");

extern "C" {static PyObject *meth_FbxAnimCurve_KeyIsLeftTangentWeighted(PyObject *, PyObject *);}
static PyObject *meth_FbxAnimCurve_KeyIsLeftTangentWeighted(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        int a0;
        const  ::FbxAnimCurve *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_FbxAnimCurve, &sipCpp, &a0))
        {
            bool sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_FbxAnimCurve, sipName_KeyIsLeftTangentWeighted);
                return NULL;
            }

            sipRes = sipCpp->KeyIsLeftTangentWeighted(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxAnimCurve, sipName_KeyIsLeftTangentWeighted, doc_FbxAnimCurve_KeyIsLeftTangentWeighted);

    return NULL;
}


PyDoc_STRVAR(doc_FbxAnimCurve_KeyIsRightTangentWeighted, "KeyIsRightTangentWeighted(self, int) -> bool");

extern "C" {static PyObject *meth_FbxAnimCurve_KeyIsRightTangentWeighted(PyObject *, PyObject *);}
static PyObject *meth_FbxAnimCurve_KeyIsRightTangentWeighted(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        int a0;
        const  ::FbxAnimCurve *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_FbxAnimCurve, &sipCpp, &a0))
        {
            bool sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_FbxAnimCurve, sipName_KeyIsRightTangentWeighted);
                return NULL;
            }

            sipRes = sipCpp->KeyIsRightTangentWeighted(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxAnimCurve, sipName_KeyIsRightTangentWeighted, doc_FbxAnimCurve_KeyIsRightTangentWeighted);

    return NULL;
}


PyDoc_STRVAR(doc_FbxAnimCurve_KeyGetLeftTangentWeight, "KeyGetLeftTangentWeight(self, int) -> float");

extern "C" {static PyObject *meth_FbxAnimCurve_KeyGetLeftTangentWeight(PyObject *, PyObject *);}
static PyObject *meth_FbxAnimCurve_KeyGetLeftTangentWeight(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        int a0;
        const  ::FbxAnimCurve *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_FbxAnimCurve, &sipCpp, &a0))
        {
            float sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_FbxAnimCurve, sipName_KeyGetLeftTangentWeight);
                return NULL;
            }

            sipRes = sipCpp->KeyGetLeftTangentWeight(a0);

            return PyFloat_FromDouble((double)sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxAnimCurve, sipName_KeyGetLeftTangentWeight, doc_FbxAnimCurve_KeyGetLeftTangentWeight);

    return NULL;
}


PyDoc_STRVAR(doc_FbxAnimCurve_KeyGetRightTangentWeight, "KeyGetRightTangentWeight(self, int) -> float");

extern "C" {static PyObject *meth_FbxAnimCurve_KeyGetRightTangentWeight(PyObject *, PyObject *);}
static PyObject *meth_FbxAnimCurve_KeyGetRightTangentWeight(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        int a0;
        const  ::FbxAnimCurve *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_FbxAnimCurve, &sipCpp, &a0))
        {
            float sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_FbxAnimCurve, sipName_KeyGetRightTangentWeight);
                return NULL;
            }

            sipRes = sipCpp->KeyGetRightTangentWeight(a0);

            return PyFloat_FromDouble((double)sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxAnimCurve, sipName_KeyGetRightTangentWeight, doc_FbxAnimCurve_KeyGetRightTangentWeight);

    return NULL;
}


PyDoc_STRVAR(doc_FbxAnimCurve_KeySetLeftTangentWeight, "KeySetLeftTangentWeight(self, int, float, bool = False)");

extern "C" {static PyObject *meth_FbxAnimCurve_KeySetLeftTangentWeight(PyObject *, PyObject *);}
static PyObject *meth_FbxAnimCurve_KeySetLeftTangentWeight(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        int a0;
        float a1;
        bool a2 = 0;
         ::FbxAnimCurve *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bif|b", &sipSelf, sipType_FbxAnimCurve, &sipCpp, &a0, &a1, &a2))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_FbxAnimCurve, sipName_KeySetLeftTangentWeight);
                return NULL;
            }

            sipCpp->KeySetLeftTangentWeight(a0,a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxAnimCurve, sipName_KeySetLeftTangentWeight, doc_FbxAnimCurve_KeySetLeftTangentWeight);

    return NULL;
}


PyDoc_STRVAR(doc_FbxAnimCurve_KeySetRightTangentWeight, "KeySetRightTangentWeight(self, int, float, bool = False)");

extern "C" {static PyObject *meth_FbxAnimCurve_KeySetRightTangentWeight(PyObject *, PyObject *);}
static PyObject *meth_FbxAnimCurve_KeySetRightTangentWeight(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        int a0;
        float a1;
        bool a2 = 0;
         ::FbxAnimCurve *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bif|b", &sipSelf, sipType_FbxAnimCurve, &sipCpp, &a0, &a1, &a2))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_FbxAnimCurve, sipName_KeySetRightTangentWeight);
                return NULL;
            }

            sipCpp->KeySetRightTangentWeight(a0,a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxAnimCurve, sipName_KeySetRightTangentWeight, doc_FbxAnimCurve_KeySetRightTangentWeight);

    return NULL;
}


PyDoc_STRVAR(doc_FbxAnimCurve_KeyGetLeftTangentVelocity, "KeyGetLeftTangentVelocity(self, int) -> float");

extern "C" {static PyObject *meth_FbxAnimCurve_KeyGetLeftTangentVelocity(PyObject *, PyObject *);}
static PyObject *meth_FbxAnimCurve_KeyGetLeftTangentVelocity(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        int a0;
        const  ::FbxAnimCurve *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_FbxAnimCurve, &sipCpp, &a0))
        {
            float sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_FbxAnimCurve, sipName_KeyGetLeftTangentVelocity);
                return NULL;
            }

            sipRes = sipCpp->KeyGetLeftTangentVelocity(a0);

            return PyFloat_FromDouble((double)sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxAnimCurve, sipName_KeyGetLeftTangentVelocity, doc_FbxAnimCurve_KeyGetLeftTangentVelocity);

    return NULL;
}


PyDoc_STRVAR(doc_FbxAnimCurve_KeyGetRightTangentVelocity, "KeyGetRightTangentVelocity(self, int) -> float");

extern "C" {static PyObject *meth_FbxAnimCurve_KeyGetRightTangentVelocity(PyObject *, PyObject *);}
static PyObject *meth_FbxAnimCurve_KeyGetRightTangentVelocity(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        int a0;
        const  ::FbxAnimCurve *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_FbxAnimCurve, &sipCpp, &a0))
        {
            float sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_FbxAnimCurve, sipName_KeyGetRightTangentVelocity);
                return NULL;
            }

            sipRes = sipCpp->KeyGetRightTangentVelocity(a0);

            return PyFloat_FromDouble((double)sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxAnimCurve, sipName_KeyGetRightTangentVelocity, doc_FbxAnimCurve_KeyGetRightTangentVelocity);

    return NULL;
}


PyDoc_STRVAR(doc_FbxAnimCurve_Evaluate, "Evaluate(self, FbxTime) -> Tuple[float, int]");

extern "C" {static PyObject *meth_FbxAnimCurve_Evaluate(PyObject *, PyObject *);}
static PyObject *meth_FbxAnimCurve_Evaluate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
         ::FbxTime* a0;
        int a1;
         ::FbxAnimCurve *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_FbxAnimCurve, &sipCpp, sipType_FbxTime, &a0))
        {
            float sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_FbxAnimCurve, sipName_Evaluate);
                return NULL;
            }

            sipRes = sipCpp->Evaluate(*a0,&a1);

            return sipBuildResult(0,"(fi)",sipRes,a1);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxAnimCurve, sipName_Evaluate, doc_FbxAnimCurve_Evaluate);

    return NULL;
}


PyDoc_STRVAR(doc_FbxAnimCurve_EvaluateIndex, "EvaluateIndex(self, float) -> float");

extern "C" {static PyObject *meth_FbxAnimCurve_EvaluateIndex(PyObject *, PyObject *);}
static PyObject *meth_FbxAnimCurve_EvaluateIndex(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        double a0;
         ::FbxAnimCurve *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_FbxAnimCurve, &sipCpp, &a0))
        {
            float sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_FbxAnimCurve, sipName_EvaluateIndex);
                return NULL;
            }

            sipRes = sipCpp->EvaluateIndex(a0);

            return PyFloat_FromDouble((double)sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxAnimCurve, sipName_EvaluateIndex, doc_FbxAnimCurve_EvaluateIndex);

    return NULL;
}


PyDoc_STRVAR(doc_FbxAnimCurve_EvaluateLeftDerivative, "EvaluateLeftDerivative(self, FbxTime) -> Tuple[float, int]");

extern "C" {static PyObject *meth_FbxAnimCurve_EvaluateLeftDerivative(PyObject *, PyObject *);}
static PyObject *meth_FbxAnimCurve_EvaluateLeftDerivative(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
         ::FbxTime* a0;
        int a1;
         ::FbxAnimCurve *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_FbxAnimCurve, &sipCpp, sipType_FbxTime, &a0))
        {
            float sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_FbxAnimCurve, sipName_EvaluateLeftDerivative);
                return NULL;
            }

            sipRes = sipCpp->EvaluateLeftDerivative(*a0,&a1);

            return sipBuildResult(0,"(fi)",sipRes,a1);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxAnimCurve, sipName_EvaluateLeftDerivative, doc_FbxAnimCurve_EvaluateLeftDerivative);

    return NULL;
}


PyDoc_STRVAR(doc_FbxAnimCurve_EvaluateRightDerivative, "EvaluateRightDerivative(self, FbxTime) -> Tuple[float, int]");

extern "C" {static PyObject *meth_FbxAnimCurve_EvaluateRightDerivative(PyObject *, PyObject *);}
static PyObject *meth_FbxAnimCurve_EvaluateRightDerivative(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
         ::FbxTime* a0;
        int a1;
         ::FbxAnimCurve *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_FbxAnimCurve, &sipCpp, sipType_FbxTime, &a0))
        {
            float sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_FbxAnimCurve, sipName_EvaluateRightDerivative);
                return NULL;
            }

            sipRes = sipCpp->EvaluateRightDerivative(*a0,&a1);

            return sipBuildResult(0,"(fi)",sipRes,a1);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxAnimCurve, sipName_EvaluateRightDerivative, doc_FbxAnimCurve_EvaluateRightDerivative);

    return NULL;
}


PyDoc_STRVAR(doc_FbxAnimCurve_GetTimeInterval, "GetTimeInterval(self, FbxTimeSpan) -> bool");

extern "C" {static PyObject *meth_FbxAnimCurve_GetTimeInterval(PyObject *, PyObject *);}
static PyObject *meth_FbxAnimCurve_GetTimeInterval(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
         ::FbxTimeSpan* a0;
         ::FbxAnimCurve *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_FbxAnimCurve, &sipCpp, sipType_FbxTimeSpan, &a0))
        {
            bool sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_FbxAnimCurve, sipName_GetTimeInterval);
                return NULL;
            }

            sipRes = sipCpp->GetTimeInterval(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxAnimCurve, sipName_GetTimeInterval, doc_FbxAnimCurve_GetTimeInterval);

    return NULL;
}


PyDoc_STRVAR(doc_FbxAnimCurve_CopyFrom, "CopyFrom(self, FbxAnimCurve, bool = True)");

extern "C" {static PyObject *meth_FbxAnimCurve_CopyFrom(PyObject *, PyObject *);}
static PyObject *meth_FbxAnimCurve_CopyFrom(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
         ::FbxAnimCurve* a0;
        bool a1 = 1;
         ::FbxAnimCurve *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9|b", &sipSelf, sipType_FbxAnimCurve, &sipCpp, sipType_FbxAnimCurve, &a0, &a1))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_FbxAnimCurve, sipName_CopyFrom);
                return NULL;
            }

            sipCpp->CopyFrom(*a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxAnimCurve, sipName_CopyFrom, doc_FbxAnimCurve_CopyFrom);

    return NULL;
}


extern "C" {static PyObject *slot_FbxAnimCurve___ne__(PyObject *,PyObject *);}
static PyObject *slot_FbxAnimCurve___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::FbxAnimCurve *sipCpp = reinterpret_cast< ::FbxAnimCurve *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_FbxAnimCurve));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const  ::FbxAnimCurve* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_FbxAnimCurve, &a0))
        {
            bool sipRes;

            sipRes = !sipCpp-> ::FbxAnimCurve::operator==(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_fbx, ne_slot, sipType_FbxAnimCurve, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_FbxAnimCurve___eq__(PyObject *,PyObject *);}
static PyObject *slot_FbxAnimCurve___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::FbxAnimCurve *sipCpp = reinterpret_cast< ::FbxAnimCurve *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_FbxAnimCurve));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const  ::FbxAnimCurve* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_FbxAnimCurve, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::FbxAnimCurve::operator==(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_fbx, eq_slot, sipType_FbxAnimCurve, sipSelf, sipArg);
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_FbxAnimCurve(void *, const sipTypeDef *);}
static void *cast_FbxAnimCurve(void *sipCppV, const sipTypeDef *targetType)
{
     ::FbxAnimCurve *sipCpp = reinterpret_cast< ::FbxAnimCurve *>(sipCppV);

    if (targetType == sipType_FbxAnimCurveBase)
        return static_cast< ::FbxAnimCurveBase *>(sipCpp);

    if (targetType == sipType_FbxObject)
        return static_cast< ::FbxObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_FbxAnimCurve(void *, int);}
static void release_FbxAnimCurve(void *, int)
{
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_FbxAnimCurve[] = {{7, 255, 1}};


/* Define this type's Python slots. */
static sipPySlotDef slots_FbxAnimCurve[] = {
    {(void *)slot_FbxAnimCurve___ne__, ne_slot},
    {(void *)slot_FbxAnimCurve___eq__, eq_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_FbxAnimCurve[] = {
    {SIP_MLNAME_CAST(sipName_CopyFrom), meth_FbxAnimCurve_CopyFrom, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxAnimCurve_CopyFrom)},
    {SIP_MLNAME_CAST(sipName_Create), meth_FbxAnimCurve_Create, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxAnimCurve_Create)},
    {SIP_MLNAME_CAST(sipName_Evaluate), meth_FbxAnimCurve_Evaluate, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxAnimCurve_Evaluate)},
    {SIP_MLNAME_CAST(sipName_EvaluateIndex), meth_FbxAnimCurve_EvaluateIndex, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxAnimCurve_EvaluateIndex)},
    {SIP_MLNAME_CAST(sipName_EvaluateLeftDerivative), meth_FbxAnimCurve_EvaluateLeftDerivative, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxAnimCurve_EvaluateLeftDerivative)},
    {SIP_MLNAME_CAST(sipName_EvaluateRightDerivative), meth_FbxAnimCurve_EvaluateRightDerivative, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxAnimCurve_EvaluateRightDerivative)},
    {SIP_MLNAME_CAST(sipName_GetClassId), meth_FbxAnimCurve_GetClassId, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxAnimCurve_GetClassId)},
    {SIP_MLNAME_CAST(sipName_GetTimeInterval), meth_FbxAnimCurve_GetTimeInterval, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxAnimCurve_GetTimeInterval)},
    {SIP_MLNAME_CAST(sipName_KeyAdd), meth_FbxAnimCurve_KeyAdd, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxAnimCurve_KeyAdd)},
    {SIP_MLNAME_CAST(sipName_KeyClear), meth_FbxAnimCurve_KeyClear, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxAnimCurve_KeyClear)},
    {SIP_MLNAME_CAST(sipName_KeyFind), meth_FbxAnimCurve_KeyFind, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxAnimCurve_KeyFind)},
    {SIP_MLNAME_CAST(sipName_KeyGet), meth_FbxAnimCurve_KeyGet, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxAnimCurve_KeyGet)},
    {SIP_MLNAME_CAST(sipName_KeyGetBreak), meth_FbxAnimCurve_KeyGetBreak, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxAnimCurve_KeyGetBreak)},
    {SIP_MLNAME_CAST(sipName_KeyGetConstantMode), meth_FbxAnimCurve_KeyGetConstantMode, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxAnimCurve_KeyGetConstantMode)},
    {SIP_MLNAME_CAST(sipName_KeyGetCount), meth_FbxAnimCurve_KeyGetCount, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxAnimCurve_KeyGetCount)},
    {SIP_MLNAME_CAST(sipName_KeyGetInterpolation), meth_FbxAnimCurve_KeyGetInterpolation, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxAnimCurve_KeyGetInterpolation)},
    {SIP_MLNAME_CAST(sipName_KeyGetLeftAuto), meth_FbxAnimCurve_KeyGetLeftAuto, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxAnimCurve_KeyGetLeftAuto)},
    {SIP_MLNAME_CAST(sipName_KeyGetLeftDerivative), meth_FbxAnimCurve_KeyGetLeftDerivative, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxAnimCurve_KeyGetLeftDerivative)},
    {SIP_MLNAME_CAST(sipName_KeyGetLeftDerivativeInfo), meth_FbxAnimCurve_KeyGetLeftDerivativeInfo, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxAnimCurve_KeyGetLeftDerivativeInfo)},
    {SIP_MLNAME_CAST(sipName_KeyGetLeftTangentVelocity), meth_FbxAnimCurve_KeyGetLeftTangentVelocity, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxAnimCurve_KeyGetLeftTangentVelocity)},
    {SIP_MLNAME_CAST(sipName_KeyGetLeftTangentWeight), meth_FbxAnimCurve_KeyGetLeftTangentWeight, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxAnimCurve_KeyGetLeftTangentWeight)},
    {SIP_MLNAME_CAST(sipName_KeyGetRightAuto), meth_FbxAnimCurve_KeyGetRightAuto, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxAnimCurve_KeyGetRightAuto)},
    {SIP_MLNAME_CAST(sipName_KeyGetRightDerivative), meth_FbxAnimCurve_KeyGetRightDerivative, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxAnimCurve_KeyGetRightDerivative)},
    {SIP_MLNAME_CAST(sipName_KeyGetRightDerivativeInfo), meth_FbxAnimCurve_KeyGetRightDerivativeInfo, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxAnimCurve_KeyGetRightDerivativeInfo)},
    {SIP_MLNAME_CAST(sipName_KeyGetRightTangentVelocity), meth_FbxAnimCurve_KeyGetRightTangentVelocity, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxAnimCurve_KeyGetRightTangentVelocity)},
    {SIP_MLNAME_CAST(sipName_KeyGetRightTangentWeight), meth_FbxAnimCurve_KeyGetRightTangentWeight, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxAnimCurve_KeyGetRightTangentWeight)},
    {SIP_MLNAME_CAST(sipName_KeyGetTangentMode), meth_FbxAnimCurve_KeyGetTangentMode, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxAnimCurve_KeyGetTangentMode)},
    {SIP_MLNAME_CAST(sipName_KeyGetTime), meth_FbxAnimCurve_KeyGetTime, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxAnimCurve_KeyGetTime)},
    {SIP_MLNAME_CAST(sipName_KeyGetValue), meth_FbxAnimCurve_KeyGetValue, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxAnimCurve_KeyGetValue)},
    {SIP_MLNAME_CAST(sipName_KeyIncValue), meth_FbxAnimCurve_KeyIncValue, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxAnimCurve_KeyIncValue)},
    {SIP_MLNAME_CAST(sipName_KeyInsert), meth_FbxAnimCurve_KeyInsert, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxAnimCurve_KeyInsert)},
    {SIP_MLNAME_CAST(sipName_KeyIsLeftTangentWeighted), meth_FbxAnimCurve_KeyIsLeftTangentWeighted, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxAnimCurve_KeyIsLeftTangentWeighted)},
    {SIP_MLNAME_CAST(sipName_KeyIsRightTangentWeighted), meth_FbxAnimCurve_KeyIsRightTangentWeighted, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxAnimCurve_KeyIsRightTangentWeighted)},
    {SIP_MLNAME_CAST(sipName_KeyModifyBegin), meth_FbxAnimCurve_KeyModifyBegin, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxAnimCurve_KeyModifyBegin)},
    {SIP_MLNAME_CAST(sipName_KeyModifyEnd), meth_FbxAnimCurve_KeyModifyEnd, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxAnimCurve_KeyModifyEnd)},
    {SIP_MLNAME_CAST(sipName_KeyMultTangent), meth_FbxAnimCurve_KeyMultTangent, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxAnimCurve_KeyMultTangent)},
    {SIP_MLNAME_CAST(sipName_KeyMultValue), meth_FbxAnimCurve_KeyMultValue, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxAnimCurve_KeyMultValue)},
    {SIP_MLNAME_CAST(sipName_KeyRemove), meth_FbxAnimCurve_KeyRemove, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxAnimCurve_KeyRemove)},
    {SIP_MLNAME_CAST(sipName_KeyScaleValue), meth_FbxAnimCurve_KeyScaleValue, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxAnimCurve_KeyScaleValue)},
    {SIP_MLNAME_CAST(sipName_KeyScaleValueAndTangent), meth_FbxAnimCurve_KeyScaleValueAndTangent, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxAnimCurve_KeyScaleValueAndTangent)},
    {SIP_MLNAME_CAST(sipName_KeySet), meth_FbxAnimCurve_KeySet, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxAnimCurve_KeySet)},
    {SIP_MLNAME_CAST(sipName_KeySetBreak), meth_FbxAnimCurve_KeySetBreak, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxAnimCurve_KeySetBreak)},
    {SIP_MLNAME_CAST(sipName_KeySetConstantMode), meth_FbxAnimCurve_KeySetConstantMode, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxAnimCurve_KeySetConstantMode)},
    {SIP_MLNAME_CAST(sipName_KeySetInterpolation), meth_FbxAnimCurve_KeySetInterpolation, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxAnimCurve_KeySetInterpolation)},
    {SIP_MLNAME_CAST(sipName_KeySetLeftDerivative), meth_FbxAnimCurve_KeySetLeftDerivative, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxAnimCurve_KeySetLeftDerivative)},
    {SIP_MLNAME_CAST(sipName_KeySetLeftDerivativeInfo), meth_FbxAnimCurve_KeySetLeftDerivativeInfo, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxAnimCurve_KeySetLeftDerivativeInfo)},
    {SIP_MLNAME_CAST(sipName_KeySetLeftTangentWeight), meth_FbxAnimCurve_KeySetLeftTangentWeight, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxAnimCurve_KeySetLeftTangentWeight)},
    {SIP_MLNAME_CAST(sipName_KeySetRightDerivative), meth_FbxAnimCurve_KeySetRightDerivative, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxAnimCurve_KeySetRightDerivative)},
    {SIP_MLNAME_CAST(sipName_KeySetRightDerivativeInfo), meth_FbxAnimCurve_KeySetRightDerivativeInfo, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxAnimCurve_KeySetRightDerivativeInfo)},
    {SIP_MLNAME_CAST(sipName_KeySetRightTangentWeight), meth_FbxAnimCurve_KeySetRightTangentWeight, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxAnimCurve_KeySetRightTangentWeight)},
    {SIP_MLNAME_CAST(sipName_KeySetTCB), meth_FbxAnimCurve_KeySetTCB, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxAnimCurve_KeySetTCB)},
    {SIP_MLNAME_CAST(sipName_KeySetTangentMode), meth_FbxAnimCurve_KeySetTangentMode, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxAnimCurve_KeySetTangentMode)},
    {SIP_MLNAME_CAST(sipName_KeySetTime), meth_FbxAnimCurve_KeySetTime, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxAnimCurve_KeySetTime)},
    {SIP_MLNAME_CAST(sipName_KeySetValue), meth_FbxAnimCurve_KeySetValue, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxAnimCurve_KeySetValue)},
    {SIP_MLNAME_CAST(sipName_ResizeKeyBuffer), meth_FbxAnimCurve_ResizeKeyBuffer, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxAnimCurve_ResizeKeyBuffer)}
};


extern "C" {static PyObject *varget_FbxAnimCurve_ClassId(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxAnimCurve_ClassId(void *, PyObject *, PyObject *)
{
     ::FbxClassId*sipVal;

    sipVal = & ::FbxAnimCurve::ClassId;

    return sipConvertFromType(sipVal, sipType_FbxClassId, NULL);
}


extern "C" {static int varset_FbxAnimCurve_ClassId(void *, PyObject *, PyObject *);}
static int varset_FbxAnimCurve_ClassId(void *, PyObject *sipPy, PyObject *)
{
     ::FbxClassId*sipVal;
    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxClassId *>(sipForceConvertToType(sipPy,sipType_FbxClassId,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

     ::FbxAnimCurve::ClassId = *sipVal;

    return 0;
}

sipVariableDef variables_FbxAnimCurve[] = {
    {ClassVariable, sipName_ClassId, (PyMethodDef *)varget_FbxAnimCurve_ClassId, (PyMethodDef *)varset_FbxAnimCurve_ClassId, NULL, NULL},
};


sipClassTypeDef sipTypeDef_fbx_FbxAnimCurve = {
    {
        -1,
        0,
        0,
        SIP_TYPE_ABSTRACT|SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_FbxAnimCurve,
        {0},
        0
    },
    {
        sipNameNr_FbxAnimCurve,
        {0, 0, 1},
        55, methods_FbxAnimCurve,
        0, 0,
        1, variables_FbxAnimCurve,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    0,
    -1,
    -1,
    supers_FbxAnimCurve,
    slots_FbxAnimCurve,
    0,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    0,
    0,
    0,
    0,
    release_FbxAnimCurve,
    cast_FbxAnimCurve,
    0,
    0,
    0,
    0,
    0,
    0
};
