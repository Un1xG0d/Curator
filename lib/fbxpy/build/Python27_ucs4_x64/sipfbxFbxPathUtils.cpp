/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.3
 *
 * Copyright (C) 2009 Autodesk, Inc. and/or its licensors.
 * All Rights Reserved.
 * 
 * The coded instructions, statements, computer programs, and/or related material 
 * (collectively the "Data") in these files contain unpublished information 
 * proprietary to Autodesk, Inc. and/or its licensors, which is protected by 
 * Canada and United States of America federal copyright law and by international 
 * treaties. 
 * 
 * The Data may not be disclosed or distributed to third parties, in whole or in
 * part, without the prior written consent of Autodesk, Inc. ("Autodesk").
 * 
 * THE DATA IS PROVIDED "AS IS" AND WITHOUT WARRANTY.
 * ALL WARRANTIES ARE EXPRESSLY EXCLUDED AND DISCLAIMED. AUTODESK MAKES NO
 * WARRANTY OF ANY KIND WITH RESPECT TO THE DATA, EXPRESS, IMPLIED OR ARISING
 * BY CUSTOM OR TRADE USAGE, AND DISCLAIMS ANY IMPLIED WARRANTIES OF TITLE, 
 * NON-INFRINGEMENT, MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE OR USE. 
 * WITHOUT LIMITING THE FOREGOING, AUTODESK DOES NOT WARRANT THAT THE OPERATION
 * OF THE DATA WILL BE UNINTERRUPTED OR ERROR FREE. 
 * 
 * IN NO EVENT SHALL AUTODESK, ITS AFFILIATES, PARENT COMPANIES, LICENSORS
 * OR SUPPLIERS ("AUTODESK GROUP") BE LIABLE FOR ANY LOSSES, DAMAGES OR EXPENSES
 * OF ANY KIND (INCLUDING WITHOUT LIMITATION PUNITIVE OR MULTIPLE DAMAGES OR OTHER
 * SPECIAL, DIRECT, INDIRECT, EXEMPLARY, INCIDENTAL, LOSS OF PROFITS, REVENUE
 * OR DATA, COST OF COVER OR CONSEQUENTIAL LOSSES OR DAMAGES OF ANY KIND),
 * HOWEVER CAUSED, AND REGARDLESS OF THE THEORY OF LIABILITY, WHETHER DERIVED
 * FROM CONTRACT, TORT (INCLUDING, BUT NOT LIMITED TO, NEGLIGENCE), OR OTHERWISE,
 * ARISING OUT OF OR RELATING TO THE DATA OR ITS USE OR ANY OTHER PERFORMANCE,
 * WHETHER OR NOT AUTODESK HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH LOSS
 * OR DAMAGE. 
 */

#include "sipAPIfbx.h"




PyDoc_STRVAR(doc_FbxPathUtils_Bind, "Bind(str, str, bool = True) -> FbxString");

extern "C" {static PyObject *meth_FbxPathUtils_Bind(PyObject *, PyObject *);}
static PyObject *meth_FbxPathUtils_Bind(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const char* a0;
        PyObject *a0Keep;
        const char* a1;
        PyObject *a1Keep;
        bool a2 = 1;

        if (sipParseArgs(&sipParseErr, sipArgs, "A8A8|b", &a0Keep, &a0, &a1Keep, &a1, &a2))
        {
             ::FbxString*sipRes;

            sipRes = new  ::FbxString( ::FbxPathUtils::Bind(a0,a1,a2));
            Py_DECREF(a0Keep);
            Py_DECREF(a1Keep);

            return sipConvertFromNewType(sipRes,sipType_FbxString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxPathUtils, sipName_Bind, doc_FbxPathUtils_Bind);

    return NULL;
}


PyDoc_STRVAR(doc_FbxPathUtils_GetFolderName, "GetFolderName(str) -> FbxString");

extern "C" {static PyObject *meth_FbxPathUtils_GetFolderName(PyObject *, PyObject *);}
static PyObject *meth_FbxPathUtils_GetFolderName(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const char* a0;
        PyObject *a0Keep;

        if (sipParseArgs(&sipParseErr, sipArgs, "A8", &a0Keep, &a0))
        {
             ::FbxString*sipRes;

            sipRes = new  ::FbxString( ::FbxPathUtils::GetFolderName(a0));
            Py_DECREF(a0Keep);

            return sipConvertFromNewType(sipRes,sipType_FbxString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxPathUtils, sipName_GetFolderName, doc_FbxPathUtils_GetFolderName);

    return NULL;
}


PyDoc_STRVAR(doc_FbxPathUtils_GetFileName, "GetFileName(str, bool = True) -> FbxString");

extern "C" {static PyObject *meth_FbxPathUtils_GetFileName(PyObject *, PyObject *);}
static PyObject *meth_FbxPathUtils_GetFileName(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const char* a0;
        PyObject *a0Keep;
        bool a1 = 1;

        if (sipParseArgs(&sipParseErr, sipArgs, "A8|b", &a0Keep, &a0, &a1))
        {
             ::FbxString*sipRes;

            sipRes = new  ::FbxString( ::FbxPathUtils::GetFileName(a0,a1));
            Py_DECREF(a0Keep);

            return sipConvertFromNewType(sipRes,sipType_FbxString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxPathUtils, sipName_GetFileName, doc_FbxPathUtils_GetFileName);

    return NULL;
}


PyDoc_STRVAR(doc_FbxPathUtils_GetExtensionName, "GetExtensionName(str) -> FbxString");

extern "C" {static PyObject *meth_FbxPathUtils_GetExtensionName(PyObject *, PyObject *);}
static PyObject *meth_FbxPathUtils_GetExtensionName(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const char* a0;
        PyObject *a0Keep;

        if (sipParseArgs(&sipParseErr, sipArgs, "A8", &a0Keep, &a0))
        {
             ::FbxString*sipRes;

            sipRes = new  ::FbxString( ::FbxPathUtils::GetExtensionName(a0));
            Py_DECREF(a0Keep);

            return sipConvertFromNewType(sipRes,sipType_FbxString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxPathUtils, sipName_GetExtensionName, doc_FbxPathUtils_GetExtensionName);

    return NULL;
}


PyDoc_STRVAR(doc_FbxPathUtils_ChangeExtension, "ChangeExtension(str, str) -> FbxString");

extern "C" {static PyObject *meth_FbxPathUtils_ChangeExtension(PyObject *, PyObject *);}
static PyObject *meth_FbxPathUtils_ChangeExtension(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const char* a0;
        PyObject *a0Keep;
        const char* a1;
        PyObject *a1Keep;

        if (sipParseArgs(&sipParseErr, sipArgs, "A8A8", &a0Keep, &a0, &a1Keep, &a1))
        {
             ::FbxString*sipRes;

            sipRes = new  ::FbxString( ::FbxPathUtils::ChangeExtension(a0,a1));
            Py_DECREF(a0Keep);
            Py_DECREF(a1Keep);

            return sipConvertFromNewType(sipRes,sipType_FbxString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxPathUtils, sipName_ChangeExtension, doc_FbxPathUtils_ChangeExtension);

    return NULL;
}


PyDoc_STRVAR(doc_FbxPathUtils_IsRelative, "IsRelative(str) -> bool");

extern "C" {static PyObject *meth_FbxPathUtils_IsRelative(PyObject *, PyObject *);}
static PyObject *meth_FbxPathUtils_IsRelative(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const char* a0;
        PyObject *a0Keep;

        if (sipParseArgs(&sipParseErr, sipArgs, "A8", &a0Keep, &a0))
        {
            bool sipRes;

            sipRes =  ::FbxPathUtils::IsRelative(a0);
            Py_DECREF(a0Keep);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxPathUtils, sipName_IsRelative, doc_FbxPathUtils_IsRelative);

    return NULL;
}


PyDoc_STRVAR(doc_FbxPathUtils_GetRelativePath, "GetRelativePath(str, str) -> FbxString");

extern "C" {static PyObject *meth_FbxPathUtils_GetRelativePath(PyObject *, PyObject *);}
static PyObject *meth_FbxPathUtils_GetRelativePath(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const char* a0;
        PyObject *a0Keep;
        const char* a1;
        PyObject *a1Keep;

        if (sipParseArgs(&sipParseErr, sipArgs, "A8A8", &a0Keep, &a0, &a1Keep, &a1))
        {
             ::FbxString*sipRes;

            sipRes = new  ::FbxString( ::FbxPathUtils::GetRelativePath(a0,a1));
            Py_DECREF(a0Keep);
            Py_DECREF(a1Keep);

            return sipConvertFromNewType(sipRes,sipType_FbxString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxPathUtils, sipName_GetRelativePath, doc_FbxPathUtils_GetRelativePath);

    return NULL;
}


PyDoc_STRVAR(doc_FbxPathUtils_GetRelativeFilePath, "GetRelativeFilePath(str, str) -> FbxString");

extern "C" {static PyObject *meth_FbxPathUtils_GetRelativeFilePath(PyObject *, PyObject *);}
static PyObject *meth_FbxPathUtils_GetRelativeFilePath(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const char* a0;
        PyObject *a0Keep;
        const char* a1;
        PyObject *a1Keep;

        if (sipParseArgs(&sipParseErr, sipArgs, "A8A8", &a0Keep, &a0, &a1Keep, &a1))
        {
             ::FbxString*sipRes;

            sipRes = new  ::FbxString( ::FbxPathUtils::GetRelativeFilePath(a0,a1));
            Py_DECREF(a0Keep);
            Py_DECREF(a1Keep);

            return sipConvertFromNewType(sipRes,sipType_FbxString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxPathUtils, sipName_GetRelativeFilePath, doc_FbxPathUtils_GetRelativeFilePath);

    return NULL;
}


PyDoc_STRVAR(doc_FbxPathUtils_Resolve, "Resolve(str) -> FbxString");

extern "C" {static PyObject *meth_FbxPathUtils_Resolve(PyObject *, PyObject *);}
static PyObject *meth_FbxPathUtils_Resolve(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const char* a0;
        PyObject *a0Keep;

        if (sipParseArgs(&sipParseErr, sipArgs, "A8", &a0Keep, &a0))
        {
             ::FbxString*sipRes;

            sipRes = new  ::FbxString( ::FbxPathUtils::Resolve(a0));
            Py_DECREF(a0Keep);

            return sipConvertFromNewType(sipRes,sipType_FbxString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxPathUtils, sipName_Resolve, doc_FbxPathUtils_Resolve);

    return NULL;
}


PyDoc_STRVAR(doc_FbxPathUtils_Clean, "Clean(str) -> FbxString");

extern "C" {static PyObject *meth_FbxPathUtils_Clean(PyObject *, PyObject *);}
static PyObject *meth_FbxPathUtils_Clean(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const char* a0;
        PyObject *a0Keep;

        if (sipParseArgs(&sipParseErr, sipArgs, "A8", &a0Keep, &a0))
        {
             ::FbxString*sipRes;

            sipRes = new  ::FbxString( ::FbxPathUtils::Clean(a0));
            Py_DECREF(a0Keep);

            return sipConvertFromNewType(sipRes,sipType_FbxString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxPathUtils, sipName_Clean, doc_FbxPathUtils_Clean);

    return NULL;
}


PyDoc_STRVAR(doc_FbxPathUtils_GenerateFileName, "GenerateFileName(str, str) -> FbxString");

extern "C" {static PyObject *meth_FbxPathUtils_GenerateFileName(PyObject *, PyObject *);}
static PyObject *meth_FbxPathUtils_GenerateFileName(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const char* a0;
        PyObject *a0Keep;
        const char* a1;
        PyObject *a1Keep;

        if (sipParseArgs(&sipParseErr, sipArgs, "A8A8", &a0Keep, &a0, &a1Keep, &a1))
        {
             ::FbxString*sipRes;

            sipRes = new  ::FbxString( ::FbxPathUtils::GenerateFileName(a0,a1));
            Py_DECREF(a0Keep);
            Py_DECREF(a1Keep);

            return sipConvertFromNewType(sipRes,sipType_FbxString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxPathUtils, sipName_GenerateFileName, doc_FbxPathUtils_GenerateFileName);

    return NULL;
}


PyDoc_STRVAR(doc_FbxPathUtils_Exist, "Exist(str) -> bool");

extern "C" {static PyObject *meth_FbxPathUtils_Exist(PyObject *, PyObject *);}
static PyObject *meth_FbxPathUtils_Exist(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const char* a0;
        PyObject *a0Keep;

        if (sipParseArgs(&sipParseErr, sipArgs, "A8", &a0Keep, &a0))
        {
            bool sipRes;

            sipRes =  ::FbxPathUtils::Exist(a0);
            Py_DECREF(a0Keep);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxPathUtils, sipName_Exist, doc_FbxPathUtils_Exist);

    return NULL;
}


PyDoc_STRVAR(doc_FbxPathUtils_Create, "Create(str) -> bool");

extern "C" {static PyObject *meth_FbxPathUtils_Create(PyObject *, PyObject *);}
static PyObject *meth_FbxPathUtils_Create(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const char* a0;
        PyObject *a0Keep;

        if (sipParseArgs(&sipParseErr, sipArgs, "A8", &a0Keep, &a0))
        {
            bool sipRes;

            sipRes =  ::FbxPathUtils::Create(a0);
            Py_DECREF(a0Keep);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxPathUtils, sipName_Create, doc_FbxPathUtils_Create);

    return NULL;
}


PyDoc_STRVAR(doc_FbxPathUtils_Delete, "Delete(str) -> bool");

extern "C" {static PyObject *meth_FbxPathUtils_Delete(PyObject *, PyObject *);}
static PyObject *meth_FbxPathUtils_Delete(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const char* a0;
        PyObject *a0Keep;

        if (sipParseArgs(&sipParseErr, sipArgs, "A8", &a0Keep, &a0))
        {
            bool sipRes;

            sipRes =  ::FbxPathUtils::Delete(a0);
            Py_DECREF(a0Keep);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxPathUtils, sipName_Delete, doc_FbxPathUtils_Delete);

    return NULL;
}


PyDoc_STRVAR(doc_FbxPathUtils_IsEmpty, "IsEmpty(str) -> bool");

extern "C" {static PyObject *meth_FbxPathUtils_IsEmpty(PyObject *, PyObject *);}
static PyObject *meth_FbxPathUtils_IsEmpty(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const char* a0;
        PyObject *a0Keep;

        if (sipParseArgs(&sipParseErr, sipArgs, "A8", &a0Keep, &a0))
        {
            bool sipRes;

            sipRes =  ::FbxPathUtils::IsEmpty(a0);
            Py_DECREF(a0Keep);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxPathUtils, sipName_IsEmpty, doc_FbxPathUtils_IsEmpty);

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_FbxPathUtils(void *, int);}
static void release_FbxPathUtils(void *sipCppV, int)
{
    delete reinterpret_cast< ::FbxPathUtils *>(sipCppV);
}


extern "C" {static void assign_FbxPathUtils(void *, SIP_SSIZE_T, const void *);}
static void assign_FbxPathUtils(void *sipDst, SIP_SSIZE_T sipDstIdx, const void *sipSrc)
{
    reinterpret_cast< ::FbxPathUtils *>(sipDst)[sipDstIdx] = *reinterpret_cast<const  ::FbxPathUtils *>(sipSrc);
}


extern "C" {static void *array_FbxPathUtils(SIP_SSIZE_T);}
static void *array_FbxPathUtils(SIP_SSIZE_T sipNrElem)
{
    return new  ::FbxPathUtils[sipNrElem];
}


extern "C" {static void *copy_FbxPathUtils(const void *, SIP_SSIZE_T);}
static void *copy_FbxPathUtils(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::FbxPathUtils(reinterpret_cast<const  ::FbxPathUtils *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_FbxPathUtils(sipSimpleWrapper *);}
static void dealloc_FbxPathUtils(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_FbxPathUtils(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_FbxPathUtils(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_FbxPathUtils(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::FbxPathUtils *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            sipCpp = new  ::FbxPathUtils();

            return sipCpp;
        }
    }

    {
        const  ::FbxPathUtils* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_FbxPathUtils, &a0))
        {
            sipCpp = new  ::FbxPathUtils(*a0);

            return sipCpp;
        }
    }

    return NULL;
}


static PyMethodDef methods_FbxPathUtils[] = {
    {SIP_MLNAME_CAST(sipName_Bind), meth_FbxPathUtils_Bind, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxPathUtils_Bind)},
    {SIP_MLNAME_CAST(sipName_ChangeExtension), meth_FbxPathUtils_ChangeExtension, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxPathUtils_ChangeExtension)},
    {SIP_MLNAME_CAST(sipName_Clean), meth_FbxPathUtils_Clean, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxPathUtils_Clean)},
    {SIP_MLNAME_CAST(sipName_Create), meth_FbxPathUtils_Create, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxPathUtils_Create)},
    {SIP_MLNAME_CAST(sipName_Delete), meth_FbxPathUtils_Delete, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxPathUtils_Delete)},
    {SIP_MLNAME_CAST(sipName_Exist), meth_FbxPathUtils_Exist, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxPathUtils_Exist)},
    {SIP_MLNAME_CAST(sipName_GenerateFileName), meth_FbxPathUtils_GenerateFileName, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxPathUtils_GenerateFileName)},
    {SIP_MLNAME_CAST(sipName_GetExtensionName), meth_FbxPathUtils_GetExtensionName, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxPathUtils_GetExtensionName)},
    {SIP_MLNAME_CAST(sipName_GetFileName), meth_FbxPathUtils_GetFileName, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxPathUtils_GetFileName)},
    {SIP_MLNAME_CAST(sipName_GetFolderName), meth_FbxPathUtils_GetFolderName, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxPathUtils_GetFolderName)},
    {SIP_MLNAME_CAST(sipName_GetRelativeFilePath), meth_FbxPathUtils_GetRelativeFilePath, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxPathUtils_GetRelativeFilePath)},
    {SIP_MLNAME_CAST(sipName_GetRelativePath), meth_FbxPathUtils_GetRelativePath, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxPathUtils_GetRelativePath)},
    {SIP_MLNAME_CAST(sipName_IsEmpty), meth_FbxPathUtils_IsEmpty, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxPathUtils_IsEmpty)},
    {SIP_MLNAME_CAST(sipName_IsRelative), meth_FbxPathUtils_IsRelative, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxPathUtils_IsRelative)},
    {SIP_MLNAME_CAST(sipName_Resolve), meth_FbxPathUtils_Resolve, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxPathUtils_Resolve)}
};

PyDoc_STRVAR(doc_FbxPathUtils, "\1FbxPathUtils()\n"
    "FbxPathUtils(FbxPathUtils)");


sipClassTypeDef sipTypeDef_fbx_FbxPathUtils = {
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_FbxPathUtils,
        {0},
        0
    },
    {
        sipNameNr_FbxPathUtils,
        {0, 0, 1},
        15, methods_FbxPathUtils,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_FbxPathUtils,
    -1,
    -1,
    0,
    0,
    init_type_FbxPathUtils,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_FbxPathUtils,
    assign_FbxPathUtils,
    array_FbxPathUtils,
    copy_FbxPathUtils,
    release_FbxPathUtils,
    0,
    0,
    0,
    0,
    0,
    0,
    0
};
