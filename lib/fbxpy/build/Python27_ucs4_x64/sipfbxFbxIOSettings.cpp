/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.3
 *
 * Copyright (C) 2009 Autodesk, Inc. and/or its licensors.
 * All Rights Reserved.
 * 
 * The coded instructions, statements, computer programs, and/or related material 
 * (collectively the "Data") in these files contain unpublished information 
 * proprietary to Autodesk, Inc. and/or its licensors, which is protected by 
 * Canada and United States of America federal copyright law and by international 
 * treaties. 
 * 
 * The Data may not be disclosed or distributed to third parties, in whole or in
 * part, without the prior written consent of Autodesk, Inc. ("Autodesk").
 * 
 * THE DATA IS PROVIDED "AS IS" AND WITHOUT WARRANTY.
 * ALL WARRANTIES ARE EXPRESSLY EXCLUDED AND DISCLAIMED. AUTODESK MAKES NO
 * WARRANTY OF ANY KIND WITH RESPECT TO THE DATA, EXPRESS, IMPLIED OR ARISING
 * BY CUSTOM OR TRADE USAGE, AND DISCLAIMS ANY IMPLIED WARRANTIES OF TITLE, 
 * NON-INFRINGEMENT, MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE OR USE. 
 * WITHOUT LIMITING THE FOREGOING, AUTODESK DOES NOT WARRANT THAT THE OPERATION
 * OF THE DATA WILL BE UNINTERRUPTED OR ERROR FREE. 
 * 
 * IN NO EVENT SHALL AUTODESK, ITS AFFILIATES, PARENT COMPANIES, LICENSORS
 * OR SUPPLIERS ("AUTODESK GROUP") BE LIABLE FOR ANY LOSSES, DAMAGES OR EXPENSES
 * OF ANY KIND (INCLUDING WITHOUT LIMITATION PUNITIVE OR MULTIPLE DAMAGES OR OTHER
 * SPECIAL, DIRECT, INDIRECT, EXEMPLARY, INCIDENTAL, LOSS OF PROFITS, REVENUE
 * OR DATA, COST OF COVER OR CONSEQUENTIAL LOSSES OR DAMAGES OF ANY KIND),
 * HOWEVER CAUSED, AND REGARDLESS OF THE THEORY OF LIABILITY, WHETHER DERIVED
 * FROM CONTRACT, TORT (INCLUDING, BUT NOT LIMITED TO, NEGLIGENCE), OR OTHERWISE,
 * ARISING OUT OF OR RELATING TO THE DATA OR ITS USE OR ANY OTHER PERFORMANCE,
 * WHETHER OR NOT AUTODESK HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH LOSS
 * OR DAMAGE. 
 */

#include "sipAPIfbx.h"




PyDoc_STRVAR(doc_FbxIOSettings_Create, "Create(FbxManager, str) -> FbxIOSettings\n"
    "Create(FbxObject, str) -> FbxIOSettings");

extern "C" {static PyObject *meth_FbxIOSettings_Create(PyObject *, PyObject *);}
static PyObject *meth_FbxIOSettings_Create(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxManager* a0;
        const char* a1;
        PyObject *a1Keep;

        if (sipParseArgs(&sipParseErr, sipArgs, "J8A8", sipType_FbxManager, &a0, &a1Keep, &a1))
        {
             ::FbxIOSettings*sipRes;

            sipRes =  ::FbxIOSettings::Create(a0,a1);
            Py_DECREF(a1Keep);

            return sipConvertFromType(sipRes,sipType_FbxIOSettings,NULL);
        }
    }

    {
         ::FbxObject* a0;
        const char* a1;
        PyObject *a1Keep;

        if (sipParseArgs(&sipParseErr, sipArgs, "J8A8", sipType_FbxObject, &a0, &a1Keep, &a1))
        {
             ::FbxIOSettings*sipRes;

            sipRes =  ::FbxIOSettings::Create(a0,a1);
            Py_DECREF(a1Keep);

            return sipConvertFromType(sipRes,sipType_FbxIOSettings,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxIOSettings, sipName_Create, doc_FbxIOSettings_Create);

    return NULL;
}


PyDoc_STRVAR(doc_FbxIOSettings_GetClassId, "GetClassId(self) -> FbxClassId");

extern "C" {static PyObject *meth_FbxIOSettings_GetClassId(PyObject *, PyObject *);}
static PyObject *meth_FbxIOSettings_GetClassId(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::FbxIOSettings *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxIOSettings, &sipCpp))
        {
             ::FbxClassId*sipRes;

            sipRes = new  ::FbxClassId((sipSelfWasArg ? sipCpp-> ::FbxIOSettings::GetClassId() : sipCpp->GetClassId()));

            return sipConvertFromNewType(sipRes,sipType_FbxClassId,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxIOSettings, sipName_GetClassId, doc_FbxIOSettings_GetClassId);

    return NULL;
}


PyDoc_STRVAR(doc_FbxIOSettings_AddPropertyGroup, "AddPropertyGroup(self, str, FbxDataType = FbxDataType(), str = \"\") -> FbxProperty\n"
    "AddPropertyGroup(self, FbxProperty, str, FbxDataType = FbxDataType(), str = \"\", bool = True, bool = True, bool = True) -> FbxProperty");

extern "C" {static PyObject *meth_FbxIOSettings_AddPropertyGroup(PyObject *, PyObject *);}
static PyObject *meth_FbxIOSettings_AddPropertyGroup(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const char* a0;
        PyObject *a0Keep;
        const  ::FbxDataType& a1def = FbxDataType();
        const  ::FbxDataType* a1 = &a1def;
        const char* a2 = "";
        PyObject *a2Keep = 0;
         ::FbxIOSettings *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BA8|J9A8", &sipSelf, sipType_FbxIOSettings, &sipCpp, &a0Keep, &a0, sipType_FbxDataType, &a1, &a2Keep, &a2))
        {
             ::FbxProperty*sipRes;

            sipRes = new  ::FbxProperty(sipCpp->AddPropertyGroup(a0,*a1,a2));
            Py_DECREF(a0Keep);
            Py_XDECREF(a2Keep);

            return sipConvertFromNewType(sipRes,sipType_FbxProperty,NULL);
        }
    }

    {
        const  ::FbxProperty* a0;
        const char* a1;
        PyObject *a1Keep;
        const  ::FbxDataType& a2def = FbxDataType();
        const  ::FbxDataType* a2 = &a2def;
        const char* a3 = "";
        PyObject *a3Keep = 0;
        bool a4 = 1;
        bool a5 = 1;
        bool a6 = 1;
         ::FbxIOSettings *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9A8|J9A8bbb", &sipSelf, sipType_FbxIOSettings, &sipCpp, sipType_FbxProperty, &a0, &a1Keep, &a1, sipType_FbxDataType, &a2, &a3Keep, &a3, &a4, &a5, &a6))
        {
             ::FbxProperty*sipRes;

            sipRes = new  ::FbxProperty(sipCpp->AddPropertyGroup(*a0,a1,*a2,a3,a4,a5,a6));
            Py_DECREF(a1Keep);
            Py_XDECREF(a3Keep);

            return sipConvertFromNewType(sipRes,sipType_FbxProperty,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxIOSettings, sipName_AddPropertyGroup, doc_FbxIOSettings_AddPropertyGroup);

    return NULL;
}


PyDoc_STRVAR(doc_FbxIOSettings_AddProperty, "AddProperty(self, FbxProperty, str, FbxDataType = FbxDataType(), str = \"\", sip.voidptr = None, bool = True, bool = True, bool = True) -> FbxProperty");

extern "C" {static PyObject *meth_FbxIOSettings_AddProperty(PyObject *, PyObject *);}
static PyObject *meth_FbxIOSettings_AddProperty(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::FbxProperty* a0;
        const char* a1;
        PyObject *a1Keep;
        const  ::FbxDataType& a2def = FbxDataType();
        const  ::FbxDataType* a2 = &a2def;
        const char* a3 = "";
        PyObject *a3Keep = 0;
        const void* a4 = 0;
        bool a5 = 1;
        bool a6 = 1;
        bool a7 = 1;
         ::FbxIOSettings *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9A8|J9A8vbbb", &sipSelf, sipType_FbxIOSettings, &sipCpp, sipType_FbxProperty, &a0, &a1Keep, &a1, sipType_FbxDataType, &a2, &a3Keep, &a3, &a4, &a5, &a6, &a7))
        {
             ::FbxProperty*sipRes;

            sipRes = new  ::FbxProperty(sipCpp->AddProperty(*a0,a1,*a2,a3,a4,a5,a6,a7));
            Py_DECREF(a1Keep);
            Py_XDECREF(a3Keep);

            return sipConvertFromNewType(sipRes,sipType_FbxProperty,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxIOSettings, sipName_AddProperty, doc_FbxIOSettings_AddProperty);

    return NULL;
}


PyDoc_STRVAR(doc_FbxIOSettings_AddPropertyMinMax, "AddPropertyMinMax(self, FbxProperty, str, FbxDataType = FbxDataType(), str = \"\", sip.voidptr = None, float = None, float = None, bool = True, bool = True, bool = True) -> FbxProperty");

extern "C" {static PyObject *meth_FbxIOSettings_AddPropertyMinMax(PyObject *, PyObject *);}
static PyObject *meth_FbxIOSettings_AddPropertyMinMax(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::FbxProperty* a0;
        const char* a1;
        PyObject *a1Keep;
        const  ::FbxDataType& a2def = FbxDataType();
        const  ::FbxDataType* a2 = &a2def;
        const char* a3 = "";
        PyObject *a3Keep = 0;
        const void* a4 = 0;
        double a5 = 0;
        double a6 = 0;
        bool a7 = 1;
        bool a8 = 1;
        bool a9 = 1;
         ::FbxIOSettings *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9A8|J9A8vddbbb", &sipSelf, sipType_FbxIOSettings, &sipCpp, sipType_FbxProperty, &a0, &a1Keep, &a1, sipType_FbxDataType, &a2, &a3Keep, &a3, &a4, &a5, &a6, &a7, &a8, &a9))
        {
             ::FbxProperty*sipRes;

            sipRes = new  ::FbxProperty(sipCpp->AddPropertyMinMax(*a0,a1,*a2,a3,a4,&a5,&a6,a7,a8,a9));
            Py_DECREF(a1Keep);
            Py_XDECREF(a3Keep);

            return sipConvertFromNewType(sipRes,sipType_FbxProperty,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxIOSettings, sipName_AddPropertyMinMax, doc_FbxIOSettings_AddPropertyMinMax);

    return NULL;
}


PyDoc_STRVAR(doc_FbxIOSettings_GetProperty, "GetProperty(self, str) -> FbxProperty\n"
    "GetProperty(self, FbxProperty, str) -> FbxProperty");

extern "C" {static PyObject *meth_FbxIOSettings_GetProperty(PyObject *, PyObject *);}
static PyObject *meth_FbxIOSettings_GetProperty(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const char* a0;
        PyObject *a0Keep;
         ::FbxIOSettings *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BA8", &sipSelf, sipType_FbxIOSettings, &sipCpp, &a0Keep, &a0))
        {
             ::FbxProperty*sipRes;

            sipRes = new  ::FbxProperty(sipCpp->GetProperty(a0));
            Py_DECREF(a0Keep);

            return sipConvertFromNewType(sipRes,sipType_FbxProperty,NULL);
        }
    }

    {
        const  ::FbxProperty* a0;
        const char* a1;
        PyObject *a1Keep;
         ::FbxIOSettings *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9A8", &sipSelf, sipType_FbxIOSettings, &sipCpp, sipType_FbxProperty, &a0, &a1Keep, &a1))
        {
             ::FbxProperty*sipRes;

            sipRes = new  ::FbxProperty(sipCpp->GetProperty(*a0,a1));
            Py_DECREF(a1Keep);

            return sipConvertFromNewType(sipRes,sipType_FbxProperty,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxIOSettings, sipName_GetProperty, doc_FbxIOSettings_GetProperty);

    return NULL;
}


PyDoc_STRVAR(doc_FbxIOSettings_GetBoolProp, "GetBoolProp(self, str, bool) -> bool");

extern "C" {static PyObject *meth_FbxIOSettings_GetBoolProp(PyObject *, PyObject *);}
static PyObject *meth_FbxIOSettings_GetBoolProp(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const char* a0;
        PyObject *a0Keep;
        bool a1;
         ::FbxIOSettings *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BA8b", &sipSelf, sipType_FbxIOSettings, &sipCpp, &a0Keep, &a0, &a1))
        {
            bool sipRes;

            sipRes = sipCpp->GetBoolProp(a0,a1);
            Py_DECREF(a0Keep);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxIOSettings, sipName_GetBoolProp, doc_FbxIOSettings_GetBoolProp);

    return NULL;
}


PyDoc_STRVAR(doc_FbxIOSettings_SetBoolProp, "SetBoolProp(self, str, bool)");

extern "C" {static PyObject *meth_FbxIOSettings_SetBoolProp(PyObject *, PyObject *);}
static PyObject *meth_FbxIOSettings_SetBoolProp(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const char* a0;
        PyObject *a0Keep;
        bool a1;
         ::FbxIOSettings *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BA8b", &sipSelf, sipType_FbxIOSettings, &sipCpp, &a0Keep, &a0, &a1))
        {
            sipCpp->SetBoolProp(a0,a1);
            Py_DECREF(a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxIOSettings, sipName_SetBoolProp, doc_FbxIOSettings_SetBoolProp);

    return NULL;
}


PyDoc_STRVAR(doc_FbxIOSettings_GetDoubleProp, "GetDoubleProp(self, str, float) -> float");

extern "C" {static PyObject *meth_FbxIOSettings_GetDoubleProp(PyObject *, PyObject *);}
static PyObject *meth_FbxIOSettings_GetDoubleProp(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const char* a0;
        PyObject *a0Keep;
        double a1;
         ::FbxIOSettings *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BA8d", &sipSelf, sipType_FbxIOSettings, &sipCpp, &a0Keep, &a0, &a1))
        {
            double sipRes;

            sipRes = sipCpp->GetDoubleProp(a0,a1);
            Py_DECREF(a0Keep);

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxIOSettings, sipName_GetDoubleProp, doc_FbxIOSettings_GetDoubleProp);

    return NULL;
}


PyDoc_STRVAR(doc_FbxIOSettings_SetDoubleProp, "SetDoubleProp(self, str, float)");

extern "C" {static PyObject *meth_FbxIOSettings_SetDoubleProp(PyObject *, PyObject *);}
static PyObject *meth_FbxIOSettings_SetDoubleProp(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const char* a0;
        PyObject *a0Keep;
        double a1;
         ::FbxIOSettings *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BA8d", &sipSelf, sipType_FbxIOSettings, &sipCpp, &a0Keep, &a0, &a1))
        {
            sipCpp->SetDoubleProp(a0,a1);
            Py_DECREF(a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxIOSettings, sipName_SetDoubleProp, doc_FbxIOSettings_SetDoubleProp);

    return NULL;
}


PyDoc_STRVAR(doc_FbxIOSettings_GetIntProp, "GetIntProp(self, str, int) -> int");

extern "C" {static PyObject *meth_FbxIOSettings_GetIntProp(PyObject *, PyObject *);}
static PyObject *meth_FbxIOSettings_GetIntProp(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const char* a0;
        PyObject *a0Keep;
        int a1;
         ::FbxIOSettings *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BA8i", &sipSelf, sipType_FbxIOSettings, &sipCpp, &a0Keep, &a0, &a1))
        {
            int sipRes;

            sipRes = sipCpp->GetIntProp(a0,a1);
            Py_DECREF(a0Keep);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxIOSettings, sipName_GetIntProp, doc_FbxIOSettings_GetIntProp);

    return NULL;
}


PyDoc_STRVAR(doc_FbxIOSettings_SetIntProp, "SetIntProp(self, str, int)");

extern "C" {static PyObject *meth_FbxIOSettings_SetIntProp(PyObject *, PyObject *);}
static PyObject *meth_FbxIOSettings_SetIntProp(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const char* a0;
        PyObject *a0Keep;
        int a1;
         ::FbxIOSettings *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BA8i", &sipSelf, sipType_FbxIOSettings, &sipCpp, &a0Keep, &a0, &a1))
        {
            sipCpp->SetIntProp(a0,a1);
            Py_DECREF(a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxIOSettings, sipName_SetIntProp, doc_FbxIOSettings_SetIntProp);

    return NULL;
}


PyDoc_STRVAR(doc_FbxIOSettings_GetTimeProp, "GetTimeProp(self, str, FbxTime) -> FbxTime");

extern "C" {static PyObject *meth_FbxIOSettings_GetTimeProp(PyObject *, PyObject *);}
static PyObject *meth_FbxIOSettings_GetTimeProp(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const char* a0;
        PyObject *a0Keep;
         ::FbxTime* a1;
         ::FbxIOSettings *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BA8J9", &sipSelf, sipType_FbxIOSettings, &sipCpp, &a0Keep, &a0, sipType_FbxTime, &a1))
        {
             ::FbxTime*sipRes;

            sipRes = new  ::FbxTime(sipCpp->GetTimeProp(a0,*a1));
            Py_DECREF(a0Keep);

            return sipConvertFromNewType(sipRes,sipType_FbxTime,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxIOSettings, sipName_GetTimeProp, doc_FbxIOSettings_GetTimeProp);

    return NULL;
}


PyDoc_STRVAR(doc_FbxIOSettings_SetTimeProp, "SetTimeProp(self, str, FbxTime)");

extern "C" {static PyObject *meth_FbxIOSettings_SetTimeProp(PyObject *, PyObject *);}
static PyObject *meth_FbxIOSettings_SetTimeProp(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const char* a0;
        PyObject *a0Keep;
         ::FbxTime* a1;
         ::FbxIOSettings *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BA8J9", &sipSelf, sipType_FbxIOSettings, &sipCpp, &a0Keep, &a0, sipType_FbxTime, &a1))
        {
            sipCpp->SetTimeProp(a0,*a1);
            Py_DECREF(a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxIOSettings, sipName_SetTimeProp, doc_FbxIOSettings_SetTimeProp);

    return NULL;
}


PyDoc_STRVAR(doc_FbxIOSettings_GetEnumProp, "GetEnumProp(self, str, FbxString) -> FbxString\n"
    "GetEnumProp(self, str, int) -> int");

extern "C" {static PyObject *meth_FbxIOSettings_GetEnumProp(PyObject *, PyObject *);}
static PyObject *meth_FbxIOSettings_GetEnumProp(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const char* a0;
        PyObject *a0Keep;
         ::FbxString* a1;
        int a1State = 0;
         ::FbxIOSettings *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BA8J1", &sipSelf, sipType_FbxIOSettings, &sipCpp, &a0Keep, &a0, sipType_FbxString, &a1, &a1State))
        {
             ::FbxString*sipRes;

            sipRes = new  ::FbxString(sipCpp->GetEnumProp(a0,*a1));
            Py_DECREF(a0Keep);
            sipReleaseType(a1,sipType_FbxString,a1State);

            return sipConvertFromNewType(sipRes,sipType_FbxString,NULL);
        }
    }

    {
        const char* a0;
        PyObject *a0Keep;
        int a1;
         ::FbxIOSettings *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BA8i", &sipSelf, sipType_FbxIOSettings, &sipCpp, &a0Keep, &a0, &a1))
        {
            int sipRes;

            sipRes = sipCpp->GetEnumProp(a0,a1);
            Py_DECREF(a0Keep);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxIOSettings, sipName_GetEnumProp, doc_FbxIOSettings_GetEnumProp);

    return NULL;
}


PyDoc_STRVAR(doc_FbxIOSettings_GetEnumIndex, "GetEnumIndex(self, str, FbxString) -> int\n"
    "GetEnumIndex(self, FbxProperty, FbxString, bool = False) -> int");

extern "C" {static PyObject *meth_FbxIOSettings_GetEnumIndex(PyObject *, PyObject *);}
static PyObject *meth_FbxIOSettings_GetEnumIndex(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const char* a0;
        PyObject *a0Keep;
         ::FbxString* a1;
        int a1State = 0;
         ::FbxIOSettings *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BA8J1", &sipSelf, sipType_FbxIOSettings, &sipCpp, &a0Keep, &a0, sipType_FbxString, &a1, &a1State))
        {
            int sipRes;

            sipRes = sipCpp->GetEnumIndex(a0,*a1);
            Py_DECREF(a0Keep);
            sipReleaseType(a1,sipType_FbxString,a1State);

            return SIPLong_FromLong(sipRes);
        }
    }

    {
         ::FbxProperty* a0;
         ::FbxString* a1;
        int a1State = 0;
        bool a2 = 0;
         ::FbxIOSettings *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9J1|b", &sipSelf, sipType_FbxIOSettings, &sipCpp, sipType_FbxProperty, &a0, sipType_FbxString, &a1, &a1State, &a2))
        {
            int sipRes;

            sipRes = sipCpp->GetEnumIndex(*a0,*a1,a2);
            sipReleaseType(a1,sipType_FbxString,a1State);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxIOSettings, sipName_GetEnumIndex, doc_FbxIOSettings_GetEnumIndex);

    return NULL;
}


PyDoc_STRVAR(doc_FbxIOSettings_SetEnumProp, "SetEnumProp(self, str, FbxString)\n"
    "SetEnumProp(self, str, int)");

extern "C" {static PyObject *meth_FbxIOSettings_SetEnumProp(PyObject *, PyObject *);}
static PyObject *meth_FbxIOSettings_SetEnumProp(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const char* a0;
        PyObject *a0Keep;
         ::FbxString* a1;
        int a1State = 0;
         ::FbxIOSettings *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BA8J1", &sipSelf, sipType_FbxIOSettings, &sipCpp, &a0Keep, &a0, sipType_FbxString, &a1, &a1State))
        {
            sipCpp->SetEnumProp(a0,*a1);
            Py_DECREF(a0Keep);
            sipReleaseType(a1,sipType_FbxString,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const char* a0;
        PyObject *a0Keep;
        int a1;
         ::FbxIOSettings *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BA8i", &sipSelf, sipType_FbxIOSettings, &sipCpp, &a0Keep, &a0, &a1))
        {
            sipCpp->SetEnumProp(a0,a1);
            Py_DECREF(a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxIOSettings, sipName_SetEnumProp, doc_FbxIOSettings_SetEnumProp);

    return NULL;
}


PyDoc_STRVAR(doc_FbxIOSettings_RemoveEnumPropValue, "RemoveEnumPropValue(self, str, FbxString)");

extern "C" {static PyObject *meth_FbxIOSettings_RemoveEnumPropValue(PyObject *, PyObject *);}
static PyObject *meth_FbxIOSettings_RemoveEnumPropValue(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const char* a0;
        PyObject *a0Keep;
         ::FbxString* a1;
        int a1State = 0;
         ::FbxIOSettings *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BA8J1", &sipSelf, sipType_FbxIOSettings, &sipCpp, &a0Keep, &a0, sipType_FbxString, &a1, &a1State))
        {
            sipCpp->RemoveEnumPropValue(a0,*a1);
            Py_DECREF(a0Keep);
            sipReleaseType(a1,sipType_FbxString,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxIOSettings, sipName_RemoveEnumPropValue, doc_FbxIOSettings_RemoveEnumPropValue);

    return NULL;
}


PyDoc_STRVAR(doc_FbxIOSettings_EmptyEnumProp, "EmptyEnumProp(self, str)");

extern "C" {static PyObject *meth_FbxIOSettings_EmptyEnumProp(PyObject *, PyObject *);}
static PyObject *meth_FbxIOSettings_EmptyEnumProp(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const char* a0;
        PyObject *a0Keep;
         ::FbxIOSettings *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BA8", &sipSelf, sipType_FbxIOSettings, &sipCpp, &a0Keep, &a0))
        {
            sipCpp->EmptyEnumProp(a0);
            Py_DECREF(a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxIOSettings, sipName_EmptyEnumProp, doc_FbxIOSettings_EmptyEnumProp);

    return NULL;
}


PyDoc_STRVAR(doc_FbxIOSettings_IsEnumExist, "IsEnumExist(self, FbxProperty, FbxString) -> bool");

extern "C" {static PyObject *meth_FbxIOSettings_IsEnumExist(PyObject *, PyObject *);}
static PyObject *meth_FbxIOSettings_IsEnumExist(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxProperty* a0;
         ::FbxString* a1;
        int a1State = 0;
         ::FbxIOSettings *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9J1", &sipSelf, sipType_FbxIOSettings, &sipCpp, sipType_FbxProperty, &a0, sipType_FbxString, &a1, &a1State))
        {
            bool sipRes;

            sipRes = sipCpp->IsEnumExist(*a0,*a1);
            sipReleaseType(a1,sipType_FbxString,a1State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxIOSettings, sipName_IsEnumExist, doc_FbxIOSettings_IsEnumExist);

    return NULL;
}


PyDoc_STRVAR(doc_FbxIOSettings_SetFlag, "SetFlag(self, str, FbxPropertyFlags.EFlags, bool) -> bool");

extern "C" {static PyObject *meth_FbxIOSettings_SetFlag(PyObject *, PyObject *);}
static PyObject *meth_FbxIOSettings_SetFlag(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const char* a0;
        PyObject *a0Keep;
         ::FbxPropertyFlags::EFlags a1;
        bool a2;
         ::FbxIOSettings *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BA8Eb", &sipSelf, sipType_FbxIOSettings, &sipCpp, &a0Keep, &a0, sipType_FbxPropertyFlags_EFlags, &a1, &a2))
        {
            bool sipRes;

            sipRes = sipCpp->SetFlag(a0,a1,a2);
            Py_DECREF(a0Keep);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxIOSettings, sipName_SetFlag, doc_FbxIOSettings_SetFlag);

    return NULL;
}


PyDoc_STRVAR(doc_FbxIOSettings_GetStringProp, "GetStringProp(self, str, FbxString) -> FbxString");

extern "C" {static PyObject *meth_FbxIOSettings_GetStringProp(PyObject *, PyObject *);}
static PyObject *meth_FbxIOSettings_GetStringProp(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const char* a0;
        PyObject *a0Keep;
         ::FbxString* a1;
        int a1State = 0;
         ::FbxIOSettings *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BA8J1", &sipSelf, sipType_FbxIOSettings, &sipCpp, &a0Keep, &a0, sipType_FbxString, &a1, &a1State))
        {
             ::FbxString*sipRes;

            sipRes = new  ::FbxString(sipCpp->GetStringProp(a0,*a1));
            Py_DECREF(a0Keep);
            sipReleaseType(a1,sipType_FbxString,a1State);

            return sipConvertFromNewType(sipRes,sipType_FbxString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxIOSettings, sipName_GetStringProp, doc_FbxIOSettings_GetStringProp);

    return NULL;
}


PyDoc_STRVAR(doc_FbxIOSettings_SetStringProp, "SetStringProp(self, str, FbxString)");

extern "C" {static PyObject *meth_FbxIOSettings_SetStringProp(PyObject *, PyObject *);}
static PyObject *meth_FbxIOSettings_SetStringProp(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const char* a0;
        PyObject *a0Keep;
         ::FbxString* a1;
        int a1State = 0;
         ::FbxIOSettings *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BA8J1", &sipSelf, sipType_FbxIOSettings, &sipCpp, &a0Keep, &a0, sipType_FbxString, &a1, &a1State))
        {
            sipCpp->SetStringProp(a0,*a1);
            Py_DECREF(a0Keep);
            sipReleaseType(a1,sipType_FbxString,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxIOSettings, sipName_SetStringProp, doc_FbxIOSettings_SetStringProp);

    return NULL;
}


PyDoc_STRVAR(doc_FbxIOSettings_ReadXMLFile, "ReadXMLFile(self, FbxString) -> bool");

extern "C" {static PyObject *meth_FbxIOSettings_ReadXMLFile(PyObject *, PyObject *);}
static PyObject *meth_FbxIOSettings_ReadXMLFile(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::FbxString* a0;
        int a0State = 0;
         ::FbxIOSettings *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_FbxIOSettings, &sipCpp, sipType_FbxString, &a0, &a0State))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::FbxIOSettings::ReadXMLFile(*a0) : sipCpp->ReadXMLFile(*a0));
            sipReleaseType(a0,sipType_FbxString,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxIOSettings, sipName_ReadXMLFile, doc_FbxIOSettings_ReadXMLFile);

    return NULL;
}


PyDoc_STRVAR(doc_FbxIOSettings_WriteXMLFile, "WriteXMLFile(self, FbxString) -> bool");

extern "C" {static PyObject *meth_FbxIOSettings_WriteXMLFile(PyObject *, PyObject *);}
static PyObject *meth_FbxIOSettings_WriteXMLFile(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::FbxString* a0;
        int a0State = 0;
         ::FbxIOSettings *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_FbxIOSettings, &sipCpp, sipType_FbxString, &a0, &a0State))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::FbxIOSettings::WriteXMLFile(*a0) : sipCpp->WriteXMLFile(*a0));
            sipReleaseType(a0,sipType_FbxString,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxIOSettings, sipName_WriteXMLFile, doc_FbxIOSettings_WriteXMLFile);

    return NULL;
}


PyDoc_STRVAR(doc_FbxIOSettings_WriteXmlPropToFile, "WriteXmlPropToFile(self, FbxString, FbxString) -> bool");

extern "C" {static PyObject *meth_FbxIOSettings_WriteXmlPropToFile(PyObject *, PyObject *);}
static PyObject *meth_FbxIOSettings_WriteXmlPropToFile(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxString* a0;
        int a0State = 0;
         ::FbxString* a1;
        int a1State = 0;
         ::FbxIOSettings *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J1", &sipSelf, sipType_FbxIOSettings, &sipCpp, sipType_FbxString, &a0, &a0State, sipType_FbxString, &a1, &a1State))
        {
            bool sipRes;

            sipRes = sipCpp->WriteXmlPropToFile(*a0,*a1);
            sipReleaseType(a0,sipType_FbxString,a0State);
            sipReleaseType(a1,sipType_FbxString,a1State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxIOSettings, sipName_WriteXmlPropToFile, doc_FbxIOSettings_WriteXmlPropToFile);

    return NULL;
}


extern "C" {static PyObject *slot_FbxIOSettings___ne__(PyObject *,PyObject *);}
static PyObject *slot_FbxIOSettings___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::FbxIOSettings *sipCpp = reinterpret_cast< ::FbxIOSettings *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_FbxIOSettings));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const  ::FbxIOSettings* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_FbxIOSettings, &a0))
        {
            bool sipRes;

            sipRes = !sipCpp-> ::FbxIOSettings::operator==(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_fbx, ne_slot, sipType_FbxIOSettings, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_FbxIOSettings___eq__(PyObject *,PyObject *);}
static PyObject *slot_FbxIOSettings___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::FbxIOSettings *sipCpp = reinterpret_cast< ::FbxIOSettings *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_FbxIOSettings));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const  ::FbxIOSettings* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_FbxIOSettings, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::FbxIOSettings::operator==(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_fbx, eq_slot, sipType_FbxIOSettings, sipSelf, sipArg);
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_FbxIOSettings(void *, const sipTypeDef *);}
static void *cast_FbxIOSettings(void *sipCppV, const sipTypeDef *targetType)
{
     ::FbxIOSettings *sipCpp = reinterpret_cast< ::FbxIOSettings *>(sipCppV);

    if (targetType == sipType_FbxObject)
        return static_cast< ::FbxObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_FbxIOSettings(void *, int);}
static void release_FbxIOSettings(void *, int)
{
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_FbxIOSettings[] = {{244, 255, 1}};


/* Define this type's Python slots. */
static sipPySlotDef slots_FbxIOSettings[] = {
    {(void *)slot_FbxIOSettings___ne__, ne_slot},
    {(void *)slot_FbxIOSettings___eq__, eq_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_FbxIOSettings[] = {
    {SIP_MLNAME_CAST(sipName_AddProperty), meth_FbxIOSettings_AddProperty, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxIOSettings_AddProperty)},
    {SIP_MLNAME_CAST(sipName_AddPropertyGroup), meth_FbxIOSettings_AddPropertyGroup, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxIOSettings_AddPropertyGroup)},
    {SIP_MLNAME_CAST(sipName_AddPropertyMinMax), meth_FbxIOSettings_AddPropertyMinMax, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxIOSettings_AddPropertyMinMax)},
    {SIP_MLNAME_CAST(sipName_Create), meth_FbxIOSettings_Create, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxIOSettings_Create)},
    {SIP_MLNAME_CAST(sipName_EmptyEnumProp), meth_FbxIOSettings_EmptyEnumProp, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxIOSettings_EmptyEnumProp)},
    {SIP_MLNAME_CAST(sipName_GetBoolProp), meth_FbxIOSettings_GetBoolProp, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxIOSettings_GetBoolProp)},
    {SIP_MLNAME_CAST(sipName_GetClassId), meth_FbxIOSettings_GetClassId, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxIOSettings_GetClassId)},
    {SIP_MLNAME_CAST(sipName_GetDoubleProp), meth_FbxIOSettings_GetDoubleProp, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxIOSettings_GetDoubleProp)},
    {SIP_MLNAME_CAST(sipName_GetEnumIndex), meth_FbxIOSettings_GetEnumIndex, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxIOSettings_GetEnumIndex)},
    {SIP_MLNAME_CAST(sipName_GetEnumProp), meth_FbxIOSettings_GetEnumProp, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxIOSettings_GetEnumProp)},
    {SIP_MLNAME_CAST(sipName_GetIntProp), meth_FbxIOSettings_GetIntProp, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxIOSettings_GetIntProp)},
    {SIP_MLNAME_CAST(sipName_GetProperty), meth_FbxIOSettings_GetProperty, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxIOSettings_GetProperty)},
    {SIP_MLNAME_CAST(sipName_GetStringProp), meth_FbxIOSettings_GetStringProp, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxIOSettings_GetStringProp)},
    {SIP_MLNAME_CAST(sipName_GetTimeProp), meth_FbxIOSettings_GetTimeProp, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxIOSettings_GetTimeProp)},
    {SIP_MLNAME_CAST(sipName_IsEnumExist), meth_FbxIOSettings_IsEnumExist, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxIOSettings_IsEnumExist)},
    {SIP_MLNAME_CAST(sipName_ReadXMLFile), meth_FbxIOSettings_ReadXMLFile, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxIOSettings_ReadXMLFile)},
    {SIP_MLNAME_CAST(sipName_RemoveEnumPropValue), meth_FbxIOSettings_RemoveEnumPropValue, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxIOSettings_RemoveEnumPropValue)},
    {SIP_MLNAME_CAST(sipName_SetBoolProp), meth_FbxIOSettings_SetBoolProp, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxIOSettings_SetBoolProp)},
    {SIP_MLNAME_CAST(sipName_SetDoubleProp), meth_FbxIOSettings_SetDoubleProp, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxIOSettings_SetDoubleProp)},
    {SIP_MLNAME_CAST(sipName_SetEnumProp), meth_FbxIOSettings_SetEnumProp, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxIOSettings_SetEnumProp)},
    {SIP_MLNAME_CAST(sipName_SetFlag), meth_FbxIOSettings_SetFlag, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxIOSettings_SetFlag)},
    {SIP_MLNAME_CAST(sipName_SetIntProp), meth_FbxIOSettings_SetIntProp, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxIOSettings_SetIntProp)},
    {SIP_MLNAME_CAST(sipName_SetStringProp), meth_FbxIOSettings_SetStringProp, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxIOSettings_SetStringProp)},
    {SIP_MLNAME_CAST(sipName_SetTimeProp), meth_FbxIOSettings_SetTimeProp, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxIOSettings_SetTimeProp)},
    {SIP_MLNAME_CAST(sipName_WriteXMLFile), meth_FbxIOSettings_WriteXMLFile, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxIOSettings_WriteXMLFile)},
    {SIP_MLNAME_CAST(sipName_WriteXmlPropToFile), meth_FbxIOSettings_WriteXmlPropToFile, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxIOSettings_WriteXmlPropToFile)}
};


extern "C" {static PyObject *varget_FbxIOSettings_ClassId(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxIOSettings_ClassId(void *, PyObject *, PyObject *)
{
     ::FbxClassId*sipVal;

    sipVal = & ::FbxIOSettings::ClassId;

    return sipConvertFromType(sipVal, sipType_FbxClassId, NULL);
}


extern "C" {static int varset_FbxIOSettings_ClassId(void *, PyObject *, PyObject *);}
static int varset_FbxIOSettings_ClassId(void *, PyObject *sipPy, PyObject *)
{
     ::FbxClassId*sipVal;
    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxClassId *>(sipForceConvertToType(sipPy,sipType_FbxClassId,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

     ::FbxIOSettings::ClassId = *sipVal;

    return 0;
}

sipVariableDef variables_FbxIOSettings[] = {
    {ClassVariable, sipName_ClassId, (PyMethodDef *)varget_FbxIOSettings_ClassId, (PyMethodDef *)varset_FbxIOSettings_ClassId, NULL, NULL},
};


sipClassTypeDef sipTypeDef_fbx_FbxIOSettings = {
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_FbxIOSettings,
        {0},
        0
    },
    {
        sipNameNr_FbxIOSettings,
        {0, 0, 1},
        26, methods_FbxIOSettings,
        0, 0,
        1, variables_FbxIOSettings,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    0,
    -1,
    -1,
    supers_FbxIOSettings,
    slots_FbxIOSettings,
    0,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    0,
    0,
    0,
    0,
    release_FbxIOSettings,
    cast_FbxIOSettings,
    0,
    0,
    0,
    0,
    0,
    0
};
