/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.3
 *
 * Copyright (C) 2009 Autodesk, Inc. and/or its licensors.
 * All Rights Reserved.
 * 
 * The coded instructions, statements, computer programs, and/or related material 
 * (collectively the "Data") in these files contain unpublished information 
 * proprietary to Autodesk, Inc. and/or its licensors, which is protected by 
 * Canada and United States of America federal copyright law and by international 
 * treaties. 
 * 
 * The Data may not be disclosed or distributed to third parties, in whole or in
 * part, without the prior written consent of Autodesk, Inc. ("Autodesk").
 * 
 * THE DATA IS PROVIDED "AS IS" AND WITHOUT WARRANTY.
 * ALL WARRANTIES ARE EXPRESSLY EXCLUDED AND DISCLAIMED. AUTODESK MAKES NO
 * WARRANTY OF ANY KIND WITH RESPECT TO THE DATA, EXPRESS, IMPLIED OR ARISING
 * BY CUSTOM OR TRADE USAGE, AND DISCLAIMS ANY IMPLIED WARRANTIES OF TITLE, 
 * NON-INFRINGEMENT, MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE OR USE. 
 * WITHOUT LIMITING THE FOREGOING, AUTODESK DOES NOT WARRANT THAT THE OPERATION
 * OF THE DATA WILL BE UNINTERRUPTED OR ERROR FREE. 
 * 
 * IN NO EVENT SHALL AUTODESK, ITS AFFILIATES, PARENT COMPANIES, LICENSORS
 * OR SUPPLIERS ("AUTODESK GROUP") BE LIABLE FOR ANY LOSSES, DAMAGES OR EXPENSES
 * OF ANY KIND (INCLUDING WITHOUT LIMITATION PUNITIVE OR MULTIPLE DAMAGES OR OTHER
 * SPECIAL, DIRECT, INDIRECT, EXEMPLARY, INCIDENTAL, LOSS OF PROFITS, REVENUE
 * OR DATA, COST OF COVER OR CONSEQUENTIAL LOSSES OR DAMAGES OF ANY KIND),
 * HOWEVER CAUSED, AND REGARDLESS OF THE THEORY OF LIABILITY, WHETHER DERIVED
 * FROM CONTRACT, TORT (INCLUDING, BUT NOT LIMITED TO, NEGLIGENCE), OR OTHERWISE,
 * ARISING OUT OF OR RELATING TO THE DATA OR ITS USE OR ANY OTHER PERFORMANCE,
 * WHETHER OR NOT AUTODESK HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH LOSS
 * OR DAMAGE. 
 */

#include "sipAPIfbx.h"




PyDoc_STRVAR(doc_FbxTimeSpan_Set, "Set(self, FbxTime, FbxTime)");

extern "C" {static PyObject *meth_FbxTimeSpan_Set(PyObject *, PyObject *);}
static PyObject *meth_FbxTimeSpan_Set(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxTime* a0;
         ::FbxTime* a1;
         ::FbxTimeSpan *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9J9", &sipSelf, sipType_FbxTimeSpan, &sipCpp, sipType_FbxTime, &a0, sipType_FbxTime, &a1))
        {
            sipCpp->Set(*a0,*a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxTimeSpan, sipName_Set, doc_FbxTimeSpan_Set);

    return NULL;
}


PyDoc_STRVAR(doc_FbxTimeSpan_SetStart, "SetStart(self, FbxTime)");

extern "C" {static PyObject *meth_FbxTimeSpan_SetStart(PyObject *, PyObject *);}
static PyObject *meth_FbxTimeSpan_SetStart(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxTime* a0;
         ::FbxTimeSpan *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_FbxTimeSpan, &sipCpp, sipType_FbxTime, &a0))
        {
            sipCpp->SetStart(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxTimeSpan, sipName_SetStart, doc_FbxTimeSpan_SetStart);

    return NULL;
}


PyDoc_STRVAR(doc_FbxTimeSpan_SetStop, "SetStop(self, FbxTime)");

extern "C" {static PyObject *meth_FbxTimeSpan_SetStop(PyObject *, PyObject *);}
static PyObject *meth_FbxTimeSpan_SetStop(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxTime* a0;
         ::FbxTimeSpan *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_FbxTimeSpan, &sipCpp, sipType_FbxTime, &a0))
        {
            sipCpp->SetStop(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxTimeSpan, sipName_SetStop, doc_FbxTimeSpan_SetStop);

    return NULL;
}


PyDoc_STRVAR(doc_FbxTimeSpan_GetStart, "GetStart(self) -> FbxTime");

extern "C" {static PyObject *meth_FbxTimeSpan_GetStart(PyObject *, PyObject *);}
static PyObject *meth_FbxTimeSpan_GetStart(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxTimeSpan *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxTimeSpan, &sipCpp))
        {
             ::FbxTime*sipRes;

            sipRes = new  ::FbxTime(sipCpp->GetStart());

            return sipConvertFromNewType(sipRes,sipType_FbxTime,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxTimeSpan, sipName_GetStart, doc_FbxTimeSpan_GetStart);

    return NULL;
}


PyDoc_STRVAR(doc_FbxTimeSpan_GetStop, "GetStop(self) -> FbxTime");

extern "C" {static PyObject *meth_FbxTimeSpan_GetStop(PyObject *, PyObject *);}
static PyObject *meth_FbxTimeSpan_GetStop(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxTimeSpan *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxTimeSpan, &sipCpp))
        {
             ::FbxTime*sipRes;

            sipRes = new  ::FbxTime(sipCpp->GetStop());

            return sipConvertFromNewType(sipRes,sipType_FbxTime,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxTimeSpan, sipName_GetStop, doc_FbxTimeSpan_GetStop);

    return NULL;
}


PyDoc_STRVAR(doc_FbxTimeSpan_GetDuration, "GetDuration(self) -> FbxTime");

extern "C" {static PyObject *meth_FbxTimeSpan_GetDuration(PyObject *, PyObject *);}
static PyObject *meth_FbxTimeSpan_GetDuration(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::FbxTimeSpan *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxTimeSpan, &sipCpp))
        {
             ::FbxTime*sipRes;

            sipRes = new  ::FbxTime(sipCpp->GetDuration());

            return sipConvertFromNewType(sipRes,sipType_FbxTime,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxTimeSpan, sipName_GetDuration, doc_FbxTimeSpan_GetDuration);

    return NULL;
}


PyDoc_STRVAR(doc_FbxTimeSpan_GetSignedDuration, "GetSignedDuration(self) -> FbxTime");

extern "C" {static PyObject *meth_FbxTimeSpan_GetSignedDuration(PyObject *, PyObject *);}
static PyObject *meth_FbxTimeSpan_GetSignedDuration(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::FbxTimeSpan *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxTimeSpan, &sipCpp))
        {
             ::FbxTime*sipRes;

            sipRes = new  ::FbxTime(sipCpp->GetSignedDuration());

            return sipConvertFromNewType(sipRes,sipType_FbxTime,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxTimeSpan, sipName_GetSignedDuration, doc_FbxTimeSpan_GetSignedDuration);

    return NULL;
}


PyDoc_STRVAR(doc_FbxTimeSpan_GetDirection, "GetDirection(self) -> int");

extern "C" {static PyObject *meth_FbxTimeSpan_GetDirection(PyObject *, PyObject *);}
static PyObject *meth_FbxTimeSpan_GetDirection(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::FbxTimeSpan *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxTimeSpan, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->GetDirection();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxTimeSpan, sipName_GetDirection, doc_FbxTimeSpan_GetDirection);

    return NULL;
}


PyDoc_STRVAR(doc_FbxTimeSpan_IsInside, "IsInside(self, FbxTime) -> bool");

extern "C" {static PyObject *meth_FbxTimeSpan_IsInside(PyObject *, PyObject *);}
static PyObject *meth_FbxTimeSpan_IsInside(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxTime* a0;
        const  ::FbxTimeSpan *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_FbxTimeSpan, &sipCpp, sipType_FbxTime, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->IsInside(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxTimeSpan, sipName_IsInside, doc_FbxTimeSpan_IsInside);

    return NULL;
}


PyDoc_STRVAR(doc_FbxTimeSpan_Intersect, "Intersect(self, FbxTimeSpan) -> FbxTimeSpan");

extern "C" {static PyObject *meth_FbxTimeSpan_Intersect(PyObject *, PyObject *);}
static PyObject *meth_FbxTimeSpan_Intersect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::FbxTimeSpan* a0;
        const  ::FbxTimeSpan *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_FbxTimeSpan, &sipCpp, sipType_FbxTimeSpan, &a0))
        {
             ::FbxTimeSpan*sipRes;

            sipRes = new  ::FbxTimeSpan(sipCpp->Intersect(*a0));

            return sipConvertFromNewType(sipRes,sipType_FbxTimeSpan,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxTimeSpan, sipName_Intersect, doc_FbxTimeSpan_Intersect);

    return NULL;
}


PyDoc_STRVAR(doc_FbxTimeSpan_UnionAssignment, "UnionAssignment(self, FbxTimeSpan)");

extern "C" {static PyObject *meth_FbxTimeSpan_UnionAssignment(PyObject *, PyObject *);}
static PyObject *meth_FbxTimeSpan_UnionAssignment(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::FbxTimeSpan* a0;
         ::FbxTimeSpan *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_FbxTimeSpan, &sipCpp, sipType_FbxTimeSpan, &a0))
        {
            sipCpp->UnionAssignment(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxTimeSpan, sipName_UnionAssignment, doc_FbxTimeSpan_UnionAssignment);

    return NULL;
}


extern "C" {static PyObject *slot_FbxTimeSpan___eq__(PyObject *,PyObject *);}
static PyObject *slot_FbxTimeSpan___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::FbxTimeSpan *sipCpp = reinterpret_cast< ::FbxTimeSpan *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_FbxTimeSpan));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const  ::FbxTimeSpan* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_FbxTimeSpan, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::FbxTimeSpan::operator==(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_fbx, eq_slot, sipType_FbxTimeSpan, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_FbxTimeSpan___ne__(PyObject *,PyObject *);}
static PyObject *slot_FbxTimeSpan___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::FbxTimeSpan *sipCpp = reinterpret_cast< ::FbxTimeSpan *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_FbxTimeSpan));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const  ::FbxTimeSpan* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_FbxTimeSpan, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::FbxTimeSpan::operator!=(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_fbx, ne_slot, sipType_FbxTimeSpan, sipSelf, sipArg);
}


/* Call the instance's destructor. */
extern "C" {static void release_FbxTimeSpan(void *, int);}
static void release_FbxTimeSpan(void *sipCppV, int)
{
    delete reinterpret_cast< ::FbxTimeSpan *>(sipCppV);
}


extern "C" {static void dealloc_FbxTimeSpan(sipSimpleWrapper *);}
static void dealloc_FbxTimeSpan(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_FbxTimeSpan(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_FbxTimeSpan(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_FbxTimeSpan(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::FbxTimeSpan *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            sipCpp = new  ::FbxTimeSpan();

            return sipCpp;
        }
    }

    {
         ::FbxTime* a0;
         ::FbxTime* a1;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9J9", sipType_FbxTime, &a0, sipType_FbxTime, &a1))
        {
            sipCpp = new  ::FbxTimeSpan(*a0,*a1);

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_FbxTimeSpan[] = {
    {(void *)slot_FbxTimeSpan___eq__, eq_slot},
    {(void *)slot_FbxTimeSpan___ne__, ne_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_FbxTimeSpan[] = {
    {SIP_MLNAME_CAST(sipName_GetDirection), meth_FbxTimeSpan_GetDirection, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxTimeSpan_GetDirection)},
    {SIP_MLNAME_CAST(sipName_GetDuration), meth_FbxTimeSpan_GetDuration, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxTimeSpan_GetDuration)},
    {SIP_MLNAME_CAST(sipName_GetSignedDuration), meth_FbxTimeSpan_GetSignedDuration, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxTimeSpan_GetSignedDuration)},
    {SIP_MLNAME_CAST(sipName_GetStart), meth_FbxTimeSpan_GetStart, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxTimeSpan_GetStart)},
    {SIP_MLNAME_CAST(sipName_GetStop), meth_FbxTimeSpan_GetStop, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxTimeSpan_GetStop)},
    {SIP_MLNAME_CAST(sipName_Intersect), meth_FbxTimeSpan_Intersect, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxTimeSpan_Intersect)},
    {SIP_MLNAME_CAST(sipName_IsInside), meth_FbxTimeSpan_IsInside, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxTimeSpan_IsInside)},
    {SIP_MLNAME_CAST(sipName_Set), meth_FbxTimeSpan_Set, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxTimeSpan_Set)},
    {SIP_MLNAME_CAST(sipName_SetStart), meth_FbxTimeSpan_SetStart, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxTimeSpan_SetStart)},
    {SIP_MLNAME_CAST(sipName_SetStop), meth_FbxTimeSpan_SetStop, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxTimeSpan_SetStop)},
    {SIP_MLNAME_CAST(sipName_UnionAssignment), meth_FbxTimeSpan_UnionAssignment, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxTimeSpan_UnionAssignment)}
};

PyDoc_STRVAR(doc_FbxTimeSpan, "\1FbxTimeSpan()\n"
    "FbxTimeSpan(FbxTime, FbxTime)");


sipClassTypeDef sipTypeDef_fbx_FbxTimeSpan = {
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_FbxTimeSpan,
        {0},
        0
    },
    {
        sipNameNr_FbxTimeSpan,
        {0, 0, 1},
        11, methods_FbxTimeSpan,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_FbxTimeSpan,
    -1,
    -1,
    0,
    slots_FbxTimeSpan,
    init_type_FbxTimeSpan,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_FbxTimeSpan,
    0,
    0,
    0,
    release_FbxTimeSpan,
    0,
    0,
    0,
    0,
    0,
    0,
    0
};
