/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.3
 *
 * Copyright (C) 2009 Autodesk, Inc. and/or its licensors.
 * All Rights Reserved.
 * 
 * The coded instructions, statements, computer programs, and/or related material 
 * (collectively the "Data") in these files contain unpublished information 
 * proprietary to Autodesk, Inc. and/or its licensors, which is protected by 
 * Canada and United States of America federal copyright law and by international 
 * treaties. 
 * 
 * The Data may not be disclosed or distributed to third parties, in whole or in
 * part, without the prior written consent of Autodesk, Inc. ("Autodesk").
 * 
 * THE DATA IS PROVIDED "AS IS" AND WITHOUT WARRANTY.
 * ALL WARRANTIES ARE EXPRESSLY EXCLUDED AND DISCLAIMED. AUTODESK MAKES NO
 * WARRANTY OF ANY KIND WITH RESPECT TO THE DATA, EXPRESS, IMPLIED OR ARISING
 * BY CUSTOM OR TRADE USAGE, AND DISCLAIMS ANY IMPLIED WARRANTIES OF TITLE, 
 * NON-INFRINGEMENT, MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE OR USE. 
 * WITHOUT LIMITING THE FOREGOING, AUTODESK DOES NOT WARRANT THAT THE OPERATION
 * OF THE DATA WILL BE UNINTERRUPTED OR ERROR FREE. 
 * 
 * IN NO EVENT SHALL AUTODESK, ITS AFFILIATES, PARENT COMPANIES, LICENSORS
 * OR SUPPLIERS ("AUTODESK GROUP") BE LIABLE FOR ANY LOSSES, DAMAGES OR EXPENSES
 * OF ANY KIND (INCLUDING WITHOUT LIMITATION PUNITIVE OR MULTIPLE DAMAGES OR OTHER
 * SPECIAL, DIRECT, INDIRECT, EXEMPLARY, INCIDENTAL, LOSS OF PROFITS, REVENUE
 * OR DATA, COST OF COVER OR CONSEQUENTIAL LOSSES OR DAMAGES OF ANY KIND),
 * HOWEVER CAUSED, AND REGARDLESS OF THE THEORY OF LIABILITY, WHETHER DERIVED
 * FROM CONTRACT, TORT (INCLUDING, BUT NOT LIMITED TO, NEGLIGENCE), OR OTHERWISE,
 * ARISING OUT OF OR RELATING TO THE DATA OR ITS USE OR ANY OTHER PERFORMANCE,
 * WHETHER OR NOT AUTODESK HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH LOSS
 * OR DAMAGE. 
 */

#include "sipAPIfbx.h"




PyDoc_STRVAR(doc_FbxAnimEvaluator_Create, "Create(FbxManager, str) -> FbxAnimEvaluator");

extern "C" {static PyObject *meth_FbxAnimEvaluator_Create(PyObject *, PyObject *);}
static PyObject *meth_FbxAnimEvaluator_Create(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxManager* a0;
        const char* a1;
        PyObject *a1Keep;

        if (sipParseArgs(&sipParseErr, sipArgs, "J8A8", sipType_FbxManager, &a0, &a1Keep, &a1))
        {
             ::FbxAnimEvaluator*sipRes;

            sipRes =  ::FbxAnimEvaluator::Create(a0,a1);
            Py_DECREF(a1Keep);

            return sipConvertFromType(sipRes,sipType_FbxAnimEvaluator,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxAnimEvaluator, sipName_Create, doc_FbxAnimEvaluator_Create);

    return NULL;
}


PyDoc_STRVAR(doc_FbxAnimEvaluator_GetClassId, "GetClassId(self) -> FbxClassId");

extern "C" {static PyObject *meth_FbxAnimEvaluator_GetClassId(PyObject *, PyObject *);}
static PyObject *meth_FbxAnimEvaluator_GetClassId(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::FbxAnimEvaluator *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxAnimEvaluator, &sipCpp))
        {
             ::FbxClassId*sipRes;

            sipRes = new  ::FbxClassId((sipSelfWasArg ? sipCpp-> ::FbxAnimEvaluator::GetClassId() : sipCpp->GetClassId()));

            return sipConvertFromNewType(sipRes,sipType_FbxClassId,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxAnimEvaluator, sipName_GetClassId, doc_FbxAnimEvaluator_GetClassId);

    return NULL;
}


PyDoc_STRVAR(doc_FbxAnimEvaluator_GetNodeGlobalTransform, "GetNodeGlobalTransform(self, FbxNode, FbxTime = FBXSDK_TIME_INFINITE, FbxNode.EPivotSet = FbxNode.eSourcePivot, bool = False, bool = False) -> FbxAMatrix");

extern "C" {static PyObject *meth_FbxAnimEvaluator_GetNodeGlobalTransform(PyObject *, PyObject *);}
static PyObject *meth_FbxAnimEvaluator_GetNodeGlobalTransform(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxNode* a0;
        const  ::FbxTime& a1def = FBXSDK_TIME_INFINITE;
        const  ::FbxTime* a1 = &a1def;
         ::FbxNode::EPivotSet a2 = FbxNode::eSourcePivot;
        bool a3 = 0;
        bool a4 = 0;
         ::FbxAnimEvaluator *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8|J9Ebb", &sipSelf, sipType_FbxAnimEvaluator, &sipCpp, sipType_FbxNode, &a0, sipType_FbxTime, &a1, sipType_FbxNode_EPivotSet, &a2, &a3, &a4))
        {
             ::FbxAMatrix*sipRes;

            sipRes = &sipCpp->GetNodeGlobalTransform(a0,*a1,a2,a3,a4);

            return sipConvertFromType(sipRes,sipType_FbxAMatrix,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxAnimEvaluator, sipName_GetNodeGlobalTransform, doc_FbxAnimEvaluator_GetNodeGlobalTransform);

    return NULL;
}


PyDoc_STRVAR(doc_FbxAnimEvaluator_GetNodeLocalTransform, "GetNodeLocalTransform(self, FbxNode, FbxTime = FBXSDK_TIME_INFINITE, FbxNode.EPivotSet = FbxNode.eSourcePivot, bool = False, bool = False) -> FbxAMatrix");

extern "C" {static PyObject *meth_FbxAnimEvaluator_GetNodeLocalTransform(PyObject *, PyObject *);}
static PyObject *meth_FbxAnimEvaluator_GetNodeLocalTransform(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxNode* a0;
        const  ::FbxTime& a1def = FBXSDK_TIME_INFINITE;
        const  ::FbxTime* a1 = &a1def;
         ::FbxNode::EPivotSet a2 = FbxNode::eSourcePivot;
        bool a3 = 0;
        bool a4 = 0;
         ::FbxAnimEvaluator *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8|J9Ebb", &sipSelf, sipType_FbxAnimEvaluator, &sipCpp, sipType_FbxNode, &a0, sipType_FbxTime, &a1, sipType_FbxNode_EPivotSet, &a2, &a3, &a4))
        {
             ::FbxAMatrix*sipRes;

            sipRes = &sipCpp->GetNodeLocalTransform(a0,*a1,a2,a3,a4);

            return sipConvertFromType(sipRes,sipType_FbxAMatrix,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxAnimEvaluator, sipName_GetNodeLocalTransform, doc_FbxAnimEvaluator_GetNodeLocalTransform);

    return NULL;
}


PyDoc_STRVAR(doc_FbxAnimEvaluator_GetNodeLocalTranslation, "GetNodeLocalTranslation(self, FbxNode, FbxTime = FBXSDK_TIME_INFINITE, FbxNode.EPivotSet = FbxNode.eSourcePivot, bool = False, bool = False) -> FbxVector4");

extern "C" {static PyObject *meth_FbxAnimEvaluator_GetNodeLocalTranslation(PyObject *, PyObject *);}
static PyObject *meth_FbxAnimEvaluator_GetNodeLocalTranslation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxNode* a0;
        const  ::FbxTime& a1def = FBXSDK_TIME_INFINITE;
        const  ::FbxTime* a1 = &a1def;
         ::FbxNode::EPivotSet a2 = FbxNode::eSourcePivot;
        bool a3 = 0;
        bool a4 = 0;
         ::FbxAnimEvaluator *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8|J9Ebb", &sipSelf, sipType_FbxAnimEvaluator, &sipCpp, sipType_FbxNode, &a0, sipType_FbxTime, &a1, sipType_FbxNode_EPivotSet, &a2, &a3, &a4))
        {
             ::FbxVector4*sipRes;

            sipRes = &sipCpp->GetNodeLocalTranslation(a0,*a1,a2,a3,a4);

            return sipConvertFromType(sipRes,sipType_FbxVector4,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxAnimEvaluator, sipName_GetNodeLocalTranslation, doc_FbxAnimEvaluator_GetNodeLocalTranslation);

    return NULL;
}


PyDoc_STRVAR(doc_FbxAnimEvaluator_GetNodeLocalRotation, "GetNodeLocalRotation(self, FbxNode, FbxTime = FBXSDK_TIME_INFINITE, FbxNode.EPivotSet = FbxNode.eSourcePivot, bool = False, bool = False) -> FbxVector4");

extern "C" {static PyObject *meth_FbxAnimEvaluator_GetNodeLocalRotation(PyObject *, PyObject *);}
static PyObject *meth_FbxAnimEvaluator_GetNodeLocalRotation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxNode* a0;
        const  ::FbxTime& a1def = FBXSDK_TIME_INFINITE;
        const  ::FbxTime* a1 = &a1def;
         ::FbxNode::EPivotSet a2 = FbxNode::eSourcePivot;
        bool a3 = 0;
        bool a4 = 0;
         ::FbxAnimEvaluator *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8|J9Ebb", &sipSelf, sipType_FbxAnimEvaluator, &sipCpp, sipType_FbxNode, &a0, sipType_FbxTime, &a1, sipType_FbxNode_EPivotSet, &a2, &a3, &a4))
        {
             ::FbxVector4*sipRes;

            sipRes = &sipCpp->GetNodeLocalRotation(a0,*a1,a2,a3,a4);

            return sipConvertFromType(sipRes,sipType_FbxVector4,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxAnimEvaluator, sipName_GetNodeLocalRotation, doc_FbxAnimEvaluator_GetNodeLocalRotation);

    return NULL;
}


PyDoc_STRVAR(doc_FbxAnimEvaluator_GetNodeLocalScaling, "GetNodeLocalScaling(self, FbxNode, FbxTime = FBXSDK_TIME_INFINITE, FbxNode.EPivotSet = FbxNode.eSourcePivot, bool = False, bool = False) -> FbxVector4");

extern "C" {static PyObject *meth_FbxAnimEvaluator_GetNodeLocalScaling(PyObject *, PyObject *);}
static PyObject *meth_FbxAnimEvaluator_GetNodeLocalScaling(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxNode* a0;
        const  ::FbxTime& a1def = FBXSDK_TIME_INFINITE;
        const  ::FbxTime* a1 = &a1def;
         ::FbxNode::EPivotSet a2 = FbxNode::eSourcePivot;
        bool a3 = 0;
        bool a4 = 0;
         ::FbxAnimEvaluator *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8|J9Ebb", &sipSelf, sipType_FbxAnimEvaluator, &sipCpp, sipType_FbxNode, &a0, sipType_FbxTime, &a1, sipType_FbxNode_EPivotSet, &a2, &a3, &a4))
        {
             ::FbxVector4*sipRes;

            sipRes = &sipCpp->GetNodeLocalScaling(a0,*a1,a2,a3,a4);

            return sipConvertFromType(sipRes,sipType_FbxVector4,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxAnimEvaluator, sipName_GetNodeLocalScaling, doc_FbxAnimEvaluator_GetNodeLocalScaling);

    return NULL;
}


PyDoc_STRVAR(doc_FbxAnimEvaluator_GetPropertyValue, "GetPropertyValue(self, FbxProperty, FbxTime, bool = False) -> FbxPropertyValue");

extern "C" {static PyObject *meth_FbxAnimEvaluator_GetPropertyValue(PyObject *, PyObject *);}
static PyObject *meth_FbxAnimEvaluator_GetPropertyValue(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxProperty* a0;
         ::FbxTime* a1;
        bool a2 = 0;
         ::FbxAnimEvaluator *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9J9|b", &sipSelf, sipType_FbxAnimEvaluator, &sipCpp, sipType_FbxProperty, &a0, sipType_FbxTime, &a1, &a2))
        {
             ::FbxPropertyValue*sipRes;

            sipRes = &sipCpp->GetPropertyValue(*a0,*a1,a2);

            return sipConvertFromType(sipRes,sipType_FbxPropertyValue,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxAnimEvaluator, sipName_GetPropertyValue, doc_FbxAnimEvaluator_GetPropertyValue);

    return NULL;
}


PyDoc_STRVAR(doc_FbxAnimEvaluator_GetPropertyCurveNode, "GetPropertyCurveNode(self, FbxProperty, FbxAnimLayer) -> FbxAnimCurveNode");

extern "C" {static PyObject *meth_FbxAnimEvaluator_GetPropertyCurveNode(PyObject *, PyObject *);}
static PyObject *meth_FbxAnimEvaluator_GetPropertyCurveNode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxProperty* a0;
         ::FbxAnimLayer* a1;
         ::FbxAnimEvaluator *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9J8", &sipSelf, sipType_FbxAnimEvaluator, &sipCpp, sipType_FbxProperty, &a0, sipType_FbxAnimLayer, &a1))
        {
             ::FbxAnimCurveNode*sipRes;

            sipRes = sipCpp->GetPropertyCurveNode(*a0,a1);

            return sipConvertFromType(sipRes,sipType_FbxAnimCurveNode,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxAnimEvaluator, sipName_GetPropertyCurveNode, doc_FbxAnimEvaluator_GetPropertyCurveNode);

    return NULL;
}


PyDoc_STRVAR(doc_FbxAnimEvaluator_ValidateTime, "ValidateTime(self, FbxTime) -> FbxTime");

extern "C" {static PyObject *meth_FbxAnimEvaluator_ValidateTime(PyObject *, PyObject *);}
static PyObject *meth_FbxAnimEvaluator_ValidateTime(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::FbxTime* a0;
         ::FbxAnimEvaluator *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_FbxAnimEvaluator, &sipCpp, sipType_FbxTime, &a0))
        {
             ::FbxTime*sipRes;

            sipRes = new  ::FbxTime(sipCpp->ValidateTime(*a0));

            return sipConvertFromNewType(sipRes,sipType_FbxTime,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxAnimEvaluator, sipName_ValidateTime, doc_FbxAnimEvaluator_ValidateTime);

    return NULL;
}


PyDoc_STRVAR(doc_FbxAnimEvaluator_Reset, "Reset(self)");

extern "C" {static PyObject *meth_FbxAnimEvaluator_Reset(PyObject *, PyObject *);}
static PyObject *meth_FbxAnimEvaluator_Reset(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxAnimEvaluator *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxAnimEvaluator, &sipCpp))
        {
            sipCpp->Reset();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxAnimEvaluator, sipName_Reset, doc_FbxAnimEvaluator_Reset);

    return NULL;
}


PyDoc_STRVAR(doc_FbxAnimEvaluator_Flush, "Flush(self, FbxNode)\n"
    "Flush(self, FbxProperty)");

extern "C" {static PyObject *meth_FbxAnimEvaluator_Flush(PyObject *, PyObject *);}
static PyObject *meth_FbxAnimEvaluator_Flush(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxNode* a0;
         ::FbxAnimEvaluator *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_FbxAnimEvaluator, &sipCpp, sipType_FbxNode, &a0))
        {
            sipCpp->Flush(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
         ::FbxProperty* a0;
         ::FbxAnimEvaluator *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_FbxAnimEvaluator, &sipCpp, sipType_FbxProperty, &a0))
        {
            sipCpp->Flush(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxAnimEvaluator, sipName_Flush, doc_FbxAnimEvaluator_Flush);

    return NULL;
}


PyDoc_STRVAR(doc_FbxAnimEvaluator_ComputeLocalTRSFromGlobal, "ComputeLocalTRSFromGlobal(self, FbxVector4, FbxVector4, FbxVector4, FbxNode, FbxAMatrix, FbxTime = FBXSDK_TIME_INFINITE, FbxNode.EPivotSet = FbxNode.eSourcePivot, bool = False, bool = False)");

extern "C" {static PyObject *meth_FbxAnimEvaluator_ComputeLocalTRSFromGlobal(PyObject *, PyObject *);}
static PyObject *meth_FbxAnimEvaluator_ComputeLocalTRSFromGlobal(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxVector4* a0;
         ::FbxVector4* a1;
         ::FbxVector4* a2;
         ::FbxNode* a3;
         ::FbxAMatrix* a4;
        const  ::FbxTime& a5def = FBXSDK_TIME_INFINITE;
        const  ::FbxTime* a5 = &a5def;
         ::FbxNode::EPivotSet a6 = FbxNode::eSourcePivot;
        bool a7 = 0;
        bool a8 = 0;
         ::FbxAnimEvaluator *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9J9J9J8J9|J9Ebb", &sipSelf, sipType_FbxAnimEvaluator, &sipCpp, sipType_FbxVector4, &a0, sipType_FbxVector4, &a1, sipType_FbxVector4, &a2, sipType_FbxNode, &a3, sipType_FbxAMatrix, &a4, sipType_FbxTime, &a5, sipType_FbxNode_EPivotSet, &a6, &a7, &a8))
        {
            sipCpp->ComputeLocalTRSFromGlobal(*a0,*a1,*a2,a3,*a4,*a5,a6,a7,a8);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxAnimEvaluator, sipName_ComputeLocalTRSFromGlobal, doc_FbxAnimEvaluator_ComputeLocalTRSFromGlobal);

    return NULL;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_FbxAnimEvaluator(void *, const sipTypeDef *);}
static void *cast_FbxAnimEvaluator(void *sipCppV, const sipTypeDef *targetType)
{
     ::FbxAnimEvaluator *sipCpp = reinterpret_cast< ::FbxAnimEvaluator *>(sipCppV);

    if (targetType == sipType_FbxObject)
        return static_cast< ::FbxObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_FbxAnimEvaluator(void *, int);}
static void release_FbxAnimEvaluator(void *, int)
{
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_FbxAnimEvaluator[] = {{244, 255, 1}};


static PyMethodDef methods_FbxAnimEvaluator[] = {
    {SIP_MLNAME_CAST(sipName_ComputeLocalTRSFromGlobal), meth_FbxAnimEvaluator_ComputeLocalTRSFromGlobal, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxAnimEvaluator_ComputeLocalTRSFromGlobal)},
    {SIP_MLNAME_CAST(sipName_Create), meth_FbxAnimEvaluator_Create, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxAnimEvaluator_Create)},
    {SIP_MLNAME_CAST(sipName_Flush), meth_FbxAnimEvaluator_Flush, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxAnimEvaluator_Flush)},
    {SIP_MLNAME_CAST(sipName_GetClassId), meth_FbxAnimEvaluator_GetClassId, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxAnimEvaluator_GetClassId)},
    {SIP_MLNAME_CAST(sipName_GetNodeGlobalTransform), meth_FbxAnimEvaluator_GetNodeGlobalTransform, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxAnimEvaluator_GetNodeGlobalTransform)},
    {SIP_MLNAME_CAST(sipName_GetNodeLocalRotation), meth_FbxAnimEvaluator_GetNodeLocalRotation, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxAnimEvaluator_GetNodeLocalRotation)},
    {SIP_MLNAME_CAST(sipName_GetNodeLocalScaling), meth_FbxAnimEvaluator_GetNodeLocalScaling, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxAnimEvaluator_GetNodeLocalScaling)},
    {SIP_MLNAME_CAST(sipName_GetNodeLocalTransform), meth_FbxAnimEvaluator_GetNodeLocalTransform, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxAnimEvaluator_GetNodeLocalTransform)},
    {SIP_MLNAME_CAST(sipName_GetNodeLocalTranslation), meth_FbxAnimEvaluator_GetNodeLocalTranslation, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxAnimEvaluator_GetNodeLocalTranslation)},
    {SIP_MLNAME_CAST(sipName_GetPropertyCurveNode), meth_FbxAnimEvaluator_GetPropertyCurveNode, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxAnimEvaluator_GetPropertyCurveNode)},
    {SIP_MLNAME_CAST(sipName_GetPropertyValue), meth_FbxAnimEvaluator_GetPropertyValue, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxAnimEvaluator_GetPropertyValue)},
    {SIP_MLNAME_CAST(sipName_Reset), meth_FbxAnimEvaluator_Reset, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxAnimEvaluator_Reset)},
    {SIP_MLNAME_CAST(sipName_ValidateTime), meth_FbxAnimEvaluator_ValidateTime, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxAnimEvaluator_ValidateTime)}
};


extern "C" {static PyObject *varget_FbxAnimEvaluator_ClassId(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxAnimEvaluator_ClassId(void *, PyObject *, PyObject *)
{
     ::FbxClassId*sipVal;

    sipVal = & ::FbxAnimEvaluator::ClassId;

    return sipConvertFromType(sipVal, sipType_FbxClassId, NULL);
}


extern "C" {static int varset_FbxAnimEvaluator_ClassId(void *, PyObject *, PyObject *);}
static int varset_FbxAnimEvaluator_ClassId(void *, PyObject *sipPy, PyObject *)
{
     ::FbxClassId*sipVal;
    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxClassId *>(sipForceConvertToType(sipPy,sipType_FbxClassId,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

     ::FbxAnimEvaluator::ClassId = *sipVal;

    return 0;
}

sipVariableDef variables_FbxAnimEvaluator[] = {
    {ClassVariable, sipName_ClassId, (PyMethodDef *)varget_FbxAnimEvaluator_ClassId, (PyMethodDef *)varset_FbxAnimEvaluator_ClassId, NULL, NULL},
};


sipClassTypeDef sipTypeDef_fbx_FbxAnimEvaluator = {
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_FbxAnimEvaluator,
        {0},
        0
    },
    {
        sipNameNr_FbxAnimEvaluator,
        {0, 0, 1},
        13, methods_FbxAnimEvaluator,
        0, 0,
        1, variables_FbxAnimEvaluator,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    0,
    -1,
    -1,
    supers_FbxAnimEvaluator,
    0,
    0,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    0,
    0,
    0,
    0,
    release_FbxAnimEvaluator,
    cast_FbxAnimEvaluator,
    0,
    0,
    0,
    0,
    0,
    0
};
