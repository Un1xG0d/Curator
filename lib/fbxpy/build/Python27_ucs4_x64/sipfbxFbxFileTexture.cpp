/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.3
 *
 * Copyright (C) 2009 Autodesk, Inc. and/or its licensors.
 * All Rights Reserved.
 * 
 * The coded instructions, statements, computer programs, and/or related material 
 * (collectively the "Data") in these files contain unpublished information 
 * proprietary to Autodesk, Inc. and/or its licensors, which is protected by 
 * Canada and United States of America federal copyright law and by international 
 * treaties. 
 * 
 * The Data may not be disclosed or distributed to third parties, in whole or in
 * part, without the prior written consent of Autodesk, Inc. ("Autodesk").
 * 
 * THE DATA IS PROVIDED "AS IS" AND WITHOUT WARRANTY.
 * ALL WARRANTIES ARE EXPRESSLY EXCLUDED AND DISCLAIMED. AUTODESK MAKES NO
 * WARRANTY OF ANY KIND WITH RESPECT TO THE DATA, EXPRESS, IMPLIED OR ARISING
 * BY CUSTOM OR TRADE USAGE, AND DISCLAIMS ANY IMPLIED WARRANTIES OF TITLE, 
 * NON-INFRINGEMENT, MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE OR USE. 
 * WITHOUT LIMITING THE FOREGOING, AUTODESK DOES NOT WARRANT THAT THE OPERATION
 * OF THE DATA WILL BE UNINTERRUPTED OR ERROR FREE. 
 * 
 * IN NO EVENT SHALL AUTODESK, ITS AFFILIATES, PARENT COMPANIES, LICENSORS
 * OR SUPPLIERS ("AUTODESK GROUP") BE LIABLE FOR ANY LOSSES, DAMAGES OR EXPENSES
 * OF ANY KIND (INCLUDING WITHOUT LIMITATION PUNITIVE OR MULTIPLE DAMAGES OR OTHER
 * SPECIAL, DIRECT, INDIRECT, EXEMPLARY, INCIDENTAL, LOSS OF PROFITS, REVENUE
 * OR DATA, COST OF COVER OR CONSEQUENTIAL LOSSES OR DAMAGES OF ANY KIND),
 * HOWEVER CAUSED, AND REGARDLESS OF THE THEORY OF LIABILITY, WHETHER DERIVED
 * FROM CONTRACT, TORT (INCLUDING, BUT NOT LIMITED TO, NEGLIGENCE), OR OTHERWISE,
 * ARISING OUT OF OR RELATING TO THE DATA OR ITS USE OR ANY OTHER PERFORMANCE,
 * WHETHER OR NOT AUTODESK HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH LOSS
 * OR DAMAGE. 
 */

#include "sipAPIfbx.h"




PyDoc_STRVAR(doc_FbxFileTexture_Create, "Create(FbxManager, str) -> FbxFileTexture\n"
    "Create(FbxObject, str) -> FbxFileTexture");

extern "C" {static PyObject *meth_FbxFileTexture_Create(PyObject *, PyObject *);}
static PyObject *meth_FbxFileTexture_Create(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxManager* a0;
        const char* a1;
        PyObject *a1Keep;

        if (sipParseArgs(&sipParseErr, sipArgs, "J8A8", sipType_FbxManager, &a0, &a1Keep, &a1))
        {
             ::FbxFileTexture*sipRes;

            sipRes =  ::FbxFileTexture::Create(a0,a1);
            Py_DECREF(a1Keep);

            return sipConvertFromType(sipRes,sipType_FbxFileTexture,NULL);
        }
    }

    {
         ::FbxObject* a0;
        const char* a1;
        PyObject *a1Keep;

        if (sipParseArgs(&sipParseErr, sipArgs, "J8A8", sipType_FbxObject, &a0, &a1Keep, &a1))
        {
             ::FbxFileTexture*sipRes;

            sipRes =  ::FbxFileTexture::Create(a0,a1);
            Py_DECREF(a1Keep);

            return sipConvertFromType(sipRes,sipType_FbxFileTexture,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxFileTexture, sipName_Create, doc_FbxFileTexture_Create);

    return NULL;
}


PyDoc_STRVAR(doc_FbxFileTexture_GetClassId, "GetClassId(self) -> FbxClassId");

extern "C" {static PyObject *meth_FbxFileTexture_GetClassId(PyObject *, PyObject *);}
static PyObject *meth_FbxFileTexture_GetClassId(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::FbxFileTexture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxFileTexture, &sipCpp))
        {
             ::FbxClassId*sipRes;

            sipRes = new  ::FbxClassId((sipSelfWasArg ? sipCpp-> ::FbxFileTexture::GetClassId() : sipCpp->GetClassId()));

            return sipConvertFromNewType(sipRes,sipType_FbxClassId,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxFileTexture, sipName_GetClassId, doc_FbxFileTexture_GetClassId);

    return NULL;
}


PyDoc_STRVAR(doc_FbxFileTexture_Reset, "Reset(self)");

extern "C" {static PyObject *meth_FbxFileTexture_Reset(PyObject *, PyObject *);}
static PyObject *meth_FbxFileTexture_Reset(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxFileTexture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxFileTexture, &sipCpp))
        {
            sipCpp->Reset();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxFileTexture, sipName_Reset, doc_FbxFileTexture_Reset);

    return NULL;
}


PyDoc_STRVAR(doc_FbxFileTexture_SetFileName, "SetFileName(self, str) -> bool");

extern "C" {static PyObject *meth_FbxFileTexture_SetFileName(PyObject *, PyObject *);}
static PyObject *meth_FbxFileTexture_SetFileName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const char* a0;
        PyObject *a0Keep;
         ::FbxFileTexture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BA8", &sipSelf, sipType_FbxFileTexture, &sipCpp, &a0Keep, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->SetFileName(a0);
            Py_DECREF(a0Keep);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxFileTexture, sipName_SetFileName, doc_FbxFileTexture_SetFileName);

    return NULL;
}


PyDoc_STRVAR(doc_FbxFileTexture_SetRelativeFileName, "SetRelativeFileName(self, str) -> bool");

extern "C" {static PyObject *meth_FbxFileTexture_SetRelativeFileName(PyObject *, PyObject *);}
static PyObject *meth_FbxFileTexture_SetRelativeFileName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const char* a0;
        PyObject *a0Keep;
         ::FbxFileTexture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BA8", &sipSelf, sipType_FbxFileTexture, &sipCpp, &a0Keep, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->SetRelativeFileName(a0);
            Py_DECREF(a0Keep);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxFileTexture, sipName_SetRelativeFileName, doc_FbxFileTexture_SetRelativeFileName);

    return NULL;
}


PyDoc_STRVAR(doc_FbxFileTexture_GetFileName, "GetFileName(self) -> str");

extern "C" {static PyObject *meth_FbxFileTexture_GetFileName(PyObject *, PyObject *);}
static PyObject *meth_FbxFileTexture_GetFileName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::FbxFileTexture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxFileTexture, &sipCpp))
        {
            const char*sipRes;

            sipRes = sipCpp->GetFileName();

            if (sipRes == NULL)
            {
                Py_INCREF(Py_None);
                return Py_None;
            }

#if PY_MAJOR_VERSION >= 3
            return PyUnicode_FromString(sipRes);
#else
            return PyUnicode_DecodeUTF8(sipRes, strlen(sipRes), NULL);
#endif
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxFileTexture, sipName_GetFileName, doc_FbxFileTexture_GetFileName);

    return NULL;
}


PyDoc_STRVAR(doc_FbxFileTexture_GetRelativeFileName, "GetRelativeFileName(self) -> str");

extern "C" {static PyObject *meth_FbxFileTexture_GetRelativeFileName(PyObject *, PyObject *);}
static PyObject *meth_FbxFileTexture_GetRelativeFileName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::FbxFileTexture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxFileTexture, &sipCpp))
        {
            const char*sipRes;

            sipRes = sipCpp->GetRelativeFileName();

            if (sipRes == NULL)
            {
                Py_INCREF(Py_None);
                return Py_None;
            }

#if PY_MAJOR_VERSION >= 3
            return PyUnicode_FromString(sipRes);
#else
            return PyUnicode_DecodeUTF8(sipRes, strlen(sipRes), NULL);
#endif
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxFileTexture, sipName_GetRelativeFileName, doc_FbxFileTexture_GetRelativeFileName);

    return NULL;
}


PyDoc_STRVAR(doc_FbxFileTexture_SetMaterialUse, "SetMaterialUse(self, FbxFileTexture.EMaterialUse)");

extern "C" {static PyObject *meth_FbxFileTexture_SetMaterialUse(PyObject *, PyObject *);}
static PyObject *meth_FbxFileTexture_SetMaterialUse(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxFileTexture::EMaterialUse a0;
         ::FbxFileTexture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_FbxFileTexture, &sipCpp, sipType_FbxFileTexture_EMaterialUse, &a0))
        {
            sipCpp->SetMaterialUse(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxFileTexture, sipName_SetMaterialUse, doc_FbxFileTexture_SetMaterialUse);

    return NULL;
}


PyDoc_STRVAR(doc_FbxFileTexture_GetMaterialUse, "GetMaterialUse(self) -> FbxFileTexture.EMaterialUse");

extern "C" {static PyObject *meth_FbxFileTexture_GetMaterialUse(PyObject *, PyObject *);}
static PyObject *meth_FbxFileTexture_GetMaterialUse(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::FbxFileTexture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxFileTexture, &sipCpp))
        {
             ::FbxFileTexture::EMaterialUse sipRes;

            sipRes = sipCpp->GetMaterialUse();

            return sipConvertFromEnum(sipRes,sipType_FbxFileTexture_EMaterialUse);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxFileTexture, sipName_GetMaterialUse, doc_FbxFileTexture_GetMaterialUse);

    return NULL;
}


extern "C" {static PyObject *slot_FbxFileTexture___ne__(PyObject *,PyObject *);}
static PyObject *slot_FbxFileTexture___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::FbxFileTexture *sipCpp = reinterpret_cast< ::FbxFileTexture *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_FbxFileTexture));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const  ::FbxFileTexture* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_FbxFileTexture, &a0))
        {
            bool sipRes;

            sipRes = !sipCpp-> ::FbxFileTexture::operator==(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_fbx, ne_slot, sipType_FbxFileTexture, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_FbxFileTexture___eq__(PyObject *,PyObject *);}
static PyObject *slot_FbxFileTexture___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::FbxFileTexture *sipCpp = reinterpret_cast< ::FbxFileTexture *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_FbxFileTexture));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const  ::FbxFileTexture* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_FbxFileTexture, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::FbxFileTexture::operator==(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_fbx, eq_slot, sipType_FbxFileTexture, sipSelf, sipArg);
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_FbxFileTexture(void *, const sipTypeDef *);}
static void *cast_FbxFileTexture(void *sipCppV, const sipTypeDef *targetType)
{
     ::FbxFileTexture *sipCpp = reinterpret_cast< ::FbxFileTexture *>(sipCppV);

    if (targetType == sipType_FbxTexture)
        return static_cast< ::FbxTexture *>(sipCpp);

    if (targetType == sipType_FbxObject)
        return static_cast< ::FbxObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_FbxFileTexture(void *, int);}
static void release_FbxFileTexture(void *, int)
{
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_FbxFileTexture[] = {{358, 255, 1}};


/* Define this type's Python slots. */
static sipPySlotDef slots_FbxFileTexture[] = {
    {(void *)slot_FbxFileTexture___ne__, ne_slot},
    {(void *)slot_FbxFileTexture___eq__, eq_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_FbxFileTexture[] = {
    {SIP_MLNAME_CAST(sipName_Create), meth_FbxFileTexture_Create, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxFileTexture_Create)},
    {SIP_MLNAME_CAST(sipName_GetClassId), meth_FbxFileTexture_GetClassId, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxFileTexture_GetClassId)},
    {SIP_MLNAME_CAST(sipName_GetFileName), meth_FbxFileTexture_GetFileName, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxFileTexture_GetFileName)},
    {SIP_MLNAME_CAST(sipName_GetMaterialUse), meth_FbxFileTexture_GetMaterialUse, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxFileTexture_GetMaterialUse)},
    {SIP_MLNAME_CAST(sipName_GetRelativeFileName), meth_FbxFileTexture_GetRelativeFileName, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxFileTexture_GetRelativeFileName)},
    {SIP_MLNAME_CAST(sipName_Reset), meth_FbxFileTexture_Reset, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxFileTexture_Reset)},
    {SIP_MLNAME_CAST(sipName_SetFileName), meth_FbxFileTexture_SetFileName, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxFileTexture_SetFileName)},
    {SIP_MLNAME_CAST(sipName_SetMaterialUse), meth_FbxFileTexture_SetMaterialUse, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxFileTexture_SetMaterialUse)},
    {SIP_MLNAME_CAST(sipName_SetRelativeFileName), meth_FbxFileTexture_SetRelativeFileName, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxFileTexture_SetRelativeFileName)}
};

static sipEnumMemberDef enummembers_FbxFileTexture[] = {
    {sipName_eDefaultMaterial, static_cast<int>( ::FbxFileTexture::eDefaultMaterial), 144},
    {sipName_eModelMaterial, static_cast<int>( ::FbxFileTexture::eModelMaterial), 144},
};


extern "C" {static PyObject *varget_FbxFileTexture_ClassId(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxFileTexture_ClassId(void *, PyObject *, PyObject *)
{
     ::FbxClassId*sipVal;

    sipVal = & ::FbxFileTexture::ClassId;

    return sipConvertFromType(sipVal, sipType_FbxClassId, NULL);
}


extern "C" {static int varset_FbxFileTexture_ClassId(void *, PyObject *, PyObject *);}
static int varset_FbxFileTexture_ClassId(void *, PyObject *sipPy, PyObject *)
{
     ::FbxClassId*sipVal;
    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxClassId *>(sipForceConvertToType(sipPy,sipType_FbxClassId,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

     ::FbxFileTexture::ClassId = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxFileTexture_UseMaterial(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxFileTexture_UseMaterial(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyBool1*sipVal;
     ::FbxFileTexture *sipCpp = reinterpret_cast< ::FbxFileTexture *>(sipSelf);

    sipVal = &sipCpp->UseMaterial;

    return sipConvertFromType(sipVal, sipType_FbxPropertyBool1, NULL);
}


extern "C" {static int varset_FbxFileTexture_UseMaterial(void *, PyObject *, PyObject *);}
static int varset_FbxFileTexture_UseMaterial(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyBool1*sipVal;
     ::FbxFileTexture *sipCpp = reinterpret_cast< ::FbxFileTexture *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyBool1 *>(sipForceConvertToType(sipPy,sipType_FbxPropertyBool1,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->UseMaterial = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxFileTexture_UseMipMap(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxFileTexture_UseMipMap(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyBool1*sipVal;
     ::FbxFileTexture *sipCpp = reinterpret_cast< ::FbxFileTexture *>(sipSelf);

    sipVal = &sipCpp->UseMipMap;

    return sipConvertFromType(sipVal, sipType_FbxPropertyBool1, NULL);
}


extern "C" {static int varset_FbxFileTexture_UseMipMap(void *, PyObject *, PyObject *);}
static int varset_FbxFileTexture_UseMipMap(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyBool1*sipVal;
     ::FbxFileTexture *sipCpp = reinterpret_cast< ::FbxFileTexture *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyBool1 *>(sipForceConvertToType(sipPy,sipType_FbxPropertyBool1,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->UseMipMap = *sipVal;

    return 0;
}

sipVariableDef variables_FbxFileTexture[] = {
    {ClassVariable, sipName_ClassId, (PyMethodDef *)varget_FbxFileTexture_ClassId, (PyMethodDef *)varset_FbxFileTexture_ClassId, NULL, NULL},
    {InstanceVariable, sipName_UseMaterial, (PyMethodDef *)varget_FbxFileTexture_UseMaterial, (PyMethodDef *)varset_FbxFileTexture_UseMaterial, NULL, NULL},
    {InstanceVariable, sipName_UseMipMap, (PyMethodDef *)varget_FbxFileTexture_UseMipMap, (PyMethodDef *)varset_FbxFileTexture_UseMipMap, NULL, NULL},
};


sipClassTypeDef sipTypeDef_fbx_FbxFileTexture = {
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_FbxFileTexture,
        {0},
        0
    },
    {
        sipNameNr_FbxFileTexture,
        {0, 0, 1},
        9, methods_FbxFileTexture,
        2, enummembers_FbxFileTexture,
        3, variables_FbxFileTexture,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    0,
    -1,
    -1,
    supers_FbxFileTexture,
    slots_FbxFileTexture,
    0,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    0,
    0,
    0,
    0,
    release_FbxFileTexture,
    cast_FbxFileTexture,
    0,
    0,
    0,
    0,
    0,
    0
};
