/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.3
 *
 * Copyright (C) 2009 Autodesk, Inc. and/or its licensors.
 * All Rights Reserved.
 * 
 * The coded instructions, statements, computer programs, and/or related material 
 * (collectively the "Data") in these files contain unpublished information 
 * proprietary to Autodesk, Inc. and/or its licensors, which is protected by 
 * Canada and United States of America federal copyright law and by international 
 * treaties. 
 * 
 * The Data may not be disclosed or distributed to third parties, in whole or in
 * part, without the prior written consent of Autodesk, Inc. ("Autodesk").
 * 
 * THE DATA IS PROVIDED "AS IS" AND WITHOUT WARRANTY.
 * ALL WARRANTIES ARE EXPRESSLY EXCLUDED AND DISCLAIMED. AUTODESK MAKES NO
 * WARRANTY OF ANY KIND WITH RESPECT TO THE DATA, EXPRESS, IMPLIED OR ARISING
 * BY CUSTOM OR TRADE USAGE, AND DISCLAIMS ANY IMPLIED WARRANTIES OF TITLE, 
 * NON-INFRINGEMENT, MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE OR USE. 
 * WITHOUT LIMITING THE FOREGOING, AUTODESK DOES NOT WARRANT THAT THE OPERATION
 * OF THE DATA WILL BE UNINTERRUPTED OR ERROR FREE. 
 * 
 * IN NO EVENT SHALL AUTODESK, ITS AFFILIATES, PARENT COMPANIES, LICENSORS
 * OR SUPPLIERS ("AUTODESK GROUP") BE LIABLE FOR ANY LOSSES, DAMAGES OR EXPENSES
 * OF ANY KIND (INCLUDING WITHOUT LIMITATION PUNITIVE OR MULTIPLE DAMAGES OR OTHER
 * SPECIAL, DIRECT, INDIRECT, EXEMPLARY, INCIDENTAL, LOSS OF PROFITS, REVENUE
 * OR DATA, COST OF COVER OR CONSEQUENTIAL LOSSES OR DAMAGES OF ANY KIND),
 * HOWEVER CAUSED, AND REGARDLESS OF THE THEORY OF LIABILITY, WHETHER DERIVED
 * FROM CONTRACT, TORT (INCLUDING, BUT NOT LIMITED TO, NEGLIGENCE), OR OTHERWISE,
 * ARISING OUT OF OR RELATING TO THE DATA OR ITS USE OR ANY OTHER PERFORMANCE,
 * WHETHER OR NOT AUTODESK HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH LOSS
 * OR DAMAGE. 
 */

#include "sipAPIfbx.h"




PyDoc_STRVAR(doc_FbxLight_Create, "Create(FbxManager, str) -> FbxLight\n"
    "Create(FbxObject, str) -> FbxLight");

extern "C" {static PyObject *meth_FbxLight_Create(PyObject *, PyObject *);}
static PyObject *meth_FbxLight_Create(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxManager* a0;
        const char* a1;
        PyObject *a1Keep;

        if (sipParseArgs(&sipParseErr, sipArgs, "J8A8", sipType_FbxManager, &a0, &a1Keep, &a1))
        {
             ::FbxLight*sipRes;

            sipRes =  ::FbxLight::Create(a0,a1);
            Py_DECREF(a1Keep);

            return sipConvertFromType(sipRes,sipType_FbxLight,NULL);
        }
    }

    {
         ::FbxObject* a0;
        const char* a1;
        PyObject *a1Keep;

        if (sipParseArgs(&sipParseErr, sipArgs, "J8A8", sipType_FbxObject, &a0, &a1Keep, &a1))
        {
             ::FbxLight*sipRes;

            sipRes =  ::FbxLight::Create(a0,a1);
            Py_DECREF(a1Keep);

            return sipConvertFromType(sipRes,sipType_FbxLight,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxLight, sipName_Create, doc_FbxLight_Create);

    return NULL;
}


PyDoc_STRVAR(doc_FbxLight_GetClassId, "GetClassId(self) -> FbxClassId");

extern "C" {static PyObject *meth_FbxLight_GetClassId(PyObject *, PyObject *);}
static PyObject *meth_FbxLight_GetClassId(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::FbxLight *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxLight, &sipCpp))
        {
             ::FbxClassId*sipRes;

            sipRes = new  ::FbxClassId((sipSelfWasArg ? sipCpp-> ::FbxLight::GetClassId() : sipCpp->GetClassId()));

            return sipConvertFromNewType(sipRes,sipType_FbxClassId,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxLight, sipName_GetClassId, doc_FbxLight_GetClassId);

    return NULL;
}


PyDoc_STRVAR(doc_FbxLight_GetAttributeType, "GetAttributeType(self) -> FbxNodeAttribute.EType");

extern "C" {static PyObject *meth_FbxLight_GetAttributeType(PyObject *, PyObject *);}
static PyObject *meth_FbxLight_GetAttributeType(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::FbxLight *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxLight, &sipCpp))
        {
             ::FbxNodeAttribute::EType sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::FbxLight::GetAttributeType() : sipCpp->GetAttributeType());

            return sipConvertFromEnum(sipRes,sipType_FbxNodeAttribute_EType);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxLight, sipName_GetAttributeType, doc_FbxLight_GetAttributeType);

    return NULL;
}


PyDoc_STRVAR(doc_FbxLight_SetShadowTexture, "SetShadowTexture(self, FbxTexture)");

extern "C" {static PyObject *meth_FbxLight_SetShadowTexture(PyObject *, PyObject *);}
static PyObject *meth_FbxLight_SetShadowTexture(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxTexture* a0;
         ::FbxLight *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_FbxLight, &sipCpp, sipType_FbxTexture, &a0))
        {
            sipCpp->SetShadowTexture(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxLight, sipName_SetShadowTexture, doc_FbxLight_SetShadowTexture);

    return NULL;
}


PyDoc_STRVAR(doc_FbxLight_GetShadowTexture, "GetShadowTexture(self) -> FbxTexture");

extern "C" {static PyObject *meth_FbxLight_GetShadowTexture(PyObject *, PyObject *);}
static PyObject *meth_FbxLight_GetShadowTexture(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::FbxLight *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxLight, &sipCpp))
        {
             ::FbxTexture*sipRes;

            sipRes = sipCpp->GetShadowTexture();

            return sipConvertFromType(sipRes,sipType_FbxTexture,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxLight, sipName_GetShadowTexture, doc_FbxLight_GetShadowTexture);

    return NULL;
}


extern "C" {static PyObject *slot_FbxLight___ne__(PyObject *,PyObject *);}
static PyObject *slot_FbxLight___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::FbxLight *sipCpp = reinterpret_cast< ::FbxLight *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_FbxLight));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const  ::FbxLight* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_FbxLight, &a0))
        {
            bool sipRes;

            sipRes = !sipCpp-> ::FbxLight::operator==(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_fbx, ne_slot, sipType_FbxLight, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_FbxLight___eq__(PyObject *,PyObject *);}
static PyObject *slot_FbxLight___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::FbxLight *sipCpp = reinterpret_cast< ::FbxLight *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_FbxLight));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const  ::FbxLight* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_FbxLight, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::FbxLight::operator==(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_fbx, eq_slot, sipType_FbxLight, sipSelf, sipArg);
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_FbxLight(void *, const sipTypeDef *);}
static void *cast_FbxLight(void *sipCppV, const sipTypeDef *targetType)
{
     ::FbxLight *sipCpp = reinterpret_cast< ::FbxLight *>(sipCppV);

    if (targetType == sipType_FbxNodeAttribute)
        return static_cast< ::FbxNodeAttribute *>(sipCpp);

    if (targetType == sipType_FbxObject)
        return static_cast< ::FbxObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_FbxLight(void *, int);}
static void release_FbxLight(void *, int)
{
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_FbxLight[] = {{233, 255, 1}};


/* Define this type's Python slots. */
static sipPySlotDef slots_FbxLight[] = {
    {(void *)slot_FbxLight___ne__, ne_slot},
    {(void *)slot_FbxLight___eq__, eq_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_FbxLight[] = {
    {SIP_MLNAME_CAST(sipName_Create), meth_FbxLight_Create, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxLight_Create)},
    {SIP_MLNAME_CAST(sipName_GetAttributeType), meth_FbxLight_GetAttributeType, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxLight_GetAttributeType)},
    {SIP_MLNAME_CAST(sipName_GetClassId), meth_FbxLight_GetClassId, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxLight_GetClassId)},
    {SIP_MLNAME_CAST(sipName_GetShadowTexture), meth_FbxLight_GetShadowTexture, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxLight_GetShadowTexture)},
    {SIP_MLNAME_CAST(sipName_SetShadowTexture), meth_FbxLight_SetShadowTexture, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxLight_SetShadowTexture)}
};

static sipEnumMemberDef enummembers_FbxLight[] = {
    {sipName_eArea, static_cast<int>( ::FbxLight::eArea), 212},
    {sipName_eCubic, static_cast<int>( ::FbxLight::eCubic), 211},
    {sipName_eDirectional, static_cast<int>( ::FbxLight::eDirectional), 212},
    {sipName_eLinear, static_cast<int>( ::FbxLight::eLinear), 211},
    {sipName_eNone, static_cast<int>( ::FbxLight::eNone), 211},
    {sipName_ePoint, static_cast<int>( ::FbxLight::ePoint), 212},
    {sipName_eQuadratic, static_cast<int>( ::FbxLight::eQuadratic), 211},
    {sipName_eRectangle, static_cast<int>( ::FbxLight::eRectangle), 210},
    {sipName_eSphere, static_cast<int>( ::FbxLight::eSphere), 210},
    {sipName_eSpot, static_cast<int>( ::FbxLight::eSpot), 212},
    {sipName_eVolume, static_cast<int>( ::FbxLight::eVolume), 212},
};


extern "C" {static PyObject *varget_FbxLight_AreaLightShape(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxLight_AreaLightShape(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyEAreaLightShape*sipVal;
     ::FbxLight *sipCpp = reinterpret_cast< ::FbxLight *>(sipSelf);

    sipVal = &sipCpp->AreaLightShape;

    return sipConvertFromType(sipVal, sipType_FbxPropertyEAreaLightShape, NULL);
}


extern "C" {static int varset_FbxLight_AreaLightShape(void *, PyObject *, PyObject *);}
static int varset_FbxLight_AreaLightShape(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyEAreaLightShape*sipVal;
     ::FbxLight *sipCpp = reinterpret_cast< ::FbxLight *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyEAreaLightShape *>(sipForceConvertToType(sipPy,sipType_FbxPropertyEAreaLightShape,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->AreaLightShape = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxLight_BottomBarnDoor(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxLight_BottomBarnDoor(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyFloat1*sipVal;
     ::FbxLight *sipCpp = reinterpret_cast< ::FbxLight *>(sipSelf);

    sipVal = &sipCpp->BottomBarnDoor;

    return sipConvertFromType(sipVal, sipType_FbxPropertyFloat1, NULL);
}


extern "C" {static int varset_FbxLight_BottomBarnDoor(void *, PyObject *, PyObject *);}
static int varset_FbxLight_BottomBarnDoor(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyFloat1*sipVal;
     ::FbxLight *sipCpp = reinterpret_cast< ::FbxLight *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyFloat1 *>(sipForceConvertToType(sipPy,sipType_FbxPropertyFloat1,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->BottomBarnDoor = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxLight_CastLight(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxLight_CastLight(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyBool1*sipVal;
     ::FbxLight *sipCpp = reinterpret_cast< ::FbxLight *>(sipSelf);

    sipVal = &sipCpp->CastLight;

    return sipConvertFromType(sipVal, sipType_FbxPropertyBool1, NULL);
}


extern "C" {static int varset_FbxLight_CastLight(void *, PyObject *, PyObject *);}
static int varset_FbxLight_CastLight(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyBool1*sipVal;
     ::FbxLight *sipCpp = reinterpret_cast< ::FbxLight *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyBool1 *>(sipForceConvertToType(sipPy,sipType_FbxPropertyBool1,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->CastLight = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxLight_CastShadows(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxLight_CastShadows(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyBool1*sipVal;
     ::FbxLight *sipCpp = reinterpret_cast< ::FbxLight *>(sipSelf);

    sipVal = &sipCpp->CastShadows;

    return sipConvertFromType(sipVal, sipType_FbxPropertyBool1, NULL);
}


extern "C" {static int varset_FbxLight_CastShadows(void *, PyObject *, PyObject *);}
static int varset_FbxLight_CastShadows(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyBool1*sipVal;
     ::FbxLight *sipCpp = reinterpret_cast< ::FbxLight *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyBool1 *>(sipForceConvertToType(sipPy,sipType_FbxPropertyBool1,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->CastShadows = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxLight_ClassId(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxLight_ClassId(void *, PyObject *, PyObject *)
{
     ::FbxClassId*sipVal;

    sipVal = & ::FbxLight::ClassId;

    return sipConvertFromType(sipVal, sipType_FbxClassId, NULL);
}


extern "C" {static int varset_FbxLight_ClassId(void *, PyObject *, PyObject *);}
static int varset_FbxLight_ClassId(void *, PyObject *sipPy, PyObject *)
{
     ::FbxClassId*sipVal;
    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxClassId *>(sipForceConvertToType(sipPy,sipType_FbxClassId,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

     ::FbxLight::ClassId = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxLight_Color(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxLight_Color(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyDouble3*sipVal;
     ::FbxLight *sipCpp = reinterpret_cast< ::FbxLight *>(sipSelf);

    sipVal = &sipCpp->Color;

    return sipConvertFromType(sipVal, sipType_FbxPropertyDouble3, NULL);
}


extern "C" {static int varset_FbxLight_Color(void *, PyObject *, PyObject *);}
static int varset_FbxLight_Color(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyDouble3*sipVal;
     ::FbxLight *sipCpp = reinterpret_cast< ::FbxLight *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyDouble3 *>(sipForceConvertToType(sipPy,sipType_FbxPropertyDouble3,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->Color = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxLight_DecayStart(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxLight_DecayStart(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyDouble1*sipVal;
     ::FbxLight *sipCpp = reinterpret_cast< ::FbxLight *>(sipSelf);

    sipVal = &sipCpp->DecayStart;

    return sipConvertFromType(sipVal, sipType_FbxPropertyDouble1, NULL);
}


extern "C" {static int varset_FbxLight_DecayStart(void *, PyObject *, PyObject *);}
static int varset_FbxLight_DecayStart(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyDouble1*sipVal;
     ::FbxLight *sipCpp = reinterpret_cast< ::FbxLight *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyDouble1 *>(sipForceConvertToType(sipPy,sipType_FbxPropertyDouble1,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->DecayStart = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxLight_DecayType(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxLight_DecayType(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyEDecayType*sipVal;
     ::FbxLight *sipCpp = reinterpret_cast< ::FbxLight *>(sipSelf);

    sipVal = &sipCpp->DecayType;

    return sipConvertFromType(sipVal, sipType_FbxPropertyEDecayType, NULL);
}


extern "C" {static int varset_FbxLight_DecayType(void *, PyObject *, PyObject *);}
static int varset_FbxLight_DecayType(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyEDecayType*sipVal;
     ::FbxLight *sipCpp = reinterpret_cast< ::FbxLight *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyEDecayType *>(sipForceConvertToType(sipPy,sipType_FbxPropertyEDecayType,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->DecayType = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxLight_DrawFrontFacingVolumetricLight(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxLight_DrawFrontFacingVolumetricLight(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyBool1*sipVal;
     ::FbxLight *sipCpp = reinterpret_cast< ::FbxLight *>(sipSelf);

    sipVal = &sipCpp->DrawFrontFacingVolumetricLight;

    return sipConvertFromType(sipVal, sipType_FbxPropertyBool1, NULL);
}


extern "C" {static int varset_FbxLight_DrawFrontFacingVolumetricLight(void *, PyObject *, PyObject *);}
static int varset_FbxLight_DrawFrontFacingVolumetricLight(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyBool1*sipVal;
     ::FbxLight *sipCpp = reinterpret_cast< ::FbxLight *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyBool1 *>(sipForceConvertToType(sipPy,sipType_FbxPropertyBool1,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->DrawFrontFacingVolumetricLight = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxLight_DrawGroundProjection(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxLight_DrawGroundProjection(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyBool1*sipVal;
     ::FbxLight *sipCpp = reinterpret_cast< ::FbxLight *>(sipSelf);

    sipVal = &sipCpp->DrawGroundProjection;

    return sipConvertFromType(sipVal, sipType_FbxPropertyBool1, NULL);
}


extern "C" {static int varset_FbxLight_DrawGroundProjection(void *, PyObject *, PyObject *);}
static int varset_FbxLight_DrawGroundProjection(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyBool1*sipVal;
     ::FbxLight *sipCpp = reinterpret_cast< ::FbxLight *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyBool1 *>(sipForceConvertToType(sipPy,sipType_FbxPropertyBool1,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->DrawGroundProjection = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxLight_DrawVolumetricLight(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxLight_DrawVolumetricLight(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyBool1*sipVal;
     ::FbxLight *sipCpp = reinterpret_cast< ::FbxLight *>(sipSelf);

    sipVal = &sipCpp->DrawVolumetricLight;

    return sipConvertFromType(sipVal, sipType_FbxPropertyBool1, NULL);
}


extern "C" {static int varset_FbxLight_DrawVolumetricLight(void *, PyObject *, PyObject *);}
static int varset_FbxLight_DrawVolumetricLight(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyBool1*sipVal;
     ::FbxLight *sipCpp = reinterpret_cast< ::FbxLight *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyBool1 *>(sipForceConvertToType(sipPy,sipType_FbxPropertyBool1,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->DrawVolumetricLight = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxLight_EnableBarnDoor(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxLight_EnableBarnDoor(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyBool1*sipVal;
     ::FbxLight *sipCpp = reinterpret_cast< ::FbxLight *>(sipSelf);

    sipVal = &sipCpp->EnableBarnDoor;

    return sipConvertFromType(sipVal, sipType_FbxPropertyBool1, NULL);
}


extern "C" {static int varset_FbxLight_EnableBarnDoor(void *, PyObject *, PyObject *);}
static int varset_FbxLight_EnableBarnDoor(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyBool1*sipVal;
     ::FbxLight *sipCpp = reinterpret_cast< ::FbxLight *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyBool1 *>(sipForceConvertToType(sipPy,sipType_FbxPropertyBool1,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->EnableBarnDoor = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxLight_EnableFarAttenuation(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxLight_EnableFarAttenuation(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyBool1*sipVal;
     ::FbxLight *sipCpp = reinterpret_cast< ::FbxLight *>(sipSelf);

    sipVal = &sipCpp->EnableFarAttenuation;

    return sipConvertFromType(sipVal, sipType_FbxPropertyBool1, NULL);
}


extern "C" {static int varset_FbxLight_EnableFarAttenuation(void *, PyObject *, PyObject *);}
static int varset_FbxLight_EnableFarAttenuation(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyBool1*sipVal;
     ::FbxLight *sipCpp = reinterpret_cast< ::FbxLight *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyBool1 *>(sipForceConvertToType(sipPy,sipType_FbxPropertyBool1,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->EnableFarAttenuation = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxLight_EnableNearAttenuation(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxLight_EnableNearAttenuation(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyBool1*sipVal;
     ::FbxLight *sipCpp = reinterpret_cast< ::FbxLight *>(sipSelf);

    sipVal = &sipCpp->EnableNearAttenuation;

    return sipConvertFromType(sipVal, sipType_FbxPropertyBool1, NULL);
}


extern "C" {static int varset_FbxLight_EnableNearAttenuation(void *, PyObject *, PyObject *);}
static int varset_FbxLight_EnableNearAttenuation(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyBool1*sipVal;
     ::FbxLight *sipCpp = reinterpret_cast< ::FbxLight *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyBool1 *>(sipForceConvertToType(sipPy,sipType_FbxPropertyBool1,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->EnableNearAttenuation = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxLight_FarAttenuationEnd(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxLight_FarAttenuationEnd(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyDouble1*sipVal;
     ::FbxLight *sipCpp = reinterpret_cast< ::FbxLight *>(sipSelf);

    sipVal = &sipCpp->FarAttenuationEnd;

    return sipConvertFromType(sipVal, sipType_FbxPropertyDouble1, NULL);
}


extern "C" {static int varset_FbxLight_FarAttenuationEnd(void *, PyObject *, PyObject *);}
static int varset_FbxLight_FarAttenuationEnd(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyDouble1*sipVal;
     ::FbxLight *sipCpp = reinterpret_cast< ::FbxLight *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyDouble1 *>(sipForceConvertToType(sipPy,sipType_FbxPropertyDouble1,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->FarAttenuationEnd = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxLight_FarAttenuationStart(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxLight_FarAttenuationStart(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyDouble1*sipVal;
     ::FbxLight *sipCpp = reinterpret_cast< ::FbxLight *>(sipSelf);

    sipVal = &sipCpp->FarAttenuationStart;

    return sipConvertFromType(sipVal, sipType_FbxPropertyDouble1, NULL);
}


extern "C" {static int varset_FbxLight_FarAttenuationStart(void *, PyObject *, PyObject *);}
static int varset_FbxLight_FarAttenuationStart(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyDouble1*sipVal;
     ::FbxLight *sipCpp = reinterpret_cast< ::FbxLight *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyDouble1 *>(sipForceConvertToType(sipPy,sipType_FbxPropertyDouble1,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->FarAttenuationStart = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxLight_FileName(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxLight_FileName(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyString*sipVal;
     ::FbxLight *sipCpp = reinterpret_cast< ::FbxLight *>(sipSelf);

    sipVal = &sipCpp->FileName;

    return sipConvertFromType(sipVal, sipType_FbxPropertyString, NULL);
}


extern "C" {static int varset_FbxLight_FileName(void *, PyObject *, PyObject *);}
static int varset_FbxLight_FileName(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyString*sipVal;
     ::FbxLight *sipCpp = reinterpret_cast< ::FbxLight *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyString *>(sipForceConvertToType(sipPy,sipType_FbxPropertyString,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->FileName = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxLight_Fog(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxLight_Fog(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyDouble1*sipVal;
     ::FbxLight *sipCpp = reinterpret_cast< ::FbxLight *>(sipSelf);

    sipVal = &sipCpp->Fog;

    return sipConvertFromType(sipVal, sipType_FbxPropertyDouble1, NULL);
}


extern "C" {static int varset_FbxLight_Fog(void *, PyObject *, PyObject *);}
static int varset_FbxLight_Fog(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyDouble1*sipVal;
     ::FbxLight *sipCpp = reinterpret_cast< ::FbxLight *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyDouble1 *>(sipForceConvertToType(sipPy,sipType_FbxPropertyDouble1,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->Fog = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxLight_InnerAngle(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxLight_InnerAngle(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyDouble1*sipVal;
     ::FbxLight *sipCpp = reinterpret_cast< ::FbxLight *>(sipSelf);

    sipVal = &sipCpp->InnerAngle;

    return sipConvertFromType(sipVal, sipType_FbxPropertyDouble1, NULL);
}


extern "C" {static int varset_FbxLight_InnerAngle(void *, PyObject *, PyObject *);}
static int varset_FbxLight_InnerAngle(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyDouble1*sipVal;
     ::FbxLight *sipCpp = reinterpret_cast< ::FbxLight *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyDouble1 *>(sipForceConvertToType(sipPy,sipType_FbxPropertyDouble1,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->InnerAngle = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxLight_Intensity(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxLight_Intensity(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyDouble1*sipVal;
     ::FbxLight *sipCpp = reinterpret_cast< ::FbxLight *>(sipSelf);

    sipVal = &sipCpp->Intensity;

    return sipConvertFromType(sipVal, sipType_FbxPropertyDouble1, NULL);
}


extern "C" {static int varset_FbxLight_Intensity(void *, PyObject *, PyObject *);}
static int varset_FbxLight_Intensity(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyDouble1*sipVal;
     ::FbxLight *sipCpp = reinterpret_cast< ::FbxLight *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyDouble1 *>(sipForceConvertToType(sipPy,sipType_FbxPropertyDouble1,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->Intensity = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxLight_LeftBarnDoor(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxLight_LeftBarnDoor(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyFloat1*sipVal;
     ::FbxLight *sipCpp = reinterpret_cast< ::FbxLight *>(sipSelf);

    sipVal = &sipCpp->LeftBarnDoor;

    return sipConvertFromType(sipVal, sipType_FbxPropertyFloat1, NULL);
}


extern "C" {static int varset_FbxLight_LeftBarnDoor(void *, PyObject *, PyObject *);}
static int varset_FbxLight_LeftBarnDoor(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyFloat1*sipVal;
     ::FbxLight *sipCpp = reinterpret_cast< ::FbxLight *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyFloat1 *>(sipForceConvertToType(sipPy,sipType_FbxPropertyFloat1,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->LeftBarnDoor = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxLight_LightType(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxLight_LightType(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyEType*sipVal;
     ::FbxLight *sipCpp = reinterpret_cast< ::FbxLight *>(sipSelf);

    sipVal = &sipCpp->LightType;

    return sipConvertFromType(sipVal, sipType_FbxPropertyEType, NULL);
}


extern "C" {static int varset_FbxLight_LightType(void *, PyObject *, PyObject *);}
static int varset_FbxLight_LightType(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyEType*sipVal;
     ::FbxLight *sipCpp = reinterpret_cast< ::FbxLight *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyEType *>(sipForceConvertToType(sipPy,sipType_FbxPropertyEType,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->LightType = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxLight_NearAttenuationEnd(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxLight_NearAttenuationEnd(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyDouble1*sipVal;
     ::FbxLight *sipCpp = reinterpret_cast< ::FbxLight *>(sipSelf);

    sipVal = &sipCpp->NearAttenuationEnd;

    return sipConvertFromType(sipVal, sipType_FbxPropertyDouble1, NULL);
}


extern "C" {static int varset_FbxLight_NearAttenuationEnd(void *, PyObject *, PyObject *);}
static int varset_FbxLight_NearAttenuationEnd(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyDouble1*sipVal;
     ::FbxLight *sipCpp = reinterpret_cast< ::FbxLight *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyDouble1 *>(sipForceConvertToType(sipPy,sipType_FbxPropertyDouble1,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->NearAttenuationEnd = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxLight_NearAttenuationStart(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxLight_NearAttenuationStart(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyDouble1*sipVal;
     ::FbxLight *sipCpp = reinterpret_cast< ::FbxLight *>(sipSelf);

    sipVal = &sipCpp->NearAttenuationStart;

    return sipConvertFromType(sipVal, sipType_FbxPropertyDouble1, NULL);
}


extern "C" {static int varset_FbxLight_NearAttenuationStart(void *, PyObject *, PyObject *);}
static int varset_FbxLight_NearAttenuationStart(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyDouble1*sipVal;
     ::FbxLight *sipCpp = reinterpret_cast< ::FbxLight *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyDouble1 *>(sipForceConvertToType(sipPy,sipType_FbxPropertyDouble1,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->NearAttenuationStart = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxLight_OuterAngle(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxLight_OuterAngle(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyDouble1*sipVal;
     ::FbxLight *sipCpp = reinterpret_cast< ::FbxLight *>(sipSelf);

    sipVal = &sipCpp->OuterAngle;

    return sipConvertFromType(sipVal, sipType_FbxPropertyDouble1, NULL);
}


extern "C" {static int varset_FbxLight_OuterAngle(void *, PyObject *, PyObject *);}
static int varset_FbxLight_OuterAngle(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyDouble1*sipVal;
     ::FbxLight *sipCpp = reinterpret_cast< ::FbxLight *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyDouble1 *>(sipForceConvertToType(sipPy,sipType_FbxPropertyDouble1,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->OuterAngle = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxLight_RightBarnDoor(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxLight_RightBarnDoor(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyFloat1*sipVal;
     ::FbxLight *sipCpp = reinterpret_cast< ::FbxLight *>(sipSelf);

    sipVal = &sipCpp->RightBarnDoor;

    return sipConvertFromType(sipVal, sipType_FbxPropertyFloat1, NULL);
}


extern "C" {static int varset_FbxLight_RightBarnDoor(void *, PyObject *, PyObject *);}
static int varset_FbxLight_RightBarnDoor(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyFloat1*sipVal;
     ::FbxLight *sipCpp = reinterpret_cast< ::FbxLight *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyFloat1 *>(sipForceConvertToType(sipPy,sipType_FbxPropertyFloat1,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->RightBarnDoor = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxLight_ShadowColor(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxLight_ShadowColor(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyDouble3*sipVal;
     ::FbxLight *sipCpp = reinterpret_cast< ::FbxLight *>(sipSelf);

    sipVal = &sipCpp->ShadowColor;

    return sipConvertFromType(sipVal, sipType_FbxPropertyDouble3, NULL);
}


extern "C" {static int varset_FbxLight_ShadowColor(void *, PyObject *, PyObject *);}
static int varset_FbxLight_ShadowColor(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyDouble3*sipVal;
     ::FbxLight *sipCpp = reinterpret_cast< ::FbxLight *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyDouble3 *>(sipForceConvertToType(sipPy,sipType_FbxPropertyDouble3,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->ShadowColor = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxLight_TopBarnDoor(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxLight_TopBarnDoor(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyFloat1*sipVal;
     ::FbxLight *sipCpp = reinterpret_cast< ::FbxLight *>(sipSelf);

    sipVal = &sipCpp->TopBarnDoor;

    return sipConvertFromType(sipVal, sipType_FbxPropertyFloat1, NULL);
}


extern "C" {static int varset_FbxLight_TopBarnDoor(void *, PyObject *, PyObject *);}
static int varset_FbxLight_TopBarnDoor(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyFloat1*sipVal;
     ::FbxLight *sipCpp = reinterpret_cast< ::FbxLight *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyFloat1 *>(sipForceConvertToType(sipPy,sipType_FbxPropertyFloat1,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->TopBarnDoor = *sipVal;

    return 0;
}

sipVariableDef variables_FbxLight[] = {
    {InstanceVariable, sipName_AreaLightShape, (PyMethodDef *)varget_FbxLight_AreaLightShape, (PyMethodDef *)varset_FbxLight_AreaLightShape, NULL, NULL},
    {InstanceVariable, sipName_BottomBarnDoor, (PyMethodDef *)varget_FbxLight_BottomBarnDoor, (PyMethodDef *)varset_FbxLight_BottomBarnDoor, NULL, NULL},
    {InstanceVariable, sipName_CastLight, (PyMethodDef *)varget_FbxLight_CastLight, (PyMethodDef *)varset_FbxLight_CastLight, NULL, NULL},
    {InstanceVariable, sipName_CastShadows, (PyMethodDef *)varget_FbxLight_CastShadows, (PyMethodDef *)varset_FbxLight_CastShadows, NULL, NULL},
    {ClassVariable, sipName_ClassId, (PyMethodDef *)varget_FbxLight_ClassId, (PyMethodDef *)varset_FbxLight_ClassId, NULL, NULL},
    {InstanceVariable, sipName_Color, (PyMethodDef *)varget_FbxLight_Color, (PyMethodDef *)varset_FbxLight_Color, NULL, NULL},
    {InstanceVariable, sipName_DecayStart, (PyMethodDef *)varget_FbxLight_DecayStart, (PyMethodDef *)varset_FbxLight_DecayStart, NULL, NULL},
    {InstanceVariable, sipName_DecayType, (PyMethodDef *)varget_FbxLight_DecayType, (PyMethodDef *)varset_FbxLight_DecayType, NULL, NULL},
    {InstanceVariable, sipName_DrawFrontFacingVolumetricLight, (PyMethodDef *)varget_FbxLight_DrawFrontFacingVolumetricLight, (PyMethodDef *)varset_FbxLight_DrawFrontFacingVolumetricLight, NULL, NULL},
    {InstanceVariable, sipName_DrawGroundProjection, (PyMethodDef *)varget_FbxLight_DrawGroundProjection, (PyMethodDef *)varset_FbxLight_DrawGroundProjection, NULL, NULL},
    {InstanceVariable, sipName_DrawVolumetricLight, (PyMethodDef *)varget_FbxLight_DrawVolumetricLight, (PyMethodDef *)varset_FbxLight_DrawVolumetricLight, NULL, NULL},
    {InstanceVariable, sipName_EnableBarnDoor, (PyMethodDef *)varget_FbxLight_EnableBarnDoor, (PyMethodDef *)varset_FbxLight_EnableBarnDoor, NULL, NULL},
    {InstanceVariable, sipName_EnableFarAttenuation, (PyMethodDef *)varget_FbxLight_EnableFarAttenuation, (PyMethodDef *)varset_FbxLight_EnableFarAttenuation, NULL, NULL},
    {InstanceVariable, sipName_EnableNearAttenuation, (PyMethodDef *)varget_FbxLight_EnableNearAttenuation, (PyMethodDef *)varset_FbxLight_EnableNearAttenuation, NULL, NULL},
    {InstanceVariable, sipName_FarAttenuationEnd, (PyMethodDef *)varget_FbxLight_FarAttenuationEnd, (PyMethodDef *)varset_FbxLight_FarAttenuationEnd, NULL, NULL},
    {InstanceVariable, sipName_FarAttenuationStart, (PyMethodDef *)varget_FbxLight_FarAttenuationStart, (PyMethodDef *)varset_FbxLight_FarAttenuationStart, NULL, NULL},
    {InstanceVariable, sipName_FileName, (PyMethodDef *)varget_FbxLight_FileName, (PyMethodDef *)varset_FbxLight_FileName, NULL, NULL},
    {InstanceVariable, sipName_Fog, (PyMethodDef *)varget_FbxLight_Fog, (PyMethodDef *)varset_FbxLight_Fog, NULL, NULL},
    {InstanceVariable, sipName_InnerAngle, (PyMethodDef *)varget_FbxLight_InnerAngle, (PyMethodDef *)varset_FbxLight_InnerAngle, NULL, NULL},
    {InstanceVariable, sipName_Intensity, (PyMethodDef *)varget_FbxLight_Intensity, (PyMethodDef *)varset_FbxLight_Intensity, NULL, NULL},
    {InstanceVariable, sipName_LeftBarnDoor, (PyMethodDef *)varget_FbxLight_LeftBarnDoor, (PyMethodDef *)varset_FbxLight_LeftBarnDoor, NULL, NULL},
    {InstanceVariable, sipName_LightType, (PyMethodDef *)varget_FbxLight_LightType, (PyMethodDef *)varset_FbxLight_LightType, NULL, NULL},
    {InstanceVariable, sipName_NearAttenuationEnd, (PyMethodDef *)varget_FbxLight_NearAttenuationEnd, (PyMethodDef *)varset_FbxLight_NearAttenuationEnd, NULL, NULL},
    {InstanceVariable, sipName_NearAttenuationStart, (PyMethodDef *)varget_FbxLight_NearAttenuationStart, (PyMethodDef *)varset_FbxLight_NearAttenuationStart, NULL, NULL},
    {InstanceVariable, sipName_OuterAngle, (PyMethodDef *)varget_FbxLight_OuterAngle, (PyMethodDef *)varset_FbxLight_OuterAngle, NULL, NULL},
    {InstanceVariable, sipName_RightBarnDoor, (PyMethodDef *)varget_FbxLight_RightBarnDoor, (PyMethodDef *)varset_FbxLight_RightBarnDoor, NULL, NULL},
    {InstanceVariable, sipName_ShadowColor, (PyMethodDef *)varget_FbxLight_ShadowColor, (PyMethodDef *)varset_FbxLight_ShadowColor, NULL, NULL},
    {InstanceVariable, sipName_TopBarnDoor, (PyMethodDef *)varget_FbxLight_TopBarnDoor, (PyMethodDef *)varset_FbxLight_TopBarnDoor, NULL, NULL},
};


sipClassTypeDef sipTypeDef_fbx_FbxLight = {
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_FbxLight,
        {0},
        0
    },
    {
        sipNameNr_FbxLight,
        {0, 0, 1},
        5, methods_FbxLight,
        11, enummembers_FbxLight,
        28, variables_FbxLight,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    0,
    -1,
    -1,
    supers_FbxLight,
    slots_FbxLight,
    0,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    0,
    0,
    0,
    0,
    release_FbxLight,
    cast_FbxLight,
    0,
    0,
    0,
    0,
    0,
    0
};
