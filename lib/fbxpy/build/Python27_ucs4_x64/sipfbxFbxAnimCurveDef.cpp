/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.3
 *
 * Copyright (C) 2009 Autodesk, Inc. and/or its licensors.
 * All Rights Reserved.
 * 
 * The coded instructions, statements, computer programs, and/or related material 
 * (collectively the "Data") in these files contain unpublished information 
 * proprietary to Autodesk, Inc. and/or its licensors, which is protected by 
 * Canada and United States of America federal copyright law and by international 
 * treaties. 
 * 
 * The Data may not be disclosed or distributed to third parties, in whole or in
 * part, without the prior written consent of Autodesk, Inc. ("Autodesk").
 * 
 * THE DATA IS PROVIDED "AS IS" AND WITHOUT WARRANTY.
 * ALL WARRANTIES ARE EXPRESSLY EXCLUDED AND DISCLAIMED. AUTODESK MAKES NO
 * WARRANTY OF ANY KIND WITH RESPECT TO THE DATA, EXPRESS, IMPLIED OR ARISING
 * BY CUSTOM OR TRADE USAGE, AND DISCLAIMS ANY IMPLIED WARRANTIES OF TITLE, 
 * NON-INFRINGEMENT, MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE OR USE. 
 * WITHOUT LIMITING THE FOREGOING, AUTODESK DOES NOT WARRANT THAT THE OPERATION
 * OF THE DATA WILL BE UNINTERRUPTED OR ERROR FREE. 
 * 
 * IN NO EVENT SHALL AUTODESK, ITS AFFILIATES, PARENT COMPANIES, LICENSORS
 * OR SUPPLIERS ("AUTODESK GROUP") BE LIABLE FOR ANY LOSSES, DAMAGES OR EXPENSES
 * OF ANY KIND (INCLUDING WITHOUT LIMITATION PUNITIVE OR MULTIPLE DAMAGES OR OTHER
 * SPECIAL, DIRECT, INDIRECT, EXEMPLARY, INCIDENTAL, LOSS OF PROFITS, REVENUE
 * OR DATA, COST OF COVER OR CONSEQUENTIAL LOSSES OR DAMAGES OF ANY KIND),
 * HOWEVER CAUSED, AND REGARDLESS OF THE THEORY OF LIABILITY, WHETHER DERIVED
 * FROM CONTRACT, TORT (INCLUDING, BUT NOT LIMITED TO, NEGLIGENCE), OR OTHERWISE,
 * ARISING OUT OF OR RELATING TO THE DATA OR ITS USE OR ANY OTHER PERFORMANCE,
 * WHETHER OR NOT AUTODESK HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH LOSS
 * OR DAMAGE. 
 */

#include "sipAPIfbx.h"




/* Call the instance's destructor. */
extern "C" {static void release_FbxAnimCurveDef(void *, int);}
static void release_FbxAnimCurveDef(void *sipCppV, int)
{
    delete reinterpret_cast< ::FbxAnimCurveDef *>(sipCppV);
}


extern "C" {static void assign_FbxAnimCurveDef(void *, SIP_SSIZE_T, const void *);}
static void assign_FbxAnimCurveDef(void *sipDst, SIP_SSIZE_T sipDstIdx, const void *sipSrc)
{
    reinterpret_cast< ::FbxAnimCurveDef *>(sipDst)[sipDstIdx] = *reinterpret_cast<const  ::FbxAnimCurveDef *>(sipSrc);
}


extern "C" {static void *array_FbxAnimCurveDef(SIP_SSIZE_T);}
static void *array_FbxAnimCurveDef(SIP_SSIZE_T sipNrElem)
{
    return new  ::FbxAnimCurveDef[sipNrElem];
}


extern "C" {static void *copy_FbxAnimCurveDef(const void *, SIP_SSIZE_T);}
static void *copy_FbxAnimCurveDef(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::FbxAnimCurveDef(reinterpret_cast<const  ::FbxAnimCurveDef *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_FbxAnimCurveDef(sipSimpleWrapper *);}
static void dealloc_FbxAnimCurveDef(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_FbxAnimCurveDef(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_FbxAnimCurveDef(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_FbxAnimCurveDef(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::FbxAnimCurveDef *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            sipCpp = new  ::FbxAnimCurveDef();

            return sipCpp;
        }
    }

    {
        const  ::FbxAnimCurveDef* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_FbxAnimCurveDef, &a0))
        {
            sipCpp = new  ::FbxAnimCurveDef(*a0);

            return sipCpp;
        }
    }

    return NULL;
}

static sipEnumMemberDef enummembers_FbxAnimCurveDef[] = {
    {sipName_eConstantNext, static_cast<int>( ::FbxAnimCurveDef::eConstantNext), 10},
    {sipName_eConstantStandard, static_cast<int>( ::FbxAnimCurveDef::eConstantStandard), 10},
    {sipName_eInterpolationConstant, static_cast<int>( ::FbxAnimCurveDef::eInterpolationConstant), 12},
    {sipName_eInterpolationCubic, static_cast<int>( ::FbxAnimCurveDef::eInterpolationCubic), 12},
    {sipName_eInterpolationLinear, static_cast<int>( ::FbxAnimCurveDef::eInterpolationLinear), 12},
    {sipName_eNextLeftSlope, static_cast<int>( ::FbxAnimCurveDef::eNextLeftSlope), 11},
    {sipName_eNextLeftVelocity, static_cast<int>( ::FbxAnimCurveDef::eNextLeftVelocity), 11},
    {sipName_eNextLeftWeight, static_cast<int>( ::FbxAnimCurveDef::eNextLeftWeight), 11},
    {sipName_eRightSlope, static_cast<int>( ::FbxAnimCurveDef::eRightSlope), 11},
    {sipName_eRightVelocity, static_cast<int>( ::FbxAnimCurveDef::eRightVelocity), 11},
    {sipName_eRightWeight, static_cast<int>( ::FbxAnimCurveDef::eRightWeight), 11},
    {sipName_eTCBBias, static_cast<int>( ::FbxAnimCurveDef::eTCBBias), 11},
    {sipName_eTCBContinuity, static_cast<int>( ::FbxAnimCurveDef::eTCBContinuity), 11},
    {sipName_eTCBTension, static_cast<int>( ::FbxAnimCurveDef::eTCBTension), 11},
    {sipName_eTangentAuto, static_cast<int>( ::FbxAnimCurveDef::eTangentAuto), 13},
    {sipName_eTangentAutoBreak, static_cast<int>( ::FbxAnimCurveDef::eTangentAutoBreak), 13},
    {sipName_eTangentBreak, static_cast<int>( ::FbxAnimCurveDef::eTangentBreak), 13},
    {sipName_eTangentGenericBreak, static_cast<int>( ::FbxAnimCurveDef::eTangentGenericBreak), 13},
    {sipName_eTangentGenericClamp, static_cast<int>( ::FbxAnimCurveDef::eTangentGenericClamp), 13},
    {sipName_eTangentGenericClampProgressive, static_cast<int>( ::FbxAnimCurveDef::eTangentGenericClampProgressive), 13},
    {sipName_eTangentGenericTimeIndependent, static_cast<int>( ::FbxAnimCurveDef::eTangentGenericTimeIndependent), 13},
    {sipName_eTangentShowBoth, static_cast<int>( ::FbxAnimCurveDef::eTangentShowBoth), 14},
    {sipName_eTangentShowLeft, static_cast<int>( ::FbxAnimCurveDef::eTangentShowLeft), 14},
    {sipName_eTangentShowNone, static_cast<int>( ::FbxAnimCurveDef::eTangentShowNone), 14},
    {sipName_eTangentShowRight, static_cast<int>( ::FbxAnimCurveDef::eTangentShowRight), 14},
    {sipName_eTangentTCB, static_cast<int>( ::FbxAnimCurveDef::eTangentTCB), 13},
    {sipName_eTangentUser, static_cast<int>( ::FbxAnimCurveDef::eTangentUser), 13},
    {sipName_eVelocity, static_cast<int>( ::FbxAnimCurveDef::eVelocity), 11},
    {sipName_eVelocityAll, static_cast<int>( ::FbxAnimCurveDef::eVelocityAll), 15},
    {sipName_eVelocityNextLeft, static_cast<int>( ::FbxAnimCurveDef::eVelocityNextLeft), 15},
    {sipName_eVelocityNone, static_cast<int>( ::FbxAnimCurveDef::eVelocityNone), 15},
    {sipName_eVelocityRight, static_cast<int>( ::FbxAnimCurveDef::eVelocityRight), 15},
    {sipName_eWeightedAll, static_cast<int>( ::FbxAnimCurveDef::eWeightedAll), 16},
    {sipName_eWeightedNextLeft, static_cast<int>( ::FbxAnimCurveDef::eWeightedNextLeft), 16},
    {sipName_eWeightedNone, static_cast<int>( ::FbxAnimCurveDef::eWeightedNone), 16},
    {sipName_eWeightedRight, static_cast<int>( ::FbxAnimCurveDef::eWeightedRight), 16},
    {sipName_eWeights, static_cast<int>( ::FbxAnimCurveDef::eWeights), 11},
};


extern "C" {static PyObject *varget_FbxAnimCurveDef_sDEFAULT_VELOCITY(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxAnimCurveDef_sDEFAULT_VELOCITY(void *, PyObject *, PyObject *)
{
    float sipVal;

    sipVal =  ::FbxAnimCurveDef::sDEFAULT_VELOCITY;

    return PyFloat_FromDouble((double)sipVal);
}


extern "C" {static PyObject *varget_FbxAnimCurveDef_sDEFAULT_WEIGHT(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxAnimCurveDef_sDEFAULT_WEIGHT(void *, PyObject *, PyObject *)
{
    float sipVal;

    sipVal =  ::FbxAnimCurveDef::sDEFAULT_WEIGHT;

    return PyFloat_FromDouble((double)sipVal);
}


extern "C" {static PyObject *varget_FbxAnimCurveDef_sMAX_WEIGHT(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxAnimCurveDef_sMAX_WEIGHT(void *, PyObject *, PyObject *)
{
    float sipVal;

    sipVal =  ::FbxAnimCurveDef::sMAX_WEIGHT;

    return PyFloat_FromDouble((double)sipVal);
}


extern "C" {static PyObject *varget_FbxAnimCurveDef_sMIN_WEIGHT(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxAnimCurveDef_sMIN_WEIGHT(void *, PyObject *, PyObject *)
{
    float sipVal;

    sipVal =  ::FbxAnimCurveDef::sMIN_WEIGHT;

    return PyFloat_FromDouble((double)sipVal);
}

sipVariableDef variables_FbxAnimCurveDef[] = {
    {ClassVariable, sipName_sDEFAULT_VELOCITY, (PyMethodDef *)varget_FbxAnimCurveDef_sDEFAULT_VELOCITY, NULL, NULL, NULL},
    {ClassVariable, sipName_sDEFAULT_WEIGHT, (PyMethodDef *)varget_FbxAnimCurveDef_sDEFAULT_WEIGHT, NULL, NULL, NULL},
    {ClassVariable, sipName_sMAX_WEIGHT, (PyMethodDef *)varget_FbxAnimCurveDef_sMAX_WEIGHT, NULL, NULL, NULL},
    {ClassVariable, sipName_sMIN_WEIGHT, (PyMethodDef *)varget_FbxAnimCurveDef_sMIN_WEIGHT, NULL, NULL, NULL},
};

PyDoc_STRVAR(doc_FbxAnimCurveDef, "\1FbxAnimCurveDef()\n"
    "FbxAnimCurveDef(FbxAnimCurveDef)");


sipClassTypeDef sipTypeDef_fbx_FbxAnimCurveDef = {
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_FbxAnimCurveDef,
        {0},
        0
    },
    {
        sipNameNr_FbxAnimCurveDef,
        {0, 0, 1},
        0, 0,
        37, enummembers_FbxAnimCurveDef,
        4, variables_FbxAnimCurveDef,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_FbxAnimCurveDef,
    -1,
    -1,
    0,
    0,
    init_type_FbxAnimCurveDef,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_FbxAnimCurveDef,
    assign_FbxAnimCurveDef,
    array_FbxAnimCurveDef,
    copy_FbxAnimCurveDef,
    release_FbxAnimCurveDef,
    0,
    0,
    0,
    0,
    0,
    0,
    0
};
