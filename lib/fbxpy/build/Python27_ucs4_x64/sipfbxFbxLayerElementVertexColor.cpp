/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.3
 *
 * Copyright (C) 2009 Autodesk, Inc. and/or its licensors.
 * All Rights Reserved.
 * 
 * The coded instructions, statements, computer programs, and/or related material 
 * (collectively the "Data") in these files contain unpublished information 
 * proprietary to Autodesk, Inc. and/or its licensors, which is protected by 
 * Canada and United States of America federal copyright law and by international 
 * treaties. 
 * 
 * The Data may not be disclosed or distributed to third parties, in whole or in
 * part, without the prior written consent of Autodesk, Inc. ("Autodesk").
 * 
 * THE DATA IS PROVIDED "AS IS" AND WITHOUT WARRANTY.
 * ALL WARRANTIES ARE EXPRESSLY EXCLUDED AND DISCLAIMED. AUTODESK MAKES NO
 * WARRANTY OF ANY KIND WITH RESPECT TO THE DATA, EXPRESS, IMPLIED OR ARISING
 * BY CUSTOM OR TRADE USAGE, AND DISCLAIMS ANY IMPLIED WARRANTIES OF TITLE, 
 * NON-INFRINGEMENT, MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE OR USE. 
 * WITHOUT LIMITING THE FOREGOING, AUTODESK DOES NOT WARRANT THAT THE OPERATION
 * OF THE DATA WILL BE UNINTERRUPTED OR ERROR FREE. 
 * 
 * IN NO EVENT SHALL AUTODESK, ITS AFFILIATES, PARENT COMPANIES, LICENSORS
 * OR SUPPLIERS ("AUTODESK GROUP") BE LIABLE FOR ANY LOSSES, DAMAGES OR EXPENSES
 * OF ANY KIND (INCLUDING WITHOUT LIMITATION PUNITIVE OR MULTIPLE DAMAGES OR OTHER
 * SPECIAL, DIRECT, INDIRECT, EXEMPLARY, INCIDENTAL, LOSS OF PROFITS, REVENUE
 * OR DATA, COST OF COVER OR CONSEQUENTIAL LOSSES OR DAMAGES OF ANY KIND),
 * HOWEVER CAUSED, AND REGARDLESS OF THE THEORY OF LIABILITY, WHETHER DERIVED
 * FROM CONTRACT, TORT (INCLUDING, BUT NOT LIMITED TO, NEGLIGENCE), OR OTHERWISE,
 * ARISING OUT OF OR RELATING TO THE DATA OR ITS USE OR ANY OTHER PERFORMANCE,
 * WHETHER OR NOT AUTODESK HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH LOSS
 * OR DAMAGE. 
 */

#include "sipAPIfbx.h"




class sipFbxLayerElementVertexColor : public  ::FbxLayerElementVertexColor
{
public:
    sipFbxLayerElementVertexColor();
    sipFbxLayerElementVertexColor(const  ::FbxLayerElementVertexColor&);
    ~sipFbxLayerElementVertexColor();

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipFbxLayerElementVertexColor(const sipFbxLayerElementVertexColor &);
    sipFbxLayerElementVertexColor &operator = (const sipFbxLayerElementVertexColor &);
};

sipFbxLayerElementVertexColor::sipFbxLayerElementVertexColor():  ::FbxLayerElementVertexColor(), sipPySelf(0)
{
}

sipFbxLayerElementVertexColor::sipFbxLayerElementVertexColor(const  ::FbxLayerElementVertexColor& a0):  ::FbxLayerElementVertexColor(a0), sipPySelf(0)
{
}

sipFbxLayerElementVertexColor::~sipFbxLayerElementVertexColor()
{
    sipInstanceDestroyed(sipPySelf);
}


PyDoc_STRVAR(doc_FbxLayerElementVertexColor_Create, "Create(FbxLayerContainer, str) -> FbxLayerElementVertexColor");

extern "C" {static PyObject *meth_FbxLayerElementVertexColor_Create(PyObject *, PyObject *);}
static PyObject *meth_FbxLayerElementVertexColor_Create(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxLayerContainer* a0;
        const char* a1;
        PyObject *a1Keep;

        if (sipParseArgs(&sipParseErr, sipArgs, "J8A8", sipType_FbxLayerContainer, &a0, &a1Keep, &a1))
        {
             ::FbxLayerElementVertexColor*sipRes;

            sipRes =  ::FbxLayerElementVertexColor::Create(a0,a1);
            Py_DECREF(a1Keep);

            return sipConvertFromType(sipRes,sipType_FbxLayerElementVertexColor,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxLayerElementVertexColor, sipName_Create, doc_FbxLayerElementVertexColor_Create);

    return NULL;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_FbxLayerElementVertexColor(void *, const sipTypeDef *);}
static void *cast_FbxLayerElementVertexColor(void *sipCppV, const sipTypeDef *targetType)
{
     ::FbxLayerElementVertexColor *sipCpp = reinterpret_cast< ::FbxLayerElementVertexColor *>(sipCppV);

    if (targetType == sipType_FbxLayerElementTemplate_FbxColor)
        return static_cast< ::FbxLayerElementTemplate_FbxColor *>(sipCpp);

    if (targetType == sipType_FbxLayerElement)
        return static_cast< ::FbxLayerElement *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_FbxLayerElementVertexColor(void *, int);}
static void release_FbxLayerElementVertexColor(void *sipCppV, int sipState)
{
    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipFbxLayerElementVertexColor *>(sipCppV);
}


extern "C" {static void dealloc_FbxLayerElementVertexColor(sipSimpleWrapper *);}
static void dealloc_FbxLayerElementVertexColor(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipFbxLayerElementVertexColor *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_FbxLayerElementVertexColor(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_FbxLayerElementVertexColor(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_FbxLayerElementVertexColor(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipFbxLayerElementVertexColor *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            sipCpp = new sipFbxLayerElementVertexColor();

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const  ::FbxLayerElementVertexColor* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_FbxLayerElementVertexColor, &a0))
        {
            sipCpp = new sipFbxLayerElementVertexColor(*a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_FbxLayerElementVertexColor[] = {{193, 255, 1}};


static PyMethodDef methods_FbxLayerElementVertexColor[] = {
    {SIP_MLNAME_CAST(sipName_Create), meth_FbxLayerElementVertexColor_Create, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxLayerElementVertexColor_Create)}
};

PyDoc_STRVAR(doc_FbxLayerElementVertexColor, "\1FbxLayerElementVertexColor()\n"
    "FbxLayerElementVertexColor(FbxLayerElementVertexColor)");


sipClassTypeDef sipTypeDef_fbx_FbxLayerElementVertexColor = {
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_FbxLayerElementVertexColor,
        {0},
        0
    },
    {
        sipNameNr_FbxLayerElementVertexColor,
        {0, 0, 1},
        1, methods_FbxLayerElementVertexColor,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_FbxLayerElementVertexColor,
    -1,
    -1,
    supers_FbxLayerElementVertexColor,
    0,
    init_type_FbxLayerElementVertexColor,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_FbxLayerElementVertexColor,
    0,
    0,
    0,
    release_FbxLayerElementVertexColor,
    cast_FbxLayerElementVertexColor,
    0,
    0,
    0,
    0,
    0,
    0
};
