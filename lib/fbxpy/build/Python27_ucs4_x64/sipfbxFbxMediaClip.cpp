/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.3
 *
 * Copyright (C) 2009 Autodesk, Inc. and/or its licensors.
 * All Rights Reserved.
 * 
 * The coded instructions, statements, computer programs, and/or related material 
 * (collectively the "Data") in these files contain unpublished information 
 * proprietary to Autodesk, Inc. and/or its licensors, which is protected by 
 * Canada and United States of America federal copyright law and by international 
 * treaties. 
 * 
 * The Data may not be disclosed or distributed to third parties, in whole or in
 * part, without the prior written consent of Autodesk, Inc. ("Autodesk").
 * 
 * THE DATA IS PROVIDED "AS IS" AND WITHOUT WARRANTY.
 * ALL WARRANTIES ARE EXPRESSLY EXCLUDED AND DISCLAIMED. AUTODESK MAKES NO
 * WARRANTY OF ANY KIND WITH RESPECT TO THE DATA, EXPRESS, IMPLIED OR ARISING
 * BY CUSTOM OR TRADE USAGE, AND DISCLAIMS ANY IMPLIED WARRANTIES OF TITLE, 
 * NON-INFRINGEMENT, MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE OR USE. 
 * WITHOUT LIMITING THE FOREGOING, AUTODESK DOES NOT WARRANT THAT THE OPERATION
 * OF THE DATA WILL BE UNINTERRUPTED OR ERROR FREE. 
 * 
 * IN NO EVENT SHALL AUTODESK, ITS AFFILIATES, PARENT COMPANIES, LICENSORS
 * OR SUPPLIERS ("AUTODESK GROUP") BE LIABLE FOR ANY LOSSES, DAMAGES OR EXPENSES
 * OF ANY KIND (INCLUDING WITHOUT LIMITATION PUNITIVE OR MULTIPLE DAMAGES OR OTHER
 * SPECIAL, DIRECT, INDIRECT, EXEMPLARY, INCIDENTAL, LOSS OF PROFITS, REVENUE
 * OR DATA, COST OF COVER OR CONSEQUENTIAL LOSSES OR DAMAGES OF ANY KIND),
 * HOWEVER CAUSED, AND REGARDLESS OF THE THEORY OF LIABILITY, WHETHER DERIVED
 * FROM CONTRACT, TORT (INCLUDING, BUT NOT LIMITED TO, NEGLIGENCE), OR OTHERWISE,
 * ARISING OUT OF OR RELATING TO THE DATA OR ITS USE OR ANY OTHER PERFORMANCE,
 * WHETHER OR NOT AUTODESK HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH LOSS
 * OR DAMAGE. 
 */

#include "sipAPIfbx.h"




PyDoc_STRVAR(doc_FbxMediaClip_Create, "Create(FbxManager, str) -> FbxMediaClip");

extern "C" {static PyObject *meth_FbxMediaClip_Create(PyObject *, PyObject *);}
static PyObject *meth_FbxMediaClip_Create(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxManager* a0;
        const char* a1;
        PyObject *a1Keep;

        if (sipParseArgs(&sipParseErr, sipArgs, "J8A8", sipType_FbxManager, &a0, &a1Keep, &a1))
        {
             ::FbxMediaClip*sipRes;

            sipRes =  ::FbxMediaClip::Create(a0,a1);
            Py_DECREF(a1Keep);

            return sipConvertFromType(sipRes,sipType_FbxMediaClip,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxMediaClip, sipName_Create, doc_FbxMediaClip_Create);

    return NULL;
}


PyDoc_STRVAR(doc_FbxMediaClip_GetClassId, "GetClassId(self) -> FbxClassId");

extern "C" {static PyObject *meth_FbxMediaClip_GetClassId(PyObject *, PyObject *);}
static PyObject *meth_FbxMediaClip_GetClassId(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::FbxMediaClip *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxMediaClip, &sipCpp))
        {
             ::FbxClassId*sipRes;

            sipRes = new  ::FbxClassId((sipSelfWasArg ? sipCpp-> ::FbxMediaClip::GetClassId() : sipCpp->GetClassId()));

            return sipConvertFromNewType(sipRes,sipType_FbxClassId,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxMediaClip, sipName_GetClassId, doc_FbxMediaClip_GetClassId);

    return NULL;
}


PyDoc_STRVAR(doc_FbxMediaClip_Reset, "Reset(self)");

extern "C" {static PyObject *meth_FbxMediaClip_Reset(PyObject *, PyObject *);}
static PyObject *meth_FbxMediaClip_Reset(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxMediaClip *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxMediaClip, &sipCpp))
        {
            sipCpp->Reset();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxMediaClip, sipName_Reset, doc_FbxMediaClip_Reset);

    return NULL;
}


PyDoc_STRVAR(doc_FbxMediaClip_SetFileName, "SetFileName(self, str) -> bool");

extern "C" {static PyObject *meth_FbxMediaClip_SetFileName(PyObject *, PyObject *);}
static PyObject *meth_FbxMediaClip_SetFileName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const char* a0;
        PyObject *a0Keep;
         ::FbxMediaClip *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BA8", &sipSelf, sipType_FbxMediaClip, &sipCpp, &a0Keep, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->SetFileName(a0);
            Py_DECREF(a0Keep);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxMediaClip, sipName_SetFileName, doc_FbxMediaClip_SetFileName);

    return NULL;
}


PyDoc_STRVAR(doc_FbxMediaClip_GetFileName, "GetFileName(self) -> FbxString");

extern "C" {static PyObject *meth_FbxMediaClip_GetFileName(PyObject *, PyObject *);}
static PyObject *meth_FbxMediaClip_GetFileName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxMediaClip *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxMediaClip, &sipCpp))
        {
             ::FbxString*sipRes;

            sipRes = new  ::FbxString(sipCpp->GetFileName());

            return sipConvertFromNewType(sipRes,sipType_FbxString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxMediaClip, sipName_GetFileName, doc_FbxMediaClip_GetFileName);

    return NULL;
}


PyDoc_STRVAR(doc_FbxMediaClip_SetRelativeFileName, "SetRelativeFileName(self, str) -> bool");

extern "C" {static PyObject *meth_FbxMediaClip_SetRelativeFileName(PyObject *, PyObject *);}
static PyObject *meth_FbxMediaClip_SetRelativeFileName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const char* a0;
        PyObject *a0Keep;
         ::FbxMediaClip *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BA8", &sipSelf, sipType_FbxMediaClip, &sipCpp, &a0Keep, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->SetRelativeFileName(a0);
            Py_DECREF(a0Keep);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxMediaClip, sipName_SetRelativeFileName, doc_FbxMediaClip_SetRelativeFileName);

    return NULL;
}


PyDoc_STRVAR(doc_FbxMediaClip_GetRelativeFileName, "GetRelativeFileName(self) -> str");

extern "C" {static PyObject *meth_FbxMediaClip_GetRelativeFileName(PyObject *, PyObject *);}
static PyObject *meth_FbxMediaClip_GetRelativeFileName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxMediaClip *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxMediaClip, &sipCpp))
        {
            const char*sipRes;

            sipRes = sipCpp->GetRelativeFileName();

            if (sipRes == NULL)
            {
                Py_INCREF(Py_None);
                return Py_None;
            }

#if PY_MAJOR_VERSION >= 3
            return PyUnicode_FromString(sipRes);
#else
            return PyUnicode_DecodeUTF8(sipRes, strlen(sipRes), NULL);
#endif
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxMediaClip, sipName_GetRelativeFileName, doc_FbxMediaClip_GetRelativeFileName);

    return NULL;
}


PyDoc_STRVAR(doc_FbxMediaClip_SetColor, "SetColor(self, FbxColor)");

extern "C" {static PyObject *meth_FbxMediaClip_SetColor(PyObject *, PyObject *);}
static PyObject *meth_FbxMediaClip_SetColor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxColor* a0;
         ::FbxMediaClip *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_FbxMediaClip, &sipCpp, sipType_FbxColor, &a0))
        {
            sipCpp->SetColor(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxMediaClip, sipName_SetColor, doc_FbxMediaClip_SetColor);

    return NULL;
}


PyDoc_STRVAR(doc_FbxMediaClip_GetColor, "GetColor(self) -> FbxColor");

extern "C" {static PyObject *meth_FbxMediaClip_GetColor(PyObject *, PyObject *);}
static PyObject *meth_FbxMediaClip_GetColor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::FbxMediaClip *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxMediaClip, &sipCpp))
        {
             ::FbxColor*sipRes;

            sipRes = new  ::FbxColor(sipCpp->GetColor());

            return sipConvertFromNewType(sipRes,sipType_FbxColor,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxMediaClip, sipName_GetColor, doc_FbxMediaClip_GetColor);

    return NULL;
}


PyDoc_STRVAR(doc_FbxMediaClip_SetPlaySpeed, "SetPlaySpeed(self, float)");

extern "C" {static PyObject *meth_FbxMediaClip_SetPlaySpeed(PyObject *, PyObject *);}
static PyObject *meth_FbxMediaClip_SetPlaySpeed(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        double a0;
         ::FbxMediaClip *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_FbxMediaClip, &sipCpp, &a0))
        {
            sipCpp->SetPlaySpeed(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxMediaClip, sipName_SetPlaySpeed, doc_FbxMediaClip_SetPlaySpeed);

    return NULL;
}


PyDoc_STRVAR(doc_FbxMediaClip_GetPlaySpeed, "GetPlaySpeed(self) -> float");

extern "C" {static PyObject *meth_FbxMediaClip_GetPlaySpeed(PyObject *, PyObject *);}
static PyObject *meth_FbxMediaClip_GetPlaySpeed(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxMediaClip *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxMediaClip, &sipCpp))
        {
            double sipRes;

            sipRes = sipCpp->GetPlaySpeed();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxMediaClip, sipName_GetPlaySpeed, doc_FbxMediaClip_GetPlaySpeed);

    return NULL;
}


PyDoc_STRVAR(doc_FbxMediaClip_SetClipIn, "SetClipIn(self, FbxTime)");

extern "C" {static PyObject *meth_FbxMediaClip_SetClipIn(PyObject *, PyObject *);}
static PyObject *meth_FbxMediaClip_SetClipIn(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxTime* a0;
         ::FbxMediaClip *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_FbxMediaClip, &sipCpp, sipType_FbxTime, &a0))
        {
            sipCpp->SetClipIn(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxMediaClip, sipName_SetClipIn, doc_FbxMediaClip_SetClipIn);

    return NULL;
}


PyDoc_STRVAR(doc_FbxMediaClip_GetClipIn, "GetClipIn(self) -> FbxTime");

extern "C" {static PyObject *meth_FbxMediaClip_GetClipIn(PyObject *, PyObject *);}
static PyObject *meth_FbxMediaClip_GetClipIn(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::FbxMediaClip *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxMediaClip, &sipCpp))
        {
             ::FbxTime*sipRes;

            sipRes = new  ::FbxTime(sipCpp->GetClipIn());

            return sipConvertFromNewType(sipRes,sipType_FbxTime,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxMediaClip, sipName_GetClipIn, doc_FbxMediaClip_GetClipIn);

    return NULL;
}


PyDoc_STRVAR(doc_FbxMediaClip_SetClipOut, "SetClipOut(self, FbxTime)");

extern "C" {static PyObject *meth_FbxMediaClip_SetClipOut(PyObject *, PyObject *);}
static PyObject *meth_FbxMediaClip_SetClipOut(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxTime* a0;
         ::FbxMediaClip *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_FbxMediaClip, &sipCpp, sipType_FbxTime, &a0))
        {
            sipCpp->SetClipOut(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxMediaClip, sipName_SetClipOut, doc_FbxMediaClip_SetClipOut);

    return NULL;
}


PyDoc_STRVAR(doc_FbxMediaClip_GetClipOut, "GetClipOut(self) -> FbxTime");

extern "C" {static PyObject *meth_FbxMediaClip_GetClipOut(PyObject *, PyObject *);}
static PyObject *meth_FbxMediaClip_GetClipOut(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::FbxMediaClip *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxMediaClip, &sipCpp))
        {
             ::FbxTime*sipRes;

            sipRes = new  ::FbxTime(sipCpp->GetClipOut());

            return sipConvertFromNewType(sipRes,sipType_FbxTime,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxMediaClip, sipName_GetClipOut, doc_FbxMediaClip_GetClipOut);

    return NULL;
}


PyDoc_STRVAR(doc_FbxMediaClip_SetOffset, "SetOffset(self, FbxTime)");

extern "C" {static PyObject *meth_FbxMediaClip_SetOffset(PyObject *, PyObject *);}
static PyObject *meth_FbxMediaClip_SetOffset(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxTime* a0;
         ::FbxMediaClip *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_FbxMediaClip, &sipCpp, sipType_FbxTime, &a0))
        {
            sipCpp->SetOffset(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxMediaClip, sipName_SetOffset, doc_FbxMediaClip_SetOffset);

    return NULL;
}


PyDoc_STRVAR(doc_FbxMediaClip_GetOffset, "GetOffset(self) -> FbxTime");

extern "C" {static PyObject *meth_FbxMediaClip_GetOffset(PyObject *, PyObject *);}
static PyObject *meth_FbxMediaClip_GetOffset(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxMediaClip *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxMediaClip, &sipCpp))
        {
             ::FbxTime*sipRes;

            sipRes = new  ::FbxTime(sipCpp->GetOffset());

            return sipConvertFromNewType(sipRes,sipType_FbxTime,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxMediaClip, sipName_GetOffset, doc_FbxMediaClip_GetOffset);

    return NULL;
}


PyDoc_STRVAR(doc_FbxMediaClip_SetFreeRunning, "SetFreeRunning(self, bool)");

extern "C" {static PyObject *meth_FbxMediaClip_SetFreeRunning(PyObject *, PyObject *);}
static PyObject *meth_FbxMediaClip_SetFreeRunning(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
         ::FbxMediaClip *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_FbxMediaClip, &sipCpp, &a0))
        {
            sipCpp->SetFreeRunning(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxMediaClip, sipName_SetFreeRunning, doc_FbxMediaClip_SetFreeRunning);

    return NULL;
}


PyDoc_STRVAR(doc_FbxMediaClip_GetFreeRunning, "GetFreeRunning(self) -> bool");

extern "C" {static PyObject *meth_FbxMediaClip_GetFreeRunning(PyObject *, PyObject *);}
static PyObject *meth_FbxMediaClip_GetFreeRunning(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxMediaClip *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxMediaClip, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->GetFreeRunning();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxMediaClip, sipName_GetFreeRunning, doc_FbxMediaClip_GetFreeRunning);

    return NULL;
}


PyDoc_STRVAR(doc_FbxMediaClip_SetLoop, "SetLoop(self, bool)");

extern "C" {static PyObject *meth_FbxMediaClip_SetLoop(PyObject *, PyObject *);}
static PyObject *meth_FbxMediaClip_SetLoop(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
         ::FbxMediaClip *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_FbxMediaClip, &sipCpp, &a0))
        {
            sipCpp->SetLoop(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxMediaClip, sipName_SetLoop, doc_FbxMediaClip_SetLoop);

    return NULL;
}


PyDoc_STRVAR(doc_FbxMediaClip_GetLoop, "GetLoop(self) -> bool");

extern "C" {static PyObject *meth_FbxMediaClip_GetLoop(PyObject *, PyObject *);}
static PyObject *meth_FbxMediaClip_GetLoop(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxMediaClip *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxMediaClip, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->GetLoop();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxMediaClip, sipName_GetLoop, doc_FbxMediaClip_GetLoop);

    return NULL;
}


PyDoc_STRVAR(doc_FbxMediaClip_SetMute, "SetMute(self, bool)");

extern "C" {static PyObject *meth_FbxMediaClip_SetMute(PyObject *, PyObject *);}
static PyObject *meth_FbxMediaClip_SetMute(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
         ::FbxMediaClip *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_FbxMediaClip, &sipCpp, &a0))
        {
            sipCpp->SetMute(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxMediaClip, sipName_SetMute, doc_FbxMediaClip_SetMute);

    return NULL;
}


PyDoc_STRVAR(doc_FbxMediaClip_GetMute, "GetMute(self) -> bool");

extern "C" {static PyObject *meth_FbxMediaClip_GetMute(PyObject *, PyObject *);}
static PyObject *meth_FbxMediaClip_GetMute(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::FbxMediaClip *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxMediaClip, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->GetMute();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxMediaClip, sipName_GetMute, doc_FbxMediaClip_GetMute);

    return NULL;
}


PyDoc_STRVAR(doc_FbxMediaClip_SetAccessMode, "SetAccessMode(self, FbxMediaClip.EAccessMode)");

extern "C" {static PyObject *meth_FbxMediaClip_SetAccessMode(PyObject *, PyObject *);}
static PyObject *meth_FbxMediaClip_SetAccessMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxMediaClip::EAccessMode a0;
         ::FbxMediaClip *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_FbxMediaClip, &sipCpp, sipType_FbxMediaClip_EAccessMode, &a0))
        {
            sipCpp->SetAccessMode(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxMediaClip, sipName_SetAccessMode, doc_FbxMediaClip_SetAccessMode);

    return NULL;
}


PyDoc_STRVAR(doc_FbxMediaClip_GetAccessMode, "GetAccessMode(self) -> FbxMediaClip.EAccessMode");

extern "C" {static PyObject *meth_FbxMediaClip_GetAccessMode(PyObject *, PyObject *);}
static PyObject *meth_FbxMediaClip_GetAccessMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxMediaClip *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxMediaClip, &sipCpp))
        {
             ::FbxMediaClip::EAccessMode sipRes;

            sipRes = sipCpp->GetAccessMode();

            return sipConvertFromEnum(sipRes,sipType_FbxMediaClip_EAccessMode);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxMediaClip, sipName_GetAccessMode, doc_FbxMediaClip_GetAccessMode);

    return NULL;
}


extern "C" {static PyObject *slot_FbxMediaClip___ne__(PyObject *,PyObject *);}
static PyObject *slot_FbxMediaClip___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::FbxMediaClip *sipCpp = reinterpret_cast< ::FbxMediaClip *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_FbxMediaClip));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const  ::FbxMediaClip* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_FbxMediaClip, &a0))
        {
            bool sipRes;

            sipRes = !sipCpp-> ::FbxMediaClip::operator==(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_fbx, ne_slot, sipType_FbxMediaClip, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_FbxMediaClip___eq__(PyObject *,PyObject *);}
static PyObject *slot_FbxMediaClip___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::FbxMediaClip *sipCpp = reinterpret_cast< ::FbxMediaClip *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_FbxMediaClip));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const  ::FbxMediaClip* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_FbxMediaClip, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::FbxMediaClip::operator==(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_fbx, eq_slot, sipType_FbxMediaClip, sipSelf, sipArg);
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_FbxMediaClip(void *, const sipTypeDef *);}
static void *cast_FbxMediaClip(void *sipCppV, const sipTypeDef *targetType)
{
     ::FbxMediaClip *sipCpp = reinterpret_cast< ::FbxMediaClip *>(sipCppV);

    if (targetType == sipType_FbxObject)
        return static_cast< ::FbxObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_FbxMediaClip(void *, int);}
static void release_FbxMediaClip(void *, int)
{
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_FbxMediaClip[] = {{244, 255, 1}};


/* Define this type's Python slots. */
static sipPySlotDef slots_FbxMediaClip[] = {
    {(void *)slot_FbxMediaClip___ne__, ne_slot},
    {(void *)slot_FbxMediaClip___eq__, eq_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_FbxMediaClip[] = {
    {SIP_MLNAME_CAST(sipName_Create), meth_FbxMediaClip_Create, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxMediaClip_Create)},
    {SIP_MLNAME_CAST(sipName_GetAccessMode), meth_FbxMediaClip_GetAccessMode, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxMediaClip_GetAccessMode)},
    {SIP_MLNAME_CAST(sipName_GetClassId), meth_FbxMediaClip_GetClassId, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxMediaClip_GetClassId)},
    {SIP_MLNAME_CAST(sipName_GetClipIn), meth_FbxMediaClip_GetClipIn, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxMediaClip_GetClipIn)},
    {SIP_MLNAME_CAST(sipName_GetClipOut), meth_FbxMediaClip_GetClipOut, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxMediaClip_GetClipOut)},
    {SIP_MLNAME_CAST(sipName_GetColor), meth_FbxMediaClip_GetColor, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxMediaClip_GetColor)},
    {SIP_MLNAME_CAST(sipName_GetFileName), meth_FbxMediaClip_GetFileName, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxMediaClip_GetFileName)},
    {SIP_MLNAME_CAST(sipName_GetFreeRunning), meth_FbxMediaClip_GetFreeRunning, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxMediaClip_GetFreeRunning)},
    {SIP_MLNAME_CAST(sipName_GetLoop), meth_FbxMediaClip_GetLoop, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxMediaClip_GetLoop)},
    {SIP_MLNAME_CAST(sipName_GetMute), meth_FbxMediaClip_GetMute, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxMediaClip_GetMute)},
    {SIP_MLNAME_CAST(sipName_GetOffset), meth_FbxMediaClip_GetOffset, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxMediaClip_GetOffset)},
    {SIP_MLNAME_CAST(sipName_GetPlaySpeed), meth_FbxMediaClip_GetPlaySpeed, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxMediaClip_GetPlaySpeed)},
    {SIP_MLNAME_CAST(sipName_GetRelativeFileName), meth_FbxMediaClip_GetRelativeFileName, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxMediaClip_GetRelativeFileName)},
    {SIP_MLNAME_CAST(sipName_Reset), meth_FbxMediaClip_Reset, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxMediaClip_Reset)},
    {SIP_MLNAME_CAST(sipName_SetAccessMode), meth_FbxMediaClip_SetAccessMode, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxMediaClip_SetAccessMode)},
    {SIP_MLNAME_CAST(sipName_SetClipIn), meth_FbxMediaClip_SetClipIn, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxMediaClip_SetClipIn)},
    {SIP_MLNAME_CAST(sipName_SetClipOut), meth_FbxMediaClip_SetClipOut, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxMediaClip_SetClipOut)},
    {SIP_MLNAME_CAST(sipName_SetColor), meth_FbxMediaClip_SetColor, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxMediaClip_SetColor)},
    {SIP_MLNAME_CAST(sipName_SetFileName), meth_FbxMediaClip_SetFileName, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxMediaClip_SetFileName)},
    {SIP_MLNAME_CAST(sipName_SetFreeRunning), meth_FbxMediaClip_SetFreeRunning, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxMediaClip_SetFreeRunning)},
    {SIP_MLNAME_CAST(sipName_SetLoop), meth_FbxMediaClip_SetLoop, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxMediaClip_SetLoop)},
    {SIP_MLNAME_CAST(sipName_SetMute), meth_FbxMediaClip_SetMute, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxMediaClip_SetMute)},
    {SIP_MLNAME_CAST(sipName_SetOffset), meth_FbxMediaClip_SetOffset, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxMediaClip_SetOffset)},
    {SIP_MLNAME_CAST(sipName_SetPlaySpeed), meth_FbxMediaClip_SetPlaySpeed, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxMediaClip_SetPlaySpeed)},
    {SIP_MLNAME_CAST(sipName_SetRelativeFileName), meth_FbxMediaClip_SetRelativeFileName, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxMediaClip_SetRelativeFileName)}
};

static sipEnumMemberDef enummembers_FbxMediaClip[] = {
    {sipName_eDisk, static_cast<int>( ::FbxMediaClip::eDisk), 222},
    {sipName_eDiskAsync, static_cast<int>( ::FbxMediaClip::eDiskAsync), 222},
    {sipName_eMemory, static_cast<int>( ::FbxMediaClip::eMemory), 222},
};


extern "C" {static PyObject *varget_FbxMediaClip_AccessMode(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxMediaClip_AccessMode(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyFbxMediaClipEAccessMode*sipVal;
     ::FbxMediaClip *sipCpp = reinterpret_cast< ::FbxMediaClip *>(sipSelf);

    sipVal = &sipCpp->AccessMode;

    return sipConvertFromType(sipVal, sipType_FbxPropertyFbxMediaClipEAccessMode, NULL);
}


extern "C" {static int varset_FbxMediaClip_AccessMode(void *, PyObject *, PyObject *);}
static int varset_FbxMediaClip_AccessMode(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyFbxMediaClipEAccessMode*sipVal;
     ::FbxMediaClip *sipCpp = reinterpret_cast< ::FbxMediaClip *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyFbxMediaClipEAccessMode *>(sipForceConvertToType(sipPy,sipType_FbxPropertyFbxMediaClipEAccessMode,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->AccessMode = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxMediaClip_ClassId(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxMediaClip_ClassId(void *, PyObject *, PyObject *)
{
     ::FbxClassId*sipVal;

    sipVal = & ::FbxMediaClip::ClassId;

    return sipConvertFromType(sipVal, sipType_FbxClassId, NULL);
}


extern "C" {static int varset_FbxMediaClip_ClassId(void *, PyObject *, PyObject *);}
static int varset_FbxMediaClip_ClassId(void *, PyObject *sipPy, PyObject *)
{
     ::FbxClassId*sipVal;
    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxClassId *>(sipForceConvertToType(sipPy,sipType_FbxClassId,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

     ::FbxMediaClip::ClassId = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxMediaClip_ClipIn(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxMediaClip_ClipIn(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyFbxTime*sipVal;
     ::FbxMediaClip *sipCpp = reinterpret_cast< ::FbxMediaClip *>(sipSelf);

    sipVal = &sipCpp->ClipIn;

    return sipConvertFromType(sipVal, sipType_FbxPropertyFbxTime, NULL);
}


extern "C" {static int varset_FbxMediaClip_ClipIn(void *, PyObject *, PyObject *);}
static int varset_FbxMediaClip_ClipIn(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyFbxTime*sipVal;
     ::FbxMediaClip *sipCpp = reinterpret_cast< ::FbxMediaClip *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyFbxTime *>(sipForceConvertToType(sipPy,sipType_FbxPropertyFbxTime,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->ClipIn = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxMediaClip_ClipOut(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxMediaClip_ClipOut(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyFbxTime*sipVal;
     ::FbxMediaClip *sipCpp = reinterpret_cast< ::FbxMediaClip *>(sipSelf);

    sipVal = &sipCpp->ClipOut;

    return sipConvertFromType(sipVal, sipType_FbxPropertyFbxTime, NULL);
}


extern "C" {static int varset_FbxMediaClip_ClipOut(void *, PyObject *, PyObject *);}
static int varset_FbxMediaClip_ClipOut(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyFbxTime*sipVal;
     ::FbxMediaClip *sipCpp = reinterpret_cast< ::FbxMediaClip *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyFbxTime *>(sipForceConvertToType(sipPy,sipType_FbxPropertyFbxTime,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->ClipOut = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxMediaClip_Color(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxMediaClip_Color(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyDouble3*sipVal;
     ::FbxMediaClip *sipCpp = reinterpret_cast< ::FbxMediaClip *>(sipSelf);

    sipVal = &sipCpp->Color;

    return sipConvertFromType(sipVal, sipType_FbxPropertyDouble3, NULL);
}


extern "C" {static int varset_FbxMediaClip_Color(void *, PyObject *, PyObject *);}
static int varset_FbxMediaClip_Color(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyDouble3*sipVal;
     ::FbxMediaClip *sipCpp = reinterpret_cast< ::FbxMediaClip *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyDouble3 *>(sipForceConvertToType(sipPy,sipType_FbxPropertyDouble3,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->Color = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxMediaClip_FreeRunning(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxMediaClip_FreeRunning(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyBool1*sipVal;
     ::FbxMediaClip *sipCpp = reinterpret_cast< ::FbxMediaClip *>(sipSelf);

    sipVal = &sipCpp->FreeRunning;

    return sipConvertFromType(sipVal, sipType_FbxPropertyBool1, NULL);
}


extern "C" {static int varset_FbxMediaClip_FreeRunning(void *, PyObject *, PyObject *);}
static int varset_FbxMediaClip_FreeRunning(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyBool1*sipVal;
     ::FbxMediaClip *sipCpp = reinterpret_cast< ::FbxMediaClip *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyBool1 *>(sipForceConvertToType(sipPy,sipType_FbxPropertyBool1,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->FreeRunning = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxMediaClip_Loop(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxMediaClip_Loop(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyBool1*sipVal;
     ::FbxMediaClip *sipCpp = reinterpret_cast< ::FbxMediaClip *>(sipSelf);

    sipVal = &sipCpp->Loop;

    return sipConvertFromType(sipVal, sipType_FbxPropertyBool1, NULL);
}


extern "C" {static int varset_FbxMediaClip_Loop(void *, PyObject *, PyObject *);}
static int varset_FbxMediaClip_Loop(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyBool1*sipVal;
     ::FbxMediaClip *sipCpp = reinterpret_cast< ::FbxMediaClip *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyBool1 *>(sipForceConvertToType(sipPy,sipType_FbxPropertyBool1,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->Loop = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxMediaClip_Mute(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxMediaClip_Mute(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyBool1*sipVal;
     ::FbxMediaClip *sipCpp = reinterpret_cast< ::FbxMediaClip *>(sipSelf);

    sipVal = &sipCpp->Mute;

    return sipConvertFromType(sipVal, sipType_FbxPropertyBool1, NULL);
}


extern "C" {static int varset_FbxMediaClip_Mute(void *, PyObject *, PyObject *);}
static int varset_FbxMediaClip_Mute(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyBool1*sipVal;
     ::FbxMediaClip *sipCpp = reinterpret_cast< ::FbxMediaClip *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyBool1 *>(sipForceConvertToType(sipPy,sipType_FbxPropertyBool1,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->Mute = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxMediaClip_Offset(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxMediaClip_Offset(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyFbxTime*sipVal;
     ::FbxMediaClip *sipCpp = reinterpret_cast< ::FbxMediaClip *>(sipSelf);

    sipVal = &sipCpp->Offset;

    return sipConvertFromType(sipVal, sipType_FbxPropertyFbxTime, NULL);
}


extern "C" {static int varset_FbxMediaClip_Offset(void *, PyObject *, PyObject *);}
static int varset_FbxMediaClip_Offset(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyFbxTime*sipVal;
     ::FbxMediaClip *sipCpp = reinterpret_cast< ::FbxMediaClip *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyFbxTime *>(sipForceConvertToType(sipPy,sipType_FbxPropertyFbxTime,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->Offset = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxMediaClip_PlaySpeed(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxMediaClip_PlaySpeed(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyDouble1*sipVal;
     ::FbxMediaClip *sipCpp = reinterpret_cast< ::FbxMediaClip *>(sipSelf);

    sipVal = &sipCpp->PlaySpeed;

    return sipConvertFromType(sipVal, sipType_FbxPropertyDouble1, NULL);
}


extern "C" {static int varset_FbxMediaClip_PlaySpeed(void *, PyObject *, PyObject *);}
static int varset_FbxMediaClip_PlaySpeed(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyDouble1*sipVal;
     ::FbxMediaClip *sipCpp = reinterpret_cast< ::FbxMediaClip *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyDouble1 *>(sipForceConvertToType(sipPy,sipType_FbxPropertyDouble1,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->PlaySpeed = *sipVal;

    return 0;
}

sipVariableDef variables_FbxMediaClip[] = {
    {InstanceVariable, sipName_AccessMode, (PyMethodDef *)varget_FbxMediaClip_AccessMode, (PyMethodDef *)varset_FbxMediaClip_AccessMode, NULL, NULL},
    {ClassVariable, sipName_ClassId, (PyMethodDef *)varget_FbxMediaClip_ClassId, (PyMethodDef *)varset_FbxMediaClip_ClassId, NULL, NULL},
    {InstanceVariable, sipName_ClipIn, (PyMethodDef *)varget_FbxMediaClip_ClipIn, (PyMethodDef *)varset_FbxMediaClip_ClipIn, NULL, NULL},
    {InstanceVariable, sipName_ClipOut, (PyMethodDef *)varget_FbxMediaClip_ClipOut, (PyMethodDef *)varset_FbxMediaClip_ClipOut, NULL, NULL},
    {InstanceVariable, sipName_Color, (PyMethodDef *)varget_FbxMediaClip_Color, (PyMethodDef *)varset_FbxMediaClip_Color, NULL, NULL},
    {InstanceVariable, sipName_FreeRunning, (PyMethodDef *)varget_FbxMediaClip_FreeRunning, (PyMethodDef *)varset_FbxMediaClip_FreeRunning, NULL, NULL},
    {InstanceVariable, sipName_Loop, (PyMethodDef *)varget_FbxMediaClip_Loop, (PyMethodDef *)varset_FbxMediaClip_Loop, NULL, NULL},
    {InstanceVariable, sipName_Mute, (PyMethodDef *)varget_FbxMediaClip_Mute, (PyMethodDef *)varset_FbxMediaClip_Mute, NULL, NULL},
    {InstanceVariable, sipName_Offset, (PyMethodDef *)varget_FbxMediaClip_Offset, (PyMethodDef *)varset_FbxMediaClip_Offset, NULL, NULL},
    {InstanceVariable, sipName_PlaySpeed, (PyMethodDef *)varget_FbxMediaClip_PlaySpeed, (PyMethodDef *)varset_FbxMediaClip_PlaySpeed, NULL, NULL},
};


sipClassTypeDef sipTypeDef_fbx_FbxMediaClip = {
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_FbxMediaClip,
        {0},
        0
    },
    {
        sipNameNr_FbxMediaClip,
        {0, 0, 1},
        25, methods_FbxMediaClip,
        3, enummembers_FbxMediaClip,
        10, variables_FbxMediaClip,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    0,
    -1,
    -1,
    supers_FbxMediaClip,
    slots_FbxMediaClip,
    0,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    0,
    0,
    0,
    0,
    release_FbxMediaClip,
    cast_FbxMediaClip,
    0,
    0,
    0,
    0,
    0,
    0
};
