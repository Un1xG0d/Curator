/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.3
 *
 * Copyright (C) 2009 Autodesk, Inc. and/or its licensors.
 * All Rights Reserved.
 * 
 * The coded instructions, statements, computer programs, and/or related material 
 * (collectively the "Data") in these files contain unpublished information 
 * proprietary to Autodesk, Inc. and/or its licensors, which is protected by 
 * Canada and United States of America federal copyright law and by international 
 * treaties. 
 * 
 * The Data may not be disclosed or distributed to third parties, in whole or in
 * part, without the prior written consent of Autodesk, Inc. ("Autodesk").
 * 
 * THE DATA IS PROVIDED "AS IS" AND WITHOUT WARRANTY.
 * ALL WARRANTIES ARE EXPRESSLY EXCLUDED AND DISCLAIMED. AUTODESK MAKES NO
 * WARRANTY OF ANY KIND WITH RESPECT TO THE DATA, EXPRESS, IMPLIED OR ARISING
 * BY CUSTOM OR TRADE USAGE, AND DISCLAIMS ANY IMPLIED WARRANTIES OF TITLE, 
 * NON-INFRINGEMENT, MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE OR USE. 
 * WITHOUT LIMITING THE FOREGOING, AUTODESK DOES NOT WARRANT THAT THE OPERATION
 * OF THE DATA WILL BE UNINTERRUPTED OR ERROR FREE. 
 * 
 * IN NO EVENT SHALL AUTODESK, ITS AFFILIATES, PARENT COMPANIES, LICENSORS
 * OR SUPPLIERS ("AUTODESK GROUP") BE LIABLE FOR ANY LOSSES, DAMAGES OR EXPENSES
 * OF ANY KIND (INCLUDING WITHOUT LIMITATION PUNITIVE OR MULTIPLE DAMAGES OR OTHER
 * SPECIAL, DIRECT, INDIRECT, EXEMPLARY, INCIDENTAL, LOSS OF PROFITS, REVENUE
 * OR DATA, COST OF COVER OR CONSEQUENTIAL LOSSES OR DAMAGES OF ANY KIND),
 * HOWEVER CAUSED, AND REGARDLESS OF THE THEORY OF LIABILITY, WHETHER DERIVED
 * FROM CONTRACT, TORT (INCLUDING, BUT NOT LIMITED TO, NEGLIGENCE), OR OTHERWISE,
 * ARISING OUT OF OR RELATING TO THE DATA OR ITS USE OR ANY OTHER PERFORMANCE,
 * WHETHER OR NOT AUTODESK HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH LOSS
 * OR DAMAGE. 
 */

#include "sipAPIfbx.h"




PyDoc_STRVAR(doc_FbxMatrix_Get, "Get(self, int, int) -> float");

extern "C" {static PyObject *meth_FbxMatrix_Get(PyObject *, PyObject *);}
static PyObject *meth_FbxMatrix_Get(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        int a1;
        const  ::FbxMatrix *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bii", &sipSelf, sipType_FbxMatrix, &sipCpp, &a0, &a1))
        {
            double sipRes;

            sipRes = sipCpp->Get(a0,a1);

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxMatrix, sipName_Get, doc_FbxMatrix_Get);

    return NULL;
}


PyDoc_STRVAR(doc_FbxMatrix_GetRow, "GetRow(self, int) -> FbxVector4");

extern "C" {static PyObject *meth_FbxMatrix_GetRow(PyObject *, PyObject *);}
static PyObject *meth_FbxMatrix_GetRow(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const  ::FbxMatrix *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_FbxMatrix, &sipCpp, &a0))
        {
             ::FbxVector4*sipRes;

            sipRes = new  ::FbxVector4(sipCpp->GetRow(a0));

            return sipConvertFromNewType(sipRes,sipType_FbxVector4,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxMatrix, sipName_GetRow, doc_FbxMatrix_GetRow);

    return NULL;
}


PyDoc_STRVAR(doc_FbxMatrix_GetColumn, "GetColumn(self, int) -> FbxVector4");

extern "C" {static PyObject *meth_FbxMatrix_GetColumn(PyObject *, PyObject *);}
static PyObject *meth_FbxMatrix_GetColumn(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const  ::FbxMatrix *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_FbxMatrix, &sipCpp, &a0))
        {
             ::FbxVector4*sipRes;

            sipRes = new  ::FbxVector4(sipCpp->GetColumn(a0));

            return sipConvertFromNewType(sipRes,sipType_FbxVector4,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxMatrix, sipName_GetColumn, doc_FbxMatrix_GetColumn);

    return NULL;
}


PyDoc_STRVAR(doc_FbxMatrix_Set, "Set(self, int, int, float)");

extern "C" {static PyObject *meth_FbxMatrix_Set(PyObject *, PyObject *);}
static PyObject *meth_FbxMatrix_Set(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        int a1;
        double a2;
         ::FbxMatrix *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Biid", &sipSelf, sipType_FbxMatrix, &sipCpp, &a0, &a1, &a2))
        {
            sipCpp->Set(a0,a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxMatrix, sipName_Set, doc_FbxMatrix_Set);

    return NULL;
}


PyDoc_STRVAR(doc_FbxMatrix_SetIdentity, "SetIdentity(self)");

extern "C" {static PyObject *meth_FbxMatrix_SetIdentity(PyObject *, PyObject *);}
static PyObject *meth_FbxMatrix_SetIdentity(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxMatrix *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxMatrix, &sipCpp))
        {
            sipCpp->SetIdentity();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxMatrix, sipName_SetIdentity, doc_FbxMatrix_SetIdentity);

    return NULL;
}


PyDoc_STRVAR(doc_FbxMatrix_SetTRS, "SetTRS(self, FbxVector4, FbxVector4, FbxVector4)");

extern "C" {static PyObject *meth_FbxMatrix_SetTRS(PyObject *, PyObject *);}
static PyObject *meth_FbxMatrix_SetTRS(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::FbxVector4* a0;
        const  ::FbxVector4* a1;
        const  ::FbxVector4* a2;
         ::FbxMatrix *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9J9J9", &sipSelf, sipType_FbxMatrix, &sipCpp, sipType_FbxVector4, &a0, sipType_FbxVector4, &a1, sipType_FbxVector4, &a2))
        {
            sipCpp->SetTRS(*a0,*a1,*a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxMatrix, sipName_SetTRS, doc_FbxMatrix_SetTRS);

    return NULL;
}


PyDoc_STRVAR(doc_FbxMatrix_SetTQS, "SetTQS(self, FbxVector4, FbxQuaternion, FbxVector4)");

extern "C" {static PyObject *meth_FbxMatrix_SetTQS(PyObject *, PyObject *);}
static PyObject *meth_FbxMatrix_SetTQS(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::FbxVector4* a0;
        const  ::FbxQuaternion* a1;
        const  ::FbxVector4* a2;
         ::FbxMatrix *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9J9J9", &sipSelf, sipType_FbxMatrix, &sipCpp, sipType_FbxVector4, &a0, sipType_FbxQuaternion, &a1, sipType_FbxVector4, &a2))
        {
            sipCpp->SetTQS(*a0,*a1,*a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxMatrix, sipName_SetTQS, doc_FbxMatrix_SetTQS);

    return NULL;
}


PyDoc_STRVAR(doc_FbxMatrix_SetRow, "SetRow(self, int, FbxVector4)");

extern "C" {static PyObject *meth_FbxMatrix_SetRow(PyObject *, PyObject *);}
static PyObject *meth_FbxMatrix_SetRow(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const  ::FbxVector4* a1;
         ::FbxMatrix *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ9", &sipSelf, sipType_FbxMatrix, &sipCpp, &a0, sipType_FbxVector4, &a1))
        {
            sipCpp->SetRow(a0,*a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxMatrix, sipName_SetRow, doc_FbxMatrix_SetRow);

    return NULL;
}


PyDoc_STRVAR(doc_FbxMatrix_SetColumn, "SetColumn(self, int, FbxVector4)");

extern "C" {static PyObject *meth_FbxMatrix_SetColumn(PyObject *, PyObject *);}
static PyObject *meth_FbxMatrix_SetColumn(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const  ::FbxVector4* a1;
         ::FbxMatrix *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ9", &sipSelf, sipType_FbxMatrix, &sipCpp, &a0, sipType_FbxVector4, &a1))
        {
            sipCpp->SetColumn(a0,*a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxMatrix, sipName_SetColumn, doc_FbxMatrix_SetColumn);

    return NULL;
}


PyDoc_STRVAR(doc_FbxMatrix_GetElements, "GetElements(self, FbxVector4, FbxQuaternion, FbxVector4, FbxVector4) -> float");

extern "C" {static PyObject *meth_FbxMatrix_GetElements(PyObject *, PyObject *);}
static PyObject *meth_FbxMatrix_GetElements(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxVector4* a0;
         ::FbxQuaternion* a1;
         ::FbxVector4* a2;
         ::FbxVector4* a3;
        double a4;
        const  ::FbxMatrix *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9J9J9J9", &sipSelf, sipType_FbxMatrix, &sipCpp, sipType_FbxVector4, &a0, sipType_FbxQuaternion, &a1, sipType_FbxVector4, &a2, sipType_FbxVector4, &a3))
        {
            sipCpp->GetElements(*a0,*a1,*a2,*a3,a4);

            return PyFloat_FromDouble(a4);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxMatrix, sipName_GetElements, doc_FbxMatrix_GetElements);

    return NULL;
}


PyDoc_STRVAR(doc_FbxMatrix_Inverse, "Inverse(self) -> FbxMatrix");

extern "C" {static PyObject *meth_FbxMatrix_Inverse(PyObject *, PyObject *);}
static PyObject *meth_FbxMatrix_Inverse(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::FbxMatrix *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxMatrix, &sipCpp))
        {
             ::FbxMatrix*sipRes;

            sipRes = new  ::FbxMatrix(sipCpp->Inverse());

            return sipConvertFromNewType(sipRes,sipType_FbxMatrix,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxMatrix, sipName_Inverse, doc_FbxMatrix_Inverse);

    return NULL;
}


PyDoc_STRVAR(doc_FbxMatrix_Transpose, "Transpose(self) -> FbxMatrix");

extern "C" {static PyObject *meth_FbxMatrix_Transpose(PyObject *, PyObject *);}
static PyObject *meth_FbxMatrix_Transpose(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::FbxMatrix *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxMatrix, &sipCpp))
        {
             ::FbxMatrix*sipRes;

            sipRes = new  ::FbxMatrix(sipCpp->Transpose());

            return sipConvertFromNewType(sipRes,sipType_FbxMatrix,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxMatrix, sipName_Transpose, doc_FbxMatrix_Transpose);

    return NULL;
}


PyDoc_STRVAR(doc_FbxMatrix_MultNormalize, "MultNormalize(self, FbxVector4) -> FbxVector4");

extern "C" {static PyObject *meth_FbxMatrix_MultNormalize(PyObject *, PyObject *);}
static PyObject *meth_FbxMatrix_MultNormalize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::FbxVector4* a0;
        const  ::FbxMatrix *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_FbxMatrix, &sipCpp, sipType_FbxVector4, &a0))
        {
             ::FbxVector4*sipRes;

            sipRes = new  ::FbxVector4(sipCpp->MultNormalize(*a0));

            return sipConvertFromNewType(sipRes,sipType_FbxVector4,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxMatrix, sipName_MultNormalize, doc_FbxMatrix_MultNormalize);

    return NULL;
}


extern "C" {static PyObject *slot_FbxMatrix___ne__(PyObject *,PyObject *);}
static PyObject *slot_FbxMatrix___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::FbxMatrix *sipCpp = reinterpret_cast< ::FbxMatrix *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_FbxMatrix));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const  ::FbxMatrix* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_FbxMatrix, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::FbxMatrix::operator!=(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    {
        const  ::FbxAMatrix* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_FbxAMatrix, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::FbxMatrix::operator!=(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_fbx, ne_slot, sipType_FbxMatrix, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_FbxMatrix___eq__(PyObject *,PyObject *);}
static PyObject *slot_FbxMatrix___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::FbxMatrix *sipCpp = reinterpret_cast< ::FbxMatrix *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_FbxMatrix));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const  ::FbxMatrix* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_FbxMatrix, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::FbxMatrix::operator==(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    {
        const  ::FbxAMatrix* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_FbxAMatrix, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::FbxMatrix::operator==(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_fbx, eq_slot, sipType_FbxMatrix, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_FbxMatrix___imul__(PyObject *,PyObject *);}
static PyObject *slot_FbxMatrix___imul__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_FbxMatrix)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::FbxMatrix *sipCpp = reinterpret_cast< ::FbxMatrix *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_FbxMatrix));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const  ::FbxMatrix* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_FbxMatrix, &a0))
        {
            sipCpp-> ::FbxMatrix::operator*=(*a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_FbxMatrix___isub__(PyObject *,PyObject *);}
static PyObject *slot_FbxMatrix___isub__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_FbxMatrix)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::FbxMatrix *sipCpp = reinterpret_cast< ::FbxMatrix *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_FbxMatrix));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const  ::FbxMatrix* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_FbxMatrix, &a0))
        {
            sipCpp-> ::FbxMatrix::operator-=(*a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_FbxMatrix___iadd__(PyObject *,PyObject *);}
static PyObject *slot_FbxMatrix___iadd__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_FbxMatrix)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::FbxMatrix *sipCpp = reinterpret_cast< ::FbxMatrix *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_FbxMatrix));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const  ::FbxMatrix* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_FbxMatrix, &a0))
        {
            sipCpp-> ::FbxMatrix::operator+=(*a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_FbxMatrix___mul__(PyObject *,PyObject *);}
static PyObject *slot_FbxMatrix___mul__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxMatrix* a0;
        const  ::FbxMatrix* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_FbxMatrix, &a0, sipType_FbxMatrix, &a1))
        {
             ::FbxMatrix*sipRes;

            sipRes = new  ::FbxMatrix((*a0 * *a1));

            return sipConvertFromNewType(sipRes,sipType_FbxMatrix,NULL);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_fbx, mul_slot, NULL, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_FbxMatrix___sub__(PyObject *,PyObject *);}
static PyObject *slot_FbxMatrix___sub__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxMatrix* a0;
        const  ::FbxMatrix* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_FbxMatrix, &a0, sipType_FbxMatrix, &a1))
        {
             ::FbxMatrix*sipRes;

            sipRes = new  ::FbxMatrix((*a0 - *a1));

            return sipConvertFromNewType(sipRes,sipType_FbxMatrix,NULL);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_fbx, sub_slot, NULL, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_FbxMatrix___add__(PyObject *,PyObject *);}
static PyObject *slot_FbxMatrix___add__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxMatrix* a0;
        const  ::FbxMatrix* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_FbxMatrix, &a0, sipType_FbxMatrix, &a1))
        {
             ::FbxMatrix*sipRes;

            sipRes = new  ::FbxMatrix((*a0 + *a1));

            return sipConvertFromNewType(sipRes,sipType_FbxMatrix,NULL);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_fbx, add_slot, NULL, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_FbxMatrix___neg__(PyObject *);}
static PyObject *slot_FbxMatrix___neg__(PyObject *sipSelf)
{
     ::FbxMatrix *sipCpp = reinterpret_cast< ::FbxMatrix *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_FbxMatrix));

    if (!sipCpp)
        return 0;


    {
        {
             ::FbxMatrix*sipRes;

            sipRes = new  ::FbxMatrix(-(*sipCpp));

            return sipConvertFromNewType(sipRes,sipType_FbxMatrix,NULL);
        }
    }

    return 0;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_FbxMatrix(void *, const sipTypeDef *);}
static void *cast_FbxMatrix(void *sipCppV, const sipTypeDef *targetType)
{
     ::FbxMatrix *sipCpp = reinterpret_cast< ::FbxMatrix *>(sipCppV);

    if (targetType == sipType_FbxDouble4x4)
        return static_cast< ::FbxDouble4x4 *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_FbxMatrix(void *, int);}
static void release_FbxMatrix(void *sipCppV, int)
{
    delete reinterpret_cast< ::FbxMatrix *>(sipCppV);
}


extern "C" {static void assign_FbxMatrix(void *, SIP_SSIZE_T, const void *);}
static void assign_FbxMatrix(void *sipDst, SIP_SSIZE_T sipDstIdx, const void *sipSrc)
{
    reinterpret_cast< ::FbxMatrix *>(sipDst)[sipDstIdx] = *reinterpret_cast<const  ::FbxMatrix *>(sipSrc);
}


extern "C" {static void *array_FbxMatrix(SIP_SSIZE_T);}
static void *array_FbxMatrix(SIP_SSIZE_T sipNrElem)
{
    return new  ::FbxMatrix[sipNrElem];
}


extern "C" {static void *copy_FbxMatrix(const void *, SIP_SSIZE_T);}
static void *copy_FbxMatrix(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::FbxMatrix(reinterpret_cast<const  ::FbxMatrix *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_FbxMatrix(sipSimpleWrapper *);}
static void dealloc_FbxMatrix(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_FbxMatrix(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_FbxMatrix(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_FbxMatrix(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::FbxMatrix *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            sipCpp = new  ::FbxMatrix();

            return sipCpp;
        }
    }

    {
        const  ::FbxMatrix* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_FbxMatrix, &a0))
        {
            sipCpp = new  ::FbxMatrix(*a0);

            return sipCpp;
        }
    }

    {
        const  ::FbxVector4* a0;
        const  ::FbxVector4* a1;
        const  ::FbxVector4* a2;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9J9J9", sipType_FbxVector4, &a0, sipType_FbxVector4, &a1, sipType_FbxVector4, &a2))
        {
            sipCpp = new  ::FbxMatrix(*a0,*a1,*a2);

            return sipCpp;
        }
    }

    {
        const  ::FbxVector4* a0;
        const  ::FbxQuaternion* a1;
        const  ::FbxVector4* a2;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9J9J9", sipType_FbxVector4, &a0, sipType_FbxQuaternion, &a1, sipType_FbxVector4, &a2))
        {
            sipCpp = new  ::FbxMatrix(*a0,*a1,*a2);

            return sipCpp;
        }
    }

    {
        const  ::FbxAMatrix* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_FbxAMatrix, &a0))
        {
            sipCpp = new  ::FbxMatrix(*a0);

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_FbxMatrix[] = {{135, 255, 1}};


/* Define this type's Python slots. */
static sipPySlotDef slots_FbxMatrix[] = {
    {(void *)slot_FbxMatrix___ne__, ne_slot},
    {(void *)slot_FbxMatrix___eq__, eq_slot},
    {(void *)slot_FbxMatrix___imul__, imul_slot},
    {(void *)slot_FbxMatrix___isub__, isub_slot},
    {(void *)slot_FbxMatrix___iadd__, iadd_slot},
    {(void *)slot_FbxMatrix___mul__, mul_slot},
    {(void *)slot_FbxMatrix___sub__, sub_slot},
    {(void *)slot_FbxMatrix___add__, add_slot},
    {(void *)slot_FbxMatrix___neg__, neg_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_FbxMatrix[] = {
    {SIP_MLNAME_CAST(sipName_Get), meth_FbxMatrix_Get, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxMatrix_Get)},
    {SIP_MLNAME_CAST(sipName_GetColumn), meth_FbxMatrix_GetColumn, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxMatrix_GetColumn)},
    {SIP_MLNAME_CAST(sipName_GetElements), meth_FbxMatrix_GetElements, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxMatrix_GetElements)},
    {SIP_MLNAME_CAST(sipName_GetRow), meth_FbxMatrix_GetRow, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxMatrix_GetRow)},
    {SIP_MLNAME_CAST(sipName_Inverse), meth_FbxMatrix_Inverse, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxMatrix_Inverse)},
    {SIP_MLNAME_CAST(sipName_MultNormalize), meth_FbxMatrix_MultNormalize, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxMatrix_MultNormalize)},
    {SIP_MLNAME_CAST(sipName_Set), meth_FbxMatrix_Set, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxMatrix_Set)},
    {SIP_MLNAME_CAST(sipName_SetColumn), meth_FbxMatrix_SetColumn, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxMatrix_SetColumn)},
    {SIP_MLNAME_CAST(sipName_SetIdentity), meth_FbxMatrix_SetIdentity, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxMatrix_SetIdentity)},
    {SIP_MLNAME_CAST(sipName_SetRow), meth_FbxMatrix_SetRow, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxMatrix_SetRow)},
    {SIP_MLNAME_CAST(sipName_SetTQS), meth_FbxMatrix_SetTQS, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxMatrix_SetTQS)},
    {SIP_MLNAME_CAST(sipName_SetTRS), meth_FbxMatrix_SetTRS, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxMatrix_SetTRS)},
    {SIP_MLNAME_CAST(sipName_Transpose), meth_FbxMatrix_Transpose, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxMatrix_Transpose)}
};

PyDoc_STRVAR(doc_FbxMatrix, "\1FbxMatrix()\n"
    "FbxMatrix(FbxMatrix)\n"
    "FbxMatrix(FbxVector4, FbxVector4, FbxVector4)\n"
    "FbxMatrix(FbxVector4, FbxQuaternion, FbxVector4)\n"
    "FbxMatrix(FbxAMatrix)");


sipClassTypeDef sipTypeDef_fbx_FbxMatrix = {
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_FbxMatrix,
        {0},
        0
    },
    {
        sipNameNr_FbxMatrix,
        {0, 0, 1},
        13, methods_FbxMatrix,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_FbxMatrix,
    -1,
    -1,
    supers_FbxMatrix,
    slots_FbxMatrix,
    init_type_FbxMatrix,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_FbxMatrix,
    assign_FbxMatrix,
    array_FbxMatrix,
    copy_FbxMatrix,
    release_FbxMatrix,
    cast_FbxMatrix,
    0,
    0,
    0,
    0,
    0,
    0
};
