/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.3
 *
 * Copyright (C) 2009 Autodesk, Inc. and/or its licensors.
 * All Rights Reserved.
 * 
 * The coded instructions, statements, computer programs, and/or related material 
 * (collectively the "Data") in these files contain unpublished information 
 * proprietary to Autodesk, Inc. and/or its licensors, which is protected by 
 * Canada and United States of America federal copyright law and by international 
 * treaties. 
 * 
 * The Data may not be disclosed or distributed to third parties, in whole or in
 * part, without the prior written consent of Autodesk, Inc. ("Autodesk").
 * 
 * THE DATA IS PROVIDED "AS IS" AND WITHOUT WARRANTY.
 * ALL WARRANTIES ARE EXPRESSLY EXCLUDED AND DISCLAIMED. AUTODESK MAKES NO
 * WARRANTY OF ANY KIND WITH RESPECT TO THE DATA, EXPRESS, IMPLIED OR ARISING
 * BY CUSTOM OR TRADE USAGE, AND DISCLAIMS ANY IMPLIED WARRANTIES OF TITLE, 
 * NON-INFRINGEMENT, MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE OR USE. 
 * WITHOUT LIMITING THE FOREGOING, AUTODESK DOES NOT WARRANT THAT THE OPERATION
 * OF THE DATA WILL BE UNINTERRUPTED OR ERROR FREE. 
 * 
 * IN NO EVENT SHALL AUTODESK, ITS AFFILIATES, PARENT COMPANIES, LICENSORS
 * OR SUPPLIERS ("AUTODESK GROUP") BE LIABLE FOR ANY LOSSES, DAMAGES OR EXPENSES
 * OF ANY KIND (INCLUDING WITHOUT LIMITATION PUNITIVE OR MULTIPLE DAMAGES OR OTHER
 * SPECIAL, DIRECT, INDIRECT, EXEMPLARY, INCIDENTAL, LOSS OF PROFITS, REVENUE
 * OR DATA, COST OF COVER OR CONSEQUENTIAL LOSSES OR DAMAGES OF ANY KIND),
 * HOWEVER CAUSED, AND REGARDLESS OF THE THEORY OF LIABILITY, WHETHER DERIVED
 * FROM CONTRACT, TORT (INCLUDING, BUT NOT LIMITED TO, NEGLIGENCE), OR OTHERWISE,
 * ARISING OUT OF OR RELATING TO THE DATA OR ITS USE OR ANY OTHER PERFORMANCE,
 * WHETHER OR NOT AUTODESK HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH LOSS
 * OR DAMAGE. 
 */

#include "sipAPIfbx.h"




PyDoc_STRVAR(doc_FbxLayerContainer_Create, "Create(FbxManager, str) -> FbxLayerContainer\n"
    "Create(FbxObject, str) -> FbxLayerContainer");

extern "C" {static PyObject *meth_FbxLayerContainer_Create(PyObject *, PyObject *);}
static PyObject *meth_FbxLayerContainer_Create(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxManager* a0;
        const char* a1;
        PyObject *a1Keep;

        if (sipParseArgs(&sipParseErr, sipArgs, "J8A8", sipType_FbxManager, &a0, &a1Keep, &a1))
        {
             ::FbxLayerContainer*sipRes;

            sipRes =  ::FbxLayerContainer::Create(a0,a1);
            Py_DECREF(a1Keep);

            return sipConvertFromType(sipRes,sipType_FbxLayerContainer,NULL);
        }
    }

    {
         ::FbxObject* a0;
        const char* a1;
        PyObject *a1Keep;

        if (sipParseArgs(&sipParseErr, sipArgs, "J8A8", sipType_FbxObject, &a0, &a1Keep, &a1))
        {
             ::FbxLayerContainer*sipRes;

            sipRes =  ::FbxLayerContainer::Create(a0,a1);
            Py_DECREF(a1Keep);

            return sipConvertFromType(sipRes,sipType_FbxLayerContainer,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxLayerContainer, sipName_Create, doc_FbxLayerContainer_Create);

    return NULL;
}


PyDoc_STRVAR(doc_FbxLayerContainer_GetClassId, "GetClassId(self) -> FbxClassId");

extern "C" {static PyObject *meth_FbxLayerContainer_GetClassId(PyObject *, PyObject *);}
static PyObject *meth_FbxLayerContainer_GetClassId(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::FbxLayerContainer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxLayerContainer, &sipCpp))
        {
             ::FbxClassId*sipRes;

            sipRes = new  ::FbxClassId((sipSelfWasArg ? sipCpp-> ::FbxLayerContainer::GetClassId() : sipCpp->GetClassId()));

            return sipConvertFromNewType(sipRes,sipType_FbxClassId,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxLayerContainer, sipName_GetClassId, doc_FbxLayerContainer_GetClassId);

    return NULL;
}


PyDoc_STRVAR(doc_FbxLayerContainer_CreateLayer, "CreateLayer(self) -> int");

extern "C" {static PyObject *meth_FbxLayerContainer_CreateLayer(PyObject *, PyObject *);}
static PyObject *meth_FbxLayerContainer_CreateLayer(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxLayerContainer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxLayerContainer, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->CreateLayer();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxLayerContainer, sipName_CreateLayer, doc_FbxLayerContainer_CreateLayer);

    return NULL;
}


PyDoc_STRVAR(doc_FbxLayerContainer_ClearLayers, "ClearLayers(self)");

extern "C" {static PyObject *meth_FbxLayerContainer_ClearLayers(PyObject *, PyObject *);}
static PyObject *meth_FbxLayerContainer_ClearLayers(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxLayerContainer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxLayerContainer, &sipCpp))
        {
            sipCpp->ClearLayers();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxLayerContainer, sipName_ClearLayers, doc_FbxLayerContainer_ClearLayers);

    return NULL;
}


PyDoc_STRVAR(doc_FbxLayerContainer_GetLayerCount, "GetLayerCount(self) -> int\n"
    "GetLayerCount(self, FbxLayerElement.EType, bool = False) -> int");

extern "C" {static PyObject *meth_FbxLayerContainer_GetLayerCount(PyObject *, PyObject *);}
static PyObject *meth_FbxLayerContainer_GetLayerCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::FbxLayerContainer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxLayerContainer, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->GetLayerCount();

            return SIPLong_FromLong(sipRes);
        }
    }

    {
         ::FbxLayerElement::EType a0;
        bool a1 = 0;
        const  ::FbxLayerContainer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE|b", &sipSelf, sipType_FbxLayerContainer, &sipCpp, sipType_FbxLayerElement_EType, &a0, &a1))
        {
            int sipRes;

            sipRes = sipCpp->GetLayerCount(a0,a1);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxLayerContainer, sipName_GetLayerCount, doc_FbxLayerContainer_GetLayerCount);

    return NULL;
}


PyDoc_STRVAR(doc_FbxLayerContainer_GetLayer, "GetLayer(self, int) -> FbxLayer\n"
    "GetLayer(self, int, FbxLayerElement.EType, bool = False) -> FbxLayer");

extern "C" {static PyObject *meth_FbxLayerContainer_GetLayer(PyObject *, PyObject *);}
static PyObject *meth_FbxLayerContainer_GetLayer(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
         ::FbxLayerContainer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_FbxLayerContainer, &sipCpp, &a0))
        {
             ::FbxLayer*sipRes;

            sipRes = sipCpp->GetLayer(a0);

            return sipConvertFromType(sipRes,sipType_FbxLayer,NULL);
        }
    }

    {
        int a0;
         ::FbxLayerElement::EType a1;
        bool a2 = 0;
         ::FbxLayerContainer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiE|b", &sipSelf, sipType_FbxLayerContainer, &sipCpp, &a0, sipType_FbxLayerElement_EType, &a1, &a2))
        {
             ::FbxLayer*sipRes;

            sipRes = sipCpp->GetLayer(a0,a1,a2);

            return sipConvertFromType(sipRes,sipType_FbxLayer,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxLayerContainer, sipName_GetLayer, doc_FbxLayerContainer_GetLayer);

    return NULL;
}


PyDoc_STRVAR(doc_FbxLayerContainer_GetLayerIndex, "GetLayerIndex(self, int, FbxLayerElement.EType, bool = False) -> int");

extern "C" {static PyObject *meth_FbxLayerContainer_GetLayerIndex(PyObject *, PyObject *);}
static PyObject *meth_FbxLayerContainer_GetLayerIndex(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
         ::FbxLayerElement::EType a1;
        bool a2 = 0;
        const  ::FbxLayerContainer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiE|b", &sipSelf, sipType_FbxLayerContainer, &sipCpp, &a0, sipType_FbxLayerElement_EType, &a1, &a2))
        {
            int sipRes;

            sipRes = sipCpp->GetLayerIndex(a0,a1,a2);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxLayerContainer, sipName_GetLayerIndex, doc_FbxLayerContainer_GetLayerIndex);

    return NULL;
}


PyDoc_STRVAR(doc_FbxLayerContainer_GetLayerTypedIndex, "GetLayerTypedIndex(self, int, FbxLayerElement.EType, bool = False) -> int");

extern "C" {static PyObject *meth_FbxLayerContainer_GetLayerTypedIndex(PyObject *, PyObject *);}
static PyObject *meth_FbxLayerContainer_GetLayerTypedIndex(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
         ::FbxLayerElement::EType a1;
        bool a2 = 0;
         ::FbxLayerContainer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiE|b", &sipSelf, sipType_FbxLayerContainer, &sipCpp, &a0, sipType_FbxLayerElement_EType, &a1, &a2))
        {
            int sipRes;

            sipRes = sipCpp->GetLayerTypedIndex(a0,a1,a2);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxLayerContainer, sipName_GetLayerTypedIndex, doc_FbxLayerContainer_GetLayerTypedIndex);

    return NULL;
}


PyDoc_STRVAR(doc_FbxLayerContainer_ConvertDirectToIndexToDirect, "ConvertDirectToIndexToDirect(self, int) -> bool");

extern "C" {static PyObject *meth_FbxLayerContainer_ConvertDirectToIndexToDirect(PyObject *, PyObject *);}
static PyObject *meth_FbxLayerContainer_ConvertDirectToIndexToDirect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
         ::FbxLayerContainer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_FbxLayerContainer, &sipCpp, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->ConvertDirectToIndexToDirect(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxLayerContainer, sipName_ConvertDirectToIndexToDirect, doc_FbxLayerContainer_ConvertDirectToIndexToDirect);

    return NULL;
}


extern "C" {static PyObject *slot_FbxLayerContainer___ne__(PyObject *,PyObject *);}
static PyObject *slot_FbxLayerContainer___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::FbxLayerContainer *sipCpp = reinterpret_cast< ::FbxLayerContainer *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_FbxLayerContainer));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const  ::FbxLayerContainer* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_FbxLayerContainer, &a0))
        {
            bool sipRes;

            sipRes = !sipCpp-> ::FbxLayerContainer::operator==(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_fbx, ne_slot, sipType_FbxLayerContainer, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_FbxLayerContainer___eq__(PyObject *,PyObject *);}
static PyObject *slot_FbxLayerContainer___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::FbxLayerContainer *sipCpp = reinterpret_cast< ::FbxLayerContainer *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_FbxLayerContainer));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const  ::FbxLayerContainer* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_FbxLayerContainer, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::FbxLayerContainer::operator==(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_fbx, eq_slot, sipType_FbxLayerContainer, sipSelf, sipArg);
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_FbxLayerContainer(void *, const sipTypeDef *);}
static void *cast_FbxLayerContainer(void *sipCppV, const sipTypeDef *targetType)
{
     ::FbxLayerContainer *sipCpp = reinterpret_cast< ::FbxLayerContainer *>(sipCppV);

    if (targetType == sipType_FbxNodeAttribute)
        return static_cast< ::FbxNodeAttribute *>(sipCpp);

    if (targetType == sipType_FbxObject)
        return static_cast< ::FbxObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_FbxLayerContainer(void *, int);}
static void release_FbxLayerContainer(void *, int)
{
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_FbxLayerContainer[] = {{233, 255, 1}};


/* Define this type's Python slots. */
static sipPySlotDef slots_FbxLayerContainer[] = {
    {(void *)slot_FbxLayerContainer___ne__, ne_slot},
    {(void *)slot_FbxLayerContainer___eq__, eq_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_FbxLayerContainer[] = {
    {SIP_MLNAME_CAST(sipName_ClearLayers), meth_FbxLayerContainer_ClearLayers, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxLayerContainer_ClearLayers)},
    {SIP_MLNAME_CAST(sipName_ConvertDirectToIndexToDirect), meth_FbxLayerContainer_ConvertDirectToIndexToDirect, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxLayerContainer_ConvertDirectToIndexToDirect)},
    {SIP_MLNAME_CAST(sipName_Create), meth_FbxLayerContainer_Create, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxLayerContainer_Create)},
    {SIP_MLNAME_CAST(sipName_CreateLayer), meth_FbxLayerContainer_CreateLayer, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxLayerContainer_CreateLayer)},
    {SIP_MLNAME_CAST(sipName_GetClassId), meth_FbxLayerContainer_GetClassId, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxLayerContainer_GetClassId)},
    {SIP_MLNAME_CAST(sipName_GetLayer), meth_FbxLayerContainer_GetLayer, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxLayerContainer_GetLayer)},
    {SIP_MLNAME_CAST(sipName_GetLayerCount), meth_FbxLayerContainer_GetLayerCount, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxLayerContainer_GetLayerCount)},
    {SIP_MLNAME_CAST(sipName_GetLayerIndex), meth_FbxLayerContainer_GetLayerIndex, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxLayerContainer_GetLayerIndex)},
    {SIP_MLNAME_CAST(sipName_GetLayerTypedIndex), meth_FbxLayerContainer_GetLayerTypedIndex, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxLayerContainer_GetLayerTypedIndex)}
};


extern "C" {static PyObject *varget_FbxLayerContainer_ClassId(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxLayerContainer_ClassId(void *, PyObject *, PyObject *)
{
     ::FbxClassId*sipVal;

    sipVal = & ::FbxLayerContainer::ClassId;

    return sipConvertFromType(sipVal, sipType_FbxClassId, NULL);
}


extern "C" {static int varset_FbxLayerContainer_ClassId(void *, PyObject *, PyObject *);}
static int varset_FbxLayerContainer_ClassId(void *, PyObject *sipPy, PyObject *)
{
     ::FbxClassId*sipVal;
    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxClassId *>(sipForceConvertToType(sipPy,sipType_FbxClassId,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

     ::FbxLayerContainer::ClassId = *sipVal;

    return 0;
}

sipVariableDef variables_FbxLayerContainer[] = {
    {ClassVariable, sipName_ClassId, (PyMethodDef *)varget_FbxLayerContainer_ClassId, (PyMethodDef *)varset_FbxLayerContainer_ClassId, NULL, NULL},
};


sipClassTypeDef sipTypeDef_fbx_FbxLayerContainer = {
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_FbxLayerContainer,
        {0},
        0
    },
    {
        sipNameNr_FbxLayerContainer,
        {0, 0, 1},
        9, methods_FbxLayerContainer,
        0, 0,
        1, variables_FbxLayerContainer,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    0,
    -1,
    -1,
    supers_FbxLayerContainer,
    slots_FbxLayerContainer,
    0,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    0,
    0,
    0,
    0,
    release_FbxLayerContainer,
    cast_FbxLayerContainer,
    0,
    0,
    0,
    0,
    0,
    0
};
