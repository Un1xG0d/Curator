/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.3
 *
 * Copyright (C) 2009 Autodesk, Inc. and/or its licensors.
 * All Rights Reserved.
 * 
 * The coded instructions, statements, computer programs, and/or related material 
 * (collectively the "Data") in these files contain unpublished information 
 * proprietary to Autodesk, Inc. and/or its licensors, which is protected by 
 * Canada and United States of America federal copyright law and by international 
 * treaties. 
 * 
 * The Data may not be disclosed or distributed to third parties, in whole or in
 * part, without the prior written consent of Autodesk, Inc. ("Autodesk").
 * 
 * THE DATA IS PROVIDED "AS IS" AND WITHOUT WARRANTY.
 * ALL WARRANTIES ARE EXPRESSLY EXCLUDED AND DISCLAIMED. AUTODESK MAKES NO
 * WARRANTY OF ANY KIND WITH RESPECT TO THE DATA, EXPRESS, IMPLIED OR ARISING
 * BY CUSTOM OR TRADE USAGE, AND DISCLAIMS ANY IMPLIED WARRANTIES OF TITLE, 
 * NON-INFRINGEMENT, MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE OR USE. 
 * WITHOUT LIMITING THE FOREGOING, AUTODESK DOES NOT WARRANT THAT THE OPERATION
 * OF THE DATA WILL BE UNINTERRUPTED OR ERROR FREE. 
 * 
 * IN NO EVENT SHALL AUTODESK, ITS AFFILIATES, PARENT COMPANIES, LICENSORS
 * OR SUPPLIERS ("AUTODESK GROUP") BE LIABLE FOR ANY LOSSES, DAMAGES OR EXPENSES
 * OF ANY KIND (INCLUDING WITHOUT LIMITATION PUNITIVE OR MULTIPLE DAMAGES OR OTHER
 * SPECIAL, DIRECT, INDIRECT, EXEMPLARY, INCIDENTAL, LOSS OF PROFITS, REVENUE
 * OR DATA, COST OF COVER OR CONSEQUENTIAL LOSSES OR DAMAGES OF ANY KIND),
 * HOWEVER CAUSED, AND REGARDLESS OF THE THEORY OF LIABILITY, WHETHER DERIVED
 * FROM CONTRACT, TORT (INCLUDING, BUT NOT LIMITED TO, NEGLIGENCE), OR OTHERWISE,
 * ARISING OUT OF OR RELATING TO THE DATA OR ITS USE OR ANY OTHER PERFORMANCE,
 * WHETHER OR NOT AUTODESK HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH LOSS
 * OR DAMAGE. 
 */

#include "sipAPIfbx.h"




PyDoc_STRVAR(doc_FbxGeometryBase_Create, "Create(FbxManager, str) -> FbxGeometryBase\n"
    "Create(FbxObject, str) -> FbxGeometryBase");

extern "C" {static PyObject *meth_FbxGeometryBase_Create(PyObject *, PyObject *);}
static PyObject *meth_FbxGeometryBase_Create(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxManager* a0;
        const char* a1;
        PyObject *a1Keep;

        if (sipParseArgs(&sipParseErr, sipArgs, "J8A8", sipType_FbxManager, &a0, &a1Keep, &a1))
        {
             ::FbxGeometryBase*sipRes;

            sipRes =  ::FbxGeometryBase::Create(a0,a1);
            Py_DECREF(a1Keep);

            return sipConvertFromType(sipRes,sipType_FbxGeometryBase,NULL);
        }
    }

    {
         ::FbxObject* a0;
        const char* a1;
        PyObject *a1Keep;

        if (sipParseArgs(&sipParseErr, sipArgs, "J8A8", sipType_FbxObject, &a0, &a1Keep, &a1))
        {
             ::FbxGeometryBase*sipRes;

            sipRes =  ::FbxGeometryBase::Create(a0,a1);
            Py_DECREF(a1Keep);

            return sipConvertFromType(sipRes,sipType_FbxGeometryBase,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxGeometryBase, sipName_Create, doc_FbxGeometryBase_Create);

    return NULL;
}


PyDoc_STRVAR(doc_FbxGeometryBase_GetClassId, "GetClassId(self) -> FbxClassId");

extern "C" {static PyObject *meth_FbxGeometryBase_GetClassId(PyObject *, PyObject *);}
static PyObject *meth_FbxGeometryBase_GetClassId(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::FbxGeometryBase *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxGeometryBase, &sipCpp))
        {
             ::FbxClassId*sipRes;

            sipRes = new  ::FbxClassId((sipSelfWasArg ? sipCpp-> ::FbxGeometryBase::GetClassId() : sipCpp->GetClassId()));

            return sipConvertFromNewType(sipRes,sipType_FbxClassId,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxGeometryBase, sipName_GetClassId, doc_FbxGeometryBase_GetClassId);

    return NULL;
}


PyDoc_STRVAR(doc_FbxGeometryBase_InitControlPoints, "InitControlPoints(self, int)");

extern "C" {static PyObject *meth_FbxGeometryBase_InitControlPoints(PyObject *, PyObject *);}
static PyObject *meth_FbxGeometryBase_InitControlPoints(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int a0;
         ::FbxGeometryBase *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_FbxGeometryBase, &sipCpp, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::FbxGeometryBase::InitControlPoints(a0) : sipCpp->InitControlPoints(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxGeometryBase, sipName_InitControlPoints, doc_FbxGeometryBase_InitControlPoints);

    return NULL;
}


PyDoc_STRVAR(doc_FbxGeometryBase_InitNormals, "InitNormals(self, int = 0)\n"
    "InitNormals(self, FbxGeometryBase)");

extern "C" {static PyObject *meth_FbxGeometryBase_InitNormals(PyObject *, PyObject *);}
static PyObject *meth_FbxGeometryBase_InitNormals(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0 = 0;
         ::FbxGeometryBase *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B|i", &sipSelf, sipType_FbxGeometryBase, &sipCpp, &a0))
        {
            sipCpp->InitNormals(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
         ::FbxGeometryBase* a0;
         ::FbxGeometryBase *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_FbxGeometryBase, &sipCpp, sipType_FbxGeometryBase, &a0))
        {
            sipCpp->InitNormals(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxGeometryBase, sipName_InitNormals, doc_FbxGeometryBase_InitNormals);

    return NULL;
}


PyDoc_STRVAR(doc_FbxGeometryBase_InitTangents, "InitTangents(self, int = 0)\n"
    "InitTangents(self, FbxGeometryBase)");

extern "C" {static PyObject *meth_FbxGeometryBase_InitTangents(PyObject *, PyObject *);}
static PyObject *meth_FbxGeometryBase_InitTangents(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0 = 0;
         ::FbxGeometryBase *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B|i", &sipSelf, sipType_FbxGeometryBase, &sipCpp, &a0))
        {
            sipCpp->InitTangents(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
         ::FbxGeometryBase* a0;
         ::FbxGeometryBase *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_FbxGeometryBase, &sipCpp, sipType_FbxGeometryBase, &a0))
        {
            sipCpp->InitTangents(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxGeometryBase, sipName_InitTangents, doc_FbxGeometryBase_InitTangents);

    return NULL;
}


PyDoc_STRVAR(doc_FbxGeometryBase_InitBinormals, "InitBinormals(self, int = 0)\n"
    "InitBinormals(self, FbxGeometryBase)");

extern "C" {static PyObject *meth_FbxGeometryBase_InitBinormals(PyObject *, PyObject *);}
static PyObject *meth_FbxGeometryBase_InitBinormals(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0 = 0;
         ::FbxGeometryBase *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B|i", &sipSelf, sipType_FbxGeometryBase, &sipCpp, &a0))
        {
            sipCpp->InitBinormals(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
         ::FbxGeometryBase* a0;
         ::FbxGeometryBase *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_FbxGeometryBase, &sipCpp, sipType_FbxGeometryBase, &a0))
        {
            sipCpp->InitBinormals(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxGeometryBase, sipName_InitBinormals, doc_FbxGeometryBase_InitBinormals);

    return NULL;
}


PyDoc_STRVAR(doc_FbxGeometryBase_SetControlPointAt, "SetControlPointAt(self, FbxVector4, FbxVector4, int, bool = False)\n"
    "SetControlPointAt(self, FbxVector4, int)");

extern "C" {static PyObject *meth_FbxGeometryBase_SetControlPointAt(PyObject *, PyObject *);}
static PyObject *meth_FbxGeometryBase_SetControlPointAt(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::FbxVector4* a0;
         ::FbxVector4* a1;
        int a2;
        bool a3 = 0;
         ::FbxGeometryBase *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9J9i|b", &sipSelf, sipType_FbxGeometryBase, &sipCpp, sipType_FbxVector4, &a0, sipType_FbxVector4, &a1, &a2, &a3))
        {
            (sipSelfWasArg ? sipCpp-> ::FbxGeometryBase::SetControlPointAt(*a0,*a1,a2,a3) : sipCpp->SetControlPointAt(*a0,*a1,a2,a3));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
         ::FbxVector4* a0;
        int a1;
         ::FbxGeometryBase *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9i", &sipSelf, sipType_FbxGeometryBase, &sipCpp, sipType_FbxVector4, &a0, &a1))
        {
            (sipSelfWasArg ? sipCpp-> ::FbxGeometryBase::SetControlPointAt(*a0,a1) : sipCpp->SetControlPointAt(*a0,a1));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxGeometryBase, sipName_SetControlPointAt, doc_FbxGeometryBase_SetControlPointAt);

    return NULL;
}


PyDoc_STRVAR(doc_FbxGeometryBase_GetControlPointAt, "GetControlPointAt(self, int) -> FbxVector4");

extern "C" {static PyObject *meth_FbxGeometryBase_GetControlPointAt(PyObject *, PyObject *);}
static PyObject *meth_FbxGeometryBase_GetControlPointAt(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        const  ::FbxGeometryBase *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_FbxGeometryBase, &sipCpp, &a0))
        {
             ::FbxVector4*sipRes;

            sipRes = new  ::FbxVector4((sipSelfWasArg ? sipCpp-> ::FbxGeometryBase::GetControlPointAt(a0) : sipCpp->GetControlPointAt(a0)));

            return sipConvertFromNewType(sipRes,sipType_FbxVector4,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxGeometryBase, sipName_GetControlPointAt, doc_FbxGeometryBase_GetControlPointAt);

    return NULL;
}


PyDoc_STRVAR(doc_FbxGeometryBase_SetControlPointNormalAt, "SetControlPointNormalAt(self, FbxVector4, int, bool = False)");

extern "C" {static PyObject *meth_FbxGeometryBase_SetControlPointNormalAt(PyObject *, PyObject *);}
static PyObject *meth_FbxGeometryBase_SetControlPointNormalAt(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::FbxVector4* a0;
        int a1;
        bool a2 = 0;
         ::FbxGeometryBase *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9i|b", &sipSelf, sipType_FbxGeometryBase, &sipCpp, sipType_FbxVector4, &a0, &a1, &a2))
        {
            (sipSelfWasArg ? sipCpp-> ::FbxGeometryBase::SetControlPointNormalAt(*a0,a1,a2) : sipCpp->SetControlPointNormalAt(*a0,a1,a2));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxGeometryBase, sipName_SetControlPointNormalAt, doc_FbxGeometryBase_SetControlPointNormalAt);

    return NULL;
}


PyDoc_STRVAR(doc_FbxGeometryBase_GetControlPointsCount, "GetControlPointsCount(self) -> int");

extern "C" {static PyObject *meth_FbxGeometryBase_GetControlPointsCount(PyObject *, PyObject *);}
static PyObject *meth_FbxGeometryBase_GetControlPointsCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::FbxGeometryBase *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxGeometryBase, &sipCpp))
        {
            int sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::FbxGeometryBase::GetControlPointsCount() : sipCpp->GetControlPointsCount());

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxGeometryBase, sipName_GetControlPointsCount, doc_FbxGeometryBase_GetControlPointsCount);

    return NULL;
}


PyDoc_STRVAR(doc_FbxGeometryBase_GetControlPoints, "GetControlPoints(self) -> List");

extern "C" {static PyObject *meth_FbxGeometryBase_GetControlPoints(PyObject *, PyObject *);}
static PyObject *meth_FbxGeometryBase_GetControlPoints(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::FbxGeometryBase *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxGeometryBase, &sipCpp))
        {
            PyObject * sipRes = 0;

#line 31 "/var/www/html/lib/fbxpy/sip/fbxgeometrybase.sip"
    FbxVector4 *cps;
    int cpCount;

    cps = sipCpp->GetControlPoints();
    cpCount = sipCpp->GetControlPointsCount();

    // Create the Python list of the correct length.
    if ((sipRes = PyList_New(cpCount)) == NULL)
        return NULL;

    // Go through each element in the C++ instance and convert it to the
    // corresponding Python object.
    for (int i = 0; i < cpCount; ++i)
    {
        PyList_SET_ITEM(sipRes, i, sipConvertFromType(cps,sipType_FbxVector4,NULL));
        cps++;
    }
#line 452 "/var/www/html/lib/fbxpy/build/Python27_ucs4_x64/sipfbxFbxGeometryBase.cpp"

            return sipRes;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxGeometryBase, sipName_GetControlPoints, doc_FbxGeometryBase_GetControlPoints);

    return NULL;
}


PyDoc_STRVAR(doc_FbxGeometryBase_SetControlPointCount, "SetControlPointCount(self, int)");

extern "C" {static PyObject *meth_FbxGeometryBase_SetControlPointCount(PyObject *, PyObject *);}
static PyObject *meth_FbxGeometryBase_SetControlPointCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int a0;
         ::FbxGeometryBase *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_FbxGeometryBase, &sipCpp, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::FbxGeometryBase::SetControlPointCount(a0) : sipCpp->SetControlPointCount(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxGeometryBase, sipName_SetControlPointCount, doc_FbxGeometryBase_SetControlPointCount);

    return NULL;
}


PyDoc_STRVAR(doc_FbxGeometryBase_ComputeBBox, "ComputeBBox(self)");

extern "C" {static PyObject *meth_FbxGeometryBase_ComputeBBox(PyObject *, PyObject *);}
static PyObject *meth_FbxGeometryBase_ComputeBBox(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxGeometryBase *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxGeometryBase, &sipCpp))
        {
            sipCpp->ComputeBBox();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxGeometryBase, sipName_ComputeBBox, doc_FbxGeometryBase_ComputeBBox);

    return NULL;
}


PyDoc_STRVAR(doc_FbxGeometryBase_CreateElementNormal, "CreateElementNormal(self) -> FbxLayerElementNormal");

extern "C" {static PyObject *meth_FbxGeometryBase_CreateElementNormal(PyObject *, PyObject *);}
static PyObject *meth_FbxGeometryBase_CreateElementNormal(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxGeometryBase *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxGeometryBase, &sipCpp))
        {
             ::FbxLayerElementNormal*sipRes;

            sipRes = sipCpp->CreateElementNormal();

            return sipConvertFromType(sipRes,sipType_FbxLayerElementNormal,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxGeometryBase, sipName_CreateElementNormal, doc_FbxGeometryBase_CreateElementNormal);

    return NULL;
}


PyDoc_STRVAR(doc_FbxGeometryBase_RemoveElementNormal, "RemoveElementNormal(self, FbxLayerElementNormal) -> bool");

extern "C" {static PyObject *meth_FbxGeometryBase_RemoveElementNormal(PyObject *, PyObject *);}
static PyObject *meth_FbxGeometryBase_RemoveElementNormal(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxLayerElementNormal* a0;
         ::FbxGeometryBase *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_FbxGeometryBase, &sipCpp, sipType_FbxLayerElementNormal, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->RemoveElementNormal(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxGeometryBase, sipName_RemoveElementNormal, doc_FbxGeometryBase_RemoveElementNormal);

    return NULL;
}


PyDoc_STRVAR(doc_FbxGeometryBase_GetElementNormal, "GetElementNormal(self, int = 0) -> FbxLayerElementNormal");

extern "C" {static PyObject *meth_FbxGeometryBase_GetElementNormal(PyObject *, PyObject *);}
static PyObject *meth_FbxGeometryBase_GetElementNormal(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0 = 0;
         ::FbxGeometryBase *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B|i", &sipSelf, sipType_FbxGeometryBase, &sipCpp, &a0))
        {
             ::FbxLayerElementNormal*sipRes;

            sipRes = sipCpp->GetElementNormal(a0);

            return sipConvertFromType(sipRes,sipType_FbxLayerElementNormal,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxGeometryBase, sipName_GetElementNormal, doc_FbxGeometryBase_GetElementNormal);

    return NULL;
}


PyDoc_STRVAR(doc_FbxGeometryBase_GetElementNormalCount, "GetElementNormalCount(self) -> int");

extern "C" {static PyObject *meth_FbxGeometryBase_GetElementNormalCount(PyObject *, PyObject *);}
static PyObject *meth_FbxGeometryBase_GetElementNormalCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::FbxGeometryBase *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxGeometryBase, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->GetElementNormalCount();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxGeometryBase, sipName_GetElementNormalCount, doc_FbxGeometryBase_GetElementNormalCount);

    return NULL;
}


PyDoc_STRVAR(doc_FbxGeometryBase_CreateElementBinormal, "CreateElementBinormal(self) -> FbxLayerElementBinormal");

extern "C" {static PyObject *meth_FbxGeometryBase_CreateElementBinormal(PyObject *, PyObject *);}
static PyObject *meth_FbxGeometryBase_CreateElementBinormal(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxGeometryBase *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxGeometryBase, &sipCpp))
        {
             ::FbxLayerElementBinormal*sipRes;

            sipRes = sipCpp->CreateElementBinormal();

            return sipConvertFromType(sipRes,sipType_FbxLayerElementBinormal,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxGeometryBase, sipName_CreateElementBinormal, doc_FbxGeometryBase_CreateElementBinormal);

    return NULL;
}


PyDoc_STRVAR(doc_FbxGeometryBase_RemoveElementBinormal, "RemoveElementBinormal(self, FbxLayerElementBinormal) -> bool");

extern "C" {static PyObject *meth_FbxGeometryBase_RemoveElementBinormal(PyObject *, PyObject *);}
static PyObject *meth_FbxGeometryBase_RemoveElementBinormal(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxLayerElementBinormal* a0;
         ::FbxGeometryBase *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_FbxGeometryBase, &sipCpp, sipType_FbxLayerElementBinormal, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->RemoveElementBinormal(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxGeometryBase, sipName_RemoveElementBinormal, doc_FbxGeometryBase_RemoveElementBinormal);

    return NULL;
}


PyDoc_STRVAR(doc_FbxGeometryBase_GetElementBinormal, "GetElementBinormal(self, int = 0) -> FbxLayerElementBinormal");

extern "C" {static PyObject *meth_FbxGeometryBase_GetElementBinormal(PyObject *, PyObject *);}
static PyObject *meth_FbxGeometryBase_GetElementBinormal(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0 = 0;
         ::FbxGeometryBase *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B|i", &sipSelf, sipType_FbxGeometryBase, &sipCpp, &a0))
        {
             ::FbxLayerElementBinormal*sipRes;

            sipRes = sipCpp->GetElementBinormal(a0);

            return sipConvertFromType(sipRes,sipType_FbxLayerElementBinormal,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxGeometryBase, sipName_GetElementBinormal, doc_FbxGeometryBase_GetElementBinormal);

    return NULL;
}


PyDoc_STRVAR(doc_FbxGeometryBase_GetElementBinormalCount, "GetElementBinormalCount(self) -> int");

extern "C" {static PyObject *meth_FbxGeometryBase_GetElementBinormalCount(PyObject *, PyObject *);}
static PyObject *meth_FbxGeometryBase_GetElementBinormalCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::FbxGeometryBase *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxGeometryBase, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->GetElementBinormalCount();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxGeometryBase, sipName_GetElementBinormalCount, doc_FbxGeometryBase_GetElementBinormalCount);

    return NULL;
}


PyDoc_STRVAR(doc_FbxGeometryBase_CreateElementTangent, "CreateElementTangent(self) -> FbxLayerElementTangent");

extern "C" {static PyObject *meth_FbxGeometryBase_CreateElementTangent(PyObject *, PyObject *);}
static PyObject *meth_FbxGeometryBase_CreateElementTangent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxGeometryBase *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxGeometryBase, &sipCpp))
        {
             ::FbxLayerElementTangent*sipRes;

            sipRes = sipCpp->CreateElementTangent();

            return sipConvertFromType(sipRes,sipType_FbxLayerElementTangent,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxGeometryBase, sipName_CreateElementTangent, doc_FbxGeometryBase_CreateElementTangent);

    return NULL;
}


PyDoc_STRVAR(doc_FbxGeometryBase_RemoveElementTangent, "RemoveElementTangent(self, FbxLayerElementTangent) -> bool");

extern "C" {static PyObject *meth_FbxGeometryBase_RemoveElementTangent(PyObject *, PyObject *);}
static PyObject *meth_FbxGeometryBase_RemoveElementTangent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxLayerElementTangent* a0;
         ::FbxGeometryBase *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_FbxGeometryBase, &sipCpp, sipType_FbxLayerElementTangent, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->RemoveElementTangent(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxGeometryBase, sipName_RemoveElementTangent, doc_FbxGeometryBase_RemoveElementTangent);

    return NULL;
}


PyDoc_STRVAR(doc_FbxGeometryBase_GetElementTangent, "GetElementTangent(self, int = 0) -> FbxLayerElementTangent");

extern "C" {static PyObject *meth_FbxGeometryBase_GetElementTangent(PyObject *, PyObject *);}
static PyObject *meth_FbxGeometryBase_GetElementTangent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0 = 0;
         ::FbxGeometryBase *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B|i", &sipSelf, sipType_FbxGeometryBase, &sipCpp, &a0))
        {
             ::FbxLayerElementTangent*sipRes;

            sipRes = sipCpp->GetElementTangent(a0);

            return sipConvertFromType(sipRes,sipType_FbxLayerElementTangent,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxGeometryBase, sipName_GetElementTangent, doc_FbxGeometryBase_GetElementTangent);

    return NULL;
}


PyDoc_STRVAR(doc_FbxGeometryBase_GetElementTangentCount, "GetElementTangentCount(self) -> int");

extern "C" {static PyObject *meth_FbxGeometryBase_GetElementTangentCount(PyObject *, PyObject *);}
static PyObject *meth_FbxGeometryBase_GetElementTangentCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::FbxGeometryBase *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxGeometryBase, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->GetElementTangentCount();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxGeometryBase, sipName_GetElementTangentCount, doc_FbxGeometryBase_GetElementTangentCount);

    return NULL;
}


PyDoc_STRVAR(doc_FbxGeometryBase_CreateElementMaterial, "CreateElementMaterial(self) -> FbxLayerElementMaterial");

extern "C" {static PyObject *meth_FbxGeometryBase_CreateElementMaterial(PyObject *, PyObject *);}
static PyObject *meth_FbxGeometryBase_CreateElementMaterial(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxGeometryBase *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxGeometryBase, &sipCpp))
        {
             ::FbxLayerElementMaterial*sipRes;

            sipRes = sipCpp->CreateElementMaterial();

            return sipConvertFromType(sipRes,sipType_FbxLayerElementMaterial,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxGeometryBase, sipName_CreateElementMaterial, doc_FbxGeometryBase_CreateElementMaterial);

    return NULL;
}


PyDoc_STRVAR(doc_FbxGeometryBase_RemoveElementMaterial, "RemoveElementMaterial(self, FbxLayerElementMaterial) -> bool");

extern "C" {static PyObject *meth_FbxGeometryBase_RemoveElementMaterial(PyObject *, PyObject *);}
static PyObject *meth_FbxGeometryBase_RemoveElementMaterial(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxLayerElementMaterial* a0;
         ::FbxGeometryBase *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_FbxGeometryBase, &sipCpp, sipType_FbxLayerElementMaterial, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->RemoveElementMaterial(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxGeometryBase, sipName_RemoveElementMaterial, doc_FbxGeometryBase_RemoveElementMaterial);

    return NULL;
}


PyDoc_STRVAR(doc_FbxGeometryBase_GetElementMaterial, "GetElementMaterial(self, int = 0) -> FbxLayerElementMaterial");

extern "C" {static PyObject *meth_FbxGeometryBase_GetElementMaterial(PyObject *, PyObject *);}
static PyObject *meth_FbxGeometryBase_GetElementMaterial(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0 = 0;
         ::FbxGeometryBase *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B|i", &sipSelf, sipType_FbxGeometryBase, &sipCpp, &a0))
        {
             ::FbxLayerElementMaterial*sipRes;

            sipRes = sipCpp->GetElementMaterial(a0);

            return sipConvertFromType(sipRes,sipType_FbxLayerElementMaterial,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxGeometryBase, sipName_GetElementMaterial, doc_FbxGeometryBase_GetElementMaterial);

    return NULL;
}


PyDoc_STRVAR(doc_FbxGeometryBase_GetElementMaterialCount, "GetElementMaterialCount(self) -> int");

extern "C" {static PyObject *meth_FbxGeometryBase_GetElementMaterialCount(PyObject *, PyObject *);}
static PyObject *meth_FbxGeometryBase_GetElementMaterialCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::FbxGeometryBase *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxGeometryBase, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->GetElementMaterialCount();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxGeometryBase, sipName_GetElementMaterialCount, doc_FbxGeometryBase_GetElementMaterialCount);

    return NULL;
}


PyDoc_STRVAR(doc_FbxGeometryBase_CreateElementPolygonGroup, "CreateElementPolygonGroup(self) -> FbxLayerElementPolygonGroup");

extern "C" {static PyObject *meth_FbxGeometryBase_CreateElementPolygonGroup(PyObject *, PyObject *);}
static PyObject *meth_FbxGeometryBase_CreateElementPolygonGroup(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxGeometryBase *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxGeometryBase, &sipCpp))
        {
             ::FbxLayerElementPolygonGroup*sipRes;

            sipRes = sipCpp->CreateElementPolygonGroup();

            return sipConvertFromType(sipRes,sipType_FbxLayerElementPolygonGroup,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxGeometryBase, sipName_CreateElementPolygonGroup, doc_FbxGeometryBase_CreateElementPolygonGroup);

    return NULL;
}


PyDoc_STRVAR(doc_FbxGeometryBase_RemoveElementPolygonGroup, "RemoveElementPolygonGroup(self, FbxLayerElementPolygonGroup) -> bool");

extern "C" {static PyObject *meth_FbxGeometryBase_RemoveElementPolygonGroup(PyObject *, PyObject *);}
static PyObject *meth_FbxGeometryBase_RemoveElementPolygonGroup(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxLayerElementPolygonGroup* a0;
         ::FbxGeometryBase *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_FbxGeometryBase, &sipCpp, sipType_FbxLayerElementPolygonGroup, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->RemoveElementPolygonGroup(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxGeometryBase, sipName_RemoveElementPolygonGroup, doc_FbxGeometryBase_RemoveElementPolygonGroup);

    return NULL;
}


PyDoc_STRVAR(doc_FbxGeometryBase_GetElementPolygonGroup, "GetElementPolygonGroup(self, int = 0) -> FbxLayerElementPolygonGroup");

extern "C" {static PyObject *meth_FbxGeometryBase_GetElementPolygonGroup(PyObject *, PyObject *);}
static PyObject *meth_FbxGeometryBase_GetElementPolygonGroup(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0 = 0;
         ::FbxGeometryBase *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B|i", &sipSelf, sipType_FbxGeometryBase, &sipCpp, &a0))
        {
             ::FbxLayerElementPolygonGroup*sipRes;

            sipRes = sipCpp->GetElementPolygonGroup(a0);

            return sipConvertFromType(sipRes,sipType_FbxLayerElementPolygonGroup,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxGeometryBase, sipName_GetElementPolygonGroup, doc_FbxGeometryBase_GetElementPolygonGroup);

    return NULL;
}


PyDoc_STRVAR(doc_FbxGeometryBase_GetElementPolygonGroupCount, "GetElementPolygonGroupCount(self) -> int");

extern "C" {static PyObject *meth_FbxGeometryBase_GetElementPolygonGroupCount(PyObject *, PyObject *);}
static PyObject *meth_FbxGeometryBase_GetElementPolygonGroupCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::FbxGeometryBase *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxGeometryBase, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->GetElementPolygonGroupCount();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxGeometryBase, sipName_GetElementPolygonGroupCount, doc_FbxGeometryBase_GetElementPolygonGroupCount);

    return NULL;
}


PyDoc_STRVAR(doc_FbxGeometryBase_CreateElementVertexColor, "CreateElementVertexColor(self) -> FbxLayerElementVertexColor");

extern "C" {static PyObject *meth_FbxGeometryBase_CreateElementVertexColor(PyObject *, PyObject *);}
static PyObject *meth_FbxGeometryBase_CreateElementVertexColor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxGeometryBase *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxGeometryBase, &sipCpp))
        {
             ::FbxLayerElementVertexColor*sipRes;

            sipRes = sipCpp->CreateElementVertexColor();

            return sipConvertFromType(sipRes,sipType_FbxLayerElementVertexColor,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxGeometryBase, sipName_CreateElementVertexColor, doc_FbxGeometryBase_CreateElementVertexColor);

    return NULL;
}


PyDoc_STRVAR(doc_FbxGeometryBase_RemoveElementVertexColor, "RemoveElementVertexColor(self, FbxLayerElementVertexColor) -> bool");

extern "C" {static PyObject *meth_FbxGeometryBase_RemoveElementVertexColor(PyObject *, PyObject *);}
static PyObject *meth_FbxGeometryBase_RemoveElementVertexColor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxLayerElementVertexColor* a0;
         ::FbxGeometryBase *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_FbxGeometryBase, &sipCpp, sipType_FbxLayerElementVertexColor, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->RemoveElementVertexColor(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxGeometryBase, sipName_RemoveElementVertexColor, doc_FbxGeometryBase_RemoveElementVertexColor);

    return NULL;
}


PyDoc_STRVAR(doc_FbxGeometryBase_GetElementVertexColor, "GetElementVertexColor(self, int = 0) -> FbxLayerElementVertexColor");

extern "C" {static PyObject *meth_FbxGeometryBase_GetElementVertexColor(PyObject *, PyObject *);}
static PyObject *meth_FbxGeometryBase_GetElementVertexColor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0 = 0;
         ::FbxGeometryBase *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B|i", &sipSelf, sipType_FbxGeometryBase, &sipCpp, &a0))
        {
             ::FbxLayerElementVertexColor*sipRes;

            sipRes = sipCpp->GetElementVertexColor(a0);

            return sipConvertFromType(sipRes,sipType_FbxLayerElementVertexColor,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxGeometryBase, sipName_GetElementVertexColor, doc_FbxGeometryBase_GetElementVertexColor);

    return NULL;
}


PyDoc_STRVAR(doc_FbxGeometryBase_GetElementVertexColorCount, "GetElementVertexColorCount(self) -> int");

extern "C" {static PyObject *meth_FbxGeometryBase_GetElementVertexColorCount(PyObject *, PyObject *);}
static PyObject *meth_FbxGeometryBase_GetElementVertexColorCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::FbxGeometryBase *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxGeometryBase, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->GetElementVertexColorCount();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxGeometryBase, sipName_GetElementVertexColorCount, doc_FbxGeometryBase_GetElementVertexColorCount);

    return NULL;
}


PyDoc_STRVAR(doc_FbxGeometryBase_CreateElementSmoothing, "CreateElementSmoothing(self) -> FbxLayerElementSmoothing");

extern "C" {static PyObject *meth_FbxGeometryBase_CreateElementSmoothing(PyObject *, PyObject *);}
static PyObject *meth_FbxGeometryBase_CreateElementSmoothing(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxGeometryBase *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxGeometryBase, &sipCpp))
        {
             ::FbxLayerElementSmoothing*sipRes;

            sipRes = sipCpp->CreateElementSmoothing();

            return sipConvertFromType(sipRes,sipType_FbxLayerElementSmoothing,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxGeometryBase, sipName_CreateElementSmoothing, doc_FbxGeometryBase_CreateElementSmoothing);

    return NULL;
}


PyDoc_STRVAR(doc_FbxGeometryBase_RemoveElementSmoothing, "RemoveElementSmoothing(self, FbxLayerElementSmoothing) -> bool");

extern "C" {static PyObject *meth_FbxGeometryBase_RemoveElementSmoothing(PyObject *, PyObject *);}
static PyObject *meth_FbxGeometryBase_RemoveElementSmoothing(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxLayerElementSmoothing* a0;
         ::FbxGeometryBase *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_FbxGeometryBase, &sipCpp, sipType_FbxLayerElementSmoothing, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->RemoveElementSmoothing(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxGeometryBase, sipName_RemoveElementSmoothing, doc_FbxGeometryBase_RemoveElementSmoothing);

    return NULL;
}


PyDoc_STRVAR(doc_FbxGeometryBase_GetElementSmoothing, "GetElementSmoothing(self, int = 0) -> FbxLayerElementSmoothing");

extern "C" {static PyObject *meth_FbxGeometryBase_GetElementSmoothing(PyObject *, PyObject *);}
static PyObject *meth_FbxGeometryBase_GetElementSmoothing(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0 = 0;
         ::FbxGeometryBase *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B|i", &sipSelf, sipType_FbxGeometryBase, &sipCpp, &a0))
        {
             ::FbxLayerElementSmoothing*sipRes;

            sipRes = sipCpp->GetElementSmoothing(a0);

            return sipConvertFromType(sipRes,sipType_FbxLayerElementSmoothing,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxGeometryBase, sipName_GetElementSmoothing, doc_FbxGeometryBase_GetElementSmoothing);

    return NULL;
}


PyDoc_STRVAR(doc_FbxGeometryBase_GetElementSmoothingCount, "GetElementSmoothingCount(self) -> int");

extern "C" {static PyObject *meth_FbxGeometryBase_GetElementSmoothingCount(PyObject *, PyObject *);}
static PyObject *meth_FbxGeometryBase_GetElementSmoothingCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::FbxGeometryBase *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxGeometryBase, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->GetElementSmoothingCount();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxGeometryBase, sipName_GetElementSmoothingCount, doc_FbxGeometryBase_GetElementSmoothingCount);

    return NULL;
}


PyDoc_STRVAR(doc_FbxGeometryBase_CreateElementVertexCrease, "CreateElementVertexCrease(self) -> FbxLayerElementCrease");

extern "C" {static PyObject *meth_FbxGeometryBase_CreateElementVertexCrease(PyObject *, PyObject *);}
static PyObject *meth_FbxGeometryBase_CreateElementVertexCrease(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxGeometryBase *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxGeometryBase, &sipCpp))
        {
             ::FbxLayerElementCrease*sipRes;

            sipRes = sipCpp->CreateElementVertexCrease();

            return sipConvertFromType(sipRes,sipType_FbxLayerElementCrease,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxGeometryBase, sipName_CreateElementVertexCrease, doc_FbxGeometryBase_CreateElementVertexCrease);

    return NULL;
}


PyDoc_STRVAR(doc_FbxGeometryBase_RemoveElementVertexCrease, "RemoveElementVertexCrease(self, FbxLayerElementCrease) -> bool");

extern "C" {static PyObject *meth_FbxGeometryBase_RemoveElementVertexCrease(PyObject *, PyObject *);}
static PyObject *meth_FbxGeometryBase_RemoveElementVertexCrease(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxLayerElementCrease* a0;
         ::FbxGeometryBase *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_FbxGeometryBase, &sipCpp, sipType_FbxLayerElementCrease, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->RemoveElementVertexCrease(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxGeometryBase, sipName_RemoveElementVertexCrease, doc_FbxGeometryBase_RemoveElementVertexCrease);

    return NULL;
}


PyDoc_STRVAR(doc_FbxGeometryBase_GetElementVertexCrease, "GetElementVertexCrease(self, int = 0) -> FbxLayerElementCrease");

extern "C" {static PyObject *meth_FbxGeometryBase_GetElementVertexCrease(PyObject *, PyObject *);}
static PyObject *meth_FbxGeometryBase_GetElementVertexCrease(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0 = 0;
         ::FbxGeometryBase *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B|i", &sipSelf, sipType_FbxGeometryBase, &sipCpp, &a0))
        {
             ::FbxLayerElementCrease*sipRes;

            sipRes = sipCpp->GetElementVertexCrease(a0);

            return sipConvertFromType(sipRes,sipType_FbxLayerElementCrease,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxGeometryBase, sipName_GetElementVertexCrease, doc_FbxGeometryBase_GetElementVertexCrease);

    return NULL;
}


PyDoc_STRVAR(doc_FbxGeometryBase_GetElementVertexCreaseCount, "GetElementVertexCreaseCount(self) -> int");

extern "C" {static PyObject *meth_FbxGeometryBase_GetElementVertexCreaseCount(PyObject *, PyObject *);}
static PyObject *meth_FbxGeometryBase_GetElementVertexCreaseCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::FbxGeometryBase *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxGeometryBase, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->GetElementVertexCreaseCount();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxGeometryBase, sipName_GetElementVertexCreaseCount, doc_FbxGeometryBase_GetElementVertexCreaseCount);

    return NULL;
}


PyDoc_STRVAR(doc_FbxGeometryBase_CreateElementEdgeCrease, "CreateElementEdgeCrease(self) -> FbxLayerElementCrease");

extern "C" {static PyObject *meth_FbxGeometryBase_CreateElementEdgeCrease(PyObject *, PyObject *);}
static PyObject *meth_FbxGeometryBase_CreateElementEdgeCrease(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxGeometryBase *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxGeometryBase, &sipCpp))
        {
             ::FbxLayerElementCrease*sipRes;

            sipRes = sipCpp->CreateElementEdgeCrease();

            return sipConvertFromType(sipRes,sipType_FbxLayerElementCrease,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxGeometryBase, sipName_CreateElementEdgeCrease, doc_FbxGeometryBase_CreateElementEdgeCrease);

    return NULL;
}


PyDoc_STRVAR(doc_FbxGeometryBase_RemoveElementEdgeCrease, "RemoveElementEdgeCrease(self, FbxLayerElementCrease) -> bool");

extern "C" {static PyObject *meth_FbxGeometryBase_RemoveElementEdgeCrease(PyObject *, PyObject *);}
static PyObject *meth_FbxGeometryBase_RemoveElementEdgeCrease(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxLayerElementCrease* a0;
         ::FbxGeometryBase *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_FbxGeometryBase, &sipCpp, sipType_FbxLayerElementCrease, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->RemoveElementEdgeCrease(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxGeometryBase, sipName_RemoveElementEdgeCrease, doc_FbxGeometryBase_RemoveElementEdgeCrease);

    return NULL;
}


PyDoc_STRVAR(doc_FbxGeometryBase_GetElementEdgeCrease, "GetElementEdgeCrease(self, int = 0) -> FbxLayerElementCrease");

extern "C" {static PyObject *meth_FbxGeometryBase_GetElementEdgeCrease(PyObject *, PyObject *);}
static PyObject *meth_FbxGeometryBase_GetElementEdgeCrease(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0 = 0;
         ::FbxGeometryBase *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B|i", &sipSelf, sipType_FbxGeometryBase, &sipCpp, &a0))
        {
             ::FbxLayerElementCrease*sipRes;

            sipRes = sipCpp->GetElementEdgeCrease(a0);

            return sipConvertFromType(sipRes,sipType_FbxLayerElementCrease,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxGeometryBase, sipName_GetElementEdgeCrease, doc_FbxGeometryBase_GetElementEdgeCrease);

    return NULL;
}


PyDoc_STRVAR(doc_FbxGeometryBase_GetElementEdgeCreaseCount, "GetElementEdgeCreaseCount(self) -> int");

extern "C" {static PyObject *meth_FbxGeometryBase_GetElementEdgeCreaseCount(PyObject *, PyObject *);}
static PyObject *meth_FbxGeometryBase_GetElementEdgeCreaseCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::FbxGeometryBase *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxGeometryBase, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->GetElementEdgeCreaseCount();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxGeometryBase, sipName_GetElementEdgeCreaseCount, doc_FbxGeometryBase_GetElementEdgeCreaseCount);

    return NULL;
}


PyDoc_STRVAR(doc_FbxGeometryBase_CreateElementVisibility, "CreateElementVisibility(self) -> FbxLayerElementVisibility");

extern "C" {static PyObject *meth_FbxGeometryBase_CreateElementVisibility(PyObject *, PyObject *);}
static PyObject *meth_FbxGeometryBase_CreateElementVisibility(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxGeometryBase *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxGeometryBase, &sipCpp))
        {
             ::FbxLayerElementVisibility*sipRes;

            sipRes = sipCpp->CreateElementVisibility();

            return sipConvertFromType(sipRes,sipType_FbxLayerElementVisibility,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxGeometryBase, sipName_CreateElementVisibility, doc_FbxGeometryBase_CreateElementVisibility);

    return NULL;
}


PyDoc_STRVAR(doc_FbxGeometryBase_RemoveElementVisibility, "RemoveElementVisibility(self, FbxLayerElementVisibility) -> bool");

extern "C" {static PyObject *meth_FbxGeometryBase_RemoveElementVisibility(PyObject *, PyObject *);}
static PyObject *meth_FbxGeometryBase_RemoveElementVisibility(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxLayerElementVisibility* a0;
         ::FbxGeometryBase *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_FbxGeometryBase, &sipCpp, sipType_FbxLayerElementVisibility, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->RemoveElementVisibility(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxGeometryBase, sipName_RemoveElementVisibility, doc_FbxGeometryBase_RemoveElementVisibility);

    return NULL;
}


PyDoc_STRVAR(doc_FbxGeometryBase_GetElementVisibility, "GetElementVisibility(self, int = 0) -> FbxLayerElementVisibility");

extern "C" {static PyObject *meth_FbxGeometryBase_GetElementVisibility(PyObject *, PyObject *);}
static PyObject *meth_FbxGeometryBase_GetElementVisibility(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0 = 0;
         ::FbxGeometryBase *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B|i", &sipSelf, sipType_FbxGeometryBase, &sipCpp, &a0))
        {
             ::FbxLayerElementVisibility*sipRes;

            sipRes = sipCpp->GetElementVisibility(a0);

            return sipConvertFromType(sipRes,sipType_FbxLayerElementVisibility,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxGeometryBase, sipName_GetElementVisibility, doc_FbxGeometryBase_GetElementVisibility);

    return NULL;
}


PyDoc_STRVAR(doc_FbxGeometryBase_GetElementVisibilityCount, "GetElementVisibilityCount(self) -> int");

extern "C" {static PyObject *meth_FbxGeometryBase_GetElementVisibilityCount(PyObject *, PyObject *);}
static PyObject *meth_FbxGeometryBase_GetElementVisibilityCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::FbxGeometryBase *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxGeometryBase, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->GetElementVisibilityCount();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxGeometryBase, sipName_GetElementVisibilityCount, doc_FbxGeometryBase_GetElementVisibilityCount);

    return NULL;
}


PyDoc_STRVAR(doc_FbxGeometryBase_CreateElementUV, "CreateElementUV(self, str) -> FbxLayerElementUV");

extern "C" {static PyObject *meth_FbxGeometryBase_CreateElementUV(PyObject *, PyObject *);}
static PyObject *meth_FbxGeometryBase_CreateElementUV(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const char* a0;
        PyObject *a0Keep;
         ::FbxGeometryBase *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BA8", &sipSelf, sipType_FbxGeometryBase, &sipCpp, &a0Keep, &a0))
        {
             ::FbxLayerElementUV*sipRes;

            sipRes = sipCpp->CreateElementUV(a0);
            Py_DECREF(a0Keep);

            return sipConvertFromType(sipRes,sipType_FbxLayerElementUV,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxGeometryBase, sipName_CreateElementUV, doc_FbxGeometryBase_CreateElementUV);

    return NULL;
}


PyDoc_STRVAR(doc_FbxGeometryBase_RemoveElementUV, "RemoveElementUV(self, FbxLayerElementUV) -> bool");

extern "C" {static PyObject *meth_FbxGeometryBase_RemoveElementUV(PyObject *, PyObject *);}
static PyObject *meth_FbxGeometryBase_RemoveElementUV(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxLayerElementUV* a0;
         ::FbxGeometryBase *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_FbxGeometryBase, &sipCpp, sipType_FbxLayerElementUV, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->RemoveElementUV(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxGeometryBase, sipName_RemoveElementUV, doc_FbxGeometryBase_RemoveElementUV);

    return NULL;
}


PyDoc_STRVAR(doc_FbxGeometryBase_GetElementUV, "GetElementUV(self, int = 0) -> FbxLayerElementUV\n"
    "GetElementUV(self, str) -> FbxLayerElementUV");

extern "C" {static PyObject *meth_FbxGeometryBase_GetElementUV(PyObject *, PyObject *);}
static PyObject *meth_FbxGeometryBase_GetElementUV(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0 = 0;
         ::FbxGeometryBase *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B|i", &sipSelf, sipType_FbxGeometryBase, &sipCpp, &a0))
        {
             ::FbxLayerElementUV*sipRes;

            sipRes = sipCpp->GetElementUV(a0);

            return sipConvertFromType(sipRes,sipType_FbxLayerElementUV,NULL);
        }
    }

    {
        const char* a0;
        PyObject *a0Keep;
         ::FbxGeometryBase *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BA8", &sipSelf, sipType_FbxGeometryBase, &sipCpp, &a0Keep, &a0))
        {
             ::FbxLayerElementUV*sipRes;

            sipRes = sipCpp->GetElementUV(a0);
            Py_DECREF(a0Keep);

            return sipConvertFromType(sipRes,sipType_FbxLayerElementUV,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxGeometryBase, sipName_GetElementUV, doc_FbxGeometryBase_GetElementUV);

    return NULL;
}


PyDoc_STRVAR(doc_FbxGeometryBase_GetElementUVCount, "GetElementUVCount(self) -> int");

extern "C" {static PyObject *meth_FbxGeometryBase_GetElementUVCount(PyObject *, PyObject *);}
static PyObject *meth_FbxGeometryBase_GetElementUVCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::FbxGeometryBase *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxGeometryBase, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->GetElementUVCount();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxGeometryBase, sipName_GetElementUVCount, doc_FbxGeometryBase_GetElementUVCount);

    return NULL;
}


PyDoc_STRVAR(doc_FbxGeometryBase_GetUVSetNames, "GetUVSetNames(self, List)");

extern "C" {static PyObject *meth_FbxGeometryBase_GetUVSetNames(PyObject *, PyObject *);}
static PyObject *meth_FbxGeometryBase_GetUVSetNames(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        PyObject * a0;
        const  ::FbxGeometryBase *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BT", &sipSelf, sipType_FbxGeometryBase, &sipCpp, &PyList_Type, &a0))
        {
#line 113 "/var/www/html/lib/fbxpy/sip/fbxgeometrybase.sip"
        FbxLayerContainer* lC = (FbxLayerContainer*)sipCpp;
        FbxArray< FbxString > names;
        for (int i = 0; i < lC->GetLayerCount(); ++i)
        {
            const FbxLayer* lLayer = lC->GetLayer(i);
            for(int lIndex=0;lIndex<FbxLayerElement::sTypeTextureCount;lIndex++)
            {
                FbxLayerElement::EType type = FbxLayerElement::EType(lIndex+FbxLayerElement::sTypeTextureStartIndex);
                const FbxLayerElementUV* lUVLayerElement = lLayer->GetUVs(type);
                if (lUVLayerElement)
                {
                    names.Add(lUVLayerElement->GetName());
                }
            }
        }

        for (int j = 0; j < names.GetCount(); j++)
        {
            PyList_Append(a0, sipConvertFromType(&names[j], sipType_FbxString, NULL));
        }
#line 1831 "/var/www/html/lib/fbxpy/build/Python27_ucs4_x64/sipfbxFbxGeometryBase.cpp"

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxGeometryBase, sipName_GetUVSetNames, doc_FbxGeometryBase_GetUVSetNames);

    return NULL;
}


extern "C" {static PyObject *slot_FbxGeometryBase___ne__(PyObject *,PyObject *);}
static PyObject *slot_FbxGeometryBase___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::FbxGeometryBase *sipCpp = reinterpret_cast< ::FbxGeometryBase *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_FbxGeometryBase));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const  ::FbxGeometryBase* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_FbxGeometryBase, &a0))
        {
            bool sipRes;

            sipRes = !sipCpp-> ::FbxGeometryBase::operator==(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_fbx, ne_slot, sipType_FbxGeometryBase, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_FbxGeometryBase___eq__(PyObject *,PyObject *);}
static PyObject *slot_FbxGeometryBase___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::FbxGeometryBase *sipCpp = reinterpret_cast< ::FbxGeometryBase *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_FbxGeometryBase));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const  ::FbxGeometryBase* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_FbxGeometryBase, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::FbxGeometryBase::operator==(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_fbx, eq_slot, sipType_FbxGeometryBase, sipSelf, sipArg);
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_FbxGeometryBase(void *, const sipTypeDef *);}
static void *cast_FbxGeometryBase(void *sipCppV, const sipTypeDef *targetType)
{
     ::FbxGeometryBase *sipCpp = reinterpret_cast< ::FbxGeometryBase *>(sipCppV);

    if (targetType == sipType_FbxLayerContainer)
        return static_cast< ::FbxLayerContainer *>(sipCpp);

    if (targetType == sipType_FbxNodeAttribute)
        return static_cast< ::FbxNodeAttribute *>(sipCpp);

    if (targetType == sipType_FbxObject)
        return static_cast< ::FbxObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_FbxGeometryBase(void *, int);}
static void release_FbxGeometryBase(void *, int)
{
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_FbxGeometryBase[] = {{171, 255, 1}};


/* Define this type's Python slots. */
static sipPySlotDef slots_FbxGeometryBase[] = {
    {(void *)slot_FbxGeometryBase___ne__, ne_slot},
    {(void *)slot_FbxGeometryBase___eq__, eq_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_FbxGeometryBase[] = {
    {SIP_MLNAME_CAST(sipName_ComputeBBox), meth_FbxGeometryBase_ComputeBBox, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxGeometryBase_ComputeBBox)},
    {SIP_MLNAME_CAST(sipName_Create), meth_FbxGeometryBase_Create, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxGeometryBase_Create)},
    {SIP_MLNAME_CAST(sipName_CreateElementBinormal), meth_FbxGeometryBase_CreateElementBinormal, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxGeometryBase_CreateElementBinormal)},
    {SIP_MLNAME_CAST(sipName_CreateElementEdgeCrease), meth_FbxGeometryBase_CreateElementEdgeCrease, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxGeometryBase_CreateElementEdgeCrease)},
    {SIP_MLNAME_CAST(sipName_CreateElementMaterial), meth_FbxGeometryBase_CreateElementMaterial, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxGeometryBase_CreateElementMaterial)},
    {SIP_MLNAME_CAST(sipName_CreateElementNormal), meth_FbxGeometryBase_CreateElementNormal, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxGeometryBase_CreateElementNormal)},
    {SIP_MLNAME_CAST(sipName_CreateElementPolygonGroup), meth_FbxGeometryBase_CreateElementPolygonGroup, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxGeometryBase_CreateElementPolygonGroup)},
    {SIP_MLNAME_CAST(sipName_CreateElementSmoothing), meth_FbxGeometryBase_CreateElementSmoothing, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxGeometryBase_CreateElementSmoothing)},
    {SIP_MLNAME_CAST(sipName_CreateElementTangent), meth_FbxGeometryBase_CreateElementTangent, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxGeometryBase_CreateElementTangent)},
    {SIP_MLNAME_CAST(sipName_CreateElementUV), meth_FbxGeometryBase_CreateElementUV, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxGeometryBase_CreateElementUV)},
    {SIP_MLNAME_CAST(sipName_CreateElementVertexColor), meth_FbxGeometryBase_CreateElementVertexColor, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxGeometryBase_CreateElementVertexColor)},
    {SIP_MLNAME_CAST(sipName_CreateElementVertexCrease), meth_FbxGeometryBase_CreateElementVertexCrease, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxGeometryBase_CreateElementVertexCrease)},
    {SIP_MLNAME_CAST(sipName_CreateElementVisibility), meth_FbxGeometryBase_CreateElementVisibility, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxGeometryBase_CreateElementVisibility)},
    {SIP_MLNAME_CAST(sipName_GetClassId), meth_FbxGeometryBase_GetClassId, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxGeometryBase_GetClassId)},
    {SIP_MLNAME_CAST(sipName_GetControlPointAt), meth_FbxGeometryBase_GetControlPointAt, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxGeometryBase_GetControlPointAt)},
    {SIP_MLNAME_CAST(sipName_GetControlPoints), meth_FbxGeometryBase_GetControlPoints, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxGeometryBase_GetControlPoints)},
    {SIP_MLNAME_CAST(sipName_GetControlPointsCount), meth_FbxGeometryBase_GetControlPointsCount, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxGeometryBase_GetControlPointsCount)},
    {SIP_MLNAME_CAST(sipName_GetElementBinormal), meth_FbxGeometryBase_GetElementBinormal, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxGeometryBase_GetElementBinormal)},
    {SIP_MLNAME_CAST(sipName_GetElementBinormalCount), meth_FbxGeometryBase_GetElementBinormalCount, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxGeometryBase_GetElementBinormalCount)},
    {SIP_MLNAME_CAST(sipName_GetElementEdgeCrease), meth_FbxGeometryBase_GetElementEdgeCrease, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxGeometryBase_GetElementEdgeCrease)},
    {SIP_MLNAME_CAST(sipName_GetElementEdgeCreaseCount), meth_FbxGeometryBase_GetElementEdgeCreaseCount, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxGeometryBase_GetElementEdgeCreaseCount)},
    {SIP_MLNAME_CAST(sipName_GetElementMaterial), meth_FbxGeometryBase_GetElementMaterial, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxGeometryBase_GetElementMaterial)},
    {SIP_MLNAME_CAST(sipName_GetElementMaterialCount), meth_FbxGeometryBase_GetElementMaterialCount, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxGeometryBase_GetElementMaterialCount)},
    {SIP_MLNAME_CAST(sipName_GetElementNormal), meth_FbxGeometryBase_GetElementNormal, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxGeometryBase_GetElementNormal)},
    {SIP_MLNAME_CAST(sipName_GetElementNormalCount), meth_FbxGeometryBase_GetElementNormalCount, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxGeometryBase_GetElementNormalCount)},
    {SIP_MLNAME_CAST(sipName_GetElementPolygonGroup), meth_FbxGeometryBase_GetElementPolygonGroup, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxGeometryBase_GetElementPolygonGroup)},
    {SIP_MLNAME_CAST(sipName_GetElementPolygonGroupCount), meth_FbxGeometryBase_GetElementPolygonGroupCount, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxGeometryBase_GetElementPolygonGroupCount)},
    {SIP_MLNAME_CAST(sipName_GetElementSmoothing), meth_FbxGeometryBase_GetElementSmoothing, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxGeometryBase_GetElementSmoothing)},
    {SIP_MLNAME_CAST(sipName_GetElementSmoothingCount), meth_FbxGeometryBase_GetElementSmoothingCount, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxGeometryBase_GetElementSmoothingCount)},
    {SIP_MLNAME_CAST(sipName_GetElementTangent), meth_FbxGeometryBase_GetElementTangent, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxGeometryBase_GetElementTangent)},
    {SIP_MLNAME_CAST(sipName_GetElementTangentCount), meth_FbxGeometryBase_GetElementTangentCount, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxGeometryBase_GetElementTangentCount)},
    {SIP_MLNAME_CAST(sipName_GetElementUV), meth_FbxGeometryBase_GetElementUV, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxGeometryBase_GetElementUV)},
    {SIP_MLNAME_CAST(sipName_GetElementUVCount), meth_FbxGeometryBase_GetElementUVCount, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxGeometryBase_GetElementUVCount)},
    {SIP_MLNAME_CAST(sipName_GetElementVertexColor), meth_FbxGeometryBase_GetElementVertexColor, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxGeometryBase_GetElementVertexColor)},
    {SIP_MLNAME_CAST(sipName_GetElementVertexColorCount), meth_FbxGeometryBase_GetElementVertexColorCount, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxGeometryBase_GetElementVertexColorCount)},
    {SIP_MLNAME_CAST(sipName_GetElementVertexCrease), meth_FbxGeometryBase_GetElementVertexCrease, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxGeometryBase_GetElementVertexCrease)},
    {SIP_MLNAME_CAST(sipName_GetElementVertexCreaseCount), meth_FbxGeometryBase_GetElementVertexCreaseCount, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxGeometryBase_GetElementVertexCreaseCount)},
    {SIP_MLNAME_CAST(sipName_GetElementVisibility), meth_FbxGeometryBase_GetElementVisibility, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxGeometryBase_GetElementVisibility)},
    {SIP_MLNAME_CAST(sipName_GetElementVisibilityCount), meth_FbxGeometryBase_GetElementVisibilityCount, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxGeometryBase_GetElementVisibilityCount)},
    {SIP_MLNAME_CAST(sipName_GetUVSetNames), meth_FbxGeometryBase_GetUVSetNames, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxGeometryBase_GetUVSetNames)},
    {SIP_MLNAME_CAST(sipName_InitBinormals), meth_FbxGeometryBase_InitBinormals, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxGeometryBase_InitBinormals)},
    {SIP_MLNAME_CAST(sipName_InitControlPoints), meth_FbxGeometryBase_InitControlPoints, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxGeometryBase_InitControlPoints)},
    {SIP_MLNAME_CAST(sipName_InitNormals), meth_FbxGeometryBase_InitNormals, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxGeometryBase_InitNormals)},
    {SIP_MLNAME_CAST(sipName_InitTangents), meth_FbxGeometryBase_InitTangents, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxGeometryBase_InitTangents)},
    {SIP_MLNAME_CAST(sipName_RemoveElementBinormal), meth_FbxGeometryBase_RemoveElementBinormal, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxGeometryBase_RemoveElementBinormal)},
    {SIP_MLNAME_CAST(sipName_RemoveElementEdgeCrease), meth_FbxGeometryBase_RemoveElementEdgeCrease, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxGeometryBase_RemoveElementEdgeCrease)},
    {SIP_MLNAME_CAST(sipName_RemoveElementMaterial), meth_FbxGeometryBase_RemoveElementMaterial, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxGeometryBase_RemoveElementMaterial)},
    {SIP_MLNAME_CAST(sipName_RemoveElementNormal), meth_FbxGeometryBase_RemoveElementNormal, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxGeometryBase_RemoveElementNormal)},
    {SIP_MLNAME_CAST(sipName_RemoveElementPolygonGroup), meth_FbxGeometryBase_RemoveElementPolygonGroup, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxGeometryBase_RemoveElementPolygonGroup)},
    {SIP_MLNAME_CAST(sipName_RemoveElementSmoothing), meth_FbxGeometryBase_RemoveElementSmoothing, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxGeometryBase_RemoveElementSmoothing)},
    {SIP_MLNAME_CAST(sipName_RemoveElementTangent), meth_FbxGeometryBase_RemoveElementTangent, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxGeometryBase_RemoveElementTangent)},
    {SIP_MLNAME_CAST(sipName_RemoveElementUV), meth_FbxGeometryBase_RemoveElementUV, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxGeometryBase_RemoveElementUV)},
    {SIP_MLNAME_CAST(sipName_RemoveElementVertexColor), meth_FbxGeometryBase_RemoveElementVertexColor, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxGeometryBase_RemoveElementVertexColor)},
    {SIP_MLNAME_CAST(sipName_RemoveElementVertexCrease), meth_FbxGeometryBase_RemoveElementVertexCrease, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxGeometryBase_RemoveElementVertexCrease)},
    {SIP_MLNAME_CAST(sipName_RemoveElementVisibility), meth_FbxGeometryBase_RemoveElementVisibility, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxGeometryBase_RemoveElementVisibility)},
    {SIP_MLNAME_CAST(sipName_SetControlPointAt), meth_FbxGeometryBase_SetControlPointAt, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxGeometryBase_SetControlPointAt)},
    {SIP_MLNAME_CAST(sipName_SetControlPointCount), meth_FbxGeometryBase_SetControlPointCount, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxGeometryBase_SetControlPointCount)},
    {SIP_MLNAME_CAST(sipName_SetControlPointNormalAt), meth_FbxGeometryBase_SetControlPointNormalAt, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxGeometryBase_SetControlPointNormalAt)}
};


extern "C" {static PyObject *varget_FbxGeometryBase_BBoxMax(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxGeometryBase_BBoxMax(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyDouble3*sipVal;
     ::FbxGeometryBase *sipCpp = reinterpret_cast< ::FbxGeometryBase *>(sipSelf);

    sipVal = &sipCpp->BBoxMax;

    return sipConvertFromType(sipVal, sipType_FbxPropertyDouble3, NULL);
}


extern "C" {static int varset_FbxGeometryBase_BBoxMax(void *, PyObject *, PyObject *);}
static int varset_FbxGeometryBase_BBoxMax(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyDouble3*sipVal;
     ::FbxGeometryBase *sipCpp = reinterpret_cast< ::FbxGeometryBase *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyDouble3 *>(sipForceConvertToType(sipPy,sipType_FbxPropertyDouble3,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->BBoxMax = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxGeometryBase_BBoxMin(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxGeometryBase_BBoxMin(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyDouble3*sipVal;
     ::FbxGeometryBase *sipCpp = reinterpret_cast< ::FbxGeometryBase *>(sipSelf);

    sipVal = &sipCpp->BBoxMin;

    return sipConvertFromType(sipVal, sipType_FbxPropertyDouble3, NULL);
}


extern "C" {static int varset_FbxGeometryBase_BBoxMin(void *, PyObject *, PyObject *);}
static int varset_FbxGeometryBase_BBoxMin(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyDouble3*sipVal;
     ::FbxGeometryBase *sipCpp = reinterpret_cast< ::FbxGeometryBase *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyDouble3 *>(sipForceConvertToType(sipPy,sipType_FbxPropertyDouble3,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->BBoxMin = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxGeometryBase_CastShadow(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxGeometryBase_CastShadow(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyBool1*sipVal;
     ::FbxGeometryBase *sipCpp = reinterpret_cast< ::FbxGeometryBase *>(sipSelf);

    sipVal = &sipCpp->CastShadow;

    return sipConvertFromType(sipVal, sipType_FbxPropertyBool1, NULL);
}


extern "C" {static int varset_FbxGeometryBase_CastShadow(void *, PyObject *, PyObject *);}
static int varset_FbxGeometryBase_CastShadow(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyBool1*sipVal;
     ::FbxGeometryBase *sipCpp = reinterpret_cast< ::FbxGeometryBase *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyBool1 *>(sipForceConvertToType(sipPy,sipType_FbxPropertyBool1,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->CastShadow = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxGeometryBase_ClassId(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxGeometryBase_ClassId(void *, PyObject *, PyObject *)
{
     ::FbxClassId*sipVal;

    sipVal = & ::FbxGeometryBase::ClassId;

    return sipConvertFromType(sipVal, sipType_FbxClassId, NULL);
}


extern "C" {static int varset_FbxGeometryBase_ClassId(void *, PyObject *, PyObject *);}
static int varset_FbxGeometryBase_ClassId(void *, PyObject *sipPy, PyObject *)
{
     ::FbxClassId*sipVal;
    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxClassId *>(sipForceConvertToType(sipPy,sipType_FbxClassId,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

     ::FbxGeometryBase::ClassId = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxGeometryBase_PrimaryVisibility(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxGeometryBase_PrimaryVisibility(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyBool1*sipVal;
     ::FbxGeometryBase *sipCpp = reinterpret_cast< ::FbxGeometryBase *>(sipSelf);

    sipVal = &sipCpp->PrimaryVisibility;

    return sipConvertFromType(sipVal, sipType_FbxPropertyBool1, NULL);
}


extern "C" {static int varset_FbxGeometryBase_PrimaryVisibility(void *, PyObject *, PyObject *);}
static int varset_FbxGeometryBase_PrimaryVisibility(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyBool1*sipVal;
     ::FbxGeometryBase *sipCpp = reinterpret_cast< ::FbxGeometryBase *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyBool1 *>(sipForceConvertToType(sipPy,sipType_FbxPropertyBool1,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->PrimaryVisibility = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxGeometryBase_ReceiveShadow(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxGeometryBase_ReceiveShadow(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxPropertyBool1*sipVal;
     ::FbxGeometryBase *sipCpp = reinterpret_cast< ::FbxGeometryBase *>(sipSelf);

    sipVal = &sipCpp->ReceiveShadow;

    return sipConvertFromType(sipVal, sipType_FbxPropertyBool1, NULL);
}


extern "C" {static int varset_FbxGeometryBase_ReceiveShadow(void *, PyObject *, PyObject *);}
static int varset_FbxGeometryBase_ReceiveShadow(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxPropertyBool1*sipVal;
     ::FbxGeometryBase *sipCpp = reinterpret_cast< ::FbxGeometryBase *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxPropertyBool1 *>(sipForceConvertToType(sipPy,sipType_FbxPropertyBool1,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->ReceiveShadow = *sipVal;

    return 0;
}

sipVariableDef variables_FbxGeometryBase[] = {
    {InstanceVariable, sipName_BBoxMax, (PyMethodDef *)varget_FbxGeometryBase_BBoxMax, (PyMethodDef *)varset_FbxGeometryBase_BBoxMax, NULL, NULL},
    {InstanceVariable, sipName_BBoxMin, (PyMethodDef *)varget_FbxGeometryBase_BBoxMin, (PyMethodDef *)varset_FbxGeometryBase_BBoxMin, NULL, NULL},
    {InstanceVariable, sipName_CastShadow, (PyMethodDef *)varget_FbxGeometryBase_CastShadow, (PyMethodDef *)varset_FbxGeometryBase_CastShadow, NULL, NULL},
    {ClassVariable, sipName_ClassId, (PyMethodDef *)varget_FbxGeometryBase_ClassId, (PyMethodDef *)varset_FbxGeometryBase_ClassId, NULL, NULL},
    {InstanceVariable, sipName_PrimaryVisibility, (PyMethodDef *)varget_FbxGeometryBase_PrimaryVisibility, (PyMethodDef *)varset_FbxGeometryBase_PrimaryVisibility, NULL, NULL},
    {InstanceVariable, sipName_ReceiveShadow, (PyMethodDef *)varget_FbxGeometryBase_ReceiveShadow, (PyMethodDef *)varset_FbxGeometryBase_ReceiveShadow, NULL, NULL},
};


sipClassTypeDef sipTypeDef_fbx_FbxGeometryBase = {
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_FbxGeometryBase,
        {0},
        0
    },
    {
        sipNameNr_FbxGeometryBase,
        {0, 0, 1},
        58, methods_FbxGeometryBase,
        0, 0,
        6, variables_FbxGeometryBase,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    0,
    -1,
    -1,
    supers_FbxGeometryBase,
    slots_FbxGeometryBase,
    0,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    0,
    0,
    0,
    0,
    release_FbxGeometryBase,
    cast_FbxGeometryBase,
    0,
    0,
    0,
    0,
    0,
    0
};
