/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.3
 *
 * Copyright (C) 2009 Autodesk, Inc. and/or its licensors.
 * All Rights Reserved.
 * 
 * The coded instructions, statements, computer programs, and/or related material 
 * (collectively the "Data") in these files contain unpublished information 
 * proprietary to Autodesk, Inc. and/or its licensors, which is protected by 
 * Canada and United States of America federal copyright law and by international 
 * treaties. 
 * 
 * The Data may not be disclosed or distributed to third parties, in whole or in
 * part, without the prior written consent of Autodesk, Inc. ("Autodesk").
 * 
 * THE DATA IS PROVIDED "AS IS" AND WITHOUT WARRANTY.
 * ALL WARRANTIES ARE EXPRESSLY EXCLUDED AND DISCLAIMED. AUTODESK MAKES NO
 * WARRANTY OF ANY KIND WITH RESPECT TO THE DATA, EXPRESS, IMPLIED OR ARISING
 * BY CUSTOM OR TRADE USAGE, AND DISCLAIMS ANY IMPLIED WARRANTIES OF TITLE, 
 * NON-INFRINGEMENT, MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE OR USE. 
 * WITHOUT LIMITING THE FOREGOING, AUTODESK DOES NOT WARRANT THAT THE OPERATION
 * OF THE DATA WILL BE UNINTERRUPTED OR ERROR FREE. 
 * 
 * IN NO EVENT SHALL AUTODESK, ITS AFFILIATES, PARENT COMPANIES, LICENSORS
 * OR SUPPLIERS ("AUTODESK GROUP") BE LIABLE FOR ANY LOSSES, DAMAGES OR EXPENSES
 * OF ANY KIND (INCLUDING WITHOUT LIMITATION PUNITIVE OR MULTIPLE DAMAGES OR OTHER
 * SPECIAL, DIRECT, INDIRECT, EXEMPLARY, INCIDENTAL, LOSS OF PROFITS, REVENUE
 * OR DATA, COST OF COVER OR CONSEQUENTIAL LOSSES OR DAMAGES OF ANY KIND),
 * HOWEVER CAUSED, AND REGARDLESS OF THE THEORY OF LIABILITY, WHETHER DERIVED
 * FROM CONTRACT, TORT (INCLUDING, BUT NOT LIMITED TO, NEGLIGENCE), OR OTHERWISE,
 * ARISING OUT OF OR RELATING TO THE DATA OR ITS USE OR ANY OTHER PERFORMANCE,
 * WHETHER OR NOT AUTODESK HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH LOSS
 * OR DAMAGE. 
 */

#include "sipAPIfbx.h"


#line 4 "/var/www/html/lib/fbxpy/sip/fbxstatus.sip"
#include <fbxsdk.h>
#line 44 "/var/www/html/lib/fbxpy/build/Python27_ucs4_x64/sipfbxFbxMesh.cpp"


PyDoc_STRVAR(doc_FbxMesh_Create, "Create(FbxManager, str) -> FbxMesh\n"
    "Create(FbxObject, str) -> FbxMesh");

extern "C" {static PyObject *meth_FbxMesh_Create(PyObject *, PyObject *);}
static PyObject *meth_FbxMesh_Create(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxManager* a0;
        const char* a1;
        PyObject *a1Keep;

        if (sipParseArgs(&sipParseErr, sipArgs, "J8A8", sipType_FbxManager, &a0, &a1Keep, &a1))
        {
             ::FbxMesh*sipRes;

            sipRes =  ::FbxMesh::Create(a0,a1);
            Py_DECREF(a1Keep);

            return sipConvertFromType(sipRes,sipType_FbxMesh,NULL);
        }
    }

    {
         ::FbxObject* a0;
        const char* a1;
        PyObject *a1Keep;

        if (sipParseArgs(&sipParseErr, sipArgs, "J8A8", sipType_FbxObject, &a0, &a1Keep, &a1))
        {
             ::FbxMesh*sipRes;

            sipRes =  ::FbxMesh::Create(a0,a1);
            Py_DECREF(a1Keep);

            return sipConvertFromType(sipRes,sipType_FbxMesh,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxMesh, sipName_Create, doc_FbxMesh_Create);

    return NULL;
}


PyDoc_STRVAR(doc_FbxMesh_GetClassId, "GetClassId(self) -> FbxClassId");

extern "C" {static PyObject *meth_FbxMesh_GetClassId(PyObject *, PyObject *);}
static PyObject *meth_FbxMesh_GetClassId(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::FbxMesh *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxMesh, &sipCpp))
        {
             ::FbxClassId*sipRes;

            sipRes = new  ::FbxClassId((sipSelfWasArg ? sipCpp-> ::FbxMesh::GetClassId() : sipCpp->GetClassId()));

            return sipConvertFromNewType(sipRes,sipType_FbxClassId,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxMesh, sipName_GetClassId, doc_FbxMesh_GetClassId);

    return NULL;
}


PyDoc_STRVAR(doc_FbxMesh_GetAttributeType, "GetAttributeType(self) -> FbxNodeAttribute.EType");

extern "C" {static PyObject *meth_FbxMesh_GetAttributeType(PyObject *, PyObject *);}
static PyObject *meth_FbxMesh_GetAttributeType(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::FbxMesh *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxMesh, &sipCpp))
        {
             ::FbxNodeAttribute::EType sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::FbxMesh::GetAttributeType() : sipCpp->GetAttributeType());

            return sipConvertFromEnum(sipRes,sipType_FbxNodeAttribute_EType);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxMesh, sipName_GetAttributeType, doc_FbxMesh_GetAttributeType);

    return NULL;
}


PyDoc_STRVAR(doc_FbxMesh_BeginPolygon, "BeginPolygon(self, int = -1, int = -1, int = -1, bool = True)");

extern "C" {static PyObject *meth_FbxMesh_BeginPolygon(PyObject *, PyObject *);}
static PyObject *meth_FbxMesh_BeginPolygon(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0 = -1;
        int a1 = -1;
        int a2 = -1;
        bool a3 = 1;
         ::FbxMesh *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B|iiib", &sipSelf, sipType_FbxMesh, &sipCpp, &a0, &a1, &a2, &a3))
        {
            sipCpp->BeginPolygon(a0,a1,a2,a3);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxMesh, sipName_BeginPolygon, doc_FbxMesh_BeginPolygon);

    return NULL;
}


PyDoc_STRVAR(doc_FbxMesh_BeginPolygonExt, "BeginPolygonExt(self, int) -> int");

extern "C" {static PyObject *meth_FbxMesh_BeginPolygonExt(PyObject *, PyObject *);}
static PyObject *meth_FbxMesh_BeginPolygonExt(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        int a1;
         ::FbxMesh *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_FbxMesh, &sipCpp, &a0))
        {
            sipCpp->BeginPolygonExt(a0,&a1);

            return SIPLong_FromLong(a1);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxMesh, sipName_BeginPolygonExt, doc_FbxMesh_BeginPolygonExt);

    return NULL;
}


PyDoc_STRVAR(doc_FbxMesh_AddPolygon, "AddPolygon(self, int, int = -1)");

extern "C" {static PyObject *meth_FbxMesh_AddPolygon(PyObject *, PyObject *);}
static PyObject *meth_FbxMesh_AddPolygon(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        int a1 = -1;
         ::FbxMesh *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi|i", &sipSelf, sipType_FbxMesh, &sipCpp, &a0, &a1))
        {
            sipCpp->AddPolygon(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxMesh, sipName_AddPolygon, doc_FbxMesh_AddPolygon);

    return NULL;
}


PyDoc_STRVAR(doc_FbxMesh_EndPolygon, "EndPolygon(self)");

extern "C" {static PyObject *meth_FbxMesh_EndPolygon(PyObject *, PyObject *);}
static PyObject *meth_FbxMesh_EndPolygon(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxMesh *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxMesh, &sipCpp))
        {
            sipCpp->EndPolygon();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxMesh, sipName_EndPolygon, doc_FbxMesh_EndPolygon);

    return NULL;
}


PyDoc_STRVAR(doc_FbxMesh_GetPolygonCount, "GetPolygonCount(self) -> int");

extern "C" {static PyObject *meth_FbxMesh_GetPolygonCount(PyObject *, PyObject *);}
static PyObject *meth_FbxMesh_GetPolygonCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::FbxMesh *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxMesh, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->GetPolygonCount();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxMesh, sipName_GetPolygonCount, doc_FbxMesh_GetPolygonCount);

    return NULL;
}


PyDoc_STRVAR(doc_FbxMesh_GetPolygonSize, "GetPolygonSize(self, int) -> int");

extern "C" {static PyObject *meth_FbxMesh_GetPolygonSize(PyObject *, PyObject *);}
static PyObject *meth_FbxMesh_GetPolygonSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const  ::FbxMesh *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_FbxMesh, &sipCpp, &a0))
        {
            int sipRes;

            sipRes = sipCpp->GetPolygonSize(a0);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxMesh, sipName_GetPolygonSize, doc_FbxMesh_GetPolygonSize);

    return NULL;
}


PyDoc_STRVAR(doc_FbxMesh_GetPolygonGroup, "GetPolygonGroup(self, int) -> int");

extern "C" {static PyObject *meth_FbxMesh_GetPolygonGroup(PyObject *, PyObject *);}
static PyObject *meth_FbxMesh_GetPolygonGroup(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const  ::FbxMesh *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_FbxMesh, &sipCpp, &a0))
        {
            int sipRes;

            sipRes = sipCpp->GetPolygonGroup(a0);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxMesh, sipName_GetPolygonGroup, doc_FbxMesh_GetPolygonGroup);

    return NULL;
}


PyDoc_STRVAR(doc_FbxMesh_SetPolygonGroup, "SetPolygonGroup(self, int, int)");

extern "C" {static PyObject *meth_FbxMesh_SetPolygonGroup(PyObject *, PyObject *);}
static PyObject *meth_FbxMesh_SetPolygonGroup(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        int a1;
        const  ::FbxMesh *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bii", &sipSelf, sipType_FbxMesh, &sipCpp, &a0, &a1))
        {
            sipCpp->SetPolygonGroup(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxMesh, sipName_SetPolygonGroup, doc_FbxMesh_SetPolygonGroup);

    return NULL;
}


PyDoc_STRVAR(doc_FbxMesh_GetPolygonVertex, "GetPolygonVertex(self, int, int) -> int");

extern "C" {static PyObject *meth_FbxMesh_GetPolygonVertex(PyObject *, PyObject *);}
static PyObject *meth_FbxMesh_GetPolygonVertex(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        int a1;
        const  ::FbxMesh *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bii", &sipSelf, sipType_FbxMesh, &sipCpp, &a0, &a1))
        {
            int sipRes;

            sipRes = sipCpp->GetPolygonVertex(a0,a1);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxMesh, sipName_GetPolygonVertex, doc_FbxMesh_GetPolygonVertex);

    return NULL;
}


PyDoc_STRVAR(doc_FbxMesh_GetPolygonVertexNormal, "GetPolygonVertexNormal(self, int, int, FbxVector4)");

extern "C" {static PyObject *meth_FbxMesh_GetPolygonVertexNormal(PyObject *, PyObject *);}
static PyObject *meth_FbxMesh_GetPolygonVertexNormal(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        int a1;
         ::FbxVector4* a2;
        const  ::FbxMesh *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiiJ9", &sipSelf, sipType_FbxMesh, &sipCpp, &a0, &a1, sipType_FbxVector4, &a2))
        {
            sipCpp->GetPolygonVertexNormal(a0,a1,*a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxMesh, sipName_GetPolygonVertexNormal, doc_FbxMesh_GetPolygonVertexNormal);

    return NULL;
}


PyDoc_STRVAR(doc_FbxMesh_GetPolygonVertexNormals, "GetPolygonVertexNormals(self, FbxVector4Array) -> bool");

extern "C" {static PyObject *meth_FbxMesh_GetPolygonVertexNormals(PyObject *, PyObject *);}
static PyObject *meth_FbxMesh_GetPolygonVertexNormals(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxVector4Array* a0;
        const  ::FbxMesh *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_FbxMesh, &sipCpp, sipType_FbxVector4Array, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->GetPolygonVertexNormals(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxMesh, sipName_GetPolygonVertexNormals, doc_FbxMesh_GetPolygonVertexNormals);

    return NULL;
}


PyDoc_STRVAR(doc_FbxMesh_GetPolygonVertexUV, "GetPolygonVertexUV(self, int, int, str, FbxVector2) -> Tuple[bool, bool]");

extern "C" {static PyObject *meth_FbxMesh_GetPolygonVertexUV(PyObject *, PyObject *);}
static PyObject *meth_FbxMesh_GetPolygonVertexUV(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        int a1;
        const char* a2;
        PyObject *a2Keep;
         ::FbxVector2* a3;
        bool a4;
        const  ::FbxMesh *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiiA8J9", &sipSelf, sipType_FbxMesh, &sipCpp, &a0, &a1, &a2Keep, &a2, sipType_FbxVector2, &a3))
        {
            bool sipRes;

            sipRes = sipCpp->GetPolygonVertexUV(a0,a1,a2,*a3,a4);
            Py_DECREF(a2Keep);

            return sipBuildResult(0,"(bb)",sipRes,a4);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxMesh, sipName_GetPolygonVertexUV, doc_FbxMesh_GetPolygonVertexUV);

    return NULL;
}


PyDoc_STRVAR(doc_FbxMesh_GetPolygonVertexUVs, "GetPolygonVertexUVs(self, str, FbxVector2Array, IntArray = None) -> bool");

extern "C" {static PyObject *meth_FbxMesh_GetPolygonVertexUVs(PyObject *, PyObject *);}
static PyObject *meth_FbxMesh_GetPolygonVertexUVs(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const char* a0;
        PyObject *a0Keep;
         ::FbxVector2Array* a1;
         ::IntArray* a2 = 0;
        const  ::FbxMesh *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BA8J9|J8", &sipSelf, sipType_FbxMesh, &sipCpp, &a0Keep, &a0, sipType_FbxVector2Array, &a1, sipType_IntArray, &a2))
        {
            bool sipRes;

            sipRes = sipCpp->GetPolygonVertexUVs(a0,*a1,a2);
            Py_DECREF(a0Keep);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxMesh, sipName_GetPolygonVertexUVs, doc_FbxMesh_GetPolygonVertexUVs);

    return NULL;
}


PyDoc_STRVAR(doc_FbxMesh_GetPolygonVertices, "GetPolygonVertices(self) -> List");

extern "C" {static PyObject *meth_FbxMesh_GetPolygonVertices(PyObject *, PyObject *);}
static PyObject *meth_FbxMesh_GetPolygonVertices(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxMesh *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxMesh, &sipCpp))
        {
            PyObject * sipRes = 0;

#line 29 "/var/www/html/lib/fbxpy/sip/fbxmesh.sip"
    int* vertices;
    int polygonVertexCount;

    vertices = sipCpp->GetPolygonVertices();
    polygonVertexCount = sipCpp->GetPolygonVertexCount();

    // Create the Python list of the correct length.
    if ((sipRes = PyList_New(polygonVertexCount)) == NULL)
        return NULL;

    // Go through each element in the C++ instance and convert it to the
    // corresponding Python object.
    for (int i = 0; i < polygonVertexCount; ++i)
    {
        PyList_SET_ITEM(sipRes, i, SIPLong_FromLong(*vertices));
        vertices++;
    }
#line 574 "/var/www/html/lib/fbxpy/build/Python27_ucs4_x64/sipfbxFbxMesh.cpp"

            return sipRes;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxMesh, sipName_GetPolygonVertices, doc_FbxMesh_GetPolygonVertices);

    return NULL;
}


PyDoc_STRVAR(doc_FbxMesh_GetPolygonVertexCount, "GetPolygonVertexCount(self) -> int");

extern "C" {static PyObject *meth_FbxMesh_GetPolygonVertexCount(PyObject *, PyObject *);}
static PyObject *meth_FbxMesh_GetPolygonVertexCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::FbxMesh *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxMesh, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->GetPolygonVertexCount();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxMesh, sipName_GetPolygonVertexCount, doc_FbxMesh_GetPolygonVertexCount);

    return NULL;
}


PyDoc_STRVAR(doc_FbxMesh_GetPolygonVertexIndex, "GetPolygonVertexIndex(self, int) -> int");

extern "C" {static PyObject *meth_FbxMesh_GetPolygonVertexIndex(PyObject *, PyObject *);}
static PyObject *meth_FbxMesh_GetPolygonVertexIndex(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const  ::FbxMesh *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_FbxMesh, &sipCpp, &a0))
        {
            int sipRes;

            sipRes = sipCpp->GetPolygonVertexIndex(a0);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxMesh, sipName_GetPolygonVertexIndex, doc_FbxMesh_GetPolygonVertexIndex);

    return NULL;
}


PyDoc_STRVAR(doc_FbxMesh_RemovePolygon, "RemovePolygon(self, int) -> int");

extern "C" {static PyObject *meth_FbxMesh_RemovePolygon(PyObject *, PyObject *);}
static PyObject *meth_FbxMesh_RemovePolygon(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
         ::FbxMesh *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_FbxMesh, &sipCpp, &a0))
        {
            int sipRes;

            sipRes = sipCpp->RemovePolygon(a0);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxMesh, sipName_RemovePolygon, doc_FbxMesh_RemovePolygon);

    return NULL;
}


PyDoc_STRVAR(doc_FbxMesh_RemoveDuplicatedEdges, "RemoveDuplicatedEdges(self, IntArray) -> int");

extern "C" {static PyObject *meth_FbxMesh_RemoveDuplicatedEdges(PyObject *, PyObject *);}
static PyObject *meth_FbxMesh_RemoveDuplicatedEdges(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::IntArray* a0;
         ::FbxMesh *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_FbxMesh, &sipCpp, sipType_IntArray, &a0))
        {
            int sipRes;

            sipRes = sipCpp->RemoveDuplicatedEdges(*a0);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxMesh, sipName_RemoveDuplicatedEdges, doc_FbxMesh_RemoveDuplicatedEdges);

    return NULL;
}


PyDoc_STRVAR(doc_FbxMesh_InitTextureUV, "InitTextureUV(self, int, FbxLayerElement.EType = FbxLayerElement.eTextureDiffuse)");

extern "C" {static PyObject *meth_FbxMesh_InitTextureUV(PyObject *, PyObject *);}
static PyObject *meth_FbxMesh_InitTextureUV(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
         ::FbxLayerElement::EType a1 = FbxLayerElement::eTextureDiffuse;
         ::FbxMesh *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi|E", &sipSelf, sipType_FbxMesh, &sipCpp, &a0, sipType_FbxLayerElement_EType, &a1))
        {
            sipCpp->InitTextureUV(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxMesh, sipName_InitTextureUV, doc_FbxMesh_InitTextureUV);

    return NULL;
}


PyDoc_STRVAR(doc_FbxMesh_AddTextureUV, "AddTextureUV(self, FbxVector2, FbxLayerElement.EType = FbxLayerElement.eTextureDiffuse)");

extern "C" {static PyObject *meth_FbxMesh_AddTextureUV(PyObject *, PyObject *);}
static PyObject *meth_FbxMesh_AddTextureUV(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxVector2* a0;
         ::FbxLayerElement::EType a1 = FbxLayerElement::eTextureDiffuse;
         ::FbxMesh *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9|E", &sipSelf, sipType_FbxMesh, &sipCpp, sipType_FbxVector2, &a0, sipType_FbxLayerElement_EType, &a1))
        {
            sipCpp->AddTextureUV(*a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxMesh, sipName_AddTextureUV, doc_FbxMesh_AddTextureUV);

    return NULL;
}


PyDoc_STRVAR(doc_FbxMesh_GetTextureUVCount, "GetTextureUVCount(self, FbxLayerElement.EType = FbxLayerElement.eTextureDiffuse) -> int");

extern "C" {static PyObject *meth_FbxMesh_GetTextureUVCount(PyObject *, PyObject *);}
static PyObject *meth_FbxMesh_GetTextureUVCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxLayerElement::EType a0 = FbxLayerElement::eTextureDiffuse;
         ::FbxMesh *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B|E", &sipSelf, sipType_FbxMesh, &sipCpp, sipType_FbxLayerElement_EType, &a0))
        {
            int sipRes;

            sipRes = sipCpp->GetTextureUVCount(a0);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxMesh, sipName_GetTextureUVCount, doc_FbxMesh_GetTextureUVCount);

    return NULL;
}


PyDoc_STRVAR(doc_FbxMesh_GetUVLayerCount, "GetUVLayerCount(self) -> int");

extern "C" {static PyObject *meth_FbxMesh_GetUVLayerCount(PyObject *, PyObject *);}
static PyObject *meth_FbxMesh_GetUVLayerCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxMesh *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxMesh, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->GetUVLayerCount();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxMesh, sipName_GetUVLayerCount, doc_FbxMesh_GetUVLayerCount);

    return NULL;
}


PyDoc_STRVAR(doc_FbxMesh_GetAllChannelUV, "GetAllChannelUV(self, int) -> FbxLayerElementTypeArray");

extern "C" {static PyObject *meth_FbxMesh_GetAllChannelUV(PyObject *, PyObject *);}
static PyObject *meth_FbxMesh_GetAllChannelUV(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
         ::FbxMesh *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_FbxMesh, &sipCpp, &a0))
        {
             ::FbxLayerElementTypeArray*sipRes;

            sipRes = new  ::FbxLayerElementTypeArray(sipCpp->GetAllChannelUV(a0));

            return sipConvertFromNewType(sipRes,sipType_FbxLayerElementTypeArray,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxMesh, sipName_GetAllChannelUV, doc_FbxMesh_GetAllChannelUV);

    return NULL;
}


PyDoc_STRVAR(doc_FbxMesh_InitMaterialIndices, "InitMaterialIndices(self, FbxLayerElement.EMappingMode)");

extern "C" {static PyObject *meth_FbxMesh_InitMaterialIndices(PyObject *, PyObject *);}
static PyObject *meth_FbxMesh_InitMaterialIndices(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxLayerElement::EMappingMode a0;
         ::FbxMesh *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_FbxMesh, &sipCpp, sipType_FbxLayerElement_EMappingMode, &a0))
        {
            sipCpp->InitMaterialIndices(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxMesh, sipName_InitMaterialIndices, doc_FbxMesh_InitMaterialIndices);

    return NULL;
}


PyDoc_STRVAR(doc_FbxMesh_InitTextureIndices, "InitTextureIndices(self, FbxLayerElement.EMappingMode, FbxLayerElement.EType)");

extern "C" {static PyObject *meth_FbxMesh_InitTextureIndices(PyObject *, PyObject *);}
static PyObject *meth_FbxMesh_InitTextureIndices(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxLayerElement::EMappingMode a0;
         ::FbxLayerElement::EType a1;
         ::FbxMesh *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BEE", &sipSelf, sipType_FbxMesh, &sipCpp, sipType_FbxLayerElement_EMappingMode, &a0, sipType_FbxLayerElement_EType, &a1))
        {
            sipCpp->InitTextureIndices(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxMesh, sipName_InitTextureIndices, doc_FbxMesh_InitTextureIndices);

    return NULL;
}


PyDoc_STRVAR(doc_FbxMesh_InitTextureUVIndices, "InitTextureUVIndices(self, FbxLayerElement.EMappingMode, FbxLayerElement.EType = FbxLayerElement.eTextureDiffuse)");

extern "C" {static PyObject *meth_FbxMesh_InitTextureUVIndices(PyObject *, PyObject *);}
static PyObject *meth_FbxMesh_InitTextureUVIndices(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxLayerElement::EMappingMode a0;
         ::FbxLayerElement::EType a1 = FbxLayerElement::eTextureDiffuse;
         ::FbxMesh *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE|E", &sipSelf, sipType_FbxMesh, &sipCpp, sipType_FbxLayerElement_EMappingMode, &a0, sipType_FbxLayerElement_EType, &a1))
        {
            sipCpp->InitTextureUVIndices(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxMesh, sipName_InitTextureUVIndices, doc_FbxMesh_InitTextureUVIndices);

    return NULL;
}


PyDoc_STRVAR(doc_FbxMesh_GetTextureUVIndex, "GetTextureUVIndex(self, int, int, FbxLayerElement.EType = FbxLayerElement.eTextureDiffuse) -> int");

extern "C" {static PyObject *meth_FbxMesh_GetTextureUVIndex(PyObject *, PyObject *);}
static PyObject *meth_FbxMesh_GetTextureUVIndex(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        int a1;
         ::FbxLayerElement::EType a2 = FbxLayerElement::eTextureDiffuse;
         ::FbxMesh *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bii|E", &sipSelf, sipType_FbxMesh, &sipCpp, &a0, &a1, sipType_FbxLayerElement_EType, &a2))
        {
            int sipRes;

            sipRes = sipCpp->GetTextureUVIndex(a0,a1,a2);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxMesh, sipName_GetTextureUVIndex, doc_FbxMesh_GetTextureUVIndex);

    return NULL;
}


PyDoc_STRVAR(doc_FbxMesh_SetTextureUVIndex, "SetTextureUVIndex(self, int, int, int, FbxLayerElement.EType)");

extern "C" {static PyObject *meth_FbxMesh_SetTextureUVIndex(PyObject *, PyObject *);}
static PyObject *meth_FbxMesh_SetTextureUVIndex(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        int a1;
        int a2;
         ::FbxLayerElement::EType a3;
         ::FbxMesh *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiiiE", &sipSelf, sipType_FbxMesh, &sipCpp, &a0, &a1, &a2, sipType_FbxLayerElement_EType, &a3))
        {
            sipCpp->SetTextureUVIndex(a0,a1,a2,a3);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxMesh, sipName_SetTextureUVIndex, doc_FbxMesh_SetTextureUVIndex);

    return NULL;
}


PyDoc_STRVAR(doc_FbxMesh_Reset, "Reset(self)");

extern "C" {static PyObject *meth_FbxMesh_Reset(PyObject *, PyObject *);}
static PyObject *meth_FbxMesh_Reset(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxMesh *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxMesh, &sipCpp))
        {
            sipCpp->Reset();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxMesh, sipName_Reset, doc_FbxMesh_Reset);

    return NULL;
}


PyDoc_STRVAR(doc_FbxMesh_GenerateNormals, "GenerateNormals(self, bool = False, bool = False, bool = False) -> bool");

extern "C" {static PyObject *meth_FbxMesh_GenerateNormals(PyObject *, PyObject *);}
static PyObject *meth_FbxMesh_GenerateNormals(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0 = 0;
        bool a1 = 0;
        bool a2 = 0;
         ::FbxMesh *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B|bbb", &sipSelf, sipType_FbxMesh, &sipCpp, &a0, &a1, &a2))
        {
            bool sipRes;

            sipRes = sipCpp->GenerateNormals(a0,a1,a2);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxMesh, sipName_GenerateNormals, doc_FbxMesh_GenerateNormals);

    return NULL;
}


PyDoc_STRVAR(doc_FbxMesh_CheckIfVertexNormalsCCW, "CheckIfVertexNormalsCCW(self) -> bool");

extern "C" {static PyObject *meth_FbxMesh_CheckIfVertexNormalsCCW(PyObject *, PyObject *);}
static PyObject *meth_FbxMesh_CheckIfVertexNormalsCCW(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxMesh *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxMesh, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->CheckIfVertexNormalsCCW();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxMesh, sipName_CheckIfVertexNormalsCCW, doc_FbxMesh_CheckIfVertexNormalsCCW);

    return NULL;
}


PyDoc_STRVAR(doc_FbxMesh_CheckSamePointTwice, "CheckSamePointTwice(self) -> bool");

extern "C" {static PyObject *meth_FbxMesh_CheckSamePointTwice(PyObject *, PyObject *);}
static PyObject *meth_FbxMesh_CheckSamePointTwice(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxMesh *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxMesh, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->CheckSamePointTwice();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxMesh, sipName_CheckSamePointTwice, doc_FbxMesh_CheckSamePointTwice);

    return NULL;
}


PyDoc_STRVAR(doc_FbxMesh_RemoveBadPolygons, "RemoveBadPolygons(self) -> int");

extern "C" {static PyObject *meth_FbxMesh_RemoveBadPolygons(PyObject *, PyObject *);}
static PyObject *meth_FbxMesh_RemoveBadPolygons(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxMesh *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxMesh, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->RemoveBadPolygons();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxMesh, sipName_RemoveBadPolygons, doc_FbxMesh_RemoveBadPolygons);

    return NULL;
}


PyDoc_STRVAR(doc_FbxMesh_SplitPoints, "SplitPoints(self, FbxLayerElement.EType = FbxLayerElement.eTextureDiffuse)");

extern "C" {static PyObject *meth_FbxMesh_SplitPoints(PyObject *, PyObject *);}
static PyObject *meth_FbxMesh_SplitPoints(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxLayerElement::EType a0 = FbxLayerElement::eTextureDiffuse;
         ::FbxMesh *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B|E", &sipSelf, sipType_FbxMesh, &sipCpp, sipType_FbxLayerElement_EType, &a0))
        {
            sipCpp->SplitPoints(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxMesh, sipName_SplitPoints, doc_FbxMesh_SplitPoints);

    return NULL;
}


PyDoc_STRVAR(doc_FbxMesh_BuildMergeList, "BuildMergeList(self, IntArray, bool = False) -> bool");

extern "C" {static PyObject *meth_FbxMesh_BuildMergeList(PyObject *, PyObject *);}
static PyObject *meth_FbxMesh_BuildMergeList(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::IntArray* a0;
        bool a1 = 0;
         ::FbxMesh *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9|b", &sipSelf, sipType_FbxMesh, &sipCpp, sipType_IntArray, &a0, &a1))
        {
            bool sipRes;

            sipRes = sipCpp->BuildMergeList(*a0,a1);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxMesh, sipName_BuildMergeList, doc_FbxMesh_BuildMergeList);

    return NULL;
}


PyDoc_STRVAR(doc_FbxMesh_MergePointsForPolygonVerteNormals, "MergePointsForPolygonVerteNormals(self, IntArray)");

extern "C" {static PyObject *meth_FbxMesh_MergePointsForPolygonVerteNormals(PyObject *, PyObject *);}
static PyObject *meth_FbxMesh_MergePointsForPolygonVerteNormals(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::IntArray* a0;
         ::FbxMesh *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_FbxMesh, &sipCpp, sipType_IntArray, &a0))
        {
            sipCpp->MergePointsForPolygonVerteNormals(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxMesh, sipName_MergePointsForPolygonVerteNormals, doc_FbxMesh_MergePointsForPolygonVerteNormals);

    return NULL;
}


PyDoc_STRVAR(doc_FbxMesh_BuildMeshEdgeArray, "BuildMeshEdgeArray(self)");

extern "C" {static PyObject *meth_FbxMesh_BuildMeshEdgeArray(PyObject *, PyObject *);}
static PyObject *meth_FbxMesh_BuildMeshEdgeArray(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxMesh *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxMesh, &sipCpp))
        {
            sipCpp->BuildMeshEdgeArray();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxMesh, sipName_BuildMeshEdgeArray, doc_FbxMesh_BuildMeshEdgeArray);

    return NULL;
}


PyDoc_STRVAR(doc_FbxMesh_GetMeshEdgeCount, "GetMeshEdgeCount(self) -> int");

extern "C" {static PyObject *meth_FbxMesh_GetMeshEdgeCount(PyObject *, PyObject *);}
static PyObject *meth_FbxMesh_GetMeshEdgeCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::FbxMesh *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxMesh, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->GetMeshEdgeCount();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxMesh, sipName_GetMeshEdgeCount, doc_FbxMesh_GetMeshEdgeCount);

    return NULL;
}


PyDoc_STRVAR(doc_FbxMesh_GetMeshEdgeIndex, "GetMeshEdgeIndex(self, int, int) -> Tuple[int, bool]");

extern "C" {static PyObject *meth_FbxMesh_GetMeshEdgeIndex(PyObject *, PyObject *);}
static PyObject *meth_FbxMesh_GetMeshEdgeIndex(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        int a1;
        bool a2;
         ::FbxMesh *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bii", &sipSelf, sipType_FbxMesh, &sipCpp, &a0, &a1))
        {
            int sipRes;

            sipRes = sipCpp->GetMeshEdgeIndex(a0,a1,a2);

            return sipBuildResult(0,"(ib)",sipRes,a2);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxMesh, sipName_GetMeshEdgeIndex, doc_FbxMesh_GetMeshEdgeIndex);

    return NULL;
}


PyDoc_STRVAR(doc_FbxMesh_GetMeshEdgeIndexForPolygon, "GetMeshEdgeIndexForPolygon(self, int, int) -> int");

extern "C" {static PyObject *meth_FbxMesh_GetMeshEdgeIndexForPolygon(PyObject *, PyObject *);}
static PyObject *meth_FbxMesh_GetMeshEdgeIndexForPolygon(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        int a1;
         ::FbxMesh *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bii", &sipSelf, sipType_FbxMesh, &sipCpp, &a0, &a1))
        {
            int sipRes;

            sipRes = sipCpp->GetMeshEdgeIndexForPolygon(a0,a1);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxMesh, sipName_GetMeshEdgeIndexForPolygon, doc_FbxMesh_GetMeshEdgeIndexForPolygon);

    return NULL;
}


PyDoc_STRVAR(doc_FbxMesh_GetMeshEdgeVertices, "GetMeshEdgeVertices(self, int) -> Tuple[int, int]");

extern "C" {static PyObject *meth_FbxMesh_GetMeshEdgeVertices(PyObject *, PyObject *);}
static PyObject *meth_FbxMesh_GetMeshEdgeVertices(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        int a1;
        int a2;
         ::FbxMesh *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_FbxMesh, &sipCpp, &a0))
        {
            sipCpp->GetMeshEdgeVertices(a0,a1,a2);

            return sipBuildResult(0,"(ii)",a1,a2);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxMesh, sipName_GetMeshEdgeVertices, doc_FbxMesh_GetMeshEdgeVertices);

    return NULL;
}


PyDoc_STRVAR(doc_FbxMesh_BeginGetMeshEdgeVertices, "BeginGetMeshEdgeVertices(self)");

extern "C" {static PyObject *meth_FbxMesh_BeginGetMeshEdgeVertices(PyObject *, PyObject *);}
static PyObject *meth_FbxMesh_BeginGetMeshEdgeVertices(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxMesh *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxMesh, &sipCpp))
        {
            sipCpp->BeginGetMeshEdgeVertices();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxMesh, sipName_BeginGetMeshEdgeVertices, doc_FbxMesh_BeginGetMeshEdgeVertices);

    return NULL;
}


PyDoc_STRVAR(doc_FbxMesh_EndGetMeshEdgeVertices, "EndGetMeshEdgeVertices(self)");

extern "C" {static PyObject *meth_FbxMesh_EndGetMeshEdgeVertices(PyObject *, PyObject *);}
static PyObject *meth_FbxMesh_EndGetMeshEdgeVertices(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxMesh *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxMesh, &sipCpp))
        {
            sipCpp->EndGetMeshEdgeVertices();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxMesh, sipName_EndGetMeshEdgeVertices, doc_FbxMesh_EndGetMeshEdgeVertices);

    return NULL;
}


PyDoc_STRVAR(doc_FbxMesh_SetMeshEdgeCount, "SetMeshEdgeCount(self, int)");

extern "C" {static PyObject *meth_FbxMesh_SetMeshEdgeCount(PyObject *, PyObject *);}
static PyObject *meth_FbxMesh_SetMeshEdgeCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
         ::FbxMesh *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_FbxMesh, &sipCpp, &a0))
        {
            sipCpp->SetMeshEdgeCount(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxMesh, sipName_SetMeshEdgeCount, doc_FbxMesh_SetMeshEdgeCount);

    return NULL;
}


PyDoc_STRVAR(doc_FbxMesh_SetMeshEdge, "SetMeshEdge(self, int, int)");

extern "C" {static PyObject *meth_FbxMesh_SetMeshEdge(PyObject *, PyObject *);}
static PyObject *meth_FbxMesh_SetMeshEdge(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        int a1;
         ::FbxMesh *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bii", &sipSelf, sipType_FbxMesh, &sipCpp, &a0, &a1))
        {
            sipCpp->SetMeshEdge(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxMesh, sipName_SetMeshEdge, doc_FbxMesh_SetMeshEdge);

    return NULL;
}


PyDoc_STRVAR(doc_FbxMesh_AddMeshEdgeIndex, "AddMeshEdgeIndex(self, int, int, bool) -> int");

extern "C" {static PyObject *meth_FbxMesh_AddMeshEdgeIndex(PyObject *, PyObject *);}
static PyObject *meth_FbxMesh_AddMeshEdgeIndex(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        int a1;
        bool a2;
         ::FbxMesh *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Biib", &sipSelf, sipType_FbxMesh, &sipCpp, &a0, &a1, &a2))
        {
            int sipRes;

            sipRes = sipCpp->AddMeshEdgeIndex(a0,a1,a2);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxMesh, sipName_AddMeshEdgeIndex, doc_FbxMesh_AddMeshEdgeIndex);

    return NULL;
}


PyDoc_STRVAR(doc_FbxMesh_SetMeshEdgeIndex, "SetMeshEdgeIndex(self, int, int, int, bool) -> int\n"
    "SetMeshEdgeIndex(self, int, int, int) -> bool");

extern "C" {static PyObject *meth_FbxMesh_SetMeshEdgeIndex(PyObject *, PyObject *);}
static PyObject *meth_FbxMesh_SetMeshEdgeIndex(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        int a1;
        int a2;
        bool a3;
         ::FbxMesh *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Biiib", &sipSelf, sipType_FbxMesh, &sipCpp, &a0, &a1, &a2, &a3))
        {
            int sipRes;

            sipRes = sipCpp->SetMeshEdgeIndex(a0,a1,a2,a3);

            return SIPLong_FromLong(sipRes);
        }
    }

    {
        int a0;
        int a1;
        int a2;
         ::FbxMesh *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Biii", &sipSelf, sipType_FbxMesh, &sipCpp, &a0, &a1, &a2))
        {
            bool sipRes;

            sipRes = sipCpp->SetMeshEdgeIndex(a0,a1,a2);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxMesh, sipName_SetMeshEdgeIndex, doc_FbxMesh_SetMeshEdgeIndex);

    return NULL;
}


PyDoc_STRVAR(doc_FbxMesh_BeginAddMeshEdgeIndex, "BeginAddMeshEdgeIndex(self)");

extern "C" {static PyObject *meth_FbxMesh_BeginAddMeshEdgeIndex(PyObject *, PyObject *);}
static PyObject *meth_FbxMesh_BeginAddMeshEdgeIndex(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxMesh *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxMesh, &sipCpp))
        {
            sipCpp->BeginAddMeshEdgeIndex();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxMesh, sipName_BeginAddMeshEdgeIndex, doc_FbxMesh_BeginAddMeshEdgeIndex);

    return NULL;
}


PyDoc_STRVAR(doc_FbxMesh_EndAddMeshEdgeIndex, "EndAddMeshEdgeIndex(self)");

extern "C" {static PyObject *meth_FbxMesh_EndAddMeshEdgeIndex(PyObject *, PyObject *);}
static PyObject *meth_FbxMesh_EndAddMeshEdgeIndex(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxMesh *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxMesh, &sipCpp))
        {
            sipCpp->EndAddMeshEdgeIndex();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxMesh, sipName_EndAddMeshEdgeIndex, doc_FbxMesh_EndAddMeshEdgeIndex);

    return NULL;
}


PyDoc_STRVAR(doc_FbxMesh_AddMeshEdgeIndexForPolygon, "AddMeshEdgeIndexForPolygon(self, int, int) -> int");

extern "C" {static PyObject *meth_FbxMesh_AddMeshEdgeIndexForPolygon(PyObject *, PyObject *);}
static PyObject *meth_FbxMesh_AddMeshEdgeIndexForPolygon(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        int a1;
         ::FbxMesh *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bii", &sipSelf, sipType_FbxMesh, &sipCpp, &a0, &a1))
        {
            int sipRes;

            sipRes = sipCpp->AddMeshEdgeIndexForPolygon(a0,a1);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxMesh, sipName_AddMeshEdgeIndexForPolygon, doc_FbxMesh_AddMeshEdgeIndexForPolygon);

    return NULL;
}


PyDoc_STRVAR(doc_FbxMesh_IsTriangleMesh, "IsTriangleMesh(self) -> bool");

extern "C" {static PyObject *meth_FbxMesh_IsTriangleMesh(PyObject *, PyObject *);}
static PyObject *meth_FbxMesh_IsTriangleMesh(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::FbxMesh *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxMesh, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->IsTriangleMesh();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxMesh, sipName_IsTriangleMesh, doc_FbxMesh_IsTriangleMesh);

    return NULL;
}


PyDoc_STRVAR(doc_FbxMesh_GetTextureUV, "GetTextureUV(self, FbxLayerElement.EType = FbxLayerElement.eTextureDiffuse) -> Tuple[bool, FbxLayerElementArrayTemplate_FbxVector2]");

extern "C" {static PyObject *meth_FbxMesh_GetTextureUV(PyObject *, PyObject *);}
static PyObject *meth_FbxMesh_GetTextureUV(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxLayerElementArrayTemplate_FbxVector2* a0;
         ::FbxLayerElement::EType a1 = FbxLayerElement::eTextureDiffuse;
        const  ::FbxMesh *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B|E", &sipSelf, sipType_FbxMesh, &sipCpp, sipType_FbxLayerElement_EType, &a1))
        {
            bool sipRes;

            sipRes = sipCpp->GetTextureUV(&a0,a1);

            return sipBuildResult(0,"(bD)",sipRes,a0,sipType_FbxLayerElementArrayTemplate_FbxVector2,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxMesh, sipName_GetTextureUV, doc_FbxMesh_GetTextureUV);

    return NULL;
}


PyDoc_STRVAR(doc_FbxMesh_GetMaterialIndices, "GetMaterialIndices(self) -> Tuple[bool, FbxLayerElementArrayTemplate_int]");

extern "C" {static PyObject *meth_FbxMesh_GetMaterialIndices(PyObject *, PyObject *);}
static PyObject *meth_FbxMesh_GetMaterialIndices(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxLayerElementArrayTemplate_int* a0;
        const  ::FbxMesh *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxMesh, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->GetMaterialIndices(&a0);

            return sipBuildResult(0,"(bD)",sipRes,a0,sipType_FbxLayerElementArrayTemplate_int,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxMesh, sipName_GetMaterialIndices, doc_FbxMesh_GetMaterialIndices);

    return NULL;
}


PyDoc_STRVAR(doc_FbxMesh_GetTextureIndices, "GetTextureIndices(self, FbxLayerElement.EType) -> Tuple[bool, FbxLayerElementArrayTemplate_int]");

extern "C" {static PyObject *meth_FbxMesh_GetTextureIndices(PyObject *, PyObject *);}
static PyObject *meth_FbxMesh_GetTextureIndices(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxLayerElementArrayTemplate_int* a0;
         ::FbxLayerElement::EType a1;
        const  ::FbxMesh *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_FbxMesh, &sipCpp, sipType_FbxLayerElement_EType, &a1))
        {
            bool sipRes;

            sipRes = sipCpp->GetTextureIndices(&a0,a1);

            return sipBuildResult(0,"(bD)",sipRes,a0,sipType_FbxLayerElementArrayTemplate_int,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxMesh, sipName_GetTextureIndices, doc_FbxMesh_GetTextureIndices);

    return NULL;
}


PyDoc_STRVAR(doc_FbxMesh_GetEdgeCreaseInfo, "GetEdgeCreaseInfo(self, int) -> float");

extern "C" {static PyObject *meth_FbxMesh_GetEdgeCreaseInfo(PyObject *, PyObject *);}
static PyObject *meth_FbxMesh_GetEdgeCreaseInfo(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
         ::FbxMesh *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_FbxMesh, &sipCpp, &a0))
        {
            double sipRes;

            sipRes = sipCpp->GetEdgeCreaseInfo(a0);

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxMesh, sipName_GetEdgeCreaseInfo, doc_FbxMesh_GetEdgeCreaseInfo);

    return NULL;
}


PyDoc_STRVAR(doc_FbxMesh_GetEdgeCreaseInfoArray, "GetEdgeCreaseInfoArray(self) -> Tuple[bool, FbxLayerElementArrayTemplate_double]");

extern "C" {static PyObject *meth_FbxMesh_GetEdgeCreaseInfoArray(PyObject *, PyObject *);}
static PyObject *meth_FbxMesh_GetEdgeCreaseInfoArray(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxLayerElementArrayTemplate_double* a0;
         ::FbxMesh *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxMesh, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->GetEdgeCreaseInfoArray(&a0);

            return sipBuildResult(0,"(bD)",sipRes,a0,sipType_FbxLayerElementArrayTemplate_double,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxMesh, sipName_GetEdgeCreaseInfoArray, doc_FbxMesh_GetEdgeCreaseInfoArray);

    return NULL;
}


PyDoc_STRVAR(doc_FbxMesh_GetVertexCreaseInfo, "GetVertexCreaseInfo(self, int) -> float");

extern "C" {static PyObject *meth_FbxMesh_GetVertexCreaseInfo(PyObject *, PyObject *);}
static PyObject *meth_FbxMesh_GetVertexCreaseInfo(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
         ::FbxMesh *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_FbxMesh, &sipCpp, &a0))
        {
            double sipRes;

            sipRes = sipCpp->GetVertexCreaseInfo(a0);

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxMesh, sipName_GetVertexCreaseInfo, doc_FbxMesh_GetVertexCreaseInfo);

    return NULL;
}


PyDoc_STRVAR(doc_FbxMesh_GetVertexCreaseInfoArray, "GetVertexCreaseInfoArray(self) -> Tuple[bool, FbxLayerElementArrayTemplate_double]");

extern "C" {static PyObject *meth_FbxMesh_GetVertexCreaseInfoArray(PyObject *, PyObject *);}
static PyObject *meth_FbxMesh_GetVertexCreaseInfoArray(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxLayerElementArrayTemplate_double* a0;
         ::FbxMesh *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxMesh, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->GetVertexCreaseInfoArray(&a0);

            return sipBuildResult(0,"(bD)",sipRes,a0,sipType_FbxLayerElementArrayTemplate_double,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxMesh, sipName_GetVertexCreaseInfoArray, doc_FbxMesh_GetVertexCreaseInfoArray);

    return NULL;
}


PyDoc_STRVAR(doc_FbxMesh_SetEdgeCreaseInfo, "SetEdgeCreaseInfo(self, int, float) -> bool");

extern "C" {static PyObject *meth_FbxMesh_SetEdgeCreaseInfo(PyObject *, PyObject *);}
static PyObject *meth_FbxMesh_SetEdgeCreaseInfo(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        double a1;
         ::FbxMesh *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bid", &sipSelf, sipType_FbxMesh, &sipCpp, &a0, &a1))
        {
            bool sipRes;

            sipRes = sipCpp->SetEdgeCreaseInfo(a0,a1);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxMesh, sipName_SetEdgeCreaseInfo, doc_FbxMesh_SetEdgeCreaseInfo);

    return NULL;
}


PyDoc_STRVAR(doc_FbxMesh_SetEdgeCreaseInfoArray, "SetEdgeCreaseInfoArray(self, DoubleArray) -> bool");

extern "C" {static PyObject *meth_FbxMesh_SetEdgeCreaseInfoArray(PyObject *, PyObject *);}
static PyObject *meth_FbxMesh_SetEdgeCreaseInfoArray(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::DoubleArray* a0;
         ::FbxMesh *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_FbxMesh, &sipCpp, sipType_DoubleArray, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->SetEdgeCreaseInfoArray(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxMesh, sipName_SetEdgeCreaseInfoArray, doc_FbxMesh_SetEdgeCreaseInfoArray);

    return NULL;
}


PyDoc_STRVAR(doc_FbxMesh_SetVertexCreaseInfo, "SetVertexCreaseInfo(self, int, float) -> bool");

extern "C" {static PyObject *meth_FbxMesh_SetVertexCreaseInfo(PyObject *, PyObject *);}
static PyObject *meth_FbxMesh_SetVertexCreaseInfo(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        double a1;
         ::FbxMesh *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bid", &sipSelf, sipType_FbxMesh, &sipCpp, &a0, &a1))
        {
            bool sipRes;

            sipRes = sipCpp->SetVertexCreaseInfo(a0,a1);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxMesh, sipName_SetVertexCreaseInfo, doc_FbxMesh_SetVertexCreaseInfo);

    return NULL;
}


PyDoc_STRVAR(doc_FbxMesh_SetVertexCreaseInfoArray, "SetVertexCreaseInfoArray(self, DoubleArray) -> bool");

extern "C" {static PyObject *meth_FbxMesh_SetVertexCreaseInfoArray(PyObject *, PyObject *);}
static PyObject *meth_FbxMesh_SetVertexCreaseInfoArray(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::DoubleArray* a0;
         ::FbxMesh *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_FbxMesh, &sipCpp, sipType_DoubleArray, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->SetVertexCreaseInfoArray(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxMesh, sipName_SetVertexCreaseInfoArray, doc_FbxMesh_SetVertexCreaseInfoArray);

    return NULL;
}


PyDoc_STRVAR(doc_FbxMesh_GetMeshSmoothness, "GetMeshSmoothness(self) -> FbxMesh.ESmoothness");

extern "C" {static PyObject *meth_FbxMesh_GetMeshSmoothness(PyObject *, PyObject *);}
static PyObject *meth_FbxMesh_GetMeshSmoothness(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::FbxMesh *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxMesh, &sipCpp))
        {
             ::FbxMesh::ESmoothness sipRes;

            sipRes = sipCpp->GetMeshSmoothness();

            return sipConvertFromEnum(sipRes,sipType_FbxMesh_ESmoothness);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxMesh, sipName_GetMeshSmoothness, doc_FbxMesh_GetMeshSmoothness);

    return NULL;
}


PyDoc_STRVAR(doc_FbxMesh_SetMeshSmoothness, "SetMeshSmoothness(self, FbxMesh.ESmoothness)");

extern "C" {static PyObject *meth_FbxMesh_SetMeshSmoothness(PyObject *, PyObject *);}
static PyObject *meth_FbxMesh_SetMeshSmoothness(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxMesh::ESmoothness a0;
         ::FbxMesh *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_FbxMesh, &sipCpp, sipType_FbxMesh_ESmoothness, &a0))
        {
            sipCpp->SetMeshSmoothness(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxMesh, sipName_SetMeshSmoothness, doc_FbxMesh_SetMeshSmoothness);

    return NULL;
}


PyDoc_STRVAR(doc_FbxMesh_GetMeshPreviewDivisionLevels, "GetMeshPreviewDivisionLevels(self) -> int");

extern "C" {static PyObject *meth_FbxMesh_GetMeshPreviewDivisionLevels(PyObject *, PyObject *);}
static PyObject *meth_FbxMesh_GetMeshPreviewDivisionLevels(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::FbxMesh *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxMesh, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->GetMeshPreviewDivisionLevels();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxMesh, sipName_GetMeshPreviewDivisionLevels, doc_FbxMesh_GetMeshPreviewDivisionLevels);

    return NULL;
}


PyDoc_STRVAR(doc_FbxMesh_SetMeshPreviewDivisionLevels, "SetMeshPreviewDivisionLevels(self, int)");

extern "C" {static PyObject *meth_FbxMesh_SetMeshPreviewDivisionLevels(PyObject *, PyObject *);}
static PyObject *meth_FbxMesh_SetMeshPreviewDivisionLevels(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
         ::FbxMesh *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_FbxMesh, &sipCpp, &a0))
        {
            sipCpp->SetMeshPreviewDivisionLevels(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxMesh, sipName_SetMeshPreviewDivisionLevels, doc_FbxMesh_SetMeshPreviewDivisionLevels);

    return NULL;
}


PyDoc_STRVAR(doc_FbxMesh_GetMeshRenderDivisionLevels, "GetMeshRenderDivisionLevels(self) -> int");

extern "C" {static PyObject *meth_FbxMesh_GetMeshRenderDivisionLevels(PyObject *, PyObject *);}
static PyObject *meth_FbxMesh_GetMeshRenderDivisionLevels(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::FbxMesh *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxMesh, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->GetMeshRenderDivisionLevels();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxMesh, sipName_GetMeshRenderDivisionLevels, doc_FbxMesh_GetMeshRenderDivisionLevels);

    return NULL;
}


PyDoc_STRVAR(doc_FbxMesh_SetMeshRenderDivisionLevels, "SetMeshRenderDivisionLevels(self, int)");

extern "C" {static PyObject *meth_FbxMesh_SetMeshRenderDivisionLevels(PyObject *, PyObject *);}
static PyObject *meth_FbxMesh_SetMeshRenderDivisionLevels(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
         ::FbxMesh *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_FbxMesh, &sipCpp, &a0))
        {
            sipCpp->SetMeshRenderDivisionLevels(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxMesh, sipName_SetMeshRenderDivisionLevels, doc_FbxMesh_SetMeshRenderDivisionLevels);

    return NULL;
}


PyDoc_STRVAR(doc_FbxMesh_GetDisplaySubdivisions, "GetDisplaySubdivisions(self) -> bool");

extern "C" {static PyObject *meth_FbxMesh_GetDisplaySubdivisions(PyObject *, PyObject *);}
static PyObject *meth_FbxMesh_GetDisplaySubdivisions(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::FbxMesh *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxMesh, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->GetDisplaySubdivisions();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxMesh, sipName_GetDisplaySubdivisions, doc_FbxMesh_GetDisplaySubdivisions);

    return NULL;
}


PyDoc_STRVAR(doc_FbxMesh_SetDisplaySubdivisions, "SetDisplaySubdivisions(self, bool)");

extern "C" {static PyObject *meth_FbxMesh_SetDisplaySubdivisions(PyObject *, PyObject *);}
static PyObject *meth_FbxMesh_SetDisplaySubdivisions(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
         ::FbxMesh *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_FbxMesh, &sipCpp, &a0))
        {
            sipCpp->SetDisplaySubdivisions(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxMesh, sipName_SetDisplaySubdivisions, doc_FbxMesh_SetDisplaySubdivisions);

    return NULL;
}


PyDoc_STRVAR(doc_FbxMesh_GetBoundaryRule, "GetBoundaryRule(self) -> FbxMesh.EBoundaryRule");

extern "C" {static PyObject *meth_FbxMesh_GetBoundaryRule(PyObject *, PyObject *);}
static PyObject *meth_FbxMesh_GetBoundaryRule(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::FbxMesh *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxMesh, &sipCpp))
        {
             ::FbxMesh::EBoundaryRule sipRes;

            sipRes = sipCpp->GetBoundaryRule();

            return sipConvertFromEnum(sipRes,sipType_FbxMesh_EBoundaryRule);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxMesh, sipName_GetBoundaryRule, doc_FbxMesh_GetBoundaryRule);

    return NULL;
}


PyDoc_STRVAR(doc_FbxMesh_SetBoundaryRule, "SetBoundaryRule(self, FbxMesh.EBoundaryRule)");

extern "C" {static PyObject *meth_FbxMesh_SetBoundaryRule(PyObject *, PyObject *);}
static PyObject *meth_FbxMesh_SetBoundaryRule(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxMesh::EBoundaryRule a0;
         ::FbxMesh *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_FbxMesh, &sipCpp, sipType_FbxMesh_EBoundaryRule, &a0))
        {
            sipCpp->SetBoundaryRule(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxMesh, sipName_SetBoundaryRule, doc_FbxMesh_SetBoundaryRule);

    return NULL;
}


PyDoc_STRVAR(doc_FbxMesh_GetPreserveBorders, "GetPreserveBorders(self) -> bool");

extern "C" {static PyObject *meth_FbxMesh_GetPreserveBorders(PyObject *, PyObject *);}
static PyObject *meth_FbxMesh_GetPreserveBorders(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::FbxMesh *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxMesh, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->GetPreserveBorders();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxMesh, sipName_GetPreserveBorders, doc_FbxMesh_GetPreserveBorders);

    return NULL;
}


PyDoc_STRVAR(doc_FbxMesh_SetPreserveBorders, "SetPreserveBorders(self, bool)");

extern "C" {static PyObject *meth_FbxMesh_SetPreserveBorders(PyObject *, PyObject *);}
static PyObject *meth_FbxMesh_SetPreserveBorders(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
         ::FbxMesh *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_FbxMesh, &sipCpp, &a0))
        {
            sipCpp->SetPreserveBorders(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxMesh, sipName_SetPreserveBorders, doc_FbxMesh_SetPreserveBorders);

    return NULL;
}


PyDoc_STRVAR(doc_FbxMesh_GetPreserveHardEdges, "GetPreserveHardEdges(self) -> bool");

extern "C" {static PyObject *meth_FbxMesh_GetPreserveHardEdges(PyObject *, PyObject *);}
static PyObject *meth_FbxMesh_GetPreserveHardEdges(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::FbxMesh *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxMesh, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->GetPreserveHardEdges();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxMesh, sipName_GetPreserveHardEdges, doc_FbxMesh_GetPreserveHardEdges);

    return NULL;
}


PyDoc_STRVAR(doc_FbxMesh_SetPreserveHardEdges, "SetPreserveHardEdges(self, bool)");

extern "C" {static PyObject *meth_FbxMesh_SetPreserveHardEdges(PyObject *, PyObject *);}
static PyObject *meth_FbxMesh_SetPreserveHardEdges(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
         ::FbxMesh *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_FbxMesh, &sipCpp, &a0))
        {
            sipCpp->SetPreserveHardEdges(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxMesh, sipName_SetPreserveHardEdges, doc_FbxMesh_SetPreserveHardEdges);

    return NULL;
}


PyDoc_STRVAR(doc_FbxMesh_GetPropagateEdgeHardness, "GetPropagateEdgeHardness(self) -> bool");

extern "C" {static PyObject *meth_FbxMesh_GetPropagateEdgeHardness(PyObject *, PyObject *);}
static PyObject *meth_FbxMesh_GetPropagateEdgeHardness(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::FbxMesh *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxMesh, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->GetPropagateEdgeHardness();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxMesh, sipName_GetPropagateEdgeHardness, doc_FbxMesh_GetPropagateEdgeHardness);

    return NULL;
}


PyDoc_STRVAR(doc_FbxMesh_SetPropagateEdgeHardness, "SetPropagateEdgeHardness(self, bool)");

extern "C" {static PyObject *meth_FbxMesh_SetPropagateEdgeHardness(PyObject *, PyObject *);}
static PyObject *meth_FbxMesh_SetPropagateEdgeHardness(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
         ::FbxMesh *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_FbxMesh, &sipCpp, &a0))
        {
            sipCpp->SetPropagateEdgeHardness(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxMesh, sipName_SetPropagateEdgeHardness, doc_FbxMesh_SetPropagateEdgeHardness);

    return NULL;
}


PyDoc_STRVAR(doc_FbxMesh_GetPolyHoleInfo, "GetPolyHoleInfo(self, int) -> bool");

extern "C" {static PyObject *meth_FbxMesh_GetPolyHoleInfo(PyObject *, PyObject *);}
static PyObject *meth_FbxMesh_GetPolyHoleInfo(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
         ::FbxMesh *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_FbxMesh, &sipCpp, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->GetPolyHoleInfo(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxMesh, sipName_GetPolyHoleInfo, doc_FbxMesh_GetPolyHoleInfo);

    return NULL;
}


PyDoc_STRVAR(doc_FbxMesh_GetPolyHoleInfoArray, "GetPolyHoleInfoArray(self) -> Tuple[bool, FbxLayerElementArrayTemplate_bool]");

extern "C" {static PyObject *meth_FbxMesh_GetPolyHoleInfoArray(PyObject *, PyObject *);}
static PyObject *meth_FbxMesh_GetPolyHoleInfoArray(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxLayerElementArrayTemplate_bool* a0;
         ::FbxMesh *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxMesh, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->GetPolyHoleInfoArray(&a0);

            return sipBuildResult(0,"(bD)",sipRes,a0,sipType_FbxLayerElementArrayTemplate_bool,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxMesh, sipName_GetPolyHoleInfoArray, doc_FbxMesh_GetPolyHoleInfoArray);

    return NULL;
}


PyDoc_STRVAR(doc_FbxMesh_SetPolyHoleInfo, "SetPolyHoleInfo(self, int, bool) -> bool");

extern "C" {static PyObject *meth_FbxMesh_SetPolyHoleInfo(PyObject *, PyObject *);}
static PyObject *meth_FbxMesh_SetPolyHoleInfo(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        bool a1;
         ::FbxMesh *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bib", &sipSelf, sipType_FbxMesh, &sipCpp, &a0, &a1))
        {
            bool sipRes;

            sipRes = sipCpp->SetPolyHoleInfo(a0,a1);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxMesh, sipName_SetPolyHoleInfo, doc_FbxMesh_SetPolyHoleInfo);

    return NULL;
}


PyDoc_STRVAR(doc_FbxMesh_SetPolyHoleInfoArray, "SetPolyHoleInfoArray(self, BoolArray) -> bool");

extern "C" {static PyObject *meth_FbxMesh_SetPolyHoleInfoArray(PyObject *, PyObject *);}
static PyObject *meth_FbxMesh_SetPolyHoleInfoArray(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::BoolArray* a0;
         ::FbxMesh *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_FbxMesh, &sipCpp, sipType_BoolArray, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->SetPolyHoleInfoArray(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxMesh, sipName_SetPolyHoleInfoArray, doc_FbxMesh_SetPolyHoleInfoArray);

    return NULL;
}


PyDoc_STRVAR(doc_FbxMesh_GenerateTangentsData, "GenerateTangentsData(self, FbxString = \"\", bool = False, bool = False) -> bool\n"
    "GenerateTangentsData(self, int, bool = False, bool = False) -> bool");

extern "C" {static PyObject *meth_FbxMesh_GenerateTangentsData(PyObject *, PyObject *);}
static PyObject *meth_FbxMesh_GenerateTangentsData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxString a0def = "";
         ::FbxString* a0 = &a0def;
        int a0State = 0;
        bool a1 = 0;
        bool a2 = 0;
         ::FbxMesh *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B|J1bb", &sipSelf, sipType_FbxMesh, &sipCpp, sipType_FbxString, &a0, &a0State, &a1, &a2))
        {
            bool sipRes;

            sipRes = sipCpp->GenerateTangentsData(*a0,a1,a2);
            sipReleaseType(a0,sipType_FbxString,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    {
        int a0;
        bool a1 = 0;
        bool a2 = 0;
         ::FbxMesh *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi|bb", &sipSelf, sipType_FbxMesh, &sipCpp, &a0, &a1, &a2))
        {
            bool sipRes;

            sipRes = sipCpp->GenerateTangentsData(a0,a1,a2);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxMesh, sipName_GenerateTangentsData, doc_FbxMesh_GenerateTangentsData);

    return NULL;
}


PyDoc_STRVAR(doc_FbxMesh_GenerateTangentsDataForAllUVSets, "GenerateTangentsDataForAllUVSets(self, bool = False, bool = False) -> bool");

extern "C" {static PyObject *meth_FbxMesh_GenerateTangentsDataForAllUVSets(PyObject *, PyObject *);}
static PyObject *meth_FbxMesh_GenerateTangentsDataForAllUVSets(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0 = 0;
        bool a1 = 0;
         ::FbxMesh *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B|bb", &sipSelf, sipType_FbxMesh, &sipCpp, &a0, &a1))
        {
            bool sipRes;

            sipRes = sipCpp->GenerateTangentsDataForAllUVSets(a0,a1);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxMesh, sipName_GenerateTangentsDataForAllUVSets, doc_FbxMesh_GenerateTangentsDataForAllUVSets);

    return NULL;
}


extern "C" {static PyObject *slot_FbxMesh___ne__(PyObject *,PyObject *);}
static PyObject *slot_FbxMesh___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::FbxMesh *sipCpp = reinterpret_cast< ::FbxMesh *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_FbxMesh));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const  ::FbxMesh* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_FbxMesh, &a0))
        {
            bool sipRes;

            sipRes = !sipCpp-> ::FbxMesh::operator==(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_fbx, ne_slot, sipType_FbxMesh, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_FbxMesh___eq__(PyObject *,PyObject *);}
static PyObject *slot_FbxMesh___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::FbxMesh *sipCpp = reinterpret_cast< ::FbxMesh *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_FbxMesh));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const  ::FbxMesh* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_FbxMesh, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::FbxMesh::operator==(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_fbx, eq_slot, sipType_FbxMesh, sipSelf, sipArg);
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_FbxMesh(void *, const sipTypeDef *);}
static void *cast_FbxMesh(void *sipCppV, const sipTypeDef *targetType)
{
     ::FbxMesh *sipCpp = reinterpret_cast< ::FbxMesh *>(sipCppV);

    if (targetType == sipType_FbxGeometry)
        return static_cast< ::FbxGeometry *>(sipCpp);

    if (targetType == sipType_FbxGeometryBase)
        return static_cast< ::FbxGeometryBase *>(sipCpp);

    if (targetType == sipType_FbxLayerContainer)
        return static_cast< ::FbxLayerContainer *>(sipCpp);

    if (targetType == sipType_FbxNodeAttribute)
        return static_cast< ::FbxNodeAttribute *>(sipCpp);

    if (targetType == sipType_FbxObject)
        return static_cast< ::FbxObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_FbxMesh(void *, int);}
static void release_FbxMesh(void *, int)
{
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_FbxMesh[] = {{147, 255, 1}};


/* Define this type's Python slots. */
static sipPySlotDef slots_FbxMesh[] = {
    {(void *)slot_FbxMesh___ne__, ne_slot},
    {(void *)slot_FbxMesh___eq__, eq_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_FbxMesh[] = {
    {SIP_MLNAME_CAST(sipName_AddMeshEdgeIndex), meth_FbxMesh_AddMeshEdgeIndex, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxMesh_AddMeshEdgeIndex)},
    {SIP_MLNAME_CAST(sipName_AddMeshEdgeIndexForPolygon), meth_FbxMesh_AddMeshEdgeIndexForPolygon, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxMesh_AddMeshEdgeIndexForPolygon)},
    {SIP_MLNAME_CAST(sipName_AddPolygon), meth_FbxMesh_AddPolygon, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxMesh_AddPolygon)},
    {SIP_MLNAME_CAST(sipName_AddTextureUV), meth_FbxMesh_AddTextureUV, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxMesh_AddTextureUV)},
    {SIP_MLNAME_CAST(sipName_BeginAddMeshEdgeIndex), meth_FbxMesh_BeginAddMeshEdgeIndex, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxMesh_BeginAddMeshEdgeIndex)},
    {SIP_MLNAME_CAST(sipName_BeginGetMeshEdgeVertices), meth_FbxMesh_BeginGetMeshEdgeVertices, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxMesh_BeginGetMeshEdgeVertices)},
    {SIP_MLNAME_CAST(sipName_BeginPolygon), meth_FbxMesh_BeginPolygon, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxMesh_BeginPolygon)},
    {SIP_MLNAME_CAST(sipName_BeginPolygonExt), meth_FbxMesh_BeginPolygonExt, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxMesh_BeginPolygonExt)},
    {SIP_MLNAME_CAST(sipName_BuildMergeList), meth_FbxMesh_BuildMergeList, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxMesh_BuildMergeList)},
    {SIP_MLNAME_CAST(sipName_BuildMeshEdgeArray), meth_FbxMesh_BuildMeshEdgeArray, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxMesh_BuildMeshEdgeArray)},
    {SIP_MLNAME_CAST(sipName_CheckIfVertexNormalsCCW), meth_FbxMesh_CheckIfVertexNormalsCCW, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxMesh_CheckIfVertexNormalsCCW)},
    {SIP_MLNAME_CAST(sipName_CheckSamePointTwice), meth_FbxMesh_CheckSamePointTwice, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxMesh_CheckSamePointTwice)},
    {SIP_MLNAME_CAST(sipName_Create), meth_FbxMesh_Create, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxMesh_Create)},
    {SIP_MLNAME_CAST(sipName_EndAddMeshEdgeIndex), meth_FbxMesh_EndAddMeshEdgeIndex, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxMesh_EndAddMeshEdgeIndex)},
    {SIP_MLNAME_CAST(sipName_EndGetMeshEdgeVertices), meth_FbxMesh_EndGetMeshEdgeVertices, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxMesh_EndGetMeshEdgeVertices)},
    {SIP_MLNAME_CAST(sipName_EndPolygon), meth_FbxMesh_EndPolygon, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxMesh_EndPolygon)},
    {SIP_MLNAME_CAST(sipName_GenerateNormals), meth_FbxMesh_GenerateNormals, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxMesh_GenerateNormals)},
    {SIP_MLNAME_CAST(sipName_GenerateTangentsData), meth_FbxMesh_GenerateTangentsData, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxMesh_GenerateTangentsData)},
    {SIP_MLNAME_CAST(sipName_GenerateTangentsDataForAllUVSets), meth_FbxMesh_GenerateTangentsDataForAllUVSets, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxMesh_GenerateTangentsDataForAllUVSets)},
    {SIP_MLNAME_CAST(sipName_GetAllChannelUV), meth_FbxMesh_GetAllChannelUV, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxMesh_GetAllChannelUV)},
    {SIP_MLNAME_CAST(sipName_GetAttributeType), meth_FbxMesh_GetAttributeType, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxMesh_GetAttributeType)},
    {SIP_MLNAME_CAST(sipName_GetBoundaryRule), meth_FbxMesh_GetBoundaryRule, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxMesh_GetBoundaryRule)},
    {SIP_MLNAME_CAST(sipName_GetClassId), meth_FbxMesh_GetClassId, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxMesh_GetClassId)},
    {SIP_MLNAME_CAST(sipName_GetDisplaySubdivisions), meth_FbxMesh_GetDisplaySubdivisions, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxMesh_GetDisplaySubdivisions)},
    {SIP_MLNAME_CAST(sipName_GetEdgeCreaseInfo), meth_FbxMesh_GetEdgeCreaseInfo, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxMesh_GetEdgeCreaseInfo)},
    {SIP_MLNAME_CAST(sipName_GetEdgeCreaseInfoArray), meth_FbxMesh_GetEdgeCreaseInfoArray, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxMesh_GetEdgeCreaseInfoArray)},
    {SIP_MLNAME_CAST(sipName_GetMaterialIndices), meth_FbxMesh_GetMaterialIndices, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxMesh_GetMaterialIndices)},
    {SIP_MLNAME_CAST(sipName_GetMeshEdgeCount), meth_FbxMesh_GetMeshEdgeCount, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxMesh_GetMeshEdgeCount)},
    {SIP_MLNAME_CAST(sipName_GetMeshEdgeIndex), meth_FbxMesh_GetMeshEdgeIndex, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxMesh_GetMeshEdgeIndex)},
    {SIP_MLNAME_CAST(sipName_GetMeshEdgeIndexForPolygon), meth_FbxMesh_GetMeshEdgeIndexForPolygon, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxMesh_GetMeshEdgeIndexForPolygon)},
    {SIP_MLNAME_CAST(sipName_GetMeshEdgeVertices), meth_FbxMesh_GetMeshEdgeVertices, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxMesh_GetMeshEdgeVertices)},
    {SIP_MLNAME_CAST(sipName_GetMeshPreviewDivisionLevels), meth_FbxMesh_GetMeshPreviewDivisionLevels, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxMesh_GetMeshPreviewDivisionLevels)},
    {SIP_MLNAME_CAST(sipName_GetMeshRenderDivisionLevels), meth_FbxMesh_GetMeshRenderDivisionLevels, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxMesh_GetMeshRenderDivisionLevels)},
    {SIP_MLNAME_CAST(sipName_GetMeshSmoothness), meth_FbxMesh_GetMeshSmoothness, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxMesh_GetMeshSmoothness)},
    {SIP_MLNAME_CAST(sipName_GetPolyHoleInfo), meth_FbxMesh_GetPolyHoleInfo, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxMesh_GetPolyHoleInfo)},
    {SIP_MLNAME_CAST(sipName_GetPolyHoleInfoArray), meth_FbxMesh_GetPolyHoleInfoArray, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxMesh_GetPolyHoleInfoArray)},
    {SIP_MLNAME_CAST(sipName_GetPolygonCount), meth_FbxMesh_GetPolygonCount, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxMesh_GetPolygonCount)},
    {SIP_MLNAME_CAST(sipName_GetPolygonGroup), meth_FbxMesh_GetPolygonGroup, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxMesh_GetPolygonGroup)},
    {SIP_MLNAME_CAST(sipName_GetPolygonSize), meth_FbxMesh_GetPolygonSize, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxMesh_GetPolygonSize)},
    {SIP_MLNAME_CAST(sipName_GetPolygonVertex), meth_FbxMesh_GetPolygonVertex, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxMesh_GetPolygonVertex)},
    {SIP_MLNAME_CAST(sipName_GetPolygonVertexCount), meth_FbxMesh_GetPolygonVertexCount, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxMesh_GetPolygonVertexCount)},
    {SIP_MLNAME_CAST(sipName_GetPolygonVertexIndex), meth_FbxMesh_GetPolygonVertexIndex, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxMesh_GetPolygonVertexIndex)},
    {SIP_MLNAME_CAST(sipName_GetPolygonVertexNormal), meth_FbxMesh_GetPolygonVertexNormal, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxMesh_GetPolygonVertexNormal)},
    {SIP_MLNAME_CAST(sipName_GetPolygonVertexNormals), meth_FbxMesh_GetPolygonVertexNormals, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxMesh_GetPolygonVertexNormals)},
    {SIP_MLNAME_CAST(sipName_GetPolygonVertexUV), meth_FbxMesh_GetPolygonVertexUV, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxMesh_GetPolygonVertexUV)},
    {SIP_MLNAME_CAST(sipName_GetPolygonVertexUVs), meth_FbxMesh_GetPolygonVertexUVs, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxMesh_GetPolygonVertexUVs)},
    {SIP_MLNAME_CAST(sipName_GetPolygonVertices), meth_FbxMesh_GetPolygonVertices, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxMesh_GetPolygonVertices)},
    {SIP_MLNAME_CAST(sipName_GetPreserveBorders), meth_FbxMesh_GetPreserveBorders, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxMesh_GetPreserveBorders)},
    {SIP_MLNAME_CAST(sipName_GetPreserveHardEdges), meth_FbxMesh_GetPreserveHardEdges, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxMesh_GetPreserveHardEdges)},
    {SIP_MLNAME_CAST(sipName_GetPropagateEdgeHardness), meth_FbxMesh_GetPropagateEdgeHardness, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxMesh_GetPropagateEdgeHardness)},
    {SIP_MLNAME_CAST(sipName_GetTextureIndices), meth_FbxMesh_GetTextureIndices, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxMesh_GetTextureIndices)},
    {SIP_MLNAME_CAST(sipName_GetTextureUV), meth_FbxMesh_GetTextureUV, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxMesh_GetTextureUV)},
    {SIP_MLNAME_CAST(sipName_GetTextureUVCount), meth_FbxMesh_GetTextureUVCount, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxMesh_GetTextureUVCount)},
    {SIP_MLNAME_CAST(sipName_GetTextureUVIndex), meth_FbxMesh_GetTextureUVIndex, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxMesh_GetTextureUVIndex)},
    {SIP_MLNAME_CAST(sipName_GetUVLayerCount), meth_FbxMesh_GetUVLayerCount, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxMesh_GetUVLayerCount)},
    {SIP_MLNAME_CAST(sipName_GetVertexCreaseInfo), meth_FbxMesh_GetVertexCreaseInfo, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxMesh_GetVertexCreaseInfo)},
    {SIP_MLNAME_CAST(sipName_GetVertexCreaseInfoArray), meth_FbxMesh_GetVertexCreaseInfoArray, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxMesh_GetVertexCreaseInfoArray)},
    {SIP_MLNAME_CAST(sipName_InitMaterialIndices), meth_FbxMesh_InitMaterialIndices, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxMesh_InitMaterialIndices)},
    {SIP_MLNAME_CAST(sipName_InitTextureIndices), meth_FbxMesh_InitTextureIndices, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxMesh_InitTextureIndices)},
    {SIP_MLNAME_CAST(sipName_InitTextureUV), meth_FbxMesh_InitTextureUV, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxMesh_InitTextureUV)},
    {SIP_MLNAME_CAST(sipName_InitTextureUVIndices), meth_FbxMesh_InitTextureUVIndices, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxMesh_InitTextureUVIndices)},
    {SIP_MLNAME_CAST(sipName_IsTriangleMesh), meth_FbxMesh_IsTriangleMesh, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxMesh_IsTriangleMesh)},
    {SIP_MLNAME_CAST(sipName_MergePointsForPolygonVerteNormals), meth_FbxMesh_MergePointsForPolygonVerteNormals, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxMesh_MergePointsForPolygonVerteNormals)},
    {SIP_MLNAME_CAST(sipName_RemoveBadPolygons), meth_FbxMesh_RemoveBadPolygons, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxMesh_RemoveBadPolygons)},
    {SIP_MLNAME_CAST(sipName_RemoveDuplicatedEdges), meth_FbxMesh_RemoveDuplicatedEdges, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxMesh_RemoveDuplicatedEdges)},
    {SIP_MLNAME_CAST(sipName_RemovePolygon), meth_FbxMesh_RemovePolygon, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxMesh_RemovePolygon)},
    {SIP_MLNAME_CAST(sipName_Reset), meth_FbxMesh_Reset, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxMesh_Reset)},
    {SIP_MLNAME_CAST(sipName_SetBoundaryRule), meth_FbxMesh_SetBoundaryRule, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxMesh_SetBoundaryRule)},
    {SIP_MLNAME_CAST(sipName_SetDisplaySubdivisions), meth_FbxMesh_SetDisplaySubdivisions, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxMesh_SetDisplaySubdivisions)},
    {SIP_MLNAME_CAST(sipName_SetEdgeCreaseInfo), meth_FbxMesh_SetEdgeCreaseInfo, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxMesh_SetEdgeCreaseInfo)},
    {SIP_MLNAME_CAST(sipName_SetEdgeCreaseInfoArray), meth_FbxMesh_SetEdgeCreaseInfoArray, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxMesh_SetEdgeCreaseInfoArray)},
    {SIP_MLNAME_CAST(sipName_SetMeshEdge), meth_FbxMesh_SetMeshEdge, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxMesh_SetMeshEdge)},
    {SIP_MLNAME_CAST(sipName_SetMeshEdgeCount), meth_FbxMesh_SetMeshEdgeCount, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxMesh_SetMeshEdgeCount)},
    {SIP_MLNAME_CAST(sipName_SetMeshEdgeIndex), meth_FbxMesh_SetMeshEdgeIndex, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxMesh_SetMeshEdgeIndex)},
    {SIP_MLNAME_CAST(sipName_SetMeshPreviewDivisionLevels), meth_FbxMesh_SetMeshPreviewDivisionLevels, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxMesh_SetMeshPreviewDivisionLevels)},
    {SIP_MLNAME_CAST(sipName_SetMeshRenderDivisionLevels), meth_FbxMesh_SetMeshRenderDivisionLevels, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxMesh_SetMeshRenderDivisionLevels)},
    {SIP_MLNAME_CAST(sipName_SetMeshSmoothness), meth_FbxMesh_SetMeshSmoothness, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxMesh_SetMeshSmoothness)},
    {SIP_MLNAME_CAST(sipName_SetPolyHoleInfo), meth_FbxMesh_SetPolyHoleInfo, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxMesh_SetPolyHoleInfo)},
    {SIP_MLNAME_CAST(sipName_SetPolyHoleInfoArray), meth_FbxMesh_SetPolyHoleInfoArray, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxMesh_SetPolyHoleInfoArray)},
    {SIP_MLNAME_CAST(sipName_SetPolygonGroup), meth_FbxMesh_SetPolygonGroup, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxMesh_SetPolygonGroup)},
    {SIP_MLNAME_CAST(sipName_SetPreserveBorders), meth_FbxMesh_SetPreserveBorders, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxMesh_SetPreserveBorders)},
    {SIP_MLNAME_CAST(sipName_SetPreserveHardEdges), meth_FbxMesh_SetPreserveHardEdges, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxMesh_SetPreserveHardEdges)},
    {SIP_MLNAME_CAST(sipName_SetPropagateEdgeHardness), meth_FbxMesh_SetPropagateEdgeHardness, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxMesh_SetPropagateEdgeHardness)},
    {SIP_MLNAME_CAST(sipName_SetTextureUVIndex), meth_FbxMesh_SetTextureUVIndex, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxMesh_SetTextureUVIndex)},
    {SIP_MLNAME_CAST(sipName_SetVertexCreaseInfo), meth_FbxMesh_SetVertexCreaseInfo, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxMesh_SetVertexCreaseInfo)},
    {SIP_MLNAME_CAST(sipName_SetVertexCreaseInfoArray), meth_FbxMesh_SetVertexCreaseInfoArray, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxMesh_SetVertexCreaseInfoArray)},
    {SIP_MLNAME_CAST(sipName_SplitPoints), meth_FbxMesh_SplitPoints, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxMesh_SplitPoints)}
};

static sipEnumMemberDef enummembers_FbxMesh[] = {
    {sipName_eCreaseAll, static_cast<int>( ::FbxMesh::eCreaseAll), 224},
    {sipName_eCreaseEdge, static_cast<int>( ::FbxMesh::eCreaseEdge), 224},
    {sipName_eFine, static_cast<int>( ::FbxMesh::eFine), 225},
    {sipName_eHull, static_cast<int>( ::FbxMesh::eHull), 225},
    {sipName_eLegacy, static_cast<int>( ::FbxMesh::eLegacy), 224},
    {sipName_eMedium, static_cast<int>( ::FbxMesh::eMedium), 225},
    {sipName_eRough, static_cast<int>( ::FbxMesh::eRough), 225},
};


extern "C" {static PyObject *varget_FbxMesh_ClassId(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxMesh_ClassId(void *, PyObject *, PyObject *)
{
     ::FbxClassId*sipVal;

    sipVal = & ::FbxMesh::ClassId;

    return sipConvertFromType(sipVal, sipType_FbxClassId, NULL);
}


extern "C" {static int varset_FbxMesh_ClassId(void *, PyObject *, PyObject *);}
static int varset_FbxMesh_ClassId(void *, PyObject *sipPy, PyObject *)
{
     ::FbxClassId*sipVal;
    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxClassId *>(sipForceConvertToType(sipPy,sipType_FbxClassId,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

     ::FbxMesh::ClassId = *sipVal;

    return 0;
}

sipVariableDef variables_FbxMesh[] = {
    {ClassVariable, sipName_ClassId, (PyMethodDef *)varget_FbxMesh_ClassId, (PyMethodDef *)varset_FbxMesh_ClassId, NULL, NULL},
};


sipClassTypeDef sipTypeDef_fbx_FbxMesh = {
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_FbxMesh,
        {0},
        0
    },
    {
        sipNameNr_FbxMesh,
        {0, 0, 1},
        87, methods_FbxMesh,
        7, enummembers_FbxMesh,
        1, variables_FbxMesh,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    0,
    -1,
    -1,
    supers_FbxMesh,
    slots_FbxMesh,
    0,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    0,
    0,
    0,
    0,
    release_FbxMesh,
    cast_FbxMesh,
    0,
    0,
    0,
    0,
    0,
    0
};
