/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.3
 *
 * Copyright (C) 2009 Autodesk, Inc. and/or its licensors.
 * All Rights Reserved.
 * 
 * The coded instructions, statements, computer programs, and/or related material 
 * (collectively the "Data") in these files contain unpublished information 
 * proprietary to Autodesk, Inc. and/or its licensors, which is protected by 
 * Canada and United States of America federal copyright law and by international 
 * treaties. 
 * 
 * The Data may not be disclosed or distributed to third parties, in whole or in
 * part, without the prior written consent of Autodesk, Inc. ("Autodesk").
 * 
 * THE DATA IS PROVIDED "AS IS" AND WITHOUT WARRANTY.
 * ALL WARRANTIES ARE EXPRESSLY EXCLUDED AND DISCLAIMED. AUTODESK MAKES NO
 * WARRANTY OF ANY KIND WITH RESPECT TO THE DATA, EXPRESS, IMPLIED OR ARISING
 * BY CUSTOM OR TRADE USAGE, AND DISCLAIMS ANY IMPLIED WARRANTIES OF TITLE, 
 * NON-INFRINGEMENT, MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE OR USE. 
 * WITHOUT LIMITING THE FOREGOING, AUTODESK DOES NOT WARRANT THAT THE OPERATION
 * OF THE DATA WILL BE UNINTERRUPTED OR ERROR FREE. 
 * 
 * IN NO EVENT SHALL AUTODESK, ITS AFFILIATES, PARENT COMPANIES, LICENSORS
 * OR SUPPLIERS ("AUTODESK GROUP") BE LIABLE FOR ANY LOSSES, DAMAGES OR EXPENSES
 * OF ANY KIND (INCLUDING WITHOUT LIMITATION PUNITIVE OR MULTIPLE DAMAGES OR OTHER
 * SPECIAL, DIRECT, INDIRECT, EXEMPLARY, INCIDENTAL, LOSS OF PROFITS, REVENUE
 * OR DATA, COST OF COVER OR CONSEQUENTIAL LOSSES OR DAMAGES OF ANY KIND),
 * HOWEVER CAUSED, AND REGARDLESS OF THE THEORY OF LIABILITY, WHETHER DERIVED
 * FROM CONTRACT, TORT (INCLUDING, BUT NOT LIMITED TO, NEGLIGENCE), OR OTHERWISE,
 * ARISING OUT OF OR RELATING TO THE DATA OR ITS USE OR ANY OTHER PERFORMANCE,
 * WHETHER OR NOT AUTODESK HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH LOSS
 * OR DAMAGE. 
 */

#include "sipAPIfbx.h"




PyDoc_STRVAR(doc_FbxRotationOrder_GetOrder, "GetOrder(self) -> int");

extern "C" {static PyObject *meth_FbxRotationOrder_GetOrder(PyObject *, PyObject *);}
static PyObject *meth_FbxRotationOrder_GetOrder(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxRotationOrder *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxRotationOrder, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->GetOrder();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxRotationOrder, sipName_GetOrder, doc_FbxRotationOrder_GetOrder);

    return NULL;
}


PyDoc_STRVAR(doc_FbxRotationOrder_SetOrder, "SetOrder(self, FbxEuler.EOrder)");

extern "C" {static PyObject *meth_FbxRotationOrder_SetOrder(PyObject *, PyObject *);}
static PyObject *meth_FbxRotationOrder_SetOrder(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxEuler::EOrder a0;
         ::FbxRotationOrder *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_FbxRotationOrder, &sipCpp, sipType_FbxEuler_EOrder, &a0))
        {
            sipCpp->SetOrder(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxRotationOrder, sipName_SetOrder, doc_FbxRotationOrder_SetOrder);

    return NULL;
}


PyDoc_STRVAR(doc_FbxRotationOrder_V2M, "V2M(self, FbxAMatrix, FbxVector4)");

extern "C" {static PyObject *meth_FbxRotationOrder_V2M(PyObject *, PyObject *);}
static PyObject *meth_FbxRotationOrder_V2M(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxAMatrix* a0;
        const  ::FbxVector4* a1;
         ::FbxRotationOrder *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9J9", &sipSelf, sipType_FbxRotationOrder, &sipCpp, sipType_FbxAMatrix, &a0, sipType_FbxVector4, &a1))
        {
            sipCpp->V2M(*a0,*a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxRotationOrder, sipName_V2M, doc_FbxRotationOrder_V2M);

    return NULL;
}


PyDoc_STRVAR(doc_FbxRotationOrder_M2V, "M2V(self, FbxVector4, FbxAMatrix)");

extern "C" {static PyObject *meth_FbxRotationOrder_M2V(PyObject *, PyObject *);}
static PyObject *meth_FbxRotationOrder_M2V(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxVector4* a0;
         ::FbxAMatrix* a1;
         ::FbxRotationOrder *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9J9", &sipSelf, sipType_FbxRotationOrder, &sipCpp, sipType_FbxVector4, &a0, sipType_FbxAMatrix, &a1))
        {
            sipCpp->M2V(*a0,*a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxRotationOrder, sipName_M2V, doc_FbxRotationOrder_M2V);

    return NULL;
}


PyDoc_STRVAR(doc_FbxRotationOrder_V2VRef, "V2VRef(self, FbxVector4, FbxVector4, FbxVector4) -> bool");

extern "C" {static PyObject *meth_FbxRotationOrder_V2VRef(PyObject *, PyObject *);}
static PyObject *meth_FbxRotationOrder_V2VRef(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxVector4* a0;
         ::FbxVector4* a1;
         ::FbxVector4* a2;
         ::FbxRotationOrder *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9J9J9", &sipSelf, sipType_FbxRotationOrder, &sipCpp, sipType_FbxVector4, &a0, sipType_FbxVector4, &a1, sipType_FbxVector4, &a2))
        {
            bool sipRes;

            sipRes = sipCpp->V2VRef(*a0,*a1,*a2);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxRotationOrder, sipName_V2VRef, doc_FbxRotationOrder_V2VRef);

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_FbxRotationOrder(void *, int);}
static void release_FbxRotationOrder(void *sipCppV, int)
{
    delete reinterpret_cast< ::FbxRotationOrder *>(sipCppV);
}


extern "C" {static void dealloc_FbxRotationOrder(sipSimpleWrapper *);}
static void dealloc_FbxRotationOrder(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_FbxRotationOrder(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_FbxRotationOrder(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_FbxRotationOrder(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::FbxRotationOrder *sipCpp = 0;

    {
         ::FbxEuler::EOrder a0 = FbxEuler::eOrderXYZ;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "|E", sipType_FbxEuler_EOrder, &a0))
        {
            sipCpp = new  ::FbxRotationOrder(a0);

            return sipCpp;
        }
    }

    return NULL;
}


static PyMethodDef methods_FbxRotationOrder[] = {
    {SIP_MLNAME_CAST(sipName_GetOrder), meth_FbxRotationOrder_GetOrder, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxRotationOrder_GetOrder)},
    {SIP_MLNAME_CAST(sipName_M2V), meth_FbxRotationOrder_M2V, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxRotationOrder_M2V)},
    {SIP_MLNAME_CAST(sipName_SetOrder), meth_FbxRotationOrder_SetOrder, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxRotationOrder_SetOrder)},
    {SIP_MLNAME_CAST(sipName_V2M), meth_FbxRotationOrder_V2M, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxRotationOrder_V2M)},
    {SIP_MLNAME_CAST(sipName_V2VRef), meth_FbxRotationOrder_V2VRef, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxRotationOrder_V2VRef)}
};

PyDoc_STRVAR(doc_FbxRotationOrder, "\1FbxRotationOrder(FbxEuler.EOrder = FbxEuler.eOrderXYZ)");


sipClassTypeDef sipTypeDef_fbx_FbxRotationOrder = {
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_FbxRotationOrder,
        {0},
        0
    },
    {
        sipNameNr_FbxRotationOrder,
        {0, 0, 1},
        5, methods_FbxRotationOrder,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_FbxRotationOrder,
    -1,
    -1,
    0,
    0,
    init_type_FbxRotationOrder,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_FbxRotationOrder,
    0,
    0,
    0,
    release_FbxRotationOrder,
    0,
    0,
    0,
    0,
    0,
    0,
    0
};
