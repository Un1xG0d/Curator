/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.3
 *
 * Copyright (C) 2009 Autodesk, Inc. and/or its licensors.
 * All Rights Reserved.
 * 
 * The coded instructions, statements, computer programs, and/or related material 
 * (collectively the "Data") in these files contain unpublished information 
 * proprietary to Autodesk, Inc. and/or its licensors, which is protected by 
 * Canada and United States of America federal copyright law and by international 
 * treaties. 
 * 
 * The Data may not be disclosed or distributed to third parties, in whole or in
 * part, without the prior written consent of Autodesk, Inc. ("Autodesk").
 * 
 * THE DATA IS PROVIDED "AS IS" AND WITHOUT WARRANTY.
 * ALL WARRANTIES ARE EXPRESSLY EXCLUDED AND DISCLAIMED. AUTODESK MAKES NO
 * WARRANTY OF ANY KIND WITH RESPECT TO THE DATA, EXPRESS, IMPLIED OR ARISING
 * BY CUSTOM OR TRADE USAGE, AND DISCLAIMS ANY IMPLIED WARRANTIES OF TITLE, 
 * NON-INFRINGEMENT, MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE OR USE. 
 * WITHOUT LIMITING THE FOREGOING, AUTODESK DOES NOT WARRANT THAT THE OPERATION
 * OF THE DATA WILL BE UNINTERRUPTED OR ERROR FREE. 
 * 
 * IN NO EVENT SHALL AUTODESK, ITS AFFILIATES, PARENT COMPANIES, LICENSORS
 * OR SUPPLIERS ("AUTODESK GROUP") BE LIABLE FOR ANY LOSSES, DAMAGES OR EXPENSES
 * OF ANY KIND (INCLUDING WITHOUT LIMITATION PUNITIVE OR MULTIPLE DAMAGES OR OTHER
 * SPECIAL, DIRECT, INDIRECT, EXEMPLARY, INCIDENTAL, LOSS OF PROFITS, REVENUE
 * OR DATA, COST OF COVER OR CONSEQUENTIAL LOSSES OR DAMAGES OF ANY KIND),
 * HOWEVER CAUSED, AND REGARDLESS OF THE THEORY OF LIABILITY, WHETHER DERIVED
 * FROM CONTRACT, TORT (INCLUDING, BUT NOT LIMITED TO, NEGLIGENCE), OR OTHERWISE,
 * ARISING OUT OF OR RELATING TO THE DATA OR ITS USE OR ANY OTHER PERFORMANCE,
 * WHETHER OR NOT AUTODESK HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH LOSS
 * OR DAMAGE. 
 */

#include "sipAPIfbx.h"




PyDoc_STRVAR(doc_FbxBindingTableEntry_SetSource, "SetSource(self, str)");

extern "C" {static PyObject *meth_FbxBindingTableEntry_SetSource(PyObject *, PyObject *);}
static PyObject *meth_FbxBindingTableEntry_SetSource(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const char* a0;
        PyObject *a0Keep;
         ::FbxBindingTableEntry *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BA8", &sipSelf, sipType_FbxBindingTableEntry, &sipCpp, &a0Keep, &a0))
        {
            sipCpp->SetSource(a0);
            Py_DECREF(a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxBindingTableEntry, sipName_SetSource, doc_FbxBindingTableEntry_SetSource);

    return NULL;
}


PyDoc_STRVAR(doc_FbxBindingTableEntry_GetSource, "GetSource(self) -> str");

extern "C" {static PyObject *meth_FbxBindingTableEntry_GetSource(PyObject *, PyObject *);}
static PyObject *meth_FbxBindingTableEntry_GetSource(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::FbxBindingTableEntry *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxBindingTableEntry, &sipCpp))
        {
            const char*sipRes;

            sipRes = sipCpp->GetSource();

            if (sipRes == NULL)
            {
                Py_INCREF(Py_None);
                return Py_None;
            }

#if PY_MAJOR_VERSION >= 3
            return PyUnicode_FromString(sipRes);
#else
            return PyUnicode_DecodeUTF8(sipRes, strlen(sipRes), NULL);
#endif
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxBindingTableEntry, sipName_GetSource, doc_FbxBindingTableEntry_GetSource);

    return NULL;
}


PyDoc_STRVAR(doc_FbxBindingTableEntry_SetDestination, "SetDestination(self, str)");

extern "C" {static PyObject *meth_FbxBindingTableEntry_SetDestination(PyObject *, PyObject *);}
static PyObject *meth_FbxBindingTableEntry_SetDestination(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const char* a0;
        PyObject *a0Keep;
         ::FbxBindingTableEntry *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BA8", &sipSelf, sipType_FbxBindingTableEntry, &sipCpp, &a0Keep, &a0))
        {
            sipCpp->SetDestination(a0);
            Py_DECREF(a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxBindingTableEntry, sipName_SetDestination, doc_FbxBindingTableEntry_SetDestination);

    return NULL;
}


PyDoc_STRVAR(doc_FbxBindingTableEntry_GetDestination, "GetDestination(self) -> str");

extern "C" {static PyObject *meth_FbxBindingTableEntry_GetDestination(PyObject *, PyObject *);}
static PyObject *meth_FbxBindingTableEntry_GetDestination(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::FbxBindingTableEntry *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxBindingTableEntry, &sipCpp))
        {
            const char*sipRes;

            sipRes = sipCpp->GetDestination();

            if (sipRes == NULL)
            {
                Py_INCREF(Py_None);
                return Py_None;
            }

#if PY_MAJOR_VERSION >= 3
            return PyUnicode_FromString(sipRes);
#else
            return PyUnicode_DecodeUTF8(sipRes, strlen(sipRes), NULL);
#endif
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxBindingTableEntry, sipName_GetDestination, doc_FbxBindingTableEntry_GetDestination);

    return NULL;
}


PyDoc_STRVAR(doc_FbxBindingTableEntry_SetEntryType, "SetEntryType(self, str, bool)");

extern "C" {static PyObject *meth_FbxBindingTableEntry_SetEntryType(PyObject *, PyObject *);}
static PyObject *meth_FbxBindingTableEntry_SetEntryType(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const char* a0;
        PyObject *a0Keep;
        bool a1;
         ::FbxBindingTableEntry *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BA8b", &sipSelf, sipType_FbxBindingTableEntry, &sipCpp, &a0Keep, &a0, &a1))
        {
            sipCpp->SetEntryType(a0,a1);
            Py_DECREF(a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxBindingTableEntry, sipName_SetEntryType, doc_FbxBindingTableEntry_SetEntryType);

    return NULL;
}


PyDoc_STRVAR(doc_FbxBindingTableEntry_GetEntryType, "GetEntryType(self, bool) -> str");

extern "C" {static PyObject *meth_FbxBindingTableEntry_GetEntryType(PyObject *, PyObject *);}
static PyObject *meth_FbxBindingTableEntry_GetEntryType(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        const  ::FbxBindingTableEntry *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_FbxBindingTableEntry, &sipCpp, &a0))
        {
            const char*sipRes;

            sipRes = sipCpp->GetEntryType(a0);

            if (sipRes == NULL)
            {
                Py_INCREF(Py_None);
                return Py_None;
            }

#if PY_MAJOR_VERSION >= 3
            return PyUnicode_FromString(sipRes);
#else
            return PyUnicode_DecodeUTF8(sipRes, strlen(sipRes), NULL);
#endif
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxBindingTableEntry, sipName_GetEntryType, doc_FbxBindingTableEntry_GetEntryType);

    return NULL;
}


PyDoc_STRVAR(doc_FbxBindingTableEntry_GetUserDataPtr, "GetUserDataPtr(self) -> sip.voidptr");

extern "C" {static PyObject *meth_FbxBindingTableEntry_GetUserDataPtr(PyObject *, PyObject *);}
static PyObject *meth_FbxBindingTableEntry_GetUserDataPtr(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxBindingTableEntry *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxBindingTableEntry, &sipCpp))
        {
            void*sipRes;

            sipRes = sipCpp->GetUserDataPtr();

            return sipConvertFromVoidPtr(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxBindingTableEntry, sipName_GetUserDataPtr, doc_FbxBindingTableEntry_GetUserDataPtr);

    return NULL;
}


PyDoc_STRVAR(doc_FbxBindingTableEntry_SetUserDataPtr, "SetUserDataPtr(self, sip.voidptr)");

extern "C" {static PyObject *meth_FbxBindingTableEntry_SetUserDataPtr(PyObject *, PyObject *);}
static PyObject *meth_FbxBindingTableEntry_SetUserDataPtr(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        void* a0;
         ::FbxBindingTableEntry *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bv", &sipSelf, sipType_FbxBindingTableEntry, &sipCpp, &a0))
        {
            sipCpp->SetUserDataPtr(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxBindingTableEntry, sipName_SetUserDataPtr, doc_FbxBindingTableEntry_SetUserDataPtr);

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_FbxBindingTableEntry(void *, int);}
static void release_FbxBindingTableEntry(void *sipCppV, int)
{
    delete reinterpret_cast< ::FbxBindingTableEntry *>(sipCppV);
}


extern "C" {static void assign_FbxBindingTableEntry(void *, SIP_SSIZE_T, const void *);}
static void assign_FbxBindingTableEntry(void *sipDst, SIP_SSIZE_T sipDstIdx, const void *sipSrc)
{
    reinterpret_cast< ::FbxBindingTableEntry *>(sipDst)[sipDstIdx] = *reinterpret_cast<const  ::FbxBindingTableEntry *>(sipSrc);
}


extern "C" {static void *array_FbxBindingTableEntry(SIP_SSIZE_T);}
static void *array_FbxBindingTableEntry(SIP_SSIZE_T sipNrElem)
{
    return new  ::FbxBindingTableEntry[sipNrElem];
}


extern "C" {static void *copy_FbxBindingTableEntry(const void *, SIP_SSIZE_T);}
static void *copy_FbxBindingTableEntry(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::FbxBindingTableEntry(reinterpret_cast<const  ::FbxBindingTableEntry *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_FbxBindingTableEntry(sipSimpleWrapper *);}
static void dealloc_FbxBindingTableEntry(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_FbxBindingTableEntry(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_FbxBindingTableEntry(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_FbxBindingTableEntry(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::FbxBindingTableEntry *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            sipCpp = new  ::FbxBindingTableEntry();

            return sipCpp;
        }
    }

    {
        const  ::FbxBindingTableEntry* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_FbxBindingTableEntry, &a0))
        {
            sipCpp = new  ::FbxBindingTableEntry(*a0);

            return sipCpp;
        }
    }

    return NULL;
}


static PyMethodDef methods_FbxBindingTableEntry[] = {
    {SIP_MLNAME_CAST(sipName_GetDestination), meth_FbxBindingTableEntry_GetDestination, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxBindingTableEntry_GetDestination)},
    {SIP_MLNAME_CAST(sipName_GetEntryType), meth_FbxBindingTableEntry_GetEntryType, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxBindingTableEntry_GetEntryType)},
    {SIP_MLNAME_CAST(sipName_GetSource), meth_FbxBindingTableEntry_GetSource, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxBindingTableEntry_GetSource)},
    {SIP_MLNAME_CAST(sipName_GetUserDataPtr), meth_FbxBindingTableEntry_GetUserDataPtr, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxBindingTableEntry_GetUserDataPtr)},
    {SIP_MLNAME_CAST(sipName_SetDestination), meth_FbxBindingTableEntry_SetDestination, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxBindingTableEntry_SetDestination)},
    {SIP_MLNAME_CAST(sipName_SetEntryType), meth_FbxBindingTableEntry_SetEntryType, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxBindingTableEntry_SetEntryType)},
    {SIP_MLNAME_CAST(sipName_SetSource), meth_FbxBindingTableEntry_SetSource, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxBindingTableEntry_SetSource)},
    {SIP_MLNAME_CAST(sipName_SetUserDataPtr), meth_FbxBindingTableEntry_SetUserDataPtr, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxBindingTableEntry_SetUserDataPtr)}
};

PyDoc_STRVAR(doc_FbxBindingTableEntry, "\1FbxBindingTableEntry()\n"
    "FbxBindingTableEntry(FbxBindingTableEntry)");


sipClassTypeDef sipTypeDef_fbx_FbxBindingTableEntry = {
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_FbxBindingTableEntry,
        {0},
        0
    },
    {
        sipNameNr_FbxBindingTableEntry,
        {0, 0, 1},
        8, methods_FbxBindingTableEntry,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_FbxBindingTableEntry,
    -1,
    -1,
    0,
    0,
    init_type_FbxBindingTableEntry,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_FbxBindingTableEntry,
    assign_FbxBindingTableEntry,
    array_FbxBindingTableEntry,
    copy_FbxBindingTableEntry,
    release_FbxBindingTableEntry,
    0,
    0,
    0,
    0,
    0,
    0,
    0
};
