/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.3
 *
 * Copyright (C) 2009 Autodesk, Inc. and/or its licensors.
 * All Rights Reserved.
 * 
 * The coded instructions, statements, computer programs, and/or related material 
 * (collectively the "Data") in these files contain unpublished information 
 * proprietary to Autodesk, Inc. and/or its licensors, which is protected by 
 * Canada and United States of America federal copyright law and by international 
 * treaties. 
 * 
 * The Data may not be disclosed or distributed to third parties, in whole or in
 * part, without the prior written consent of Autodesk, Inc. ("Autodesk").
 * 
 * THE DATA IS PROVIDED "AS IS" AND WITHOUT WARRANTY.
 * ALL WARRANTIES ARE EXPRESSLY EXCLUDED AND DISCLAIMED. AUTODESK MAKES NO
 * WARRANTY OF ANY KIND WITH RESPECT TO THE DATA, EXPRESS, IMPLIED OR ARISING
 * BY CUSTOM OR TRADE USAGE, AND DISCLAIMS ANY IMPLIED WARRANTIES OF TITLE, 
 * NON-INFRINGEMENT, MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE OR USE. 
 * WITHOUT LIMITING THE FOREGOING, AUTODESK DOES NOT WARRANT THAT THE OPERATION
 * OF THE DATA WILL BE UNINTERRUPTED OR ERROR FREE. 
 * 
 * IN NO EVENT SHALL AUTODESK, ITS AFFILIATES, PARENT COMPANIES, LICENSORS
 * OR SUPPLIERS ("AUTODESK GROUP") BE LIABLE FOR ANY LOSSES, DAMAGES OR EXPENSES
 * OF ANY KIND (INCLUDING WITHOUT LIMITATION PUNITIVE OR MULTIPLE DAMAGES OR OTHER
 * SPECIAL, DIRECT, INDIRECT, EXEMPLARY, INCIDENTAL, LOSS OF PROFITS, REVENUE
 * OR DATA, COST OF COVER OR CONSEQUENTIAL LOSSES OR DAMAGES OF ANY KIND),
 * HOWEVER CAUSED, AND REGARDLESS OF THE THEORY OF LIABILITY, WHETHER DERIVED
 * FROM CONTRACT, TORT (INCLUDING, BUT NOT LIMITED TO, NEGLIGENCE), OR OTHERWISE,
 * ARISING OUT OF OR RELATING TO THE DATA OR ITS USE OR ANY OTHER PERFORMANCE,
 * WHETHER OR NOT AUTODESK HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH LOSS
 * OR DAMAGE. 
 */

#include "sipAPIfbx.h"




PyDoc_STRVAR(doc_FbxTime_SetGlobalTimeMode, "SetGlobalTimeMode(FbxTime.EMode, float = 0)");

extern "C" {static PyObject *meth_FbxTime_SetGlobalTimeMode(PyObject *, PyObject *);}
static PyObject *meth_FbxTime_SetGlobalTimeMode(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxTime::EMode a0;
        double a1 = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "E|d", sipType_FbxTime_EMode, &a0, &a1))
        {
             ::FbxTime::SetGlobalTimeMode(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxTime, sipName_SetGlobalTimeMode, doc_FbxTime_SetGlobalTimeMode);

    return NULL;
}


PyDoc_STRVAR(doc_FbxTime_GetGlobalTimeMode, "GetGlobalTimeMode() -> FbxTime.EMode");

extern "C" {static PyObject *meth_FbxTime_GetGlobalTimeMode(PyObject *, PyObject *);}
static PyObject *meth_FbxTime_GetGlobalTimeMode(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
             ::FbxTime::EMode sipRes;

            sipRes =  ::FbxTime::GetGlobalTimeMode();

            return sipConvertFromEnum(sipRes,sipType_FbxTime_EMode);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxTime, sipName_GetGlobalTimeMode, doc_FbxTime_GetGlobalTimeMode);

    return NULL;
}


PyDoc_STRVAR(doc_FbxTime_SetGlobalTimeProtocol, "SetGlobalTimeProtocol(FbxTime.EProtocol)");

extern "C" {static PyObject *meth_FbxTime_SetGlobalTimeProtocol(PyObject *, PyObject *);}
static PyObject *meth_FbxTime_SetGlobalTimeProtocol(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxTime::EProtocol a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "E", sipType_FbxTime_EProtocol, &a0))
        {
             ::FbxTime::SetGlobalTimeProtocol(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxTime, sipName_SetGlobalTimeProtocol, doc_FbxTime_SetGlobalTimeProtocol);

    return NULL;
}


PyDoc_STRVAR(doc_FbxTime_GetGlobalTimeProtocol, "GetGlobalTimeProtocol() -> FbxTime.EProtocol");

extern "C" {static PyObject *meth_FbxTime_GetGlobalTimeProtocol(PyObject *, PyObject *);}
static PyObject *meth_FbxTime_GetGlobalTimeProtocol(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
             ::FbxTime::EProtocol sipRes;

            sipRes =  ::FbxTime::GetGlobalTimeProtocol();

            return sipConvertFromEnum(sipRes,sipType_FbxTime_EProtocol);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxTime, sipName_GetGlobalTimeProtocol, doc_FbxTime_GetGlobalTimeProtocol);

    return NULL;
}


PyDoc_STRVAR(doc_FbxTime_GetFrameRate, "GetFrameRate(FbxTime.EMode) -> float");

extern "C" {static PyObject *meth_FbxTime_GetFrameRate(PyObject *, PyObject *);}
static PyObject *meth_FbxTime_GetFrameRate(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxTime::EMode a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "E", sipType_FbxTime_EMode, &a0))
        {
            double sipRes;

            sipRes =  ::FbxTime::GetFrameRate(a0);

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxTime, sipName_GetFrameRate, doc_FbxTime_GetFrameRate);

    return NULL;
}


PyDoc_STRVAR(doc_FbxTime_ConvertFrameRateToTimeMode, "ConvertFrameRateToTimeMode(float, float = 1e-08) -> FbxTime.EMode");

extern "C" {static PyObject *meth_FbxTime_ConvertFrameRateToTimeMode(PyObject *, PyObject *);}
static PyObject *meth_FbxTime_ConvertFrameRateToTimeMode(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        double a0;
        double a1 = 1e-08;

        if (sipParseArgs(&sipParseErr, sipArgs, "d|d", &a0, &a1))
        {
             ::FbxTime::EMode sipRes;

            sipRes =  ::FbxTime::ConvertFrameRateToTimeMode(a0,a1);

            return sipConvertFromEnum(sipRes,sipType_FbxTime_EMode);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxTime, sipName_ConvertFrameRateToTimeMode, doc_FbxTime_ConvertFrameRateToTimeMode);

    return NULL;
}


PyDoc_STRVAR(doc_FbxTime_Set, "Set(self, int)");

extern "C" {static PyObject *meth_FbxTime_Set(PyObject *, PyObject *);}
static PyObject *meth_FbxTime_Set(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxLongLong a0;
         ::FbxTime *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bn", &sipSelf, sipType_FbxTime, &sipCpp, &a0))
        {
            sipCpp->Set(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxTime, sipName_Set, doc_FbxTime_Set);

    return NULL;
}


PyDoc_STRVAR(doc_FbxTime_Get, "Get(self) -> int");

extern "C" {static PyObject *meth_FbxTime_Get(PyObject *, PyObject *);}
static PyObject *meth_FbxTime_Get(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::FbxTime *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxTime, &sipCpp))
        {
             ::FbxLongLong sipRes;

            sipRes = sipCpp->Get();

            return PyLong_FromLongLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxTime, sipName_Get, doc_FbxTime_Get);

    return NULL;
}


PyDoc_STRVAR(doc_FbxTime_SetMilliSeconds, "SetMilliSeconds(self, int)");

extern "C" {static PyObject *meth_FbxTime_SetMilliSeconds(PyObject *, PyObject *);}
static PyObject *meth_FbxTime_SetMilliSeconds(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxLongLong a0;
         ::FbxTime *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bn", &sipSelf, sipType_FbxTime, &sipCpp, &a0))
        {
            sipCpp->SetMilliSeconds(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxTime, sipName_SetMilliSeconds, doc_FbxTime_SetMilliSeconds);

    return NULL;
}


PyDoc_STRVAR(doc_FbxTime_GetMilliSeconds, "GetMilliSeconds(self) -> int");

extern "C" {static PyObject *meth_FbxTime_GetMilliSeconds(PyObject *, PyObject *);}
static PyObject *meth_FbxTime_GetMilliSeconds(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::FbxTime *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxTime, &sipCpp))
        {
             ::FbxLongLong sipRes;

            sipRes = sipCpp->GetMilliSeconds();

            return PyLong_FromLongLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxTime, sipName_GetMilliSeconds, doc_FbxTime_GetMilliSeconds);

    return NULL;
}


PyDoc_STRVAR(doc_FbxTime_SetSecondDouble, "SetSecondDouble(self, float)");

extern "C" {static PyObject *meth_FbxTime_SetSecondDouble(PyObject *, PyObject *);}
static PyObject *meth_FbxTime_SetSecondDouble(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        double a0;
         ::FbxTime *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_FbxTime, &sipCpp, &a0))
        {
            sipCpp->SetSecondDouble(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxTime, sipName_SetSecondDouble, doc_FbxTime_SetSecondDouble);

    return NULL;
}


PyDoc_STRVAR(doc_FbxTime_GetSecondDouble, "GetSecondDouble(self) -> float");

extern "C" {static PyObject *meth_FbxTime_GetSecondDouble(PyObject *, PyObject *);}
static PyObject *meth_FbxTime_GetSecondDouble(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::FbxTime *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxTime, &sipCpp))
        {
            double sipRes;

            sipRes = sipCpp->GetSecondDouble();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxTime, sipName_GetSecondDouble, doc_FbxTime_GetSecondDouble);

    return NULL;
}


PyDoc_STRVAR(doc_FbxTime_SetTime, "SetTime(self, int, int, int, int = 0, int = 0, FbxTime.EMode = FbxTime.eDefaultMode)\n"
    "SetTime(self, int, int, int, int, int, int, FbxTime.EMode)");

extern "C" {static PyObject *meth_FbxTime_SetTime(PyObject *, PyObject *);}
static PyObject *meth_FbxTime_SetTime(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        int a1;
        int a2;
        int a3 = 0;
        int a4 = 0;
         ::FbxTime::EMode a5 =  ::FbxTime::eDefaultMode;
         ::FbxTime *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Biii|iiE", &sipSelf, sipType_FbxTime, &sipCpp, &a0, &a1, &a2, &a3, &a4, sipType_FbxTime_EMode, &a5))
        {
            sipCpp->SetTime(a0,a1,a2,a3,a4,a5);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        int a1;
        int a2;
        int a3;
        int a4;
        int a5;
         ::FbxTime::EMode a6;
         ::FbxTime *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiiiiiiE", &sipSelf, sipType_FbxTime, &sipCpp, &a0, &a1, &a2, &a3, &a4, &a5, sipType_FbxTime_EMode, &a6))
        {
            sipCpp->SetTime(a0,a1,a2,a3,a4,a5,a6);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxTime, sipName_SetTime, doc_FbxTime_SetTime);

    return NULL;
}


PyDoc_STRVAR(doc_FbxTime_GetTime, "GetTime(self, FbxTime.EMode = FbxTime.eDefaultMode) -> Tuple[bool, int, int, int, int, int, int]");

extern "C" {static PyObject *meth_FbxTime_GetTime(PyObject *, PyObject *);}
static PyObject *meth_FbxTime_GetTime(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        int a1;
        int a2;
        int a3;
        int a4;
        int a5;
         ::FbxTime::EMode a6 =  ::FbxTime::eDefaultMode;
        const  ::FbxTime *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B|E", &sipSelf, sipType_FbxTime, &sipCpp, sipType_FbxTime_EMode, &a6))
        {
            bool sipRes;

            sipRes = sipCpp->GetTime(a0,a1,a2,a3,a4,a5,a6);

            return sipBuildResult(0,"(biiiiii)",sipRes,a0,a1,a2,a3,a4,a5);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxTime, sipName_GetTime, doc_FbxTime_GetTime);

    return NULL;
}


PyDoc_STRVAR(doc_FbxTime_GetFramedTime, "GetFramedTime(self, bool = True) -> FbxTime");

extern "C" {static PyObject *meth_FbxTime_GetFramedTime(PyObject *, PyObject *);}
static PyObject *meth_FbxTime_GetFramedTime(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0 = 1;
        const  ::FbxTime *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B|b", &sipSelf, sipType_FbxTime, &sipCpp, &a0))
        {
             ::FbxTime*sipRes;

            sipRes = new  ::FbxTime(sipCpp->GetFramedTime(a0));

            return sipConvertFromNewType(sipRes,sipType_FbxTime,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxTime, sipName_GetFramedTime, doc_FbxTime_GetFramedTime);

    return NULL;
}


PyDoc_STRVAR(doc_FbxTime_SetFrame, "SetFrame(self, int, FbxTime.EMode = FbxTime.eDefaultMode)");

extern "C" {static PyObject *meth_FbxTime_SetFrame(PyObject *, PyObject *);}
static PyObject *meth_FbxTime_SetFrame(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxLongLong a0;
         ::FbxTime::EMode a1 =  ::FbxTime::eDefaultMode;
         ::FbxTime *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bn|E", &sipSelf, sipType_FbxTime, &sipCpp, &a0, sipType_FbxTime_EMode, &a1))
        {
            sipCpp->SetFrame(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxTime, sipName_SetFrame, doc_FbxTime_SetFrame);

    return NULL;
}


PyDoc_STRVAR(doc_FbxTime_SetFramePrecise, "SetFramePrecise(self, float, FbxTime.EMode = FbxTime.eDefaultMode)");

extern "C" {static PyObject *meth_FbxTime_SetFramePrecise(PyObject *, PyObject *);}
static PyObject *meth_FbxTime_SetFramePrecise(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxDouble a0;
         ::FbxTime::EMode a1 =  ::FbxTime::eDefaultMode;
         ::FbxTime *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd|E", &sipSelf, sipType_FbxTime, &sipCpp, &a0, sipType_FbxTime_EMode, &a1))
        {
            sipCpp->SetFramePrecise(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxTime, sipName_SetFramePrecise, doc_FbxTime_SetFramePrecise);

    return NULL;
}


PyDoc_STRVAR(doc_FbxTime_GetHourCount, "GetHourCount(self) -> int");

extern "C" {static PyObject *meth_FbxTime_GetHourCount(PyObject *, PyObject *);}
static PyObject *meth_FbxTime_GetHourCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::FbxTime *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxTime, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->GetHourCount();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxTime, sipName_GetHourCount, doc_FbxTime_GetHourCount);

    return NULL;
}


PyDoc_STRVAR(doc_FbxTime_GetMinuteCount, "GetMinuteCount(self) -> int");

extern "C" {static PyObject *meth_FbxTime_GetMinuteCount(PyObject *, PyObject *);}
static PyObject *meth_FbxTime_GetMinuteCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::FbxTime *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxTime, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->GetMinuteCount();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxTime, sipName_GetMinuteCount, doc_FbxTime_GetMinuteCount);

    return NULL;
}


PyDoc_STRVAR(doc_FbxTime_GetSecondCount, "GetSecondCount(self) -> int");

extern "C" {static PyObject *meth_FbxTime_GetSecondCount(PyObject *, PyObject *);}
static PyObject *meth_FbxTime_GetSecondCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::FbxTime *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxTime, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->GetSecondCount();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxTime, sipName_GetSecondCount, doc_FbxTime_GetSecondCount);

    return NULL;
}


PyDoc_STRVAR(doc_FbxTime_GetFrameCount, "GetFrameCount(self, FbxTime.EMode = FbxTime.eDefaultMode) -> int");

extern "C" {static PyObject *meth_FbxTime_GetFrameCount(PyObject *, PyObject *);}
static PyObject *meth_FbxTime_GetFrameCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxTime::EMode a0 =  ::FbxTime::eDefaultMode;
        const  ::FbxTime *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B|E", &sipSelf, sipType_FbxTime, &sipCpp, sipType_FbxTime_EMode, &a0))
        {
             ::FbxLongLong sipRes;

            sipRes = sipCpp->GetFrameCount(a0);

            return PyLong_FromLongLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxTime, sipName_GetFrameCount, doc_FbxTime_GetFrameCount);

    return NULL;
}


PyDoc_STRVAR(doc_FbxTime_GetFrameCountPrecise, "GetFrameCountPrecise(self, FbxTime.EMode = FbxTime.eDefaultMode) -> float");

extern "C" {static PyObject *meth_FbxTime_GetFrameCountPrecise(PyObject *, PyObject *);}
static PyObject *meth_FbxTime_GetFrameCountPrecise(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxTime::EMode a0 =  ::FbxTime::eDefaultMode;
        const  ::FbxTime *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B|E", &sipSelf, sipType_FbxTime, &sipCpp, sipType_FbxTime_EMode, &a0))
        {
             ::FbxDouble sipRes;

            sipRes = sipCpp->GetFrameCountPrecise(a0);

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxTime, sipName_GetFrameCountPrecise, doc_FbxTime_GetFrameCountPrecise);

    return NULL;
}


PyDoc_STRVAR(doc_FbxTime_GetFieldCount, "GetFieldCount(self, FbxTime.EMode = FbxTime.eDefaultMode) -> int");

extern "C" {static PyObject *meth_FbxTime_GetFieldCount(PyObject *, PyObject *);}
static PyObject *meth_FbxTime_GetFieldCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxTime::EMode a0 =  ::FbxTime::eDefaultMode;
        const  ::FbxTime *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B|E", &sipSelf, sipType_FbxTime, &sipCpp, sipType_FbxTime_EMode, &a0))
        {
             ::FbxLongLong sipRes;

            sipRes = sipCpp->GetFieldCount(a0);

            return PyLong_FromLongLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxTime, sipName_GetFieldCount, doc_FbxTime_GetFieldCount);

    return NULL;
}


PyDoc_STRVAR(doc_FbxTime_GetResidual, "GetResidual(self, FbxTime.EMode = FbxTime.eDefaultMode) -> int");

extern "C" {static PyObject *meth_FbxTime_GetResidual(PyObject *, PyObject *);}
static PyObject *meth_FbxTime_GetResidual(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxTime::EMode a0 =  ::FbxTime::eDefaultMode;
        const  ::FbxTime *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B|E", &sipSelf, sipType_FbxTime, &sipCpp, sipType_FbxTime_EMode, &a0))
        {
            int sipRes;

            sipRes = sipCpp->GetResidual(a0);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxTime, sipName_GetResidual, doc_FbxTime_GetResidual);

    return NULL;
}


PyDoc_STRVAR(doc_FbxTime_IsDropFrame, "IsDropFrame(FbxTime.EMode = FbxTime.eDefaultMode) -> bool");

extern "C" {static PyObject *meth_FbxTime_IsDropFrame(PyObject *, PyObject *);}
static PyObject *meth_FbxTime_IsDropFrame(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxTime::EMode a0 =  ::FbxTime::eDefaultMode;

        if (sipParseArgs(&sipParseErr, sipArgs, "|E", sipType_FbxTime_EMode, &a0))
        {
            bool sipRes;

            sipRes =  ::FbxTime::IsDropFrame(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxTime, sipName_IsDropFrame, doc_FbxTime_IsDropFrame);

    return NULL;
}


PyDoc_STRVAR(doc_FbxTime_GetFrameSeparator, "GetFrameSeparator(self, FbxTime.EMode = FbxTime.eDefaultMode) -> str");

extern "C" {static PyObject *meth_FbxTime_GetFrameSeparator(PyObject *, PyObject *);}
static PyObject *meth_FbxTime_GetFrameSeparator(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxTime::EMode a0 =  ::FbxTime::eDefaultMode;
        const  ::FbxTime *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B|E", &sipSelf, sipType_FbxTime, &sipCpp, sipType_FbxTime_EMode, &a0))
        {
            char sipRes;

            sipRes = sipCpp->GetFrameSeparator(a0);

#if PY_MAJOR_VERSION >= 3
            return PyUnicode_FromStringAndSize(&sipRes, 1);
#else
            return PyUnicode_DecodeUTF8(&sipRes, 1, NULL);
#endif
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxTime, sipName_GetFrameSeparator, doc_FbxTime_GetFrameSeparator);

    return NULL;
}


PyDoc_STRVAR(doc_FbxTime_GetTimeString, "GetTimeString(self, str, int = 50, int = 5, FbxTime.EMode = FbxTime.eDefaultMode, FbxTime.EProtocol = FbxTime.eDefaultProtocol) -> str\n"
    "GetTimeString(self, FbxTime.EElement = FbxTime.eHours, FbxTime.EElement = FbxTime.eResidual, FbxTime.EMode = FbxTime.eDefaultMode, FbxTime.EProtocol = FbxTime.eDefaultProtocol) -> FbxString");

extern "C" {static PyObject *meth_FbxTime_GetTimeString(PyObject *, PyObject *);}
static PyObject *meth_FbxTime_GetTimeString(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        char* a0;
        PyObject *a0Keep;
        short a1 = 50;
        int a2 = 5;
         ::FbxTime::EMode a3 =  ::FbxTime::eDefaultMode;
         ::FbxTime::EProtocol a4 =  ::FbxTime::eDefaultProtocol;
        const  ::FbxTime *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BA8|hiEE", &sipSelf, sipType_FbxTime, &sipCpp, &a0Keep, &a0, &a1, &a2, sipType_FbxTime_EMode, &a3, sipType_FbxTime_EProtocol, &a4))
        {
            char*sipRes;

            sipRes = sipCpp->GetTimeString(a0,a1,a2,a3,a4);
            Py_DECREF(a0Keep);

            if (sipRes == NULL)
            {
                Py_INCREF(Py_None);
                return Py_None;
            }

#if PY_MAJOR_VERSION >= 3
            return PyUnicode_FromString(sipRes);
#else
            return PyUnicode_DecodeUTF8(sipRes, strlen(sipRes), NULL);
#endif
        }
    }

    {
         ::FbxTime::EElement a0 =  ::FbxTime::eHours;
         ::FbxTime::EElement a1 =  ::FbxTime::eResidual;
         ::FbxTime::EMode a2 =  ::FbxTime::eDefaultMode;
         ::FbxTime::EProtocol a3 =  ::FbxTime::eDefaultProtocol;
        const  ::FbxTime *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B|EEEE", &sipSelf, sipType_FbxTime, &sipCpp, sipType_FbxTime_EElement, &a0, sipType_FbxTime_EElement, &a1, sipType_FbxTime_EMode, &a2, sipType_FbxTime_EProtocol, &a3))
        {
             ::FbxString*sipRes;

            sipRes = new  ::FbxString(sipCpp->GetTimeString(a0,a1,a2,a3));

            return sipConvertFromNewType(sipRes,sipType_FbxString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxTime, sipName_GetTimeString, doc_FbxTime_GetTimeString);

    return NULL;
}


PyDoc_STRVAR(doc_FbxTime_SetTimeString, "SetTimeString(self, str, FbxTime.EMode = FbxTime.eDefaultMode, FbxTime.EProtocol = FbxTime.eDefaultProtocol)");

extern "C" {static PyObject *meth_FbxTime_SetTimeString(PyObject *, PyObject *);}
static PyObject *meth_FbxTime_SetTimeString(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const char* a0;
        PyObject *a0Keep;
         ::FbxTime::EMode a1 =  ::FbxTime::eDefaultMode;
         ::FbxTime::EProtocol a2 =  ::FbxTime::eDefaultProtocol;
         ::FbxTime *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BA8|EE", &sipSelf, sipType_FbxTime, &sipCpp, &a0Keep, &a0, sipType_FbxTime_EMode, &a1, sipType_FbxTime_EProtocol, &a2))
        {
            sipCpp->SetTimeString(a0,a1,a2);
            Py_DECREF(a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxTime, sipName_SetTimeString, doc_FbxTime_SetTimeString);

    return NULL;
}


extern "C" {static PyObject *slot_FbxTime___div__(PyObject *,PyObject *);}
static PyObject *slot_FbxTime___div__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxTime* a0;
        const  ::FbxTime* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_FbxTime, &a0, sipType_FbxTime, &a1))
        {
             ::FbxTime*sipRes;

            sipRes = new  ::FbxTime((*a0 / *a1));

            return sipConvertFromNewType(sipRes,sipType_FbxTime,NULL);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_fbx, div_slot, NULL, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_FbxTime___mul__(PyObject *,PyObject *);}
static PyObject *slot_FbxTime___mul__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxTime* a0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9i", sipType_FbxTime, &a0, &a1))
        {
             ::FbxTime*sipRes;

            sipRes = new  ::FbxTime((*a0 * a1));

            return sipConvertFromNewType(sipRes,sipType_FbxTime,NULL);
        }
    }

    {
         ::FbxTime* a0;
        const  ::FbxTime* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_FbxTime, &a0, sipType_FbxTime, &a1))
        {
             ::FbxTime*sipRes;

            sipRes = new  ::FbxTime((*a0 * *a1));

            return sipConvertFromNewType(sipRes,sipType_FbxTime,NULL);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_fbx, mul_slot, NULL, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_FbxTime___sub__(PyObject *,PyObject *);}
static PyObject *slot_FbxTime___sub__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxTime* a0;
        const  ::FbxTime* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_FbxTime, &a0, sipType_FbxTime, &a1))
        {
             ::FbxTime*sipRes;

            sipRes = new  ::FbxTime((*a0 - *a1));

            return sipConvertFromNewType(sipRes,sipType_FbxTime,NULL);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_fbx, sub_slot, NULL, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_FbxTime___add__(PyObject *,PyObject *);}
static PyObject *slot_FbxTime___add__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxTime* a0;
        const  ::FbxTime* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_FbxTime, &a0, sipType_FbxTime, &a1))
        {
             ::FbxTime*sipRes;

            sipRes = new  ::FbxTime((*a0 + *a1));

            return sipConvertFromNewType(sipRes,sipType_FbxTime,NULL);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_fbx, add_slot, NULL, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_FbxTime___isub__(PyObject *,PyObject *);}
static PyObject *slot_FbxTime___isub__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_FbxTime)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::FbxTime *sipCpp = reinterpret_cast< ::FbxTime *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_FbxTime));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const  ::FbxTime* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_FbxTime, &a0))
        {
            sipCpp-> ::FbxTime::operator-=(*a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_FbxTime___iadd__(PyObject *,PyObject *);}
static PyObject *slot_FbxTime___iadd__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_FbxTime)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::FbxTime *sipCpp = reinterpret_cast< ::FbxTime *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_FbxTime));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const  ::FbxTime* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_FbxTime, &a0))
        {
            sipCpp-> ::FbxTime::operator+=(*a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_FbxTime___lt__(PyObject *,PyObject *);}
static PyObject *slot_FbxTime___lt__(PyObject *sipSelf,PyObject *sipArg)
{
     ::FbxTime *sipCpp = reinterpret_cast< ::FbxTime *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_FbxTime));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const  ::FbxTime* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_FbxTime, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::FbxTime::operator<(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_fbx, lt_slot, sipType_FbxTime, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_FbxTime___gt__(PyObject *,PyObject *);}
static PyObject *slot_FbxTime___gt__(PyObject *sipSelf,PyObject *sipArg)
{
     ::FbxTime *sipCpp = reinterpret_cast< ::FbxTime *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_FbxTime));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const  ::FbxTime* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_FbxTime, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::FbxTime::operator>(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_fbx, gt_slot, sipType_FbxTime, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_FbxTime___le__(PyObject *,PyObject *);}
static PyObject *slot_FbxTime___le__(PyObject *sipSelf,PyObject *sipArg)
{
     ::FbxTime *sipCpp = reinterpret_cast< ::FbxTime *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_FbxTime));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const  ::FbxTime* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_FbxTime, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::FbxTime::operator<=(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_fbx, le_slot, sipType_FbxTime, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_FbxTime___ge__(PyObject *,PyObject *);}
static PyObject *slot_FbxTime___ge__(PyObject *sipSelf,PyObject *sipArg)
{
     ::FbxTime *sipCpp = reinterpret_cast< ::FbxTime *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_FbxTime));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const  ::FbxTime* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_FbxTime, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::FbxTime::operator>=(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_fbx, ge_slot, sipType_FbxTime, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_FbxTime___ne__(PyObject *,PyObject *);}
static PyObject *slot_FbxTime___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::FbxTime *sipCpp = reinterpret_cast< ::FbxTime *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_FbxTime));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const  ::FbxTime* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_FbxTime, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::FbxTime::operator!=(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_fbx, ne_slot, sipType_FbxTime, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_FbxTime___eq__(PyObject *,PyObject *);}
static PyObject *slot_FbxTime___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::FbxTime *sipCpp = reinterpret_cast< ::FbxTime *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_FbxTime));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const  ::FbxTime* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_FbxTime, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::FbxTime::operator==(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_fbx, eq_slot, sipType_FbxTime, sipSelf, sipArg);
}


/* Call the instance's destructor. */
extern "C" {static void release_FbxTime(void *, int);}
static void release_FbxTime(void *sipCppV, int)
{
    delete reinterpret_cast< ::FbxTime *>(sipCppV);
}


extern "C" {static void dealloc_FbxTime(sipSimpleWrapper *);}
static void dealloc_FbxTime(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_FbxTime(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_FbxTime(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_FbxTime(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::FbxTime *sipCpp = 0;

    {
         ::FbxLongLong a0 = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "|n", &a0))
        {
            sipCpp = new  ::FbxTime(a0);

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_FbxTime[] = {
    {(void *)slot_FbxTime___div__, div_slot},
    {(void *)slot_FbxTime___mul__, mul_slot},
    {(void *)slot_FbxTime___sub__, sub_slot},
    {(void *)slot_FbxTime___add__, add_slot},
    {(void *)slot_FbxTime___isub__, isub_slot},
    {(void *)slot_FbxTime___iadd__, iadd_slot},
    {(void *)slot_FbxTime___lt__, lt_slot},
    {(void *)slot_FbxTime___gt__, gt_slot},
    {(void *)slot_FbxTime___le__, le_slot},
    {(void *)slot_FbxTime___ge__, ge_slot},
    {(void *)slot_FbxTime___ne__, ne_slot},
    {(void *)slot_FbxTime___eq__, eq_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_FbxTime[] = {
    {SIP_MLNAME_CAST(sipName_ConvertFrameRateToTimeMode), meth_FbxTime_ConvertFrameRateToTimeMode, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxTime_ConvertFrameRateToTimeMode)},
    {SIP_MLNAME_CAST(sipName_Get), meth_FbxTime_Get, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxTime_Get)},
    {SIP_MLNAME_CAST(sipName_GetFieldCount), meth_FbxTime_GetFieldCount, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxTime_GetFieldCount)},
    {SIP_MLNAME_CAST(sipName_GetFrameCount), meth_FbxTime_GetFrameCount, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxTime_GetFrameCount)},
    {SIP_MLNAME_CAST(sipName_GetFrameCountPrecise), meth_FbxTime_GetFrameCountPrecise, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxTime_GetFrameCountPrecise)},
    {SIP_MLNAME_CAST(sipName_GetFrameRate), meth_FbxTime_GetFrameRate, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxTime_GetFrameRate)},
    {SIP_MLNAME_CAST(sipName_GetFrameSeparator), meth_FbxTime_GetFrameSeparator, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxTime_GetFrameSeparator)},
    {SIP_MLNAME_CAST(sipName_GetFramedTime), meth_FbxTime_GetFramedTime, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxTime_GetFramedTime)},
    {SIP_MLNAME_CAST(sipName_GetGlobalTimeMode), meth_FbxTime_GetGlobalTimeMode, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxTime_GetGlobalTimeMode)},
    {SIP_MLNAME_CAST(sipName_GetGlobalTimeProtocol), meth_FbxTime_GetGlobalTimeProtocol, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxTime_GetGlobalTimeProtocol)},
    {SIP_MLNAME_CAST(sipName_GetHourCount), meth_FbxTime_GetHourCount, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxTime_GetHourCount)},
    {SIP_MLNAME_CAST(sipName_GetMilliSeconds), meth_FbxTime_GetMilliSeconds, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxTime_GetMilliSeconds)},
    {SIP_MLNAME_CAST(sipName_GetMinuteCount), meth_FbxTime_GetMinuteCount, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxTime_GetMinuteCount)},
    {SIP_MLNAME_CAST(sipName_GetResidual), meth_FbxTime_GetResidual, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxTime_GetResidual)},
    {SIP_MLNAME_CAST(sipName_GetSecondCount), meth_FbxTime_GetSecondCount, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxTime_GetSecondCount)},
    {SIP_MLNAME_CAST(sipName_GetSecondDouble), meth_FbxTime_GetSecondDouble, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxTime_GetSecondDouble)},
    {SIP_MLNAME_CAST(sipName_GetTime), meth_FbxTime_GetTime, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxTime_GetTime)},
    {SIP_MLNAME_CAST(sipName_GetTimeString), meth_FbxTime_GetTimeString, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxTime_GetTimeString)},
    {SIP_MLNAME_CAST(sipName_IsDropFrame), meth_FbxTime_IsDropFrame, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxTime_IsDropFrame)},
    {SIP_MLNAME_CAST(sipName_Set), meth_FbxTime_Set, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxTime_Set)},
    {SIP_MLNAME_CAST(sipName_SetFrame), meth_FbxTime_SetFrame, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxTime_SetFrame)},
    {SIP_MLNAME_CAST(sipName_SetFramePrecise), meth_FbxTime_SetFramePrecise, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxTime_SetFramePrecise)},
    {SIP_MLNAME_CAST(sipName_SetGlobalTimeMode), meth_FbxTime_SetGlobalTimeMode, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxTime_SetGlobalTimeMode)},
    {SIP_MLNAME_CAST(sipName_SetGlobalTimeProtocol), meth_FbxTime_SetGlobalTimeProtocol, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxTime_SetGlobalTimeProtocol)},
    {SIP_MLNAME_CAST(sipName_SetMilliSeconds), meth_FbxTime_SetMilliSeconds, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxTime_SetMilliSeconds)},
    {SIP_MLNAME_CAST(sipName_SetSecondDouble), meth_FbxTime_SetSecondDouble, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxTime_SetSecondDouble)},
    {SIP_MLNAME_CAST(sipName_SetTime), meth_FbxTime_SetTime, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxTime_SetTime)},
    {SIP_MLNAME_CAST(sipName_SetTimeString), meth_FbxTime_SetTimeString, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxTime_SetTimeString)}
};

static sipEnumMemberDef enummembers_FbxTime[] = {
    {sipName_eCustom, static_cast<int>( ::FbxTime::eCustom), 375},
    {sipName_eDefaultMode, static_cast<int>( ::FbxTime::eDefaultMode), 375},
    {sipName_eDefaultProtocol, static_cast<int>( ::FbxTime::eDefaultProtocol), 376},
    {sipName_eField, static_cast<int>( ::FbxTime::eField), 374},
    {sipName_eFilmFullFrame, static_cast<int>( ::FbxTime::eFilmFullFrame), 375},
    {sipName_eFrameCount, static_cast<int>( ::FbxTime::eFrameCount), 376},
    {sipName_eFrames, static_cast<int>( ::FbxTime::eFrames), 374},
    {sipName_eFrames100, static_cast<int>( ::FbxTime::eFrames100), 375},
    {sipName_eFrames1000, static_cast<int>( ::FbxTime::eFrames1000), 375},
    {sipName_eFrames119dot88, static_cast<int>( ::FbxTime::eFrames119dot88), 375},
    {sipName_eFrames120, static_cast<int>( ::FbxTime::eFrames120), 375},
    {sipName_eFrames24, static_cast<int>( ::FbxTime::eFrames24), 375},
    {sipName_eFrames30, static_cast<int>( ::FbxTime::eFrames30), 375},
    {sipName_eFrames30Drop, static_cast<int>( ::FbxTime::eFrames30Drop), 375},
    {sipName_eFrames48, static_cast<int>( ::FbxTime::eFrames48), 375},
    {sipName_eFrames50, static_cast<int>( ::FbxTime::eFrames50), 375},
    {sipName_eFrames59dot94, static_cast<int>( ::FbxTime::eFrames59dot94), 375},
    {sipName_eFrames60, static_cast<int>( ::FbxTime::eFrames60), 375},
    {sipName_eFrames72, static_cast<int>( ::FbxTime::eFrames72), 375},
    {sipName_eFrames96, static_cast<int>( ::FbxTime::eFrames96), 375},
    {sipName_eHours, static_cast<int>( ::FbxTime::eHours), 374},
    {sipName_eMinutes, static_cast<int>( ::FbxTime::eMinutes), 374},
    {sipName_eModesCount, static_cast<int>( ::FbxTime::eModesCount), 375},
    {sipName_eNTSCDropFrame, static_cast<int>( ::FbxTime::eNTSCDropFrame), 375},
    {sipName_eNTSCFullFrame, static_cast<int>( ::FbxTime::eNTSCFullFrame), 375},
    {sipName_ePAL, static_cast<int>( ::FbxTime::ePAL), 375},
    {sipName_eResidual, static_cast<int>( ::FbxTime::eResidual), 374},
    {sipName_eSMPTE, static_cast<int>( ::FbxTime::eSMPTE), 376},
    {sipName_eSeconds, static_cast<int>( ::FbxTime::eSeconds), 374},
};

PyDoc_STRVAR(doc_FbxTime, "\1FbxTime(int = 0)");


sipClassTypeDef sipTypeDef_fbx_FbxTime = {
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_FbxTime,
        {0},
        0
    },
    {
        sipNameNr_FbxTime,
        {0, 0, 1},
        28, methods_FbxTime,
        29, enummembers_FbxTime,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_FbxTime,
    -1,
    -1,
    0,
    slots_FbxTime,
    init_type_FbxTime,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_FbxTime,
    0,
    0,
    0,
    release_FbxTime,
    0,
    0,
    0,
    0,
    0,
    0,
    0
};
