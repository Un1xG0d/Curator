/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.3
 *
 * Copyright (C) 2009 Autodesk, Inc. and/or its licensors.
 * All Rights Reserved.
 * 
 * The coded instructions, statements, computer programs, and/or related material 
 * (collectively the "Data") in these files contain unpublished information 
 * proprietary to Autodesk, Inc. and/or its licensors, which is protected by 
 * Canada and United States of America federal copyright law and by international 
 * treaties. 
 * 
 * The Data may not be disclosed or distributed to third parties, in whole or in
 * part, without the prior written consent of Autodesk, Inc. ("Autodesk").
 * 
 * THE DATA IS PROVIDED "AS IS" AND WITHOUT WARRANTY.
 * ALL WARRANTIES ARE EXPRESSLY EXCLUDED AND DISCLAIMED. AUTODESK MAKES NO
 * WARRANTY OF ANY KIND WITH RESPECT TO THE DATA, EXPRESS, IMPLIED OR ARISING
 * BY CUSTOM OR TRADE USAGE, AND DISCLAIMS ANY IMPLIED WARRANTIES OF TITLE, 
 * NON-INFRINGEMENT, MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE OR USE. 
 * WITHOUT LIMITING THE FOREGOING, AUTODESK DOES NOT WARRANT THAT THE OPERATION
 * OF THE DATA WILL BE UNINTERRUPTED OR ERROR FREE. 
 * 
 * IN NO EVENT SHALL AUTODESK, ITS AFFILIATES, PARENT COMPANIES, LICENSORS
 * OR SUPPLIERS ("AUTODESK GROUP") BE LIABLE FOR ANY LOSSES, DAMAGES OR EXPENSES
 * OF ANY KIND (INCLUDING WITHOUT LIMITATION PUNITIVE OR MULTIPLE DAMAGES OR OTHER
 * SPECIAL, DIRECT, INDIRECT, EXEMPLARY, INCIDENTAL, LOSS OF PROFITS, REVENUE
 * OR DATA, COST OF COVER OR CONSEQUENTIAL LOSSES OR DAMAGES OF ANY KIND),
 * HOWEVER CAUSED, AND REGARDLESS OF THE THEORY OF LIABILITY, WHETHER DERIVED
 * FROM CONTRACT, TORT (INCLUDING, BUT NOT LIMITED TO, NEGLIGENCE), OR OTHERWISE,
 * ARISING OUT OF OR RELATING TO THE DATA OR ITS USE OR ANY OTHER PERFORMANCE,
 * WHETHER OR NOT AUTODESK HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH LOSS
 * OR DAMAGE. 
 */

#include "sipAPIfbx.h"




PyDoc_STRVAR(doc_FbxEffector_Reset, "Reset(self)");

extern "C" {static PyObject *meth_FbxEffector_Reset(PyObject *, PyObject *);}
static PyObject *meth_FbxEffector_Reset(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::FbxEffector *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_FbxEffector, &sipCpp))
        {
            sipCpp->Reset();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FbxEffector, sipName_Reset, doc_FbxEffector_Reset);

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_FbxEffector(void *, int);}
static void release_FbxEffector(void *sipCppV, int)
{
    delete reinterpret_cast< ::FbxEffector *>(sipCppV);
}


extern "C" {static void assign_FbxEffector(void *, SIP_SSIZE_T, const void *);}
static void assign_FbxEffector(void *sipDst, SIP_SSIZE_T sipDstIdx, const void *sipSrc)
{
    reinterpret_cast< ::FbxEffector *>(sipDst)[sipDstIdx] = *reinterpret_cast<const  ::FbxEffector *>(sipSrc);
}


extern "C" {static void *array_FbxEffector(SIP_SSIZE_T);}
static void *array_FbxEffector(SIP_SSIZE_T sipNrElem)
{
    return new  ::FbxEffector[sipNrElem];
}


extern "C" {static void *copy_FbxEffector(const void *, SIP_SSIZE_T);}
static void *copy_FbxEffector(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::FbxEffector(reinterpret_cast<const  ::FbxEffector *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_FbxEffector(sipSimpleWrapper *);}
static void dealloc_FbxEffector(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_FbxEffector(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_FbxEffector(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_FbxEffector(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::FbxEffector *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            sipCpp = new  ::FbxEffector();

            return sipCpp;
        }
    }

    {
        const  ::FbxEffector* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_FbxEffector, &a0))
        {
            sipCpp = new  ::FbxEffector(*a0);

            return sipCpp;
        }
    }

    return NULL;
}


static PyMethodDef methods_FbxEffector[] = {
    {SIP_MLNAME_CAST(sipName_Reset), meth_FbxEffector_Reset, METH_VARARGS, SIP_MLDOC_CAST(doc_FbxEffector_Reset)}
};

static sipEnumMemberDef enummembers_FbxEffector[] = {
    {sipName_eAux10Set, static_cast<int>( ::FbxEffector::eAux10Set), 138},
    {sipName_eAux11Set, static_cast<int>( ::FbxEffector::eAux11Set), 138},
    {sipName_eAux12Set, static_cast<int>( ::FbxEffector::eAux12Set), 138},
    {sipName_eAux13Set, static_cast<int>( ::FbxEffector::eAux13Set), 138},
    {sipName_eAux14Set, static_cast<int>( ::FbxEffector::eAux14Set), 138},
    {sipName_eAux1Set, static_cast<int>( ::FbxEffector::eAux1Set), 138},
    {sipName_eAux2Set, static_cast<int>( ::FbxEffector::eAux2Set), 138},
    {sipName_eAux3Set, static_cast<int>( ::FbxEffector::eAux3Set), 138},
    {sipName_eAux4Set, static_cast<int>( ::FbxEffector::eAux4Set), 138},
    {sipName_eAux5Set, static_cast<int>( ::FbxEffector::eAux5Set), 138},
    {sipName_eAux6Set, static_cast<int>( ::FbxEffector::eAux6Set), 138},
    {sipName_eAux7Set, static_cast<int>( ::FbxEffector::eAux7Set), 138},
    {sipName_eAux8Set, static_cast<int>( ::FbxEffector::eAux8Set), 138},
    {sipName_eAux9Set, static_cast<int>( ::FbxEffector::eAux9Set), 138},
    {sipName_eChestEnd, static_cast<int>( ::FbxEffector::eChestEnd), 137},
    {sipName_eChestOrigin, static_cast<int>( ::FbxEffector::eChestOrigin), 137},
    {sipName_eDefaultSet, static_cast<int>( ::FbxEffector::eDefaultSet), 138},
    {sipName_eHead, static_cast<int>( ::FbxEffector::eHead), 137},
    {sipName_eHips, static_cast<int>( ::FbxEffector::eHips), 137},
    {sipName_eLeftAnkle, static_cast<int>( ::FbxEffector::eLeftAnkle), 137},
    {sipName_eLeftElbow, static_cast<int>( ::FbxEffector::eLeftElbow), 137},
    {sipName_eLeftFoot, static_cast<int>( ::FbxEffector::eLeftFoot), 137},
    {sipName_eLeftFootExtraFinger, static_cast<int>( ::FbxEffector::eLeftFootExtraFinger), 137},
    {sipName_eLeftFootIndex, static_cast<int>( ::FbxEffector::eLeftFootIndex), 137},
    {sipName_eLeftFootMiddle, static_cast<int>( ::FbxEffector::eLeftFootMiddle), 137},
    {sipName_eLeftFootPinky, static_cast<int>( ::FbxEffector::eLeftFootPinky), 137},
    {sipName_eLeftFootRing, static_cast<int>( ::FbxEffector::eLeftFootRing), 137},
    {sipName_eLeftFootThumb, static_cast<int>( ::FbxEffector::eLeftFootThumb), 137},
    {sipName_eLeftHand, static_cast<int>( ::FbxEffector::eLeftHand), 137},
    {sipName_eLeftHandExtraFinger, static_cast<int>( ::FbxEffector::eLeftHandExtraFinger), 137},
    {sipName_eLeftHandIndex, static_cast<int>( ::FbxEffector::eLeftHandIndex), 137},
    {sipName_eLeftHandMiddle, static_cast<int>( ::FbxEffector::eLeftHandMiddle), 137},
    {sipName_eLeftHandPinky, static_cast<int>( ::FbxEffector::eLeftHandPinky), 137},
    {sipName_eLeftHandRing, static_cast<int>( ::FbxEffector::eLeftHandRing), 137},
    {sipName_eLeftHandThumb, static_cast<int>( ::FbxEffector::eLeftHandThumb), 137},
    {sipName_eLeftHip, static_cast<int>( ::FbxEffector::eLeftHip), 137},
    {sipName_eLeftKnee, static_cast<int>( ::FbxEffector::eLeftKnee), 137},
    {sipName_eLeftShoulder, static_cast<int>( ::FbxEffector::eLeftShoulder), 137},
    {sipName_eLeftWrist, static_cast<int>( ::FbxEffector::eLeftWrist), 137},
    {sipName_eNodeIdCount, static_cast<int>( ::FbxEffector::eNodeIdCount), 137},
    {sipName_eRightAnkle, static_cast<int>( ::FbxEffector::eRightAnkle), 137},
    {sipName_eRightElbow, static_cast<int>( ::FbxEffector::eRightElbow), 137},
    {sipName_eRightFoot, static_cast<int>( ::FbxEffector::eRightFoot), 137},
    {sipName_eRightFootExtraFinger, static_cast<int>( ::FbxEffector::eRightFootExtraFinger), 137},
    {sipName_eRightFootIndex, static_cast<int>( ::FbxEffector::eRightFootIndex), 137},
    {sipName_eRightFootMiddle, static_cast<int>( ::FbxEffector::eRightFootMiddle), 137},
    {sipName_eRightFootPinky, static_cast<int>( ::FbxEffector::eRightFootPinky), 137},
    {sipName_eRightFootRing, static_cast<int>( ::FbxEffector::eRightFootRing), 137},
    {sipName_eRightFootThumb, static_cast<int>( ::FbxEffector::eRightFootThumb), 137},
    {sipName_eRightHand, static_cast<int>( ::FbxEffector::eRightHand), 137},
    {sipName_eRightHandExtraFinger, static_cast<int>( ::FbxEffector::eRightHandExtraFinger), 137},
    {sipName_eRightHandIndex, static_cast<int>( ::FbxEffector::eRightHandIndex), 137},
    {sipName_eRightHandMiddle, static_cast<int>( ::FbxEffector::eRightHandMiddle), 137},
    {sipName_eRightHandPinky, static_cast<int>( ::FbxEffector::eRightHandPinky), 137},
    {sipName_eRightHandRing, static_cast<int>( ::FbxEffector::eRightHandRing), 137},
    {sipName_eRightHandThumb, static_cast<int>( ::FbxEffector::eRightHandThumb), 137},
    {sipName_eRightHip, static_cast<int>( ::FbxEffector::eRightHip), 137},
    {sipName_eRightKnee, static_cast<int>( ::FbxEffector::eRightKnee), 137},
    {sipName_eRightShoulder, static_cast<int>( ::FbxEffector::eRightShoulder), 137},
    {sipName_eRightWrist, static_cast<int>( ::FbxEffector::eRightWrist), 137},
    {sipName_eSetIdCount, static_cast<int>( ::FbxEffector::eSetIdCount), 138},
};


extern "C" {static PyObject *varget_FbxEffector_mNode(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxEffector_mNode(void *sipSelf, PyObject *, PyObject *)
{
     ::FbxNode*sipVal;
     ::FbxEffector *sipCpp = reinterpret_cast< ::FbxEffector *>(sipSelf);

    sipVal = sipCpp->mNode;

    return sipConvertFromType(sipVal, sipType_FbxNode, NULL);
}


extern "C" {static int varset_FbxEffector_mNode(void *, PyObject *, PyObject *);}
static int varset_FbxEffector_mNode(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::FbxNode*sipVal;
     ::FbxEffector *sipCpp = reinterpret_cast< ::FbxEffector *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::FbxNode *>(sipForceConvertToType(sipPy,sipType_FbxNode,NULL,0,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->mNode = sipVal;

    return 0;
}


extern "C" {static PyObject *varget_FbxEffector_mShow(void *, PyObject *, PyObject *);}
static PyObject *varget_FbxEffector_mShow(void *sipSelf, PyObject *, PyObject *)
{
    bool sipVal;
     ::FbxEffector *sipCpp = reinterpret_cast< ::FbxEffector *>(sipSelf);

    sipVal = sipCpp->mShow;

    return PyBool_FromLong(sipVal);
}


extern "C" {static int varset_FbxEffector_mShow(void *, PyObject *, PyObject *);}
static int varset_FbxEffector_mShow(void *sipSelf, PyObject *sipPy, PyObject *)
{
    bool sipVal;
     ::FbxEffector *sipCpp = reinterpret_cast< ::FbxEffector *>(sipSelf);

    sipVal = (bool)SIPLong_AsLong(sipPy);

    if (PyErr_Occurred() != NULL)
        return -1;

    sipCpp->mShow = sipVal;

    return 0;
}

sipVariableDef variables_FbxEffector[] = {
    {InstanceVariable, sipName_mNode, (PyMethodDef *)varget_FbxEffector_mNode, (PyMethodDef *)varset_FbxEffector_mNode, NULL, NULL},
    {InstanceVariable, sipName_mShow, (PyMethodDef *)varget_FbxEffector_mShow, (PyMethodDef *)varset_FbxEffector_mShow, NULL, NULL},
};

PyDoc_STRVAR(doc_FbxEffector, "\1FbxEffector()\n"
    "FbxEffector(FbxEffector)");


sipClassTypeDef sipTypeDef_fbx_FbxEffector = {
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_FbxEffector,
        {0},
        0
    },
    {
        sipNameNr_FbxEffector,
        {0, 0, 1},
        1, methods_FbxEffector,
        61, enummembers_FbxEffector,
        2, variables_FbxEffector,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_FbxEffector,
    -1,
    -1,
    0,
    0,
    init_type_FbxEffector,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_FbxEffector,
    assign_FbxEffector,
    array_FbxEffector,
    copy_FbxEffector,
    release_FbxEffector,
    0,
    0,
    0,
    0,
    0,
    0,
    0
};
